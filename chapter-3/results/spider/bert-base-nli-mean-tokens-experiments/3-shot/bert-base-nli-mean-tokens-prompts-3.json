{
    "args": {
        "data_type": "spider",
        "split": "test",
        "tokenizer": "gpt-3.5-turbo",
        "max_seq_length": 4096,
        "prompt_repr": "SQL",
        "k-shot": 3,
        "example_type": "QA",
        "selector_type": "EUCDISQUESTIONMASK",
        "embedding_model": "bert-base-nli-mean-tokens"
    },
    "questions": [
        {
            "index": 1,
            "question": "How many singers do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Answer the following: How many faculty do we have? */\nSELECT count(*) FROM Faculty\n\n/* Answer the following: How many activities do we have? */\nSELECT count(*) FROM Activity\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers do we have? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                },
                {
                    "ex_id": 6716,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty",
                    "question": "How many faculty do we have?"
                },
                {
                    "ex_id": 6768,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Activity",
                    "question": "How many activities do we have?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 1.0,
            "db_id": "concert_singer"
        },
        {
            "index": 2,
            "question": "What is the total number of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of students? */\nSELECT count(*) FROM Student\n\n/* Answer the following: What is the total number of companies? */\nSELECT count(*) FROM company\n\n/* Answer the following: What is the total number of campuses? */\nSELECT count(*) FROM campuses\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the total number of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 461,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student",
                    "question": "What is the total number of students?"
                },
                {
                    "ex_id": 1995,
                    "db_id": "gas_company",
                    "query": "SELECT count(*) FROM company",
                    "question": "What is the total number of companies?"
                },
                {
                    "ex_id": 2394,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM campuses",
                    "question": "What is the total number of campuses?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 1.0,
            "db_id": "concert_singer"
        },
        {
            "index": 3,
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all people names in the order of their date of birth from old to young. */\nSELECT name FROM people ORDER BY date_of_birth\n\n/* Answer the following: Tell me the ages of the oldest and youngest students studying major 600. */\nSELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\n\n/* Answer the following: Sort all captain names by their ages from old to young. */\nSELECT name FROM captain ORDER BY age DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2407,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people ORDER BY date_of_birth",
                    "question": "List all people names in the order of their date of birth from old to young."
                },
                {
                    "ex_id": 5462,
                    "db_id": "voter_2",
                    "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
                    "question": "Tell me the ages of the oldest and youngest students studying major 600."
                },
                {
                    "ex_id": 6227,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain ORDER BY age DESC",
                    "question": "Sort all captain names by their ages from old to young."
                }
            ],
            "example_quality": 0.896877269426289,
            "example_similarity": 0.7897157190635452,
            "db_id": "concert_singer"
        },
        {
            "index": 4,
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the card numbers, names, and hometowns of every member ordered by descending level? */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Answer the following: What is the name, city, country, and elevation for every airport in the city of New York? */\nSELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'\n\n/* Answer the following: What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate? */\nSELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5418,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
                    "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?"
                },
                {
                    "ex_id": 6807,
                    "db_id": "flight_4",
                    "query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
                    "question": "What is the name, city, country, and elevation for every airport in the city of New York?"
                },
                {
                    "ex_id": 2404,
                    "db_id": "candidate_poll",
                    "query": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
                    "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?"
                }
            ],
            "example_quality": 0.8671023965141612,
            "example_similarity": 0.7577034559643256,
            "db_id": "concert_singer"
        },
        {
            "index": 5,
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London? */\nSELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'\n\n/* Answer the following: What are the maximum and minimum age of students with major 600? */\nSELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600\n\n/* Answer the following: What is the minimum, mean, and maximum age across all students? */\nSELECT min(age) ,  avg(age) ,  max(age) FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age of all singers from France? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5412,
                    "db_id": "shop_membership",
                    "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'",
                    "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?"
                },
                {
                    "ex_id": 5461,
                    "db_id": "voter_2",
                    "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
                    "question": "What are the maximum and minimum age of students with major 600?"
                },
                {
                    "ex_id": 485,
                    "db_id": "allergy_1",
                    "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
                    "question": "What is the minimum, mean, and maximum age across all students?"
                }
            ],
            "example_quality": 0.8515766540534343,
            "example_similarity": 0.7185084437838061,
            "db_id": "concert_singer"
        },
        {
            "index": 6,
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: where are some restaurants good for french food ? */\nSELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;\n\n/* Answer the following: how many places for french food are there in palo alto ? */\nSELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";\n\n/* Answer the following: give me some restaurants good for french food ? */\nSELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age for all French singers? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8564,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
                    "question": "where are some restaurants good for french food ?"
                },
                {
                    "ex_id": 8565,
                    "db_id": "restaurants",
                    "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
                    "question": "how many places for french food are there in palo alto ?"
                },
                {
                    "ex_id": 8563,
                    "db_id": "restaurants",
                    "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
                    "question": "give me some restaurants good for french food ?"
                }
            ],
            "example_quality": 0.766957153231663,
            "example_similarity": 0.6376586383171687,
            "db_id": "concert_singer"
        },
        {
            "index": 7,
            "question": "Show the name and the release year of the song by the youngest singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Provide the last name of the youngest student. */\nSELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n\n/* Answer the following: Find the name of the ship that is steered by the youngest captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Answer the following: Return the name of the youngest captain. */\nSELECT name FROM captain ORDER BY age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and the release year of the song by the youngest singer. */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 487,
                    "db_id": "allergy_1",
                    "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
                    "question": "Provide the last name of the youngest student."
                },
                {
                    "ex_id": 6263,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "Find the name of the ship that is steered by the youngest captain."
                },
                {
                    "ex_id": 6244,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                    "question": "Return the name of the youngest captain."
                }
            ],
            "example_quality": 0.7669156551509493,
            "example_similarity": 0.616270060913463,
            "db_id": "concert_singer"
        },
        {
            "index": 8,
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the ship that is commanded by the youngest captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Answer the following: what is the name and age of the youngest winning pilot? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Answer the following: Find the name of the ship that is steered by the youngest captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and release years for all the songs of the youngest singer? */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6264,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "What is the name of the ship that is commanded by the youngest captain?"
                },
                {
                    "ex_id": 4840,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "what is the name and age of the youngest winning pilot?"
                },
                {
                    "ex_id": 6263,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "Find the name of the ship that is steered by the youngest captain."
                }
            ],
            "example_quality": 0.7960511982570807,
            "example_similarity": 0.6011898726057905,
            "db_id": "concert_singer"
        },
        {
            "index": 9,
            "question": "What are all distinct countries where singers above age 20 are from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all distinct country for artists? */\nSELECT DISTINCT country FROM artist\n\n/* Answer the following: What are all the distinct payment types? */\nSELECT DISTINCT payment_type_code FROM payments\n\n/* Answer the following: What are all the distinct asset models? */\nSELECT DISTINCT asset_model FROM Assets\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all distinct countries where singers above age 20 are from? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1654,
                    "db_id": "theme_gallery",
                    "query": "SELECT DISTINCT country FROM artist",
                    "question": "What are all distinct country for artists?"
                },
                {
                    "ex_id": 1973,
                    "db_id": "products_for_hire",
                    "query": "SELECT DISTINCT payment_type_code FROM payments",
                    "question": "What are all the distinct payment types?"
                },
                {
                    "ex_id": 3150,
                    "db_id": "assets_maintenance",
                    "query": "SELECT DISTINCT asset_model FROM Assets",
                    "question": "What are all the distinct asset models?"
                }
            ],
            "example_quality": 0.7869661444824845,
            "example_similarity": 0.5899465534273693,
            "db_id": "concert_singer"
        },
        {
            "index": 10,
            "question": "What are  the different countries with singers above age 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different positions of players from UCLA or Duke colleges? */\nSELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n\n/* Answer the following: What are the different product names for products that have the 'warm' characteristic:? */\nSELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"\n\n/* Answer the following: What are the different card type codes? */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are  the different countries with singers above age 20? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1064,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
                    "question": "What are the different positions of players from UCLA or Duke colleges?"
                },
                {
                    "ex_id": 5574,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
                    "question": "What are the different product names for products that have the 'warm' characteristic:?"
                },
                {
                    "ex_id": 731,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "What are the different card type codes?"
                }
            ],
            "example_quality": 0.7987457205104266,
            "example_similarity": 0.5909837960112672,
            "db_id": "concert_singer"
        },
        {
            "index": 11,
            "question": "Show all countries and the number of singers in each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all party names and the number of members in each party. */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Answer the following: Show all customer ids and the number of accounts for each customer. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Show all artist names and the number of exhibitions for each artist. */\nSELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show all countries and the number of singers in each country. */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2058,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "Show all party names and the number of members in each party."
                },
                {
                    "ex_id": 678,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
                    "question": "Show all customer ids and the number of accounts for each customer."
                },
                {
                    "ex_id": 1668,
                    "db_id": "theme_gallery",
                    "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
                    "question": "Show all artist names and the number of exhibitions for each artist."
                }
            ],
            "example_quality": 0.8170415641003876,
            "example_similarity": 0.6211740802899632,
            "db_id": "concert_singer"
        },
        {
            "index": 12,
            "question": "How many singers are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players are from each country? */\nSELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\n\n/* Answer the following: How many climbers are from each country? */\nSELECT Country ,  COUNT(*) FROM climber GROUP BY Country\n\n/* Answer the following: How many gymnasts are from each hometown? */\nSELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are from each country? */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1094,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
                    "question": "How many players are from each country?"
                },
                {
                    "ex_id": 1140,
                    "db_id": "climbing",
                    "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
                    "question": "How many climbers are from each country?"
                },
                {
                    "ex_id": 1762,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
                    "question": "How many gymnasts are from each hometown?"
                }
            ],
            "example_quality": 0.8322881004253554,
            "example_similarity": 0.6527429069324664,
            "db_id": "concert_singer"
        },
        {
            "index": 13,
            "question": "List all song names by singers above the average age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all document ids and receipt dates of documents. */\nSELECT document_id ,  receipt_date FROM Documents;\n\n/* Answer the following: List the first name and last name of all customers. */\nSELECT first_name ,  last_name FROM Customers;\n\n/* Answer the following: List all the login names and family names of course author and tutors. */\nSELECT login_name ,  family_name FROM Course_Authors_and_Tutors\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all song names by singers above the average age. */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2109,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT document_id ,  receipt_date FROM Documents;",
                    "question": "List all document ids and receipt dates of documents."
                },
                {
                    "ex_id": 6659,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers;",
                    "question": "List the first name and last name of all customers."
                },
                {
                    "ex_id": 3777,
                    "db_id": "e_learning",
                    "query": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
                    "question": "List all the login names and family names of course author and tutors."
                }
            ],
            "example_quality": 0.7874967080849434,
            "example_similarity": 0.6504855630066948,
            "db_id": "concert_singer"
        },
        {
            "index": 14,
            "question": "What are all the song names by singers who are older than average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students who are older than 20? */\nSELECT fname FROM student WHERE age  >  20\n\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Answer the following: Find the first name of students who is older than 20. */\nSELECT fname FROM student WHERE age  >  20\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all the song names by singers who are older than average? */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5676,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE age  >  20",
                    "question": "What are the first names of all students who are older than 20?"
                },
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                },
                {
                    "ex_id": 5675,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE age  >  20",
                    "question": "Find the first name of students who is older than 20."
                }
            ],
            "example_quality": 0.77151304966431,
            "example_similarity": 0.6457154301993382,
            "db_id": "concert_singer"
        },
        {
            "index": 15,
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names for all females from Canada having a wedding in year 2016. */\nSELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'\n\n/* Answer the following: Show the movie titles and book titles for all companies in China. */\nSELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'\n\n/* Answer the following: Show the first name and last name for all the instructors. */\nSELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show location and name for all stadiums with a capacity between 5000 and 10000. */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1645,
                    "db_id": "wedding",
                    "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'",
                    "question": "Show the names for all females from Canada having a wedding in year 2016."
                },
                {
                    "ex_id": 6997,
                    "db_id": "culture_company",
                    "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
                    "question": "Show the movie titles and book titles for all companies in China."
                },
                {
                    "ex_id": 6734,
                    "db_id": "activity_1",
                    "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
                    "question": "Show the first name and last name for all the instructors."
                }
            ],
            "example_quality": 0.7600788463533561,
            "example_similarity": 0.6429842123208959,
            "db_id": "concert_singer"
        },
        {
            "index": 16,
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of all movies that have between 3 and 5 stars? */\nSELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5\n\n/* Answer the following: What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"\n\n/* Answer the following: What are the names of all races held between 2009 and 2011? */\nSELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the locations and names of all stations with capacity between 5000 and 10000? */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2512,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5",
                    "question": "What are the titles of all movies that have between 3 and 5 stars?"
                },
                {
                    "ex_id": 4835,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
                    "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?"
                },
                {
                    "ex_id": 2205,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
                    "question": "What are the names of all races held between 2009 and 2011?"
                }
            ],
            "example_quality": 0.7653516962340493,
            "example_similarity": 0.6454467030969028,
            "db_id": "concert_singer"
        },
        {
            "index": 17,
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: What is the maximum elevation of all airports in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Answer the following: What are the maximum price and score of wines in each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the maximum capacity and the average of all stadiums ? */\nSELECT ",
            "response": "max(capacity), average from stadium",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                },
                {
                    "ex_id": 6812,
                    "db_id": "flight_4",
                    "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
                    "question": "What is the maximum elevation of all airports in the country of Iceland?"
                },
                {
                    "ex_id": 6576,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines in each year?"
                }
            ],
            "example_quality": 0.7294813350176673,
            "example_similarity": 0.6449541117131232,
            "db_id": "concert_singer"
        },
        {
            "index": 18,
            "question": "What is the average and maximum capacities for all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and maximum price of each film? */\nSELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id\n\n/* Answer the following: What are the maximum price and score of wines for each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What are the maximum price and score of wines in each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average and maximum capacities for all stadiums ? */\nSELECT ",
            "response": "avg(capacity) , max(capacity) from stadium",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1952,
                    "db_id": "cinema",
                    "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
                    "question": "What are the title and maximum price of each film?"
                },
                {
                    "ex_id": 6577,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines for each year?"
                },
                {
                    "ex_id": 6576,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines in each year?"
                }
            ],
            "example_quality": 0.6977178216965801,
            "example_similarity": 0.6400757086814417,
            "db_id": "concert_singer"
        },
        {
            "index": 19,
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which state is the college that Charles attends? */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'\n\n/* Answer the following: What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"? */\nSELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"\n\n/* Answer the following: Find the state of the college which player Charles is attending. */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5010,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
                    "question": "In which state is the college that Charles attends?"
                },
                {
                    "ex_id": 5920,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
                    "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?"
                },
                {
                    "ex_id": 5009,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
                    "question": "Find the state of the college which player Charles is attending."
                }
            ],
            "example_quality": 0.6849192760570468,
            "example_similarity": 0.6263267590080425,
            "db_id": "concert_singer"
        },
        {
            "index": 20,
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which state is the college that Charles attends? */\nSELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'\n\n/* Answer the following: What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"? */\nSELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"\n\n/* Answer the following: What is the date of enrollment of the course named \"Spanish\"? */\nSELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with the highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5010,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
                    "question": "In which state is the college that Charles attends?"
                },
                {
                    "ex_id": 5920,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
                    "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?"
                },
                {
                    "ex_id": 3819,
                    "db_id": "e_learning",
                    "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
                    "question": "What is the date of enrollment of the course named \"Spanish\"?"
                }
            ],
            "example_quality": 0.6734005849814672,
            "example_similarity": 0.6170165232696923,
            "db_id": "concert_singer"
        },
        {
            "index": 21,
            "question": "How many concerts are there in year 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many campuses are there in Los Angeles county? */\nSELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"\n\n/* Answer the following: How many international and domestic passengers are there in the airport London Heathrow? */\nSELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n\n/* Answer the following: How many parks are there in Atlanta city? */\nSELECT count(*) FROM park WHERE city = 'Atlanta';\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts are there in year 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2365,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
                    "question": "How many campuses are there in Los Angeles county?"
                },
                {
                    "ex_id": 4805,
                    "db_id": "aircraft",
                    "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
                    "question": "How many international and domestic passengers are there in the airport London Heathrow?"
                },
                {
                    "ex_id": 3688,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
                    "question": "How many parks are there in Atlanta city?"
                }
            ],
            "example_quality": 0.6836619327865825,
            "example_similarity": 0.6256338220654115,
            "db_id": "concert_singer"
        },
        {
            "index": 22,
            "question": "How many concerts occurred in 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: how many degrees were conferred between 1998 and 2002? */\nSELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus\n\n/* Answer the following: How many addresses are in the district of California? */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts occurred in 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 2358,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
                    "question": "how many degrees were conferred between 1998 and 2002?"
                },
                {
                    "ex_id": 2937,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "How many addresses are in the district of California?"
                }
            ],
            "example_quality": 0.6909702287710309,
            "example_similarity": 0.6236333724998897,
            "db_id": "concert_singer"
        },
        {
            "index": 23,
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location codes and the number of documents in each location. */\nSELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code\n\n/* Answer the following: Show the name of track and the number of races in each track. */\nSELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id\n\n/* Answer the following: Show the invoice number and the number of transactions for each invoice. */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and the number of concerts in each stadium. */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4227,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
                    "question": "Show the location codes and the number of documents in each location."
                },
                {
                    "ex_id": 780,
                    "db_id": "race_track",
                    "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id",
                    "question": "Show the name of track and the number of races in each track."
                },
                {
                    "ex_id": 1600,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "Show the invoice number and the number of transactions for each invoice."
                }
            ],
            "example_quality": 0.7044063057809861,
            "example_similarity": 0.6368915488508261,
            "db_id": "concert_singer"
        },
        {
            "index": 24,
            "question": "For each stadium, how many concerts play there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Answer the following: For each constructor id, how many races are there? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: For each stadium, how many concerts play there? */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                },
                {
                    "ex_id": 405,
                    "db_id": "flight_1",
                    "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
                    "question": "For each origin, how many flights came from there?"
                },
                {
                    "ex_id": 2191,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "For each constructor id, how many races are there?"
                }
            ],
            "example_quality": 0.7167227097067783,
            "example_similarity": 0.6387634918911327,
            "db_id": "concert_singer"
        },
        {
            "index": 25,
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the manager name with most number of gas stations opened after 2000. */\nSELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the statement id and the statement detail for the statement with most number of accounts. */\nSELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the membership level with most number of members. */\nSELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. */\nSELECT ",
            "response": "T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2032,
                    "db_id": "gas_company",
                    "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the manager name with most number of gas stations opened after 2000."
                },
                {
                    "ex_id": 6398,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the statement id and the statement detail for the statement with most number of accounts."
                },
                {
                    "ex_id": 5419,
                    "db_id": "shop_membership",
                    "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the membership level with most number of members."
                }
            ],
            "example_quality": 0.7250908383555441,
            "example_similarity": 0.6413698149605854,
            "db_id": "concert_singer"
        },
        {
            "index": 26,
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the manager with the most gas stations that opened after 2000? */\nSELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the names of the 3 departments with the most courses? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: What are the names for the 3 branches that have the most memberships? */\nSELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity of the stadium with the most concerts after 2013 ? */\nSELECT ",
            "response": "t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2033,
                    "db_id": "gas_company",
                    "query": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the manager with the most gas stations that opened after 2000?"
                },
                {
                    "ex_id": 1372,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the names of the 3 departments with the most courses?"
                },
                {
                    "ex_id": 5406,
                    "db_id": "shop_membership",
                    "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
                    "question": "What are the names for the 3 branches that have the most memberships?"
                }
            ],
            "example_quality": 0.7043523862764808,
            "example_similarity": 0.6428455360040822,
            "db_id": "concert_singer"
        },
        {
            "index": 27,
            "question": "Which year has most number of concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which origin has most number of flights? */\nSELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which major has most number of students? */\nSELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which advisor has most number of students? */\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Which year has most number of concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 408,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which origin has most number of flights?"
                },
                {
                    "ex_id": 492,
                    "db_id": "allergy_1",
                    "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which major has most number of students?"
                },
                {
                    "ex_id": 502,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which advisor has most number of students?"
                }
            ],
            "example_quality": 0.7153022978958705,
            "example_similarity": 0.6560734791150421,
            "db_id": "concert_singer"
        },
        {
            "index": 28,
            "question": "What is the year that had the most concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the country that has the most perpetrators? */\nSELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the label that has the most albums? */\nSELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the stadium which held the most events? */\nSELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the year that had the most concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2317,
                    "db_id": "perpetrator",
                    "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the country that has the most perpetrators?"
                },
                {
                    "ex_id": 5195,
                    "db_id": "music_2",
                    "query": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the label that has the most albums?"
                },
                {
                    "ex_id": 5621,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the stadium which held the most events?"
                }
            ],
            "example_quality": 0.7226356058508365,
            "example_similarity": 0.6584720092620879,
            "db_id": "concert_singer"
        },
        {
            "index": 29,
            "question": "Show the stadium names without any concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for artists without any exhibition. */\nSELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\n\n/* Answer the following: Show station names without any trains. */\nSELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)\n\n/* Answer the following: Show the names of the drivers without a school bus. */\nSELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium names without any concert. */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1672,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
                    "question": "Show names for artists without any exhibition."
                },
                {
                    "ex_id": 6619,
                    "db_id": "train_station",
                    "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
                    "question": "Show station names without any trains."
                },
                {
                    "ex_id": 6358,
                    "db_id": "school_bus",
                    "query": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
                    "question": "Show the names of the drivers without a school bus."
                }
            ],
            "example_quality": 0.732199895304256,
            "example_similarity": 0.6614685044727183,
            "db_id": "concert_singer"
        },
        {
            "index": 30,
            "question": "What are the names of the stadiums without any concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of counties that do not contain any cities? */\nSELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\n\n/* Answer the following: What are the names of storms that did not affect any regions? */\nSELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)\n\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the stadiums without any concerts? */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2566,
                    "db_id": "county_public_safety",
                    "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
                    "question": "What are the names of counties that do not contain any cities?"
                },
                {
                    "ex_id": 2720,
                    "db_id": "storm_record",
                    "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)",
                    "question": "What are the names of storms that did not affect any regions?"
                },
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                }
            ],
            "example_quality": 0.7411265654607807,
            "example_similarity": 0.6594195543236278,
            "db_id": "concert_singer"
        },
        {
            "index": 31,
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the builder of railways associated with the trains named \"Andaman Exp\". */\nSELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"\n\n/* Answer the following: Show the names of authors from college \"Florida\" or \"Temple\" */\nSELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"\n\n/* Answer the following: Give the neames of wines with prices below 50 and with appelations in Monterey county. */\nSELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show countries where a singer above age 40 and a singer below 30 are from. */\nSELECT ",
            "response": "country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5642,
                    "db_id": "railway",
                    "query": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"",
                    "question": "Show the builder of railways associated with the trains named \"Andaman Exp\"."
                },
                {
                    "ex_id": 5821,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"",
                    "question": "Show the names of authors from college \"Florida\" or \"Temple\""
                },
                {
                    "ex_id": 6553,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
                    "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county."
                }
            ],
            "example_quality": 0.7321075943665126,
            "example_similarity": 0.6493681521504953,
            "db_id": "concert_singer"
        },
        {
            "index": 32,
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all church names except for those that had a wedding in year 2015. */\nSELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015\n\n/* Answer the following: Show all storm names except for those with at least two affected regions. */\nSELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2\n\n/* Answer the following: Show names for all regions except for Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show names for all stadiums except for stadiums having a concert in year 2014. */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1643,
                    "db_id": "wedding",
                    "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015",
                    "question": "Show all church names except for those that had a wedding in year 2015."
                },
                {
                    "ex_id": 2723,
                    "db_id": "storm_record",
                    "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
                    "question": "Show all storm names except for those with at least two affected regions."
                },
                {
                    "ex_id": 2697,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                    "question": "Show names for all regions except for Denmark."
                }
            ],
            "example_quality": 0.7305360502243771,
            "example_similarity": 0.6477522979805875,
            "db_id": "concert_singer"
        },
        {
            "index": 33,
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of all movies that were not reviewed by Chris Jackson? */\nSELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'\n\n/* Answer the following: What are the names of artists who did not have an exhibition in 2004? */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: What are the names of all clubs that do not have any players? */\nSELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of all stadiums that did not have a concert in 2014? */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2486,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
                    "question": "What are the titles of all movies that were not reviewed by Chris Jackson?"
                },
                {
                    "ex_id": 1683,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
                    "question": "What are the names of artists who did not have an exhibition in 2004?"
                },
                {
                    "ex_id": 3373,
                    "db_id": "sports_competition",
                    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                    "question": "What are the names of all clubs that do not have any players?"
                }
            ],
            "example_quality": 0.7344928702512479,
            "example_similarity": 0.6485322064888255,
            "db_id": "concert_singer"
        },
        {
            "index": 34,
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all party names and the number of members in each party. */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Answer the following: Show all product names and the number of customers having an order on each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Answer the following: Show all customer ids and the number of accounts for each customer. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and theme for all concerts and the number of singers in each concert. */\nSELECT ",
            "response": "T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2058,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "Show all party names and the number of members in each party."
                },
                {
                    "ex_id": 1622,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "Show all product names and the number of customers having an order on each product."
                },
                {
                    "ex_id": 678,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
                    "question": "Show all customer ids and the number of accounts for each customer."
                }
            ],
            "example_quality": 0.7423019034791524,
            "example_similarity": 0.6508245118343099,
            "db_id": "concert_singer"
        },
        {
            "index": 35,
            "question": "What are the names , themes , and number of singers for every concert ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each product which has problems, what are the number of problems and the product id? */\nSELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\n\n/* Answer the following: What is the total number of points for all players? */\nSELECT sum(Points) FROM player\n\n/* Answer the following: What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there. */\nSELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names , themes , and number of singers for every concert ? */\nSELECT ",
            "response": "t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5377,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                    "question": "For each product which has problems, what are the number of problems and the product id?"
                },
                {
                    "ex_id": 3377,
                    "db_id": "sports_competition",
                    "query": "SELECT sum(Points) FROM player",
                    "question": "What is the total number of points for all players?"
                },
                {
                    "ex_id": 2316,
                    "db_id": "perpetrator",
                    "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country",
                    "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there."
                }
            ],
            "example_quality": 0.7247043887765734,
            "example_similarity": 0.6482239235410046,
            "db_id": "concert_singer"
        },
        {
            "index": 36,
            "question": "List singer names and number of concerts for each singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the account id and the number of transactions for each account */\nSELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id\n\n/* Answer the following: Show the invoice number and the number of transactions for each invoice. */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Answer the following: Show the order ids and the number of invoices for each order. */\nSELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List singer names and number of concerts for each singer. */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 746,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id",
                    "question": "Show the account id and the number of transactions for each account"
                },
                {
                    "ex_id": 1600,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "Show the invoice number and the number of transactions for each invoice."
                },
                {
                    "ex_id": 1608,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
                    "question": "Show the order ids and the number of invoices for each order."
                }
            ],
            "example_quality": 0.7323514890883353,
            "example_similarity": 0.6493975976225373,
            "db_id": "concert_singer"
        },
        {
            "index": 37,
            "question": "What are the names of the singers and number of concerts for each person?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the destinations and number of flights to each one? */\nSELECT destination ,  count(*) FROM Flight GROUP BY destination\n\n/* Answer the following: Whah are the name of each industry and the number of companies in that industry? */\nSELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry\n\n/* Answer the following: What are the faculty id and the number of students each faculty has? */\nSELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers and number of concerts for each person? */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 407,
                    "db_id": "flight_1",
                    "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination",
                    "question": "What are the destinations and number of flights to each one?"
                },
                {
                    "ex_id": 4571,
                    "db_id": "company_office",
                    "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
                    "question": "Whah are the name of each industry and the number of companies in that industry?"
                },
                {
                    "ex_id": 6757,
                    "db_id": "activity_1",
                    "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
                    "question": "What are the faculty id and the number of students each faculty has?"
                }
            ],
            "example_quality": 0.7395852326264883,
            "example_similarity": 0.6491949291681197,
            "db_id": "concert_singer"
        },
        {
            "index": 38,
            "question": "List all singer names in concerts in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all businesses with rating 3.5 */\nSELECT name FROM business WHERE rating  =  3.5;\n\n/* Answer the following: List all the product names with the color description \"white\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"\n\n/* Answer the following: List all students' first names and last names who majored in 600. */\nSELECT Fname , Lname FROM Student WHERE Major  =  600;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all singer names in concerts in year 2014. */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8135,
                    "db_id": "yelp",
                    "query": "SELECT name FROM business WHERE rating  =  3.5;",
                    "question": "List all businesses with rating 3.5"
                },
                {
                    "ex_id": 5551,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
                    "question": "List all the product names with the color description \"white\"."
                },
                {
                    "ex_id": 2829,
                    "db_id": "restaurant_1",
                    "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
                    "question": "List all students' first names and last names who majored in 600."
                }
            ],
            "example_quality": 0.7464382528205281,
            "example_similarity": 0.6460396133819305,
            "db_id": "concert_singer"
        },
        {
            "index": 39,
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: Who served as an advisor for students who have treasurer votes in the spring election cycle? */\nSELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"\n\n/* Answer the following: Who are the advisors for students that live in a city with city code \"BAL\"? */\nSELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who performed in a concert in 2014? */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 254,
                    "db_id": "musical",
                    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
                    "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?"
                },
                {
                    "ex_id": 5480,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
                    "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?"
                },
                {
                    "ex_id": 5463,
                    "db_id": "voter_2",
                    "query": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"",
                    "question": "Who are the advisors for students that live in a city with city code \"BAL\"?"
                }
            ],
            "example_quality": 0.751718834860539,
            "example_similarity": 0.6407015932737061,
            "db_id": "concert_singer"
        },
        {
            "index": 40,
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Answer the following: What are the names of artist who have the letter 'a' in their names? */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: what is the name and nation of the singer who have a song having 'Hey' in its name? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                },
                {
                    "ex_id": 254,
                    "db_id": "musical",
                    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
                    "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?"
                },
                {
                    "ex_id": 819,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "What are the names of artist who have the letter 'a' in their names?"
                }
            ],
            "example_quality": 0.7516758639890255,
            "example_similarity": 0.6368097531581429,
            "db_id": "concert_singer"
        },
        {
            "index": 41,
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of every person who has a friend over 40 and under 30? */\nSELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n\n/* Answer the following: What are the names and ages of every person who is a friend of both Dan and Alice? */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Answer the following: What is the id of every employee who has at least a salary of  100000? */\nSELECT eid FROM Employee WHERE salary  >  100000\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4446,
                    "db_id": "network_2",
                    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
                    "question": "What are the names of every person who has a friend over 40 and under 30?"
                },
                {
                    "ex_id": 4442,
                    "db_id": "network_2",
                    "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
                    "question": "What are the names and ages of every person who is a friend of both Dan and Alice?"
                },
                {
                    "ex_id": 367,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee WHERE salary  >  100000",
                    "question": "What is the id of every employee who has at least a salary of  100000?"
                }
            ],
            "example_quality": 0.7452833632413257,
            "example_similarity": 0.633322743679457,
            "db_id": "concert_singer"
        },
        {
            "index": 42,
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the program owners that have some programs in both morning and night time. */\nSELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"\n\n/* Answer the following: Find the captain rank that has some captains in both Cutter and Armed schooner classes. */\nSELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'\n\n/* Answer the following: Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\". */\nSELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3755,
                    "db_id": "program_share",
                    "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
                    "question": "find the program owners that have some programs in both morning and night time."
                },
                {
                    "ex_id": 6239,
                    "db_id": "ship_1",
                    "query": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
                    "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes."
                },
                {
                    "ex_id": 4151,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
                    "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\"."
                }
            ],
            "example_quality": 0.7473797911006593,
            "example_similarity": 0.631264104624747,
            "db_id": "concert_singer"
        },
        {
            "index": 43,
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which directors had a movie both in the year 1999 and 2000? */\nSELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999\n\n/* Answer the following: what are the names of the channels that broadcast in both morning and night? */\nSELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\n\n/* Answer the following: What are the ranks of captains that are both in the Cutter and Armed schooner classes? */\nSELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6990,
                    "db_id": "culture_company",
                    "query": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999",
                    "question": "Which directors had a movie both in the year 1999 and 2000?"
                },
                {
                    "ex_id": 3747,
                    "db_id": "program_share",
                    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'",
                    "question": "what are the names of the channels that broadcast in both morning and night?"
                },
                {
                    "ex_id": 6240,
                    "db_id": "ship_1",
                    "query": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
                    "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?"
                }
            ],
            "example_quality": 0.7532546796797137,
            "example_similarity": 0.6321797049970768,
            "db_id": "concert_singer"
        },
        {
            "index": 44,
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Find the number of professors in accounting department. */\nSELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"\n\n/* Answer the following: Find the number of rooms with a king bed. */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the number of concerts happened in the stadium with the highest capacity . */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                },
                {
                    "ex_id": 3174,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
                    "question": "Find the number of professors in accounting department."
                },
                {
                    "ex_id": 2609,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "Find the number of rooms with a king bed."
                }
            ],
            "example_quality": 0.7390996820190087,
            "example_similarity": 0.6331799497969268,
            "db_id": "concert_singer"
        },
        {
            "index": 45,
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many rivers are in the state with the largest population */\nSELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: how many states border the state with the largest population */\nSELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: What is the role code with the largest number of employees? */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the number of concerts that occurred in the stadium with the largest capacity ? */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7557,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many rivers are in the state with the largest population"
                },
                {
                    "ex_id": 7253,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many states border the state with the largest population"
                },
                {
                    "ex_id": 4207,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the role code with the largest number of employees?"
                }
            ],
            "example_quality": 0.7261731870276397,
            "example_similarity": 0.6303350611063356,
            "db_id": "concert_singer"
        },
        {
            "index": 46,
            "question": "Find the number of pets whose weight is heavier than 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: Find the list of page size which have more than 3 product listed */\nSELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\n\n/* Answer the following: Find the official names of cities with population bigger than 1500 or smaller than 500. */\nSELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets whose weight is heavier than 10. */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                },
                {
                    "ex_id": 4903,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
                    "question": "Find the list of page size which have more than 3 product listed"
                },
                {
                    "ex_id": 53,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500",
                    "question": "Find the official names of cities with population bigger than 1500 or smaller than 500."
                }
            ],
            "example_quality": 0.7222527554255896,
            "example_similarity": 0.6251842498990601,
            "db_id": "pets_1"
        },
        {
            "index": 47,
            "question": "How many pets have a greater weight than 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many universities have a campus fee greater than the average? */\nSELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n\n/* Answer the following: How many courses have more than 2 credits? */\nSELECT count(*) FROM COURSE WHERE Credits  >  2\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets have a greater weight than 10? */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2344,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
                    "question": "How many universities have a campus fee greater than the average?"
                },
                {
                    "ex_id": 4638,
                    "db_id": "college_3",
                    "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
                    "question": "How many courses have more than 2 credits?"
                },
                {
                    "ex_id": 2450,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "How many movie ratings have more than 3 stars?"
                }
            ],
            "example_quality": 0.7244295351720402,
            "example_similarity": 0.6276787178251279,
            "db_id": "pets_1"
        },
        {
            "index": 48,
            "question": "Find the weight of the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Answer the following: Find the name of the ship that is steered by the youngest captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Answer the following: Provide the last name of the youngest student. */\nSELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the weight of the youngest dog. */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                },
                {
                    "ex_id": 6263,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "Find the name of the ship that is steered by the youngest captain."
                },
                {
                    "ex_id": 487,
                    "db_id": "allergy_1",
                    "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
                    "question": "Provide the last name of the youngest student."
                }
            ],
            "example_quality": 0.7240468491488854,
            "example_similarity": 0.628832677517704,
            "db_id": "pets_1"
        },
        {
            "index": 49,
            "question": "How much does the youngest dog weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Answer the following: What is the name of the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Answer the following: How old is the youngest winning pilot and what is their name? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How much does the youngest dog weigh? */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4413,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "Who is the youngest male?"
                },
                {
                    "ex_id": 4414,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "What is the name of the youngest male?"
                },
                {
                    "ex_id": 4841,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "How old is the youngest winning pilot and what is their name?"
                }
            ],
            "example_quality": 0.7197836790673063,
            "example_similarity": 0.6229394412941611,
            "db_id": "pets_1"
        },
        {
            "index": 50,
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the maximum and minimum product prices for each product type, grouped and ordered by product type. */\nSELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code\n\n/* Answer the following: Find the maximum and minimum monthly rental for all student addresses. */\nSELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses\n\n/* Answer the following: For each team, return the team name, id and the maximum salary among the team. */\nSELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4783,
                    "db_id": "department_store",
                    "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
                    "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type."
                },
                {
                    "ex_id": 3099,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses",
                    "question": "Find the maximum and minimum monthly rental for all student addresses."
                },
                {
                    "ex_id": 3659,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
                    "question": "For each team, return the team name, id and the maximum salary among the team."
                }
            ],
            "example_quality": 0.7198641959621508,
            "example_similarity": 0.6199678319554573,
            "db_id": "pets_1"
        },
        {
            "index": 51,
            "question": "List the maximum weight and type for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show each apartment type code, and the maximum and minimum number of rooms for each type. */\nSELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code\n\n/* Answer the following: Return each apartment type code along with the maximum and minimum number of rooms among each type. */\nSELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code\n\n/* Answer the following: Give the maximum and minimum product prices for each product type, grouped and ordered by product type. */\nSELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: List the maximum weight and type for each type of pet. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1265,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
                    "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type."
                },
                {
                    "ex_id": 1266,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
                    "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type."
                },
                {
                    "ex_id": 4783,
                    "db_id": "department_store",
                    "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code",
                    "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type."
                }
            ],
            "example_quality": 0.7187112592917225,
            "example_similarity": 0.6161540673780821,
            "db_id": "pets_1"
        },
        {
            "index": 52,
            "question": "Find number of pets owned by students who are older than 20.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students who is older than 20 in each dorm. */\nSELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name\n\n/* Answer the following: List the names of editors who are older than 25. */\nSELECT Name FROM editor WHERE Age  >  25\n\n/* Answer the following: Find the first name of students who is older than 20. */\nSELECT fname FROM student WHERE age  >  20\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find number of pets owned by students who are older than 20. */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5741,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name",
                    "question": "Find the number of students who is older than 20 in each dorm."
                },
                {
                    "ex_id": 653,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  >  25",
                    "question": "List the names of editors who are older than 25."
                },
                {
                    "ex_id": 5675,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE age  >  20",
                    "question": "Find the first name of students who is older than 20."
                }
            ],
            "example_quality": 0.7175577765886155,
            "example_similarity": 0.6155276128395142,
            "db_id": "pets_1"
        },
        {
            "index": 53,
            "question": "How many pets are owned by students that have an age greater than 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many exhibitions have a attendance more than 100 or have a ticket price below 10? */\nSELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10\n\n/* Answer the following: How many cities are there that have more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets are owned by students that have an age greater than 20? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1686,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
                    "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?"
                },
                {
                    "ex_id": 6854,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "How many cities are there that have more than 3 airports?"
                },
                {
                    "ex_id": 2450,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "How many movie ratings have more than 3 stars?"
                }
            ],
            "example_quality": 0.7187851524200033,
            "example_similarity": 0.6136122468233204,
            "db_id": "pets_1"
        },
        {
            "index": 54,
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many female students (sex is F) whose age is below 25? */\nSELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n\n/* Answer the following: Find the last name of female (sex is F) students in the descending order of age. */\nSELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC\n\n/* Answer the following: Show student ids who are female and play football. */\nSELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of dog pets that are raised by female students (with sex F). */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5673,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
                    "question": "How many female students (sex is F) whose age is below 25?"
                },
                {
                    "ex_id": 4666,
                    "db_id": "college_3",
                    "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC",
                    "question": "Find the last name of female (sex is F) students in the descending order of age."
                },
                {
                    "ex_id": 6026,
                    "db_id": "game_1",
                    "query": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"",
                    "question": "Show student ids who are female and play football."
                }
            ],
            "example_quality": 0.7168109734340679,
            "example_similarity": 0.6092449418409954,
            "db_id": "pets_1"
        },
        {
            "index": 55,
            "question": "How many dog pets are raised by female students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many female students (sex is F) whose age is below 25? */\nSELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25\n\n/* Answer the following: how many female dependents are there? */\nSELECT count(*) FROM dependent WHERE sex  =  'F'\n\n/* Answer the following: How many female students live in Smith Hall? */\nSELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many dog pets are raised by female students? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5673,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
                    "question": "How many female students (sex is F) whose age is below 25?"
                },
                {
                    "ex_id": 2134,
                    "db_id": "company_1",
                    "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'",
                    "question": "how many female dependents are there?"
                },
                {
                    "ex_id": 5750,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
                    "question": "How many female students live in Smith Hall?"
                }
            ],
            "example_quality": 0.7219598648261757,
            "example_similarity": 0.6073658020964728,
            "db_id": "pets_1"
        },
        {
            "index": 56,
            "question": "Find the number of distinct type of pets.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of distinct amenities. */\nSELECT count(*) FROM dorm_amenity\n\n/* Answer the following: Find the number of distinct projects. */\nSELECT count(DISTINCT name) FROM projects\n\n/* Answer the following: Find the number of distinct gender for dorms. */\nSELECT count(DISTINCT gender) FROM dorm\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of distinct type of pets. */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5681,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM dorm_amenity",
                    "question": "Find the number of distinct amenities."
                },
                {
                    "ex_id": 6476,
                    "db_id": "scientist_1",
                    "query": "SELECT count(DISTINCT name) FROM projects",
                    "question": "Find the number of distinct projects."
                },
                {
                    "ex_id": 5695,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT gender) FROM dorm",
                    "question": "Find the number of distinct gender for dorms."
                }
            ],
            "example_quality": 0.7261808196209464,
            "example_similarity": 0.6095671222490311,
            "db_id": "pets_1"
        },
        {
            "index": 57,
            "question": "How many different types of pet are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different types of transactions are there? */\nSELECT count(DISTINCT transaction_type) FROM Financial_Transactions\n\n/* Answer the following: How many different types of beds are there? */\nSELECT count(DISTINCT bedType) FROM Rooms;\n\n/* Answer the following: How many different types of rooms are there? */\nSELECT count(DISTINCT roomtype) FROM room\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many different types of pet are there? */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 737,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
                    "question": "How many different types of transactions are there?"
                },
                {
                    "ex_id": 2631,
                    "db_id": "inn_1",
                    "query": "SELECT count(DISTINCT bedType) FROM Rooms;",
                    "question": "How many different types of beds are there?"
                },
                {
                    "ex_id": 3939,
                    "db_id": "hospital_1",
                    "query": "SELECT count(DISTINCT roomtype) FROM room",
                    "question": "How many different types of rooms are there?"
                }
            ],
            "example_quality": 0.7309846648907544,
            "example_similarity": 0.6164168218586972,
            "db_id": "pets_1"
        },
        {
            "index": 58,
            "question": "Find the first name of students who have cat or dog pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of physicians who are affiliated with Surgery or Psychiatry department. */\nSELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'\n\n/* Answer the following: Find the last and first name of students who are playing Football or Lacrosse. */\nSELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"\n\n/* Answer the following: Find the id of users who are followed by Mary or Susan. */\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have cat or dog pet. */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3989,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
                    "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department."
                },
                {
                    "ex_id": 6050,
                    "db_id": "game_1",
                    "query": "SELECT T2.lname ,  T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T1.SportName  =  \"Football\" OR T1.SportName  =  \"Lacrosse\"",
                    "question": "Find the last and first name of students who are playing Football or Lacrosse."
                },
                {
                    "ex_id": 290,
                    "db_id": "twitter_1",
                    "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
                    "question": "Find the id of users who are followed by Mary or Susan."
                }
            ],
            "example_quality": 0.7331598061364804,
            "example_similarity": 0.6189115509837388,
            "db_id": "pets_1"
        },
        {
            "index": 59,
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of every person who has a friend over 40 and under 30? */\nSELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n\n/* Answer the following: What are the names and ages of every person who is a friend of both Dan and Alice? */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Answer the following: What are the email addresses and date of births for all customers who have a first name of Carole? */\nSELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the first names of every student who has a cat or dog as a pet? */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4446,
                    "db_id": "network_2",
                    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
                    "question": "What are the names of every person who has a friend over 40 and under 30?"
                },
                {
                    "ex_id": 4442,
                    "db_id": "network_2",
                    "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
                    "question": "What are the names and ages of every person who is a friend of both Dan and Alice?"
                },
                {
                    "ex_id": 6662,
                    "db_id": "driving_school",
                    "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
                    "question": "What are the email addresses and date of births for all customers who have a first name of Carole?"
                }
            ],
            "example_quality": 0.7290566132963947,
            "example_similarity": 0.6185648146328313,
            "db_id": "pets_1"
        },
        {
            "index": 60,
            "question": "Find the first name of students who have both cat and dog pets .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of physicians who are affiliated with both Surgery and Psychiatry departments. */\nSELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'\n\n/* Answer the following: Find the names of the swimmers who have both \"win\" and \"loss\" results in the record. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'\n\n/* Answer the following: Find the first name and age of the students who are playing both Football and Lacrosse. */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have both cat and dog pets . */\nSELECT ",
            "response": "t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3987,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
                    "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments."
                },
                {
                    "ex_id": 5628,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
                    "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record."
                },
                {
                    "ex_id": 6052,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "Find the first name and age of the students who are playing both Football and Lacrosse."
                }
            ],
            "example_quality": 0.7184872425114078,
            "example_similarity": 0.6204853393272224,
            "db_id": "pets_1"
        },
        {
            "index": 61,
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of instructors who have taught C Programming courses? */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the ids and names of the architects who built at least 3 bridges ? */\nSELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3\n\n/* Answer the following: What are the first name and last name of Linda Smith's advisor? */\nSELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the students' first names who have both cats and dogs as pets? */\nSELECT ",
            "response": "T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1432,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
                    "question": "What are the names of instructors who have taught C Programming courses?"
                },
                {
                    "ex_id": 6954,
                    "db_id": "architecture",
                    "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
                    "question": "What are the ids and names of the architects who built at least 3 bridges ?"
                },
                {
                    "ex_id": 6750,
                    "db_id": "activity_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
                    "question": "What are the first name and last name of Linda Smith's advisor?"
                }
            ],
            "example_quality": 0.713665467623663,
            "example_similarity": 0.6206130644823075,
            "db_id": "pets_1"
        },
        {
            "index": 62,
            "question": "Find the major and age of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: Find the famous titles of artists that do not have any volume. */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Answer the following: find the name of pilots who did not win the matches held in the country of Australia. */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the major and age of students who do not have a cat pet. */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                },
                {
                    "ex_id": 6190,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
                    "question": "Find the famous titles of artists that do not have any volume."
                },
                {
                    "ex_id": 4842,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "find the name of pilots who did not win the matches held in the country of Australia."
                }
            ],
            "example_quality": 0.717611723522206,
            "example_similarity": 0.6201657450062371,
            "db_id": "pets_1"
        },
        {
            "index": 63,
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of students who are older than 18 and do not have allergy to either food or animal. */\nSELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")\n\n/* Answer the following: What is the total number of people who has no friend living in the city of Austin. */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Answer the following: What are the names of the people who are older 40 but no friends under age 30? */\nSELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What major is every student who does not own a cat as a pet, and also how old are they? */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 534,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
                    "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal."
                },
                {
                    "ex_id": 4481,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who has no friend living in the city of Austin."
                },
                {
                    "ex_id": 4448,
                    "db_id": "network_2",
                    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
                    "question": "What are the names of the people who are older 40 but no friends under age 30?"
                }
            ],
            "example_quality": 0.7173896076099905,
            "example_similarity": 0.6139763027082155,
            "db_id": "pets_1"
        },
        {
            "index": 64,
            "question": "Find the id of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of the faculty who don't participate in any activity. */\nSELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in\n\n/* Answer the following: Show the ids of the students who don't participate in any activity. */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in\n\n/* Answer the following: find the ids of reviewers who did not give 4 star. */\nSELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of students who do not have a cat pet. */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6772,
                    "db_id": "activity_1",
                    "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
                    "question": "Show the ids of the faculty who don't participate in any activity."
                },
                {
                    "ex_id": 6788,
                    "db_id": "activity_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                    "question": "Show the ids of the students who don't participate in any activity."
                },
                {
                    "ex_id": 2521,
                    "db_id": "movie_1",
                    "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
                    "question": "find the ids of reviewers who did not give 4 star."
                }
            ],
            "example_quality": 0.7199114555971451,
            "example_similarity": 0.6116985753906803,
            "db_id": "pets_1"
        },
        {
            "index": 65,
            "question": "What are the ids of the students who do not own cats as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids for employees who do not work in departments with managers that have ids between 100 and 200? */\nSELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Answer the following: What are the ids and first names of customers who do not hold a credit card? */\nSELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the ids of the students who do not own cats as pets? */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3499,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
                    "question": "What are the ids for employees who do not work in departments with managers that have ids between 100 and 200?"
                },
                {
                    "ex_id": 508,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
                    "question": "What are the student ids of students who don't have any allergies?"
                },
                {
                    "ex_id": 729,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
                    "question": "What are the ids and first names of customers who do not hold a credit card?"
                }
            ],
            "example_quality": 0.7206019065078162,
            "example_similarity": 0.610668279534352,
            "db_id": "pets_1"
        },
        {
            "index": 66,
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and flags of ships that do not have a captain with the rank of Midshipman? */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Answer the following: Find the name of the person who has friends with age above 40 but not under age 30? */\nSELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a dog but do not have a cat as a pet. */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6266,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?"
                },
                {
                    "ex_id": 4447,
                    "db_id": "network_2",
                    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
                    "question": "Find the name of the person who has friends with age above 40 but not under age 30?"
                },
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                }
            ],
            "example_quality": 0.7221521301465866,
            "example_similarity": 0.6083556290257162,
            "db_id": "pets_1"
        },
        {
            "index": 67,
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of each dorm that has a TV Lounge but no study rooms? */\nSELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'\n\n/* Answer the following: What are the names of all people who do not have friends? */\nSELECT name FROM person EXCEPT SELECT name FROM PersonFriend\n\n/* Answer the following: What are the names of all stations that have more than 10 bikes available and are not located in San Jose? */\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name of every student who has a dog but does not have a cat? */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5706,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
                    "question": "What is the name of each dorm that has a TV Lounge but no study rooms?"
                },
                {
                    "ex_id": 4478,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                    "question": "What are the names of all people who do not have friends?"
                },
                {
                    "ex_id": 173,
                    "db_id": "bike_1",
                    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
                    "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?"
                }
            ],
            "example_quality": 0.7199216866861996,
            "example_similarity": 0.6061733535303894,
            "db_id": "pets_1"
        },
        {
            "index": 68,
            "question": "Find the type and weight of the youngest pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Provide the last name of the youngest student. */\nSELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n\n/* Answer the following: Find the name of the ship that is steered by the youngest captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the type and weight of the youngest pet. */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 487,
                    "db_id": "allergy_1",
                    "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
                    "question": "Provide the last name of the youngest student."
                },
                {
                    "ex_id": 6263,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "Find the name of the ship that is steered by the youngest captain."
                },
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                }
            ],
            "example_quality": 0.719717847265235,
            "example_similarity": 0.6056889266142413,
            "db_id": "pets_1"
        },
        {
            "index": 69,
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: How old is the youngest winning pilot and what is their name? */\nSELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1\n\n/* Answer the following: What is the name of the youngest editor? */\nSELECT Name FROM editor ORDER BY Age ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What type of pet is the youngest animal, and how much does it weigh? */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1755,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "What is the total point count of the youngest gymnast?"
                },
                {
                    "ex_id": 4841,
                    "db_id": "aircraft",
                    "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1",
                    "question": "How old is the youngest winning pilot and what is their name?"
                },
                {
                    "ex_id": 655,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
                    "question": "What is the name of the youngest editor?"
                }
            ],
            "example_quality": 0.7237799074497968,
            "example_similarity": 0.6023206874354904,
            "db_id": "pets_1"
        },
        {
            "index": 70,
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the church names for the weddings of all people older than 30. */\nSELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30\n\n/* Answer the following: Show all student ids who are older than 20. */\nSELECT StuID FROM Student WHERE age  >  20\n\n/* Answer the following: What is the name of all the people who are older than at least one engineer? Order them by age. */\nSELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id and weight of all pets whose age is older than 1. */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1647,
                    "db_id": "wedding",
                    "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30",
                    "question": "Show the church names for the weddings of all people older than 30."
                },
                {
                    "ex_id": 476,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student WHERE age  >  20",
                    "question": "Show all student ids who are older than 20."
                },
                {
                    "ex_id": 4432,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
                    "question": "What is the name of all the people who are older than at least one engineer? Order them by age."
                }
            ],
            "example_quality": 0.724262705308739,
            "example_similarity": 0.5997407832637206,
            "db_id": "pets_1"
        },
        {
            "index": 71,
            "question": "What is the id and weight of every pet who is older than 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students who are older than 20? */\nSELECT fname FROM student WHERE age  >  20\n\n/* Answer the following: What is the name of all the people who are older than at least one engineer? Order them by age. */\nSELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age\n\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id and weight of every pet who is older than 1? */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5676,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE age  >  20",
                    "question": "What are the first names of all students who are older than 20?"
                },
                {
                    "ex_id": 4432,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
                    "question": "What is the name of all the people who are older than at least one engineer? Order them by age."
                },
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                }
            ],
            "example_quality": 0.721694068375742,
            "example_similarity": 0.5974898007901517,
            "db_id": "pets_1"
        },
        {
            "index": 72,
            "question": "Find the average and maximum age for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Answer the following: Find the average and maximum rating of all reviews. */\nSELECT avg(rating) ,  max(rating) FROM review\n\n/* Answer the following: Show the minimum, average, and maximum age of all students. */\nSELECT min(age) ,  avg(age) ,  max(age) FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average and maximum age for each type of pet. */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                },
                {
                    "ex_id": 1694,
                    "db_id": "epinions_1",
                    "query": "SELECT avg(rating) ,  max(rating) FROM review",
                    "question": "Find the average and maximum rating of all reviews."
                },
                {
                    "ex_id": 484,
                    "db_id": "allergy_1",
                    "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
                    "question": "Show the minimum, average, and maximum age of all students."
                }
            ],
            "example_quality": 0.7228088838748808,
            "example_similarity": 0.5973528865551117,
            "db_id": "pets_1"
        },
        {
            "index": 73,
            "question": "What is the average and maximum age for each pet type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and average height of the mountains? */\nSELECT max(height) ,  avg(height) FROM mountain\n\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Answer the following: What is the minimum, maximum, and average market value for every company? */\nSELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average and maximum age for each pet type? */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3715,
                    "db_id": "mountain_photos",
                    "query": "SELECT max(height) ,  avg(height) FROM mountain",
                    "question": "What are the maximum and average height of the mountains?"
                },
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                },
                {
                    "ex_id": 2003,
                    "db_id": "gas_company",
                    "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
                    "question": "What is the minimum, maximum, and average market value for every company?"
                }
            ],
            "example_quality": 0.7238931564836321,
            "example_similarity": 0.5970276567545089,
            "db_id": "pets_1"
        },
        {
            "index": 74,
            "question": "Find the average weight for each pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average price of hotels for each star rating code. */\nSELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code\n\n/* Answer the following: Select the average price of each manufacturer's products, showing the manufacturer's name. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: Find the average rating star for each movie that received at least 2 ratings. */\nSELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average weight for each pet type. */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5936,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
                    "question": "Show the average price of hotels for each star rating code."
                },
                {
                    "ex_id": 5343,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Select the average price of each manufacturer's products, showing the manufacturer's name."
                },
                {
                    "ex_id": 2519,
                    "db_id": "movie_1",
                    "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
                    "question": "Find the average rating star for each movie that received at least 2 ratings."
                }
            ],
            "example_quality": 0.7259647757535308,
            "example_similarity": 0.5961861726734727,
            "db_id": "pets_1"
        },
        {
            "index": 75,
            "question": "What is the average weight for each type of pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average rating of songs for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Answer the following: What is the average salary for each job title? */\nSELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title\n\n/* Answer the following: What is the average age for each city and what are those cities? */\nSELECT avg(age) ,  city_code FROM student GROUP BY city_code\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average weight for each type of pet? */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3564,
                    "db_id": "music_1",
                    "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
                    "question": "What is the average rating of songs for each language?"
                },
                {
                    "ex_id": 3469,
                    "db_id": "hr_1",
                    "query": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
                    "question": "What is the average salary for each job title?"
                },
                {
                    "ex_id": 5688,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
                    "question": "What is the average age for each city and what are those cities?"
                }
            ],
            "example_quality": 0.7296185787434838,
            "example_similarity": 0.5977740607415302,
            "db_id": "pets_1"
        },
        {
            "index": 76,
            "question": "Find the first name and age of students who have a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of scientists who are assigned to some project. */\nSELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\n\n/* Answer the following: Find the names of nurses who are nursing an undergoing treatment. */\nSELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID\n\n/* Answer the following: Find the first name and last name of the instructor of course that has course name */\nSELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a pet. */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6504,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
                    "question": "Find the name of scientists who are assigned to some project."
                },
                {
                    "ex_id": 3955,
                    "db_id": "hospital_1",
                    "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
                    "question": "Find the names of nurses who are nursing an undergoing treatment."
                },
                {
                    "ex_id": 4686,
                    "db_id": "college_3",
                    "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"",
                    "question": "Find the first name and last name of the instructor of course that has course name"
                }
            ],
            "example_quality": 0.7304193367925983,
            "example_similarity": 0.5977302500007791,
            "db_id": "pets_1"
        },
        {
            "index": 77,
            "question": "What are the different first names and ages of the students who do have pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different location codes for documents? */\nSELECT DISTINCT location_code FROM Document_locations\n\n/* Answer the following: What are the different product names for products that have the 'warm' characteristic:? */\nSELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"\n\n/* Answer the following: What are the different positions for match season? */\nSELECT DISTINCT POSITION FROM match_season\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the different first names and ages of the students who do have pets? */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4219,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT DISTINCT location_code FROM Document_locations",
                    "question": "What are the different location codes for documents?"
                },
                {
                    "ex_id": 5574,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
                    "question": "What are the different product names for products that have the 'warm' characteristic:?"
                },
                {
                    "ex_id": 1060,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season",
                    "question": "What are the different positions for match season?"
                }
            ],
            "example_quality": 0.7326835259870049,
            "example_similarity": 0.596206378661324,
            "db_id": "pets_1"
        },
        {
            "index": 78,
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id of the order whose shipment tracking number is \"3452\". */\nSELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"\n\n/* Answer the following: Find the id of the item whose title is \"orange\". */\nSELECT i_id FROM item WHERE title  =  \"orange\"\n\n/* Answer the following: List the document type code for the document with the id 2. */\nSELECT document_type_code FROM Documents WHERE document_id = 2;\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6890,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
                    "question": "Find the id of the order whose shipment tracking number is \"3452\"."
                },
                {
                    "ex_id": 1690,
                    "db_id": "epinions_1",
                    "query": "SELECT i_id FROM item WHERE title  =  \"orange\"",
                    "question": "Find the id of the item whose title is \"orange\"."
                },
                {
                    "ex_id": 2114,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;",
                    "question": "List the document type code for the document with the id 2."
                }
            ],
            "example_quality": 0.7361106602692228,
            "example_similarity": 0.5957923196327953,
            "db_id": "pets_1"
        },
        {
            "index": 79,
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the candidate whose email is stanley.monahan@example.org? */\nSELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"\n\n/* Answer the following: What address was the document with id 4 mailed to? */\nSELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;\n\n/* Answer the following: What are the id and address of the shops which have a happy hour in May? */\nSELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id of the pet owned by the student whose last name is 'Smith'? */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 75,
                    "db_id": "student_assessment",
                    "query": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
                    "question": "What is the id of the candidate whose email is stanley.monahan@example.org?"
                },
                {
                    "ex_id": 2120,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;",
                    "question": "What address was the document with id 4 mailed to?"
                },
                {
                    "ex_id": 804,
                    "db_id": "coffee_shop",
                    "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
                    "question": "What are the id and address of the shops which have a happy hour in May?"
                }
            ],
            "example_quality": 0.73945103165822,
            "example_similarity": 0.594580393122422,
            "db_id": "pets_1"
        },
        {
            "index": 80,
            "question": "Find the number of pets for each student who has any pet and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of classes offered for all class rooms that held at least 2 classes. */\nSELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\n\n/* Answer the following: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id? */\nSELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id\n\n/* Answer the following: Find the number of trains for each station, as well as the station network name and services. */\nSELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets for each student who has any pet and student id. */\nSELECT ",
            "response": "count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3204,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
                    "question": "Find the number of classes offered for all class rooms that held at least 2 classes."
                },
                {
                    "ex_id": 5379,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
                    "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?"
                },
                {
                    "ex_id": 3165,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
                    "question": "Find the number of trains for each station, as well as the station network name and services."
                }
            ],
            "example_quality": 0.7405775679479558,
            "example_similarity": 0.5940486652176141,
            "db_id": "pets_1"
        },
        {
            "index": 81,
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students along with how many sports and games did they play? */\nSELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID\n\n/* Answer the following: How many draft copies does the document with id 2 have? */\nSELECT count(*) FROM Draft_Copies WHERE document_id = 2;\n\n/* Answer the following: What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841? */\nSELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: For students who have pets , how many pets does each student have ? list their ids instead of names . */\nSELECT ",
            "response": "count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6015,
                    "db_id": "game_1",
                    "query": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID",
                    "question": "What are the ids of all students along with how many sports and games did they play?"
                },
                {
                    "ex_id": 2125,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;",
                    "question": "How many draft copies does the document with id 2 have?"
                },
                {
                    "ex_id": 2199,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
                    "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?"
                }
            ],
            "example_quality": 0.7325346613150711,
            "example_similarity": 0.5903155541243926,
            "db_id": "pets_1"
        },
        {
            "index": 82,
            "question": "Find the first name and gender of student who have more than one pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games. */\nSELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")\n\n/* Answer the following: Find the name and email for the users who have more than one follower. */\nSELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and gender of student who have more than one pet. */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6054,
                    "db_id": "game_1",
                    "query": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
                    "question": "Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games."
                },
                {
                    "ex_id": 287,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
                    "question": "Find the name and email for the users who have more than one follower."
                },
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.733086406637787,
            "example_similarity": 0.5911970018603955,
            "db_id": "pets_1"
        },
        {
            "index": 83,
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the staff ids and genders of all staffs whose job title is Department Manager? */\nSELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"\n\n/* Answer the following: what is the last name and gender of all students who played both Call of Destiny and Works of Widenius? */\nSELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")\n\n/* Answer the following: What are the names of all colleges that have two or more players? */\nSELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name and gender of the all the students who have more than one pet? */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4718,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
                    "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?"
                },
                {
                    "ex_id": 6055,
                    "db_id": "game_1",
                    "query": "SELECT lname ,  sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Call of Destiny\" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID  =  T2.GameID WHERE T2.Gname  =  \"Works of Widenius\")",
                    "question": "what is the last name and gender of all students who played both Call of Destiny and Works of Widenius?"
                },
                {
                    "ex_id": 1102,
                    "db_id": "match_season",
                    "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
                    "question": "What are the names of all colleges that have two or more players?"
                }
            ],
            "example_quality": 0.7304120054868631,
            "example_similarity": 0.5895209901519454,
            "db_id": "pets_1"
        },
        {
            "index": 84,
            "question": "Find the last name of the student who has a cat that is age 3.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of instructors who teach a course in the Spring 2010 semester. */\nSELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n\n/* Answer the following: Find the title of course whose prerequisite is course Differential Geometry. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')\n\n/* Answer the following: Find the name and age of the person who is a friend of Dan or Alice. */\nSELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the last name of the student who has a cat that is age 3. */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1485,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
                    "question": "Find the total number of instructors who teach a course in the Spring 2010 semester."
                },
                {
                    "ex_id": 1425,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
                    "question": "Find the title of course whose prerequisite is course Differential Geometry."
                },
                {
                    "ex_id": 4443,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
                    "question": "Find the name and age of the person who is a friend of Dan or Alice."
                }
            ],
            "example_quality": 0.729086238981634,
            "example_similarity": 0.5907096746148522,
            "db_id": "pets_1"
        },
        {
            "index": 85,
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the issue dates of volumes by artists who are at most 23 years old? */\nSELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23\n\n/* Answer the following: What are the first names and last names of the students who are 18 years old and have vice president votes. */\nSELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18\n\n/* Answer the following: What are the student ids for students over 20 years old? */\nSELECT StuID FROM Student WHERE age  >  20\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the last name of the student who has a cat that is 3 years old? */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6203,
                    "db_id": "music_4",
                    "query": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
                    "question": "Return the issue dates of volumes by artists who are at most 23 years old?"
                },
                {
                    "ex_id": 5486,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
                    "question": "What are the first names and last names of the students who are 18 years old and have vice president votes."
                },
                {
                    "ex_id": 477,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student WHERE age  >  20",
                    "question": "What are the student ids for students over 20 years old?"
                }
            ],
            "example_quality": 0.7317132356098613,
            "example_similarity": 0.5885008331835969,
            "db_id": "pets_1"
        },
        {
            "index": 86,
            "question": "Find the average age of students who do not have any pet .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average credit score of the customers who do not have any loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Answer the following: Find the average price of wines that are not produced from Sonoma county. */\nSELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average age of students who do not have any pet . */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3085,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who do not have any loan."
                },
                {
                    "ex_id": 299,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who do not have any tweet."
                },
                {
                    "ex_id": 6596,
                    "db_id": "wine_1",
                    "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
                    "question": "Find the average price of wines that are not produced from Sonoma county."
                }
            ],
            "example_quality": 0.7261574194222846,
            "example_similarity": 0.5901041826685423,
            "db_id": "pets_1"
        },
        {
            "index": 87,
            "question": "What is the average age for all students who do not own any pets ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all people who do not have friends? */\nSELECT name FROM person EXCEPT SELECT name FROM PersonFriend\n\n/* Answer the following: What is the average credit score for customers who have never taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What are the names of all clubs that do not have any players? */\nSELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average age for all students who do not own any pets ? */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4478,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                    "question": "What are the names of all people who do not have friends?"
                },
                {
                    "ex_id": 3086,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have never taken a loan?"
                },
                {
                    "ex_id": 3373,
                    "db_id": "sports_competition",
                    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                    "question": "What are the names of all clubs that do not have any players?"
                }
            ],
            "example_quality": 0.720598277558749,
            "example_similarity": 0.5893821857222725,
            "db_id": "pets_1"
        },
        {
            "index": 88,
            "question": "How many continents are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many continents are there? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.7232998122834601,
            "example_similarity": 0.5940482972481558,
            "db_id": "car_1"
        },
        {
            "index": 89,
            "question": "What is the number of continents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of employees? */\nSELECT count(*) FROM Employee\n\n/* Answer the following: What is the number of flights? */\nSELECT count(*) FROM Flight\n\n/* Answer the following: What is the number of technicians? */\nSELECT count(*) FROM technician\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of continents? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 363,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Employee",
                    "question": "What is the number of employees?"
                },
                {
                    "ex_id": 383,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Flight",
                    "question": "What is the number of flights?"
                },
                {
                    "ex_id": 2235,
                    "db_id": "machine_repair",
                    "query": "SELECT count(*) FROM technician",
                    "question": "What is the number of technicians?"
                }
            ],
            "example_quality": 0.7264088031566797,
            "example_similarity": 0.5986095523352553,
            "db_id": "car_1"
        },
        {
            "index": 90,
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many settlements does each claim correspond to? List the claim id and the number of settlements. */\nSELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id\n\n/* Answer the following: How many employees does each role have? List role description, id and number of employees. */\nSELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries does each continent have? List the continent id, continent name and the number of countries. */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 3865,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id",
                    "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements."
                },
                {
                    "ex_id": 2110,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
                    "question": "How many employees does each role have? List role description, id and number of employees."
                }
            ],
            "example_quality": 0.7294487053438277,
            "example_similarity": 0.6007564612765163,
            "db_id": "car_1"
        },
        {
            "index": 91,
            "question": "For each continent, list its id, name, and how many countries it has?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many faculty members does each building have? List the result with the name of the building. */\nSELECT building ,  count(*) FROM Faculty GROUP BY building\n\n/* Answer the following: How many employees does each role have? List role description, id and number of employees. */\nSELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For each continent, list its id, name, and how many countries it has? */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 6737,
                    "db_id": "activity_1",
                    "query": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
                    "question": "How many faculty members does each building have? List the result with the name of the building."
                },
                {
                    "ex_id": 2110,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
                    "question": "How many employees does each role have? List role description, id and number of employees."
                }
            ],
            "example_quality": 0.7324217964938955,
            "example_similarity": 0.5985991863662736,
            "db_id": "car_1"
        },
        {
            "index": 92,
            "question": "How many countries are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many reviewers listed? */\nSELECT count(*) FROM Reviewer\n\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries are listed? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2443,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Reviewer",
                    "question": "How many reviewers listed?"
                },
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7353302552276575,
            "example_similarity": 0.6002879805793387,
            "db_id": "car_1"
        },
        {
            "index": 93,
            "question": "How many countries exist?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students exist? */\nSELECT count(*) FROM student\n\n/* Answer the following: How many vehicles exist? */\nSELECT count(*) FROM Vehicles;\n\n/* Answer the following: How many video games exist? */\nSELECT count(*) FROM Video_games\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries exist? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5686,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student",
                    "question": "How many students exist?"
                },
                {
                    "ex_id": 6626,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Vehicles;",
                    "question": "How many vehicles exist?"
                },
                {
                    "ex_id": 5970,
                    "db_id": "game_1",
                    "query": "SELECT count(*) FROM Video_games",
                    "question": "How many video games exist?"
                }
            ],
            "example_quality": 0.7381761664617686,
            "example_similarity": 0.6039885877176733,
            "db_id": "car_1"
        },
        {
            "index": 94,
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many employees does each role have? List role description, id and number of employees. */\nSELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;\n\n/* Answer the following: How many coaches does each club has? List the club id, name and the number of coaches. */\nSELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id\n\n/* Answer the following: How many accounts does each customer have? List the number and customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many models does each car maker produce? List maker full name, id and the number. */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2110,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;",
                    "question": "How many employees does each role have? List role description, id and number of employees."
                },
                {
                    "ex_id": 1735,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id",
                    "question": "How many coaches does each club has? List the club id, name and the number of coaches."
                },
                {
                    "ex_id": 1566,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
                    "question": "How many accounts does each customer have? List the number and customer id."
                }
            ],
            "example_quality": 0.7409615263930265,
            "example_similarity": 0.6049300933651136,
            "db_id": "car_1"
        },
        {
            "index": 95,
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each company id, what are the companies and how many gas stations does each one operate? */\nSELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id\n\n/* Answer the following: For each course id, how many students are registered and what are the course names? */\nSELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the full name of each car maker, along with its id and how many models it produces? */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2025,
                    "db_id": "gas_company",
                    "query": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
                    "question": "For each company id, what are the companies and how many gas stations does each one operate?"
                },
                {
                    "ex_id": 83,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
                    "question": "For each course id, how many students are registered and what are the course names?"
                },
                {
                    "ex_id": 1962,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "How many bookings did each customer make? List the customer id, first name, and the count."
                }
            ],
            "example_quality": 0.7436882471678368,
            "example_similarity": 0.6037054509639622,
            "db_id": "car_1"
        },
        {
            "index": 96,
            "question": "Which model of the car has the minimum horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum salary in each department? */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Answer the following: What is the minimum snatch score? */\nSELECT min(snatch) FROM body_builder\n\n/* Answer the following: What is the description of the color used by least products? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model of the car has the minimum horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3473,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "What is the minimum salary in each department?"
                },
                {
                    "ex_id": 1174,
                    "db_id": "body_builder",
                    "query": "SELECT min(snatch) FROM body_builder",
                    "question": "What is the minimum snatch score?"
                },
                {
                    "ex_id": 5593,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the description of the color used by least products?"
                }
            ],
            "example_quality": 0.7408003799208072,
            "example_similarity": 0.6010273912832097,
            "db_id": "car_1"
        },
        {
            "index": 97,
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which school has the smallest amount of professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Answer the following: what is the population density of the state with the smallest area */\nSELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Answer the following: what is the population density of the state with the smallest population */\nSELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model of the car with the smallest amount of horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3214,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the smallest amount of professors?"
                },
                {
                    "ex_id": 7152,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "what is the population density of the state with the smallest area"
                },
                {
                    "ex_id": 7526,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
                    "question": "what is the population density of the state with the smallest population"
                }
            ],
            "example_quality": 0.737372884595163,
            "example_similarity": 0.6013747606743336,
            "db_id": "car_1"
        },
        {
            "index": 98,
            "question": "Find the model of the car whose weight is below the average weight.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of accounts whose checking balance is below the average checking balance. */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department. */\nSELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')\n\n/* Answer the following: find the name of people whose height is lower than the average. */\nSELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the model of the car whose weight is below the average weight. */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1809,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "Find the name of accounts whose checking balance is below the average checking balance."
                },
                {
                    "ex_id": 1459,
                    "db_id": "college_2",
                    "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
                    "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department."
                },
                {
                    "ex_id": 2431,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
                    "question": "find the name of people whose height is lower than the average."
                }
            ],
            "example_quality": 0.7396748241703447,
            "example_similarity": 0.6025048265054241,
            "db_id": "car_1"
        },
        {
            "index": 99,
            "question": "What is the model for the car with a weight smaller than the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the product names with average product price smaller than 1000000? */\nSELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000\n\n/* Answer the following: Find the names of stadiums whose capacity is smaller than the average capacity. */\nSELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)\n\n/* Answer the following: What are the names of customers with checking balances lower than the average checking balance? */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model for the car with a weight smaller than the average? */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5139,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
                    "question": "What are the product names with average product price smaller than 1000000?"
                },
                {
                    "ex_id": 5608,
                    "db_id": "swimming",
                    "query": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)",
                    "question": "Find the names of stadiums whose capacity is smaller than the average capacity."
                },
                {
                    "ex_id": 1810,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "What are the names of customers with checking balances lower than the average checking balance?"
                }
            ],
            "example_quality": 0.7408866857727354,
            "example_similarity": 0.6014079630449183,
            "db_id": "car_1"
        },
        {
            "index": 100,
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and cities of bank branches that offer loans for business? */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Answer the following: What are the names of the amenities that Smith Hall has? */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'\n\n/* Answer the following: Find the name of customer who has the highest amount of loans. */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the name of the makers that produced some cars in the year of 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3078,
                    "db_id": "loan_1",
                    "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
                    "question": "What are the names and cities of bank branches that offer loans for business?"
                },
                {
                    "ex_id": 5752,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall'",
                    "question": "What are the names of the amenities that Smith Hall has?"
                },
                {
                    "ex_id": 3053,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
                    "question": "Find the name of customer who has the highest amount of loans."
                }
            ],
            "example_quality": 0.7401180305552196,
            "example_similarity": 0.5996410230025698,
            "db_id": "car_1"
        },
        {
            "index": 101,
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who are the different directors of films which had market estimation in 1995? */\nSELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995\n\n/* Answer the following: What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"? */\nSELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"\n\n/* Answer the following: What are the names of actors who have been in the musical titled The Phantom of the Opera? */\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the different car makers who produced a car in 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4134,
                    "db_id": "film_rank",
                    "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995",
                    "question": "Who are the different directors of films which had market estimation in 1995?"
                },
                {
                    "ex_id": 4152,
                    "db_id": "film_rank",
                    "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
                    "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?"
                },
                {
                    "ex_id": 254,
                    "db_id": "musical",
                    "query": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID WHERE T2.Name  =  \"The Phantom of the Opera\"",
                    "question": "What are the names of actors who have been in the musical titled The Phantom of the Opera?"
                }
            ],
            "example_quality": 0.741119533631602,
            "example_similarity": 0.598211378354824,
            "db_id": "car_1"
        },
        {
            "index": 102,
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: Which company started the earliest the maintenance contract? Show the company name. */\nSELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1\n\n/* Answer the following: Of all the claims, what was the earliest date when any claim was made? */\nSELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the make and production time of the cars that were produced in the earliest year? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                },
                {
                    "ex_id": 3153,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
                    "question": "Which company started the earliest the maintenance contract? Show the company name."
                },
                {
                    "ex_id": 3871,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                    "question": "Of all the claims, what was the earliest date when any claim was made?"
                }
            ],
            "example_quality": 0.7367948323214882,
            "example_similarity": 0.5957544893087197,
            "db_id": "car_1"
        },
        {
            "index": 103,
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: Which company started the earliest the maintenance contract? Show the company name. */\nSELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1\n\n/* Answer the following: What is the name of the patient who made the most recent appointment? */\nSELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maker of the carr produced in the earliest year and what year was it? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                },
                {
                    "ex_id": 3153,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
                    "question": "Which company started the earliest the maintenance contract? Show the company name."
                },
                {
                    "ex_id": 3917,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
                    "question": "What is the name of the patient who made the most recent appointment?"
                }
            ],
            "example_quality": 0.7325541057940951,
            "example_similarity": 0.5940680044851528,
            "db_id": "car_1"
        },
        {
            "index": 104,
            "question": "Which distinct car models are the produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct president votes on 08/30/2015? */\nSELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"\n\n/* Answer the following: What are the names of the races held after 2017 in Spain? */\nSELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017\n\n/* Answer the following: Which cities served as a host city after 2010? */\nSELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinct car models are the produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5467,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
                    "question": "What are the distinct president votes on 08/30/2015?"
                },
                {
                    "ex_id": 2193,
                    "db_id": "formula_1",
                    "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
                    "question": "What are the names of the races held after 2017 in Spain?"
                },
                {
                    "ex_id": 6274,
                    "db_id": "city_record",
                    "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
                    "question": "Which cities served as a host city after 2010?"
                }
            ],
            "example_quality": 0.7342099500149394,
            "example_similarity": 0.5930013402173621,
            "db_id": "car_1"
        },
        {
            "index": 105,
            "question": "What are the different models for the cards produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are names of the movies that are either made before 1980 or directed by James Cameron? */\nSELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980\n\n/* Answer the following: What are names of the movies that are either made after 2000 or reviewed by Brittany Harris? */\nSELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000\n\n/* Answer the following: What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25? */\nSELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models for the cards produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2527,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
                    "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?"
                },
                {
                    "ex_id": 2525,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
                    "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?"
                },
                {
                    "ex_id": 6937,
                    "db_id": "tracking_orders",
                    "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
                    "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?"
                }
            ],
            "example_quality": 0.736287769085092,
            "example_similarity": 0.590283133417573,
            "db_id": "car_1"
        },
        {
            "index": 106,
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tasks does each project have? List the task count and the project detail. */\nSELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id\n\n/* Answer the following: How many hosts does each nationality have? List the nationality and the count. */\nSELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality\n\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in each continents? List the continent name and the count. */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4391,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
                    "question": "How many tasks does each project have? List the task count and the project detail."
                },
                {
                    "ex_id": 2674,
                    "db_id": "party_host",
                    "query": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality",
                    "question": "How many hosts does each nationality have? List the nationality and the count."
                },
                {
                    "ex_id": 3129,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
                    "question": "How many assets does each third party company supply? List the count and the company id."
                }
            ],
            "example_quality": 0.7387756203201381,
            "example_similarity": 0.5908560293382573,
            "db_id": "car_1"
        },
        {
            "index": 107,
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers with accounts, and how many checking accounts do each of them have? */\nSELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of the technicians  and how many machines are they assigned to repair? */\nSELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\n\n/* Answer the following: What are teh names of the different products, as well as the number of customers who have ordered each product. */\nSELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of each continent and how many car makers are there in each one? */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1806,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?"
                },
                {
                    "ex_id": 2259,
                    "db_id": "machine_repair",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
                    "question": "What are the names of the technicians  and how many machines are they assigned to repair?"
                },
                {
                    "ex_id": 1623,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name",
                    "question": "What are teh names of the different products, as well as the number of customers who have ordered each product."
                }
            ],
            "example_quality": 0.7412169696629407,
            "example_similarity": 0.5889784707926404,
            "db_id": "car_1"
        },
        {
            "index": 108,
            "question": "Which of the countries has the most car makers? List the country name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which institution has the most papers? Find the name of the institution. */\nSELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name and hours for the project which has the most scientists assigned to it? */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which activity has the most faculty members participating in? Find the activity name. */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which of the countries has the most car makers? List the country name. */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2904,
                    "db_id": "icfp_1",
                    "query": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which institution has the most papers? Find the name of the institution."
                },
                {
                    "ex_id": 6485,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and hours for the project which has the most scientists assigned to it?"
                },
                {
                    "ex_id": 6787,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which activity has the most faculty members participating in? Find the activity name."
                }
            ],
            "example_quality": 0.7436131088327282,
            "example_similarity": 0.5898539640818915,
            "db_id": "car_1"
        },
        {
            "index": 109,
            "question": "What is the name of the country with the most car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most students enrolled? */\nSELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the activity with the most students? */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the department with the most students minoring in it? */\nSELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the country with the most car makers? */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3255,
                    "db_id": "college_1",
                    "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the department with the most students enrolled?"
                },
                {
                    "ex_id": 6794,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the activity with the most students?"
                },
                {
                    "ex_id": 4673,
                    "db_id": "college_3",
                    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the department with the most students minoring in it?"
                }
            ],
            "example_quality": 0.7459652821461895,
            "example_similarity": 0.5929737857867781,
            "db_id": "car_1"
        },
        {
            "index": 110,
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Answer the following: How many games are played for all football games by students on scholarship? */\nSELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'\n\n/* Answer the following: For each course id, how many students are registered and what are the course names? */\nSELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced by each maker ? Only list the count and the maker full name . */\nSELECT ",
            "response": "count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3129,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
                    "question": "How many assets does each third party company supply? List the count and the company id."
                },
                {
                    "ex_id": 6010,
                    "db_id": "game_1",
                    "query": "SELECT sum(gamesplayed) FROM Sportsinfo WHERE sportname  =  \"Football\" AND onscholarship  =  'Y'",
                    "question": "How many games are played for all football games by students on scholarship?"
                },
                {
                    "ex_id": 83,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
                    "question": "For each course id, how many students are registered and what are the course names?"
                }
            ],
            "example_quality": 0.7404376980765219,
            "example_similarity": 0.5926907925730739,
            "db_id": "car_1"
        },
        {
            "index": 111,
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Whah are the name of each industry and the number of companies in that industry? */\nSELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry\n\n/* Answer the following: For each product which has problems, what are the number of problems and the product id? */\nSELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\n\n/* Answer the following: What is the total number of routes for each country and airline in that country? */\nSELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? */\nSELECT ",
            "response": "Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4571,
                    "db_id": "company_office",
                    "query": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
                    "question": "Whah are the name of each industry and the number of companies in that industry?"
                },
                {
                    "ex_id": 5377,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                    "question": "For each product which has problems, what are the number of problems and the product id?"
                },
                {
                    "ex_id": 6869,
                    "db_id": "flight_4",
                    "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
                    "question": "What is the total number of routes for each country and airline in that country?"
                }
            ],
            "example_quality": 0.7427760971929497,
            "example_similarity": 0.5919151868073305,
            "db_id": "car_1"
        },
        {
            "index": 112,
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the email and phone number of Astrid Gruber the customer? */\nSELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";\n\n/* Answer the following: What is the location name of the document \"Robin CV\"? */\nSELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"\n\n/* Answer the following: What is the count of customers that Steve Johnson supports? */\nSELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the accelerate of the car make amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 577,
                    "db_id": "store_1",
                    "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
                    "question": "What is the email and phone number of Astrid Gruber the customer?"
                },
                {
                    "ex_id": 4222,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
                    "question": "What is the location name of the document \"Robin CV\"?"
                },
                {
                    "ex_id": 587,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";",
                    "question": "What is the count of customers that Steve Johnson supports?"
                }
            ],
            "example_quality": 0.744080675690235,
            "example_similarity": 0.5926482619951502,
            "db_id": "car_1"
        },
        {
            "index": 113,
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of invoices and total money billed in them from CA? */\nSELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";\n\n/* Answer the following: What is the email and phone number of Astrid Gruber the customer? */\nSELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";\n\n/* Answer the following: Which locations have 2 or more cinemas with capacity over 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How much does the car accelerate that makes amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 569,
                    "db_id": "store_1",
                    "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";",
                    "question": "What is the number of invoices and total money billed in them from CA?"
                },
                {
                    "ex_id": 577,
                    "db_id": "store_1",
                    "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";",
                    "question": "What is the email and phone number of Astrid Gruber the customer?"
                },
                {
                    "ex_id": 1945,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Which locations have 2 or more cinemas with capacity over 300?"
                }
            ],
            "example_quality": 0.7426581328375189,
            "example_similarity": 0.5904990167543396,
            "db_id": "car_1"
        },
        {
            "index": 114,
            "question": "How many car makers are there in france?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many addresses are there in country USA? */\nSELECT count(*) FROM addresses WHERE country  =  'USA'\n\n/* Answer the following: How many parks are there in Atlanta city? */\nSELECT count(*) FROM park WHERE city = 'Atlanta';\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in france? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                },
                {
                    "ex_id": 5654,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM addresses WHERE country  =  'USA'",
                    "question": "How many addresses are there in country USA?"
                },
                {
                    "ex_id": 3688,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM park WHERE city = 'Atlanta';",
                    "question": "How many parks are there in Atlanta city?"
                }
            ],
            "example_quality": 0.7449155176371899,
            "example_similarity": 0.5940911306424593,
            "db_id": "car_1"
        },
        {
            "index": 115,
            "question": "What is the number of makers of care in France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of airlines? */\nSELECT count(*) FROM airlines\n\n/* Answer the following: What is the total number of professors with a Ph.D. ? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'\n\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of makers of care in France? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6809,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airlines",
                    "question": "What is the total number of airlines?"
                },
                {
                    "ex_id": 3251,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
                    "question": "What is the total number of professors with a Ph.D. ?"
                },
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.7461996661150628,
            "example_similarity": 0.5948633854447026,
            "db_id": "car_1"
        },
        {
            "index": 116,
            "question": "How many car models are produced in the usa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many wines are produced at Robert Biale winery? */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Answer the following: How many addresses are in the district of California? */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Answer the following: How many faculty, in total, are there in the year 2002? */\nSELECT sum(faculty) FROM faculty WHERE YEAR  =  2002\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced in the usa? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6538,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "How many wines are produced at Robert Biale winery?"
                },
                {
                    "ex_id": 2937,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "How many addresses are in the district of California?"
                },
                {
                    "ex_id": 2374,
                    "db_id": "csu_1",
                    "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
                    "question": "How many faculty, in total, are there in the year 2002?"
                }
            ],
            "example_quality": 0.7478128873841858,
            "example_similarity": 0.5957261967335371,
            "db_id": "car_1"
        },
        {
            "index": 117,
            "question": "What is the count of the car models produced in the United States?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many cities does the usa have */\nSELECT COUNT ( city_name ) FROM city;\n\n/* Answer the following: what is the highest point in the usa */\nSELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Answer the following: what is the elevation of the highest point in the usa */\nSELECT MAX ( highest_elevation ) FROM highlow;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the count of the car models produced in the United States? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7226,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( city_name ) FROM city;",
                    "question": "how many cities does the usa have"
                },
                {
                    "ex_id": 7334,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
                    "question": "what is the highest point in the usa"
                },
                {
                    "ex_id": 7214,
                    "db_id": "geo",
                    "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
                    "question": "what is the elevation of the highest point in the usa"
                }
            ],
            "example_quality": 0.746687324281392,
            "example_similarity": 0.5938665136405479,
            "db_id": "car_1"
        },
        {
            "index": 118,
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each zip code, how many times has the maximum wind speed reached 25 mph? */\nSELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code\n\n/* Answer the following: show the lowest low temperature and highest wind speed in miles per hour. */\nSELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather\n\n/* Answer the following: What is the response received date for the document described as Regular that was granted more than 100 dollars? */\nSELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 159,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
                    "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?"
                },
                {
                    "ex_id": 3172,
                    "db_id": "station_weather",
                    "query": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
                    "question": "show the lowest low temperature and highest wind speed in miles per hour."
                },
                {
                    "ex_id": 4338,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
                    "question": "What is the response received date for the document described as Regular that was granted more than 100 dollars?"
                }
            ],
            "example_quality": 0.7451617254880468,
            "example_similarity": 0.5911709809045572,
            "db_id": "car_1"
        },
        {
            "index": 119,
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each zip code, how many times has the maximum wind speed reached 25 mph? */\nSELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code\n\n/* Answer the following: What is the average and maximum damage in millions for storms that had a max speed over 1000? */\nSELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000\n\n/* Answer the following: What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000? */\nSELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon of all the cards with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 159,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
                    "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?"
                },
                {
                    "ex_id": 2704,
                    "db_id": "storm_record",
                    "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
                    "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?"
                },
                {
                    "ex_id": 4769,
                    "db_id": "department_store",
                    "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
                    "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?"
                }
            ],
            "example_quality": 0.7428270245114061,
            "example_similarity": 0.5879237110768932,
            "db_id": "car_1"
        },
        {
            "index": 120,
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what state has the smallest population density */\nSELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );\n\n/* Answer the following: Which customer made the smallest amount of claim in one claim? Return the customer details. */\nSELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)\n\n/* Answer the following: what is the highest point in the smallest state */\nSELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the smallest weight of the car produced with 8 cylinders on 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7198,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
                    "question": "what state has the smallest population density"
                },
                {
                    "ex_id": 1523,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
                    "question": "Which customer made the smallest amount of claim in one claim? Return the customer details."
                },
                {
                    "ex_id": 7561,
                    "db_id": "geo",
                    "query": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "what is the highest point in the smallest state"
                }
            ],
            "example_quality": 0.7378272754976207,
            "example_similarity": 0.5867175286361009,
            "db_id": "car_1"
        },
        {
            "index": 121,
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum salary in each department? */\nSELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id\n\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average song duration for the songs that are in mp3 format and whose resolution below 800? */\nSELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the minimum weight of the car with 8 cylinders produced in 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3473,
                    "db_id": "hr_1",
                    "query": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
                    "question": "What is the minimum salary in each department?"
                },
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                },
                {
                    "ex_id": 3561,
                    "db_id": "music_1",
                    "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
                    "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?"
                }
            ],
            "example_quality": 0.7326231873375793,
            "example_similarity": 0.5861035565034455,
            "db_id": "car_1"
        },
        {
            "index": 122,
            "question": "What are all the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the payment methods? */\nSELECT DISTINCT payment_method FROM customers\n\n/* Answer the following: What are all the catalog entry names? */\nSELECT distinct(catalog_entry_name) FROM catalog_contents\n\n/* Answer the following: What are all the calendar dates and day Numbers? */\nSELECT calendar_date ,  day_Number FROM Ref_calendar\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are all the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6070,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT DISTINCT payment_method FROM customers",
                    "question": "What are all the payment methods?"
                },
                {
                    "ex_id": 303,
                    "db_id": "product_catalog",
                    "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
                    "question": "What are all the catalog entry names?"
                },
                {
                    "ex_id": 4164,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
                    "question": "What are all the calendar dates and day Numbers?"
                }
            ],
            "example_quality": 0.7330973922813382,
            "example_similarity": 0.5880010076189304,
            "db_id": "car_1"
        },
        {
            "index": 123,
            "question": "What are the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the characters and duration of actors? */\nSELECT Character ,  Duration FROM actor\n\n/* Answer the following: What are the names and ages of editors? */\nSELECT Name ,  Age FROM editor\n\n/* Answer the following: What are the names and parties of representatives? */\nSELECT Name ,  Party FROM representative\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 239,
                    "db_id": "musical",
                    "query": "SELECT Character ,  Duration FROM actor",
                    "question": "What are the characters and duration of actors?"
                },
                {
                    "ex_id": 652,
                    "db_id": "journal_committee",
                    "query": "SELECT Name ,  Age FROM editor",
                    "question": "What are the names and ages of editors?"
                },
                {
                    "ex_id": 1179,
                    "db_id": "election_representative",
                    "query": "SELECT Name ,  Party FROM representative",
                    "question": "What are the names and parties of representatives?"
                }
            ],
            "example_quality": 0.7352673321814899,
            "example_similarity": 0.5895439081893274,
            "db_id": "car_1"
        },
        {
            "index": 124,
            "question": "What are the countries having at least one car maker? List name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the clubs that have at least a member from the city with city code \"HOU\". */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"\n\n/* Answer the following: What are the names of departments that have at least one employee. */\nSELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n\n/* Answer the following: Give me a list of names and years of races that had any driver whose forename is Lewis? */\nSELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the countries having at least one car maker? List name and id. */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4307,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
                    "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\"."
                },
                {
                    "ex_id": 3481,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
                    "question": "What are the names of departments that have at least one employee."
                },
                {
                    "ex_id": 2176,
                    "db_id": "formula_1",
                    "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
                    "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?"
                }
            ],
            "example_quality": 0.7317907139112091,
            "example_similarity": 0.5873880881412056,
            "db_id": "car_1"
        },
        {
            "index": 125,
            "question": "What are the names and ids of all countries with at least one car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all customers, ordered by account balance? */\nSELECT cust_name FROM customer ORDER BY acc_bal\n\n/* Answer the following: What are the names of all the stores located in Khanewal District? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"\n\n/* Answer the following: What are the bed type and name of all the rooms with traditional decor? */\nSELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all countries with at least one car maker? */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3022,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
                    "question": "What are the names of all customers, ordered by account balance?"
                },
                {
                    "ex_id": 4918,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
                    "question": "What are the names of all the stores located in Khanewal District?"
                },
                {
                    "ex_id": 2618,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
                    "question": "What are the bed type and name of all the rooms with traditional decor?"
                }
            ],
            "example_quality": 0.7287141659776971,
            "example_similarity": 0.5871802115062514,
            "db_id": "car_1"
        },
        {
            "index": 126,
            "question": "What is the number of the cars with horsepower more than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of cities in the United States with more than 3 airports? */\nSELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n\n/* Answer the following: What are the cities that have more than 2 airports sorted by number of airports? */\nSELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of the cars with horsepower more than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6853,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
                    "question": "What is the number of cities in the United States with more than 3 airports?"
                },
                {
                    "ex_id": 6859,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
                    "question": "What are the cities that have more than 2 airports sorted by number of airports?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.7280263190615682,
            "example_similarity": 0.5878806748791481,
            "db_id": "car_1"
        },
        {
            "index": 127,
            "question": "What is the number of cars with a horsepower greater than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: What is the number of cities in the United States with more than 3 airports? */\nSELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n\n/* Answer the following: What are the cities that have more than 2 airports sorted by number of airports? */\nSELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a horsepower greater than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                },
                {
                    "ex_id": 6853,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
                    "question": "What is the number of cities in the United States with more than 3 airports?"
                },
                {
                    "ex_id": 6859,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
                    "question": "What are the cities that have more than 2 airports sorted by number of airports?"
                }
            ],
            "example_quality": 0.7273493043803391,
            "example_similarity": 0.5875806863767631,
            "db_id": "car_1"
        },
        {
            "index": 128,
            "question": "What is the average weight of cars each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average rating of songs for each language? */\nSELECT avg(rating) ,  languages FROM song GROUP BY languages\n\n/* Answer the following: What are the average prices of products for each manufacturer? */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: What is the average rating star for each reviewer? */\nSELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight of cars each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3564,
                    "db_id": "music_1",
                    "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
                    "question": "What is the average rating of songs for each language?"
                },
                {
                    "ex_id": 5314,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "What are the average prices of products for each manufacturer?"
                },
                {
                    "ex_id": 2457,
                    "db_id": "movie_1",
                    "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name",
                    "question": "What is the average rating star for each reviewer?"
                }
            ],
            "example_quality": 0.7294793879398677,
            "example_similarity": 0.5894414433250507,
            "db_id": "car_1"
        },
        {
            "index": 129,
            "question": "What is the average weight and year for each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average price and score of wines for each appelation? */\nSELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation\n\n/* Answer the following: What are the average prices of products for each manufacturer? */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: What is the average age for each city and what are those cities? */\nSELECT avg(age) ,  city_code FROM student GROUP BY city_code\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight and year for each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6579,
                    "db_id": "wine_1",
                    "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation",
                    "question": "What are the average price and score of wines for each appelation?"
                },
                {
                    "ex_id": 5314,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "What are the average prices of products for each manufacturer?"
                },
                {
                    "ex_id": 5688,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
                    "question": "What is the average age for each city and what are those cities?"
                }
            ],
            "example_quality": 0.7308164530280372,
            "example_similarity": 0.5905370075688039,
            "db_id": "car_1"
        },
        {
            "index": 130,
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which countries have at least 3 cities? */\nSELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\n\n/* Answer the following: What are the headquarters that have both a company in the banking and 'oil and gas' industries? */\nSELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'\n\n/* Answer the following: Which wineries produce at least four wines? */\nSELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which countries in europe have at least 3 car manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2943,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
                    "question": "Which countries have at least 3 cities?"
                },
                {
                    "ex_id": 2021,
                    "db_id": "gas_company",
                    "query": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
                    "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?"
                },
                {
                    "ex_id": 6581,
                    "db_id": "wine_1",
                    "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
                    "question": "Which wineries produce at least four wines?"
                }
            ],
            "example_quality": 0.73083581364577,
            "example_similarity": 0.5901028068112817,
            "db_id": "car_1"
        },
        {
            "index": 131,
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all campuses located at Chico? */\nSELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\n\n/* Answer the following: Find the names of all the products whose stock number starts with \"2\". */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: What are the names of all the games that have been played for at least 1000 hours? */\nSELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of all European countries with at least 3 manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2327,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
                    "question": "What are the names of all campuses located at Chico?"
                },
                {
                    "ex_id": 328,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Find the names of all the products whose stock number starts with \"2\"."
                },
                {
                    "ex_id": 6047,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
                    "question": "What are the names of all the games that have been played for at least 1000 hours?"
                }
            ],
            "example_quality": 0.7292046766159941,
            "example_similarity": 0.5894018286843843,
            "db_id": "car_1"
        },
        {
            "index": 132,
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines produced by St. Helena appelation? */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: What is the maximum point for climbers whose country is United Kingdom? */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Answer the following: What is the total and maximum duration of trips with bike id 636? */\nSELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum horsepower and the make of the car models with 3 cylinders? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6574,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "What are the maximum price and score of wines produced by St. Helena appelation?"
                },
                {
                    "ex_id": 1117,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "What is the maximum point for climbers whose country is United Kingdom?"
                },
                {
                    "ex_id": 122,
                    "db_id": "bike_1",
                    "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
                    "question": "What is the total and maximum duration of trips with bike id 636?"
                }
            ],
            "example_quality": 0.7265512121599716,
            "example_similarity": 0.5897917153842376,
            "db_id": "car_1"
        },
        {
            "index": 133,
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the effective date of the claim that has the largest amount of total settlement? */\nSELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: What is the nationality of the journalist with the largest number of years working? */\nSELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 906,
                    "db_id": "insurance_fnol",
                    "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1",
                    "question": "What is the effective date of the claim that has the largest amount of total settlement?"
                },
                {
                    "ex_id": 3630,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
                    "question": "what is the full name and id of the college with the largest number of baseball players?"
                },
                {
                    "ex_id": 2808,
                    "db_id": "news_report",
                    "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
                    "question": "What is the nationality of the journalist with the largest number of years working?"
                }
            ],
            "example_quality": 0.7264203784354409,
            "example_similarity": 0.5895029310520965,
            "db_id": "car_1"
        },
        {
            "index": 134,
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles. */\nSELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200\n\n/* Answer the following: For each zip code, how many times has the maximum wind speed reached 25 mph? */\nSELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code\n\n/* Answer the following: What is the maximum and minimum resolution of all songs that are approximately 3 minutes long? */\nSELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2993,
                    "db_id": "sakila_1",
                    "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
                    "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles."
                },
                {
                    "ex_id": 159,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
                    "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?"
                },
                {
                    "ex_id": 3601,
                    "db_id": "music_1",
                    "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
                    "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?"
                }
            ],
            "example_quality": 0.7236478529305819,
            "example_similarity": 0.5863057488355208,
            "db_id": "car_1"
        },
        {
            "index": 135,
            "question": "What is the car model with the highest mpg ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the author of the submission with the highest score? */\nSELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\n\n/* Answer the following: What is the name of the highest mountain? */\nSELECT Name FROM mountain ORDER BY Height DESC LIMIT 1\n\n/* Answer the following: What is the stories of highest building? */\nSELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the car model with the highest mpg ? */\nSELECT ",
            "response": "t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5825,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
                    "question": "What is the author of the submission with the highest score?"
                },
                {
                    "ex_id": 1125,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
                    "question": "What is the name of the highest mountain?"
                },
                {
                    "ex_id": 4561,
                    "db_id": "company_office",
                    "query": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1",
                    "question": "What is the stories of highest building?"
                }
            ],
            "example_quality": 0.719996900173831,
            "example_similarity": 0.5873873598243187,
            "db_id": "car_1"
        },
        {
            "index": 136,
            "question": "What is the average horsepower of the cars before 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average enrollment size of the universities that are founded before 1850? */\nSELECT avg(enrollment) FROM university WHERE founded  <  1850\n\n/* Answer the following: What is the average age for a male in each job? */\nSELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\n\n/* Answer the following: What is the average capacity of the stadiums that were opened in year 2005? */\nSELECT avg(capacity) FROM stadium WHERE opening_year  =  2005\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower of the cars before 1980? */\nSELECT ",
            "response": "avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 996,
                    "db_id": "university_basketball",
                    "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850",
                    "question": "What are the average enrollment size of the universities that are founded before 1850?"
                },
                {
                    "ex_id": 4426,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
                    "question": "What is the average age for a male in each job?"
                },
                {
                    "ex_id": 5632,
                    "db_id": "swimming",
                    "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
                    "question": "What is the average capacity of the stadiums that were opened in year 2005?"
                }
            ],
            "example_quality": 0.7211803963560264,
            "example_similarity": 0.5874392501524078,
            "db_id": "car_1"
        },
        {
            "index": 137,
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all movies made before 1980 or had James Cameron as the director? */\nSELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980\n\n/* Answer the following: What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009? */\nSELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009\n\n/* Answer the following: What is the average, maximum, and minimum budget for all movies before 2000. */\nSELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower for all cars produced before 1980 ? */\nSELECT ",
            "response": "avg(horsepower) from cars_data where year < 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2528,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
                    "question": "What are the names of all movies made before 1980 or had James Cameron as the director?"
                },
                {
                    "ex_id": 1677,
                    "db_id": "theme_gallery",
                    "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009",
                    "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?"
                },
                {
                    "ex_id": 6993,
                    "db_id": "culture_company",
                    "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
                    "question": "What is the average, maximum, and minimum budget for all movies before 2000."
                }
            ],
            "example_quality": 0.7170392704982901,
            "example_similarity": 0.5862341412854765,
            "db_id": "car_1"
        },
        {
            "index": 138,
            "question": "What is the average edispl of the cars of model volvo?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average unit price of rock tracks? */\nSELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Answer the following: What are the average prominence of the mountains in country 'Morocco'? */\nSELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'\n\n/* Answer the following: What is the average age of the members of the club \"Bootup Baltimore\"? */\nSELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl of the cars of model volvo? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 880,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
                    "question": "What is the average unit price of rock tracks?"
                },
                {
                    "ex_id": 3716,
                    "db_id": "mountain_photos",
                    "query": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'",
                    "question": "What are the average prominence of the mountains in country 'Morocco'?"
                },
                {
                    "ex_id": 4315,
                    "db_id": "club_1",
                    "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
                    "question": "What is the average age of the members of the club \"Bootup Baltimore\"?"
                }
            ],
            "example_quality": 0.7190897105671431,
            "example_similarity": 0.5870715560995015,
            "db_id": "car_1"
        },
        {
            "index": 139,
            "question": "What is the average edispl for all volvos?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average rating and resolution of all bangla songs? */\nSELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"\n\n/* Answer the following: What is the average age for a male in each job? */\nSELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\n\n/* Answer the following: What is the average age for all person? */\nSELECT avg(age) FROM Person\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl for all volvos? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3599,
                    "db_id": "music_1",
                    "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
                    "question": "What is the average rating and resolution of all bangla songs?"
                },
                {
                    "ex_id": 4426,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
                    "question": "What is the average age for a male in each job?"
                },
                {
                    "ex_id": 4403,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) FROM Person",
                    "question": "What is the average age for all person?"
                }
            ],
            "example_quality": 0.7188648255114851,
            "example_similarity": 0.5881975862253305,
            "db_id": "car_1"
        },
        {
            "index": 140,
            "question": "What is the maximum accelerate for different number of cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines in each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What are the maximum price and score of wines for each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the maximum and mininum number of transit passengers for all airports? */\nSELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for different number of cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6576,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines in each year?"
                },
                {
                    "ex_id": 6577,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines for each year?"
                },
                {
                    "ex_id": 4809,
                    "db_id": "aircraft",
                    "query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport",
                    "question": "What is the maximum and mininum number of transit passengers for all airports?"
                }
            ],
            "example_quality": 0.7185199927242182,
            "example_similarity": 0.58775434482979,
            "db_id": "car_1"
        },
        {
            "index": 141,
            "question": "What is the maximum accelerate for all the different cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Answer the following: What are the maximum price and score of wines in each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the maximum elevation of all airports in the country of Iceland? */\nSELECT max(elevation) FROM airports WHERE country  =  'Iceland'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for all the different cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                },
                {
                    "ex_id": 6576,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines in each year?"
                },
                {
                    "ex_id": 6812,
                    "db_id": "flight_4",
                    "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
                    "question": "What is the maximum elevation of all airports in the country of Iceland?"
                }
            ],
            "example_quality": 0.7179267074369521,
            "example_similarity": 0.5872797277269783,
            "db_id": "car_1"
        },
        {
            "index": 142,
            "question": "Which model has the most version(make) of cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which countries has the most number of airlines whose active status is 'Y'? */\nSELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which college has the most authors with submissions? */\nSELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which countries has the most number of airlines? */\nSELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model has the most version(make) of cars? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6844,
                    "db_id": "flight_4",
                    "query": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which countries has the most number of airlines whose active status is 'Y'?"
                },
                {
                    "ex_id": 5830,
                    "db_id": "workshop_paper",
                    "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which college has the most authors with submissions?"
                },
                {
                    "ex_id": 6842,
                    "db_id": "flight_4",
                    "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which countries has the most number of airlines?"
                }
            ],
            "example_quality": 0.719652314870234,
            "example_similarity": 0.5871450194126934,
            "db_id": "car_1"
        },
        {
            "index": 143,
            "question": "What model has the most different versions?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the shop that has the most different kinds of devices in stock? */\nSELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What are the states with the most invoices? */\nSELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;\n\n/* Answer the following: What are the teams with the most technicians? */\nSELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What model has the most different versions? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5074,
                    "db_id": "device",
                    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the shop that has the most different kinds of devices in stock?"
                },
                {
                    "ex_id": 567,
                    "db_id": "store_1",
                    "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
                    "question": "What are the states with the most invoices?"
                },
                {
                    "ex_id": 2249,
                    "db_id": "machine_repair",
                    "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What are the teams with the most technicians?"
                }
            ],
            "example_quality": 0.7209033527007755,
            "example_similarity": 0.5858404024610077,
            "db_id": "car_1"
        },
        {
            "index": 144,
            "question": "How many cars have more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many courses have more than 2 credits? */\nSELECT count(*) FROM COURSE WHERE Credits  >  2\n\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many cities are there that have more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4638,
                    "db_id": "college_3",
                    "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
                    "question": "How many courses have more than 2 credits?"
                },
                {
                    "ex_id": 2450,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "How many movie ratings have more than 3 stars?"
                },
                {
                    "ex_id": 6854,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "How many cities are there that have more than 3 airports?"
                }
            ],
            "example_quality": 0.7213318620268269,
            "example_similarity": 0.5879063255920655,
            "db_id": "car_1"
        },
        {
            "index": 145,
            "question": "What is the number of cars with more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: What is the number of cities in the United States with more than 3 airports? */\nSELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n\n/* Answer the following: What are the cities that have more than 2 airports sorted by number of airports? */\nSELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                },
                {
                    "ex_id": 6853,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
                    "question": "What is the number of cities in the United States with more than 3 airports?"
                },
                {
                    "ex_id": 6859,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
                    "question": "What are the cities that have more than 2 airports sorted by number of airports?"
                }
            ],
            "example_quality": 0.7207850592166105,
            "example_similarity": 0.5885389001026695,
            "db_id": "car_1"
        },
        {
            "index": 146,
            "question": "how many cars were produced in 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many wines are produced at Robert Biale winery? */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: how many cars were produced in 1980? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                },
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                },
                {
                    "ex_id": 6538,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "How many wines are produced at Robert Biale winery?"
                }
            ],
            "example_quality": 0.7226974903178667,
            "example_similarity": 0.5885412972861367,
            "db_id": "car_1"
        },
        {
            "index": 147,
            "question": "In 1980, how many cars were made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are age 18? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Answer the following: How many weddings are there in year 2016? */\nSELECT count(*) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many addresses are there in country USA? */\nSELECT count(*) FROM addresses WHERE country  =  'USA'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In 1980, how many cars were made? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 474,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  =  18",
                    "question": "How many students are age 18?"
                },
                {
                    "ex_id": 1646,
                    "db_id": "wedding",
                    "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many weddings are there in year 2016?"
                },
                {
                    "ex_id": 5654,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM addresses WHERE country  =  'USA'",
                    "question": "How many addresses are there in country USA?"
                }
            ],
            "example_quality": 0.7245839019483573,
            "example_similarity": 0.5887841620953631,
            "db_id": "car_1"
        },
        {
            "index": 148,
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many phone hardware models are produced by the company named \"Nokia Corporation\"? */\nSELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";\n\n/* Answer the following: How many international and domestic passengers are there in the airport London Heathrow? */\nSELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n\n/* Answer the following: How many trips started from Mountain View city and ended at Palo Alto city? */\nSELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models were produced by the maker with full name American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1027,
                    "db_id": "phone_1",
                    "query": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\";",
                    "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?"
                },
                {
                    "ex_id": 4805,
                    "db_id": "aircraft",
                    "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
                    "question": "How many international and domestic passengers are there in the airport London Heathrow?"
                },
                {
                    "ex_id": 210,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
                    "question": "How many trips started from Mountain View city and ended at Palo Alto city?"
                }
            ],
            "example_quality": 0.7252845703695362,
            "example_similarity": 0.5887117702936282,
            "db_id": "car_1"
        },
        {
            "index": 149,
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of routes operated by the airline American Airlines whose destinations are in Italy? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: What are the number of international and domestic passengers of the airport named London \"Heathrow\"? */\nSELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n\n/* Answer the following: What is the total number of hours per week and number of games played by students under 20? */\nSELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models created by the car maker American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6873,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?"
                },
                {
                    "ex_id": 4804,
                    "db_id": "aircraft",
                    "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
                    "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?"
                },
                {
                    "ex_id": 6033,
                    "db_id": "game_1",
                    "query": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  <  20",
                    "question": "What is the total number of hours per week and number of games played by students under 20?"
                }
            ],
            "example_quality": 0.7253385889129174,
            "example_similarity": 0.5892029984252465,
            "db_id": "car_1"
        },
        {
            "index": 150,
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Answer the following: Which schools have more than 1 player? Give me the school locations. */\nSELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1\n\n/* Answer the following: What are the department ids for which more than 10 employees had a commission? */\nSELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which makers designed more than 3 car models? List full name and the id. */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2686,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Which parties have more than 20 hosts? Give me the host names for these parties."
                },
                {
                    "ex_id": 4882,
                    "db_id": "school_player",
                    "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
                    "question": "Which schools have more than 1 player? Give me the school locations."
                },
                {
                    "ex_id": 3451,
                    "db_id": "hr_1",
                    "query": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
                    "question": "What are the department ids for which more than 10 employees had a commission?"
                }
            ],
            "example_quality": 0.7256881835053497,
            "example_similarity": 0.5888895704713895,
            "db_id": "car_1"
        },
        {
            "index": 151,
            "question": "What are the names and ids of all makers with more than 3 models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the dorms that can accomdate more than 300 students? */\nSELECT dorm_name FROM dorm WHERE student_capacity  >  300\n\n/* Answer the following: What are the first and last names of all customers with more than 2 payments? */\nSELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;\n\n/* Answer the following: What are the ids of all aircrafts that can cover a distance of more than 1000? */\nSELECT aid FROM Aircraft WHERE distance  >  1000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all makers with more than 3 models? */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5672,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
                    "question": "What are the names of all the dorms that can accomdate more than 300 students?"
                },
                {
                    "ex_id": 6696,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
                    "question": "What are the first and last names of all customers with more than 2 payments?"
                },
                {
                    "ex_id": 349,
                    "db_id": "flight_1",
                    "query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
                    "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?"
                }
            ],
            "example_quality": 0.7245614773599868,
            "example_similarity": 0.5893581116888919,
            "db_id": "car_1"
        },
        {
            "index": 152,
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000? */\nSELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000\n\n/* Answer the following: What are the ids of the stations in San Francisco that normally have more than 10 bikes available? */\nSELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\n\n/* Answer the following: What are the wines that have prices higher than 50 and made of Red color grapes? */\nSELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4819,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
                    "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?"
                },
                {
                    "ex_id": 143,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
                    "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?"
                },
                {
                    "ex_id": 6550,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
                    "question": "What are the wines that have prices higher than 50 and made of Red color grapes?"
                }
            ],
            "example_quality": 0.7241521101558926,
            "example_similarity": 0.5884328474588197,
            "db_id": "car_1"
        },
        {
            "index": 153,
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different ids and names of the stations that have had more than 12 bikes available? */\nSELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n\n/* Answer the following: What are the ids of the stations in San Francisco that normally have more than 10 bikes available? */\nSELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\n\n/* Answer the following: What are the different cities that have more than 100 memberships? */\nSELECT DISTINCT city FROM branch WHERE membership_amount  >=  100\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models created by either the car maker General Motors or weighed more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 205,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
                    "question": "What are the different ids and names of the stations that have had more than 12 bikes available?"
                },
                {
                    "ex_id": 143,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
                    "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?"
                },
                {
                    "ex_id": 5408,
                    "db_id": "shop_membership",
                    "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
                    "question": "What are the different cities that have more than 100 memberships?"
                }
            ],
            "example_quality": 0.7243705653677871,
            "example_similarity": 0.5880281094787486,
            "db_id": "car_1"
        },
        {
            "index": 154,
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the claim start date for the claims whose claimed amount is no more than the average */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Answer the following: Which studios have an average gross of over 4500000? */\nSELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000\n\n/* Answer the following: Select the names of manufacturer whose products have an average price higher than or equal to $150. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In which years cars were produced weighing no less than 3000 and no more than 4000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3864,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
                    "question": "Return the claim start date for the claims whose claimed amount is no more than the average"
                },
                {
                    "ex_id": 4156,
                    "db_id": "film_rank",
                    "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
                    "question": "Which studios have an average gross of over 4500000?"
                },
                {
                    "ex_id": 5345,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
                    "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150."
                }
            ],
            "example_quality": 0.7202802480454156,
            "example_similarity": 0.5856119579217711,
            "db_id": "car_1"
        },
        {
            "index": 155,
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the positions with both players having more than 20 points and less than 10 points. */\nSELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\n\n/* Answer the following: What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000? */\nSELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\n\n/* Answer the following: What are the positions of both players that have more than 20 20 points and less than 10 points? */\nSELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3374,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10",
                    "question": "What are the positions with both players having more than 20 points and less than 10 points."
                },
                {
                    "ex_id": 4028,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
                    "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?"
                },
                {
                    "ex_id": 3375,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10",
                    "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?"
                }
            ],
            "example_quality": 0.7165549376893623,
            "example_similarity": 0.5851011952759728,
            "db_id": "car_1"
        },
        {
            "index": 156,
            "question": "What is the horsepower of the car with the largest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the ship with the largest tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1\n\n/* Answer the following: What is the school color of the school with the largest enrollment? */\nSELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n\n/* Answer the following: what is the population of the state with the largest area */\nSELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the largest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4009,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
                    "question": "What is the name of the ship with the largest tonnage?"
                },
                {
                    "ex_id": 4892,
                    "db_id": "school_player",
                    "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                    "question": "What is the school color of the school with the largest enrollment?"
                },
                {
                    "ex_id": 7131,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "what is the population of the state with the largest area"
                }
            ],
            "example_quality": 0.716876166721268,
            "example_similarity": 0.5874183747715191,
            "db_id": "car_1"
        },
        {
            "index": 157,
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the entrepreneur with the greatest weight? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\n\n/* Answer the following: What is the name of the county with the greatest population? */\nSELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the name of the body builder with the greatest body weight? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the greatest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2280,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
                    "question": "What is the name of the entrepreneur with the greatest weight?"
                },
                {
                    "ex_id": 2548,
                    "db_id": "county_public_safety",
                    "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1",
                    "question": "What is the name of the county with the greatest population?"
                },
                {
                    "ex_id": 1159,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
                    "question": "What is the name of the body builder with the greatest body weight?"
                }
            ],
            "example_quality": 0.7186795032389669,
            "example_similarity": 0.5897429771766749,
            "db_id": "car_1"
        },
        {
            "index": 158,
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many faculty lines are there in the university that conferred the least number of degrees in year 2001? */\nSELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1\n\n/* Answer the following: How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"? */\nSELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"\n\n/* Answer the following: What are the song names for every song whose rating is less than the minimum rating for English songs? */\nSELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For model volvo, how many cylinders does the car with the least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2383,
                    "db_id": "csu_1",
                    "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
                    "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?"
                },
                {
                    "ex_id": 1244,
                    "db_id": "apartment_rentals",
                    "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"",
                    "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?"
                },
                {
                    "ex_id": 3615,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
                    "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?"
                }
            ],
            "example_quality": 0.717851650610105,
            "example_similarity": 0.5885344989591225,
            "db_id": "car_1"
        },
        {
            "index": 159,
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers have an active value of 1? */\nSELECT count(*) FROM customer WHERE active = '1'\n\n/* Answer the following: How many restaurant is the Sandwich type restaurant? */\nSELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'\n\n/* Answer the following: For how many clubs is \"Tracy Kim\" a member? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For a volvo model, how many cylinders does the version with least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2947,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM customer WHERE active = '1'",
                    "question": "How many customers have an active value of 1?"
                },
                {
                    "ex_id": 2837,
                    "db_id": "restaurant_1",
                    "query": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
                    "question": "How many restaurant is the Sandwich type restaurant?"
                },
                {
                    "ex_id": 4270,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
                    "question": "For how many clubs is \"Tracy Kim\" a member?"
                }
            ],
            "example_quality": 0.7158772475787677,
            "example_similarity": 0.5875850021070778,
            "db_id": "car_1"
        },
        {
            "index": 160,
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many flights have a velocity larger than 200? */\nSELECT count(*) FROM flight WHERE velocity  >  200\n\n/* Answer the following: how many rivers are in the state with the largest population */\nSELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: how many states border the state with the largest population */\nSELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have a larger accelerate than the car with the largest horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6367,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM flight WHERE velocity  >  200",
                    "question": "How many flights have a velocity larger than 200?"
                },
                {
                    "ex_id": 7557,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many rivers are in the state with the largest population"
                },
                {
                    "ex_id": 7253,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many states border the state with the largest population"
                }
            ],
            "example_quality": 0.7144017521551377,
            "example_similarity": 0.587793314798157,
            "db_id": "car_1"
        },
        {
            "index": 161,
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of branches that have more than the average number of memberships? */\nSELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n\n/* Answer the following: What is the number of states that has some college whose enrollment is larger than the average enrollment? */\nSELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a greater accelerate than the one with the most horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5402,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
                    "question": "What is the number of branches that have more than the average number of memberships?"
                },
                {
                    "ex_id": 5047,
                    "db_id": "soccer_2",
                    "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
                    "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                }
            ],
            "example_quality": 0.7134105932897342,
            "example_similarity": 0.5868221121064273,
            "db_id": "car_1"
        },
        {
            "index": 162,
            "question": "How many countries has more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many movie ratings have more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: How many courses have more than 2 credits? */\nSELECT count(*) FROM COURSE WHERE Credits  >  2\n\n/* Answer the following: How many cities are there that have more than 3 airports? */\nSELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries has more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2450,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "How many movie ratings have more than 3 stars?"
                },
                {
                    "ex_id": 4638,
                    "db_id": "college_3",
                    "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
                    "question": "How many courses have more than 2 credits?"
                },
                {
                    "ex_id": 6854,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
                    "question": "How many cities are there that have more than 3 airports?"
                }
            ],
            "example_quality": 0.709565139963696,
            "example_similarity": 0.5875554799676697,
            "db_id": "car_1"
        },
        {
            "index": 163,
            "question": "What is the number of countries with more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of cities in the United States with more than 3 airports? */\nSELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3\n\n/* Answer the following: What is the total number of ratings that has more than 3 stars? */\nSELECT count(*) FROM Rating WHERE stars  >  3\n\n/* Answer the following: What are the cities that have more than 2 airports sorted by number of airports? */\nSELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of countries with more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6853,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
                    "question": "What is the number of cities in the United States with more than 3 airports?"
                },
                {
                    "ex_id": 2449,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Rating WHERE stars  >  3",
                    "question": "What is the total number of ratings that has more than 3 stars?"
                },
                {
                    "ex_id": 6859,
                    "db_id": "flight_4",
                    "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
                    "question": "What are the cities that have more than 2 airports sorted by number of airports?"
                }
            ],
            "example_quality": 0.7059971095987418,
            "example_similarity": 0.5882680457574615,
            "db_id": "car_1"
        },
        {
            "index": 164,
            "question": "How many cars has over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tests have result \"Fail\"? */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: How many cities are in counties that have populations of over 20000? */\nSELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars has over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3787,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "How many tests have result \"Fail\"?"
                },
                {
                    "ex_id": 2558,
                    "db_id": "county_public_safety",
                    "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)",
                    "question": "How many cities are in counties that have populations of over 20000?"
                },
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                }
            ],
            "example_quality": 0.7067735499873674,
            "example_similarity": 0.5878992026600242,
            "db_id": "car_1"
        },
        {
            "index": 165,
            "question": "What is the number of carsw ith over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of airlines based in Russia? */\nSELECT count(*) FROM airlines WHERE country  =  'Russia'\n\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Answer the following: What is the total number of professors with a Ph.D. ? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of carsw ith over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6811,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
                    "question": "What is the number of airlines based in Russia?"
                },
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                },
                {
                    "ex_id": 3251,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
                    "question": "What is the total number of professors with a Ph.D. ?"
                }
            ],
            "example_quality": 0.7083486597854238,
            "example_similarity": 0.5879769808301611,
            "db_id": "car_1"
        },
        {
            "index": 166,
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the lowest point of the state with the largest area */\nSELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Answer the following: what is the highest point of the state with the largest area */\nSELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Answer the following: what is the capital of the state with the largest population density */\nSELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For the cars with 4 cylinders, which model has the largest horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7531,
                    "db_id": "geo",
                    "query": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the lowest point of the state with the largest area"
                },
                {
                    "ex_id": 7537,
                    "db_id": "geo",
                    "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the highest point of the state with the largest area"
                },
                {
                    "ex_id": 7317,
                    "db_id": "geo",
                    "query": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
                    "question": "what is the capital of the state with the largest population density"
                }
            ],
            "example_quality": 0.7059543435997355,
            "example_similarity": 0.5871123269965122,
            "db_id": "car_1"
        },
        {
            "index": 167,
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the policy types of the customer that has the most policies listed? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Which campus has the most degrees conferred in all times? */\nSELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: What is the name of the most common genre in all tracks? */\nSELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For all of the 4 cylinder cars, which model has the most horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 914,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are all the policy types of the customer that has the most policies listed?"
                },
                {
                    "ex_id": 2349,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
                    "question": "Which campus has the most degrees conferred in all times?"
                },
                {
                    "ex_id": 836,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the most common genre in all tracks?"
                }
            ],
            "example_quality": 0.7052313756911487,
            "example_similarity": 0.5866904966951358,
            "db_id": "car_1"
        },
        {
            "index": 168,
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all songs that have a lower rating than some song of blues genre? */\nSELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")\n\n/* Answer the following: What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds? */\nSELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000\n\n/* Answer the following: What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000? */\nSELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. */\nSELECT ",
            "response": "T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3572,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
                    "question": "What are the names of all songs that have a lower rating than some song of blues genre?"
                },
                {
                    "ex_id": 2163,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
                    "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?"
                },
                {
                    "ex_id": 4028,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
                    "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?"
                }
            ],
            "example_quality": 0.7041686397008642,
            "example_similarity": 0.5850297750970432,
            "db_id": "car_1"
        },
        {
            "index": 169,
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all products that are not the most frequently-used maximum page size? */\nSELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds? */\nSELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000\n\n/* Answer the following: What are the names of all songs that are in mp3 format and have a resolution lower than 1000? */\nSELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? */\nSELECT ",
            "response": "t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4940,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the names of all products that are not the most frequently-used maximum page size?"
                },
                {
                    "ex_id": 2163,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
                    "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?"
                },
                {
                    "ex_id": 3595,
                    "db_id": "music_1",
                    "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
                    "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?"
                }
            ],
            "example_quality": 0.7004846002094629,
            "example_similarity": 0.5841787422331044,
            "db_id": "car_1"
        },
        {
            "index": 170,
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each zip code, how many times has the maximum wind speed reached 25 mph? */\nSELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code\n\n/* Answer the following: What are the maximum and minimum resolution of songs whose duration is 3 minutes? */\nSELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"\n\n/* Answer the following: What is the count of the songs that last approximately 4 minutes? */\nSELECT count(*) FROM files WHERE duration LIKE \"4:%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 159,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
                    "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?"
                },
                {
                    "ex_id": 3600,
                    "db_id": "music_1",
                    "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
                    "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?"
                },
                {
                    "ex_id": 3547,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
                    "question": "What is the count of the songs that last approximately 4 minutes?"
                }
            ],
            "example_quality": 0.6970299052807273,
            "example_similarity": 0.582767119623208,
            "db_id": "car_1"
        },
        {
            "index": 171,
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005? */\nSELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\n\n/* Answer the following: What are the maximum scores the team Boston Red Stockings got when the team won in postseason? */\nSELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';\n\n/* Answer the following: What is the maximum stars and year for the most recent movie? */\nSELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6547,
                    "db_id": "wine_1",
                    "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
                    "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?"
                },
                {
                    "ex_id": 3667,
                    "db_id": "baseball_1",
                    "query": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';",
                    "question": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?"
                },
                {
                    "ex_id": 2467,
                    "db_id": "movie_1",
                    "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)",
                    "question": "What is the maximum stars and year for the most recent movie?"
                }
            ],
            "example_quality": 0.6937216200528467,
            "example_similarity": 0.5818546281570196,
            "db_id": "car_1"
        },
        {
            "index": 172,
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among the procedures that cost more than 1000, which were not specialized in by physician John Wen? */\nSELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: What are the cities that do not have any branches with more than 100 members? */\nSELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100\n\n/* Answer the following: what papers have fewer than 5 citations by ACL papers */\nSELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3984,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?"
                },
                {
                    "ex_id": 5436,
                    "db_id": "shop_membership",
                    "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
                    "question": "What are the cities that do not have any branches with more than 100 members?"
                },
                {
                    "ex_id": 8006,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
                    "question": "what papers have fewer than 5 citations by ACL papers"
                }
            ],
            "example_quality": 0.6922415724894779,
            "example_similarity": 0.5804916607981082,
            "db_id": "car_1"
        },
        {
            "index": 173,
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among the procedures that cost more than 1000, which were not specialized in by physician John Wen? */\nSELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: What are the cities that do not have any branches with more than 100 members? */\nSELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100\n\n/* Answer the following: what papers have fewer than 5 citations by ACL papers ? */\nSELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3984,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?"
                },
                {
                    "ex_id": 5436,
                    "db_id": "shop_membership",
                    "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
                    "question": "What are the cities that do not have any branches with more than 100 members?"
                },
                {
                    "ex_id": 8003,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
                    "question": "what papers have fewer than 5 citations by ACL papers ?"
                }
            ],
            "example_quality": 0.6907786353025644,
            "example_similarity": 0.5791962161193892,
            "db_id": "car_1"
        },
        {
            "index": 174,
            "question": "What are the name of the countries where there is not a single car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers who do not have any policies? */\nSELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Answer the following: What are the names of the clients who do not have any booking? */\nSELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID\n\n/* Answer the following: What are the names of shops that do not have any devices in stock? */\nSELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the name of the countries where there is not a single car maker? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1525,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
                    "question": "What are the names of customers who do not have any policies?"
                },
                {
                    "ex_id": 5166,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
                    "question": "What are the names of the clients who do not have any booking?"
                },
                {
                    "ex_id": 5084,
                    "db_id": "device",
                    "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
                    "question": "What are the names of shops that do not have any devices in stock?"
                }
            ],
            "example_quality": 0.6916617721367132,
            "example_similarity": 0.5782020131888462,
            "db_id": "car_1"
        },
        {
            "index": 175,
            "question": "What are the names of the countries with no car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of parties that have no members? */\nSELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\n\n/* Answer the following: What are the names of the songs without a lead vocal? */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Answer the following: What are the names of the dorm that does not have a TV Lounge? */\nSELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of the countries with no car makers? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2065,
                    "db_id": "party_people",
                    "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
                    "question": "What are the names of parties that have no members?"
                },
                {
                    "ex_id": 5234,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "What are the names of the songs without a lead vocal?"
                },
                {
                    "ex_id": 5762,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
                    "question": "What are the names of the dorm that does not have a TV Lounge?"
                }
            ],
            "example_quality": 0.6917123051559608,
            "example_similarity": 0.5783857968029572,
            "db_id": "car_1"
        },
        {
            "index": 176,
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: list the names of the companies with more than 200 sales in the descending order of sales and profits. */\nSELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC\n\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . */\nSELECT ",
            "response": "t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4335,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described"
                },
                {
                    "ex_id": 4112,
                    "db_id": "company_employee",
                    "query": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
                    "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits."
                },
                {
                    "ex_id": 2686,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Which parties have more than 20 hosts? Give me the host names for these parties."
                }
            ],
            "example_quality": 0.6879656037416458,
            "example_similarity": 0.5776075487609752,
            "db_id": "car_1"
        },
        {
            "index": 177,
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of all customers with more than 2 payments? */\nSELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;\n\n/* Answer the following: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research? */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: What are total salaries and department id for each department that has more than 2 employees? */\nSELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? */\nSELECT ",
            "response": "T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6696,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
                    "question": "What are the first and last names of all customers with more than 2 payments?"
                },
                {
                    "ex_id": 4336,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?"
                },
                {
                    "ex_id": 3513,
                    "db_id": "hr_1",
                    "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
                    "question": "What are total salaries and department id for each department that has more than 2 employees?"
                }
            ],
            "example_quality": 0.6863345596228239,
            "example_similarity": 0.5775319663348929,
            "db_id": "car_1"
        },
        {
            "index": 178,
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the cities that have a branch that opened in 2001 and a branch with more than 100 members? */\nSELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\n\n/* Answer the following: What are the response received dates for the documents described as 'Regular' or granted with more than 100? */\nSELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? */\nSELECT ",
            "response": "T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5434,
                    "db_id": "shop_membership",
                    "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
                    "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?"
                },
                {
                    "ex_id": 4337,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
                    "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?"
                },
                {
                    "ex_id": 2686,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Which parties have more than 20 hosts? Give me the host names for these parties."
                }
            ],
            "example_quality": 0.6840838839267086,
            "example_similarity": 0.5771355994090249,
            "db_id": "car_1"
        },
        {
            "index": 179,
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research? */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Answer the following: What are the names of all the dorms that can accomdate more than 300 students? */\nSELECT dorm_name FROM dorm WHERE student_capacity  >  300\n\n/* Answer the following: What are the first and last names of all customers with more than 2 payments? */\nSELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? */\nSELECT ",
            "response": "t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4336,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?"
                },
                {
                    "ex_id": 5672,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
                    "question": "What are the names of all the dorms that can accomdate more than 300 students?"
                },
                {
                    "ex_id": 6696,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
                    "question": "What are the first and last names of all customers with more than 2 payments?"
                }
            ],
            "example_quality": 0.6805841333128523,
            "example_similarity": 0.5773356623168147,
            "db_id": "car_1"
        },
        {
            "index": 180,
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: What is the name of the institution the author \"Katsuhiro Ueno\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: Which category does the product named \"flax\" belong to? */\nSELECT product_category_code FROM products WHERE product_name  =  \"flax\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which country does Airline \"JetBlue Airways\" belong to? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2873,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "Which institution does \"Katsuhiro Ueno\" belong to?"
                },
                {
                    "ex_id": 2874,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?"
                },
                {
                    "ex_id": 5539,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
                    "question": "Which category does the product named \"flax\" belong to?"
                }
            ],
            "example_quality": 0.681829565376458,
            "example_similarity": 0.5780159721741297,
            "db_id": "flight_2"
        },
        {
            "index": 181,
            "question": "What country is Jetblue Airways affiliated with?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: Who has a friend that is from new york city? */\nSELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\n\n/* Answer the following: What campuses are located in the county of Los Angeles? */\nSELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What country is Jetblue Airways affiliated with? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2873,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "Which institution does \"Katsuhiro Ueno\" belong to?"
                },
                {
                    "ex_id": 4463,
                    "db_id": "network_2",
                    "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
                    "question": "Who has a friend that is from new york city?"
                },
                {
                    "ex_id": 2326,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
                    "question": "What campuses are located in the county of Los Angeles?"
                }
            ],
            "example_quality": 0.6833243244206818,
            "example_similarity": 0.5766641343904789,
            "db_id": "flight_2"
        },
        {
            "index": 182,
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the address of the location \"UK Gallery\"? */\nSELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Answer the following: What is the age of student Linda Smith? */\nSELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of Airline \"JetBlue Airways\"? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5900,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
                    "question": "What is the address of the location \"UK Gallery\"?"
                },
                {
                    "ex_id": 592,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is the address of employee Nancy Edwards?"
                },
                {
                    "ex_id": 2827,
                    "db_id": "restaurant_1",
                    "query": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
                    "question": "What is the age of student Linda Smith?"
                }
            ],
            "example_quality": 0.6850643006601286,
            "example_similarity": 0.5781715298114659,
            "db_id": "flight_2"
        },
        {
            "index": 183,
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which papers have \"Stephanie Weirich\" as an author? */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Answer the following: What is the age of student Linda Smith? */\nSELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which abbreviation corresponds to Jetblue Airways? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2893,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
                    "question": "Which papers have \"Stephanie Weirich\" as an author?"
                },
                {
                    "ex_id": 592,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is the address of employee Nancy Edwards?"
                },
                {
                    "ex_id": 2827,
                    "db_id": "restaurant_1",
                    "query": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
                    "question": "What is the age of student Linda Smith?"
                }
            ],
            "example_quality": 0.686785260765811,
            "example_similarity": 0.5769270260989844,
            "db_id": "flight_2"
        },
        {
            "index": 184,
            "question": "List all airline names and their abbreviations in \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all public schools and their locations. */\nSELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\n\n/* Answer the following: List all the product names with the color description \"white\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"\n\n/* Answer the following: List all the document names which contains \"CV\". */\nSELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List all airline names and their abbreviations in \"USA\". */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 980,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
                    "question": "List all public schools and their locations."
                },
                {
                    "ex_id": 5551,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
                    "question": "List all the product names with the color description \"white\"."
                },
                {
                    "ex_id": 4530,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
                    "question": "List all the document names which contains \"CV\"."
                }
            ],
            "example_quality": 0.6880346162326635,
            "example_similarity": 0.5769844879136637,
            "db_id": "flight_2"
        },
        {
            "index": 185,
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the theme, date, and attendance for the exhibition in year 2004? */\nSELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004\n\n/* Answer the following: What are the names of the clubs that have players in the position of \"Right Wing\"? */\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"\n\n/* Answer the following: What are the birth dates of employees living in Edmonton? */\nSELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the airline names and abbreviations for airlines in the USA? */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1680,
                    "db_id": "theme_gallery",
                    "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",
                    "question": "What is the theme, date, and attendance for the exhibition in year 2004?"
                },
                {
                    "ex_id": 3359,
                    "db_id": "sports_competition",
                    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
                    "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?"
                },
                {
                    "ex_id": 884,
                    "db_id": "chinook_1",
                    "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"",
                    "question": "What are the birth dates of employees living in Edmonton?"
                }
            ],
            "example_quality": 0.6897209156043788,
            "example_similarity": 0.5773683151700519,
            "db_id": "flight_2"
        },
        {
            "index": 186,
            "question": "List the airport code and name in the city of Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and active date of the customer that use email as the contact channel. */\nSELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n\n/* Answer the following: List the name of rooms with king or queen bed. */\nSELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";\n\n/* Answer the following: Find the name and attribute ID of the attribute definitions with attribute value 0. */\nSELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List the airport code and name in the city of Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6106,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                    "question": "Find the name and active date of the customer that use email as the contact channel."
                },
                {
                    "ex_id": 2629,
                    "db_id": "inn_1",
                    "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";",
                    "question": "List the name of rooms with king or queen bed."
                },
                {
                    "ex_id": 334,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
                    "question": "Find the name and attribute ID of the attribute definitions with attribute value 0."
                }
            ],
            "example_quality": 0.6913890827247854,
            "example_similarity": 0.5774136615516618,
            "db_id": "flight_2"
        },
        {
            "index": 187,
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name and location of track with 1 race. */\nSELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Answer the following: Show the lieutenant governor and comptroller from the democratic party. */\nSELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airport code and airport name corresonding to the city Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 786,
                    "db_id": "race_track",
                    "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
                    "question": "Show the name and location of track with 1 race."
                },
                {
                    "ex_id": 1424,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "Give the title of the prerequisite to the course International Finance."
                },
                {
                    "ex_id": 2753,
                    "db_id": "election",
                    "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
                    "question": "Show the lieutenant governor and comptroller from the democratic party."
                }
            ],
            "example_quality": 0.6907815356395073,
            "example_similarity": 0.5774750264037325,
            "db_id": "flight_2"
        },
        {
            "index": 188,
            "question": "How many airlines do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Answer the following: How many faculty do we have? */\nSELECT count(*) FROM Faculty\n\n/* Answer the following: How many activities do we have? */\nSELECT count(*) FROM Activity\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines do we have? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                },
                {
                    "ex_id": 6716,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty",
                    "question": "How many faculty do we have?"
                },
                {
                    "ex_id": 6768,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Activity",
                    "question": "How many activities do we have?"
                }
            ],
            "example_quality": 0.6924263147052546,
            "example_similarity": 0.5797224996675424,
            "db_id": "flight_2"
        },
        {
            "index": 189,
            "question": "What is the total number of airlines?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of students? */\nSELECT count(*) FROM Student\n\n/* Answer the following: What is the total number of companies? */\nSELECT count(*) FROM company\n\n/* Answer the following: What is the total number of campuses? */\nSELECT count(*) FROM campuses\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the total number of airlines? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 461,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student",
                    "question": "What is the total number of students?"
                },
                {
                    "ex_id": 1995,
                    "db_id": "gas_company",
                    "query": "SELECT count(*) FROM company",
                    "question": "What is the total number of companies?"
                },
                {
                    "ex_id": 2394,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM campuses",
                    "question": "What is the total number of campuses?"
                }
            ],
            "example_quality": 0.6940536887015231,
            "example_similarity": 0.581946190145492,
            "db_id": "flight_2"
        },
        {
            "index": 190,
            "question": "How many airports do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Answer the following: How many faculty do we have? */\nSELECT count(*) FROM Faculty\n\n/* Answer the following: How many activities do we have? */\nSELECT count(*) FROM Activity\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airports do we have? */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                },
                {
                    "ex_id": 6716,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty",
                    "question": "How many faculty do we have?"
                },
                {
                    "ex_id": 6768,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Activity",
                    "question": "How many activities do we have?"
                }
            ],
            "example_quality": 0.6956639324451993,
            "example_similarity": 0.5841464733552526,
            "db_id": "flight_2"
        },
        {
            "index": 191,
            "question": "Return the number of  airports.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of reviews. */\nSELECT count(*) FROM review\n\n/* Answer the following: Find the number of bands. */\nSELECT count(*) FROM Band\n\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of  airports. */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1692,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM review",
                    "question": "Find the number of reviews."
                },
                {
                    "ex_id": 5174,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM Band",
                    "question": "Find the number of bands."
                },
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6970391649105822,
            "example_similarity": 0.585077145023051,
            "db_id": "flight_2"
        },
        {
            "index": 192,
            "question": "How many flights do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Answer the following: How many faculty do we have? */\nSELECT count(*) FROM Faculty\n\n/* Answer the following: How many activities do we have? */\nSELECT count(*) FROM Activity\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights do we have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                },
                {
                    "ex_id": 6716,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty",
                    "question": "How many faculty do we have?"
                },
                {
                    "ex_id": 6768,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Activity",
                    "question": "How many activities do we have?"
                }
            ],
            "example_quality": 0.6986170859266729,
            "example_similarity": 0.5872382015593893,
            "db_id": "flight_2"
        },
        {
            "index": 193,
            "question": "Return the number of flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of reviews. */\nSELECT count(*) FROM review\n\n/* Answer the following: Find the number of bands. */\nSELECT count(*) FROM Band\n\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1692,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM review",
                    "question": "Find the number of reviews."
                },
                {
                    "ex_id": 5174,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM Band",
                    "question": "Find the number of bands."
                },
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6999627659650494,
            "example_similarity": 0.5881432096440803,
            "db_id": "flight_2"
        },
        {
            "index": 194,
            "question": "Which airline has abbreviation 'UAL'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which enzyme names have the substring \"ALA\"? */\nSELECT name FROM enzyme WHERE name LIKE \"%ALA%\"\n\n/* Answer the following: Which committees have delegates from the Democratic party? */\nSELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has abbreviation 'UAL'? */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 974,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
                    "question": "Which enzyme names have the substring \"ALA\"?"
                },
                {
                    "ex_id": 2774,
                    "db_id": "election",
                    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
                    "question": "Which committees have delegates from the Democratic party?"
                },
                {
                    "ex_id": 583,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "In which country does Roberto Almeida?"
                }
            ],
            "example_quality": 0.7010797963810371,
            "example_similarity": 0.5873474234281865,
            "db_id": "flight_2"
        },
        {
            "index": 195,
            "question": "Give the airline with abbreviation 'UAL'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: Show the players from college UCLA. */\nSELECT Player FROM match_season WHERE College  =  \"UCLA\"\n\n/* Answer the following: Give the section titles of the document with the name \"David CV\". */\nSELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airline with abbreviation 'UAL'. */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                },
                {
                    "ex_id": 1061,
                    "db_id": "match_season",
                    "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
                    "question": "Show the players from college UCLA."
                },
                {
                    "ex_id": 4519,
                    "db_id": "document_management",
                    "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"",
                    "question": "Give the section titles of the document with the name \"David CV\"."
                }
            ],
            "example_quality": 0.70261272050216,
            "example_similarity": 0.5869558585680326,
            "db_id": "flight_2"
        },
        {
            "index": 196,
            "question": "How many airlines are from USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: How many architects are female? */\nSELECT count(*) FROM architect WHERE gender  =  'female'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines are from USA? */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                },
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                },
                {
                    "ex_id": 6946,
                    "db_id": "architecture",
                    "query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
                    "question": "How many architects are female?"
                }
            ],
            "example_quality": 0.7041300025404142,
            "example_similarity": 0.5883951022439488,
            "db_id": "flight_2"
        },
        {
            "index": 197,
            "question": "Return the number of airlines in the USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of rooms with a king bed. */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Answer the following: Count the number of tests with \"Fail\" result. */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: Find the number of professors in accounting department. */\nSELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of airlines in the USA. */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2609,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "Find the number of rooms with a king bed."
                },
                {
                    "ex_id": 3788,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "Count the number of tests with \"Fail\" result."
                },
                {
                    "ex_id": 3174,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
                    "question": "Find the number of professors in accounting department."
                }
            ],
            "example_quality": 0.7056318807001076,
            "example_similarity": 0.5879911906022257,
            "db_id": "flight_2"
        },
        {
            "index": 198,
            "question": "Which city and country is the Alton airport at?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which committees have delegates from the Democratic party? */\nSELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n\n/* Answer the following: What is the id and market share of the browser Safari? */\nSELECT id ,  market_share FROM browser WHERE name  =  'Safari'\n\n/* Answer the following: What city is the headquarter of the store Blackville? */\nSELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city and country is the Alton airport at? */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2774,
                    "db_id": "election",
                    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
                    "question": "Which committees have delegates from the Democratic party?"
                },
                {
                    "ex_id": 1831,
                    "db_id": "browser_web",
                    "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
                    "question": "What is the id and market share of the browser Safari?"
                },
                {
                    "ex_id": 4922,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
                    "question": "What city is the headquarter of the store Blackville?"
                }
            ],
            "example_quality": 0.7071185883733394,
            "example_similarity": 0.5878720826416479,
            "db_id": "flight_2"
        },
        {
            "index": 199,
            "question": "Give the city and country for the Alton airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the city and country for the Alton airport. */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                },
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                },
                {
                    "ex_id": 1424,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "Give the title of the prerequisite to the course International Finance."
                }
            ],
            "example_quality": 0.7075853291352824,
            "example_similarity": 0.5883496120399333,
            "db_id": "flight_2"
        },
        {
            "index": 200,
            "question": "What is the airport name for airport 'AKO'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the velocity of the pilot named 'Thompson'? */\nSELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'\n\n/* Answer the following: What is the gender of the teacher with last name \"Medhurst\"? */\nSELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"\n\n/* Answer the following: What is the location name of the document \"Robin CV\"? */\nSELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport name for airport 'AKO'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6371,
                    "db_id": "flight_company",
                    "query": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'",
                    "question": "What is the velocity of the pilot named 'Thompson'?"
                },
                {
                    "ex_id": 3097,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"",
                    "question": "What is the gender of the teacher with last name \"Medhurst\"?"
                },
                {
                    "ex_id": 4222,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
                    "question": "What is the location name of the document \"Robin CV\"?"
                }
            ],
            "example_quality": 0.7084918469340504,
            "example_similarity": 0.5883075623206084,
            "db_id": "flight_2"
        },
        {
            "index": 201,
            "question": "Return the name of the airport with code 'AKO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and description of the role with code \"MG\". */\nSELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"\n\n/* Answer the following: Return the color code and description for the product with the name 'chervil'. */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the name of the airport with code 'AKO'. */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4194,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"",
                    "question": "Find the name and description of the role with code \"MG\"."
                },
                {
                    "ex_id": 5548,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "Return the color code and description for the product with the name 'chervil'."
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                }
            ],
            "example_quality": 0.7095275425546107,
            "example_similarity": 0.5876774539181202,
            "db_id": "flight_2"
        },
        {
            "index": 202,
            "question": "What are airport names at City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the velocity of the pilot named 'Thompson'? */\nSELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'\n\n/* Answer the following: What are the titles of courses without prerequisites? */\nSELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)\n\n/* Answer the following: What are the ids of courses without prerequisites? */\nSELECT course_id FROM course EXCEPT SELECT course_id FROM prereq\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airport names at City 'Aberdeen'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6371,
                    "db_id": "flight_company",
                    "query": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'",
                    "question": "What is the velocity of the pilot named 'Thompson'?"
                },
                {
                    "ex_id": 1350,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
                    "question": "What are the titles of courses without prerequisites?"
                },
                {
                    "ex_id": 1420,
                    "db_id": "college_2",
                    "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
                    "question": "What are the ids of courses without prerequisites?"
                }
            ],
            "example_quality": 0.7086474360654593,
            "example_similarity": 0.5876363035490458,
            "db_id": "flight_2"
        },
        {
            "index": 203,
            "question": "What are the names of airports in Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of courses with 1 credit? */\nSELECT CName FROM COURSE WHERE Credits  =  1\n\n/* Answer the following: What are the names of banks in the state of New York? */\nSELECT bname FROM bank WHERE state  =  'New York'\n\n/* Answer the following: What is the name of the department in the Building Mergenthaler? */\nSELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the names of airports in Aberdeen? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4641,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE WHERE Credits  =  1",
                    "question": "What are the names of courses with 1 credit?"
                },
                {
                    "ex_id": 3020,
                    "db_id": "loan_1",
                    "query": "SELECT bname FROM bank WHERE state  =  'New York'",
                    "question": "What are the names of banks in the state of New York?"
                },
                {
                    "ex_id": 4659,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"",
                    "question": "What is the name of the department in the Building Mergenthaler?"
                }
            ],
            "example_quality": 0.7100826703705555,
            "example_similarity": 0.5878935638264403,
            "db_id": "flight_2"
        },
        {
            "index": 204,
            "question": "How many flights depart from 'APG'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Answer the following: How many tests have result \"Fail\"? */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: How many trains have 'Express' in their names? */\nSELECT count(*) FROM train WHERE name LIKE \"%Express%\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from 'APG'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                },
                {
                    "ex_id": 3787,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "How many tests have result \"Fail\"?"
                },
                {
                    "ex_id": 3161,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
                    "question": "How many trains have 'Express' in their names?"
                }
            ],
            "example_quality": 0.7112067452187094,
            "example_similarity": 0.5875004204140182,
            "db_id": "flight_2"
        },
        {
            "index": 205,
            "question": "Count the number of flights departing from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: Count the number of tests with \"Fail\" result. */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: Count the number of exhibitions that happened in or after 2005. */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights departing from 'APG'. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                },
                {
                    "ex_id": 3788,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "Count the number of tests with \"Fail\" result."
                },
                {
                    "ex_id": 1665,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
                    "question": "Count the number of exhibitions that happened in or after 2005."
                }
            ],
            "example_quality": 0.7126154928030083,
            "example_similarity": 0.5870532638916733,
            "db_id": "flight_2"
        },
        {
            "index": 206,
            "question": "How many flights have destination ATO?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Answer the following: How many staff have the first name Ludie? */\nSELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n\n/* Answer the following: How many members have the black membership card? */\nSELECT count(*) FROM member WHERE Membership_card  =  'Black'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights have destination ATO? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                },
                {
                    "ex_id": 6637,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
                    "question": "How many staff have the first name Ludie?"
                },
                {
                    "ex_id": 790,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
                    "question": "How many members have the black membership card?"
                }
            ],
            "example_quality": 0.7140105632262947,
            "example_similarity": 0.588338693930315,
            "db_id": "flight_2"
        },
        {
            "index": 207,
            "question": "Count the number of flights into ATO.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of tests with \"Fail\" result. */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights into ATO. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                },
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 3788,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "Count the number of tests with \"Fail\" result."
                }
            ],
            "example_quality": 0.7153921547082933,
            "example_similarity": 0.5888154975202025,
            "db_id": "flight_2"
        },
        {
            "index": 208,
            "question": "How many flights depart from City Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Answer the following: How many tests have result \"Fail\"? */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City Aberdeen? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                },
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                },
                {
                    "ex_id": 3787,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "How many tests have result \"Fail\"?"
                }
            ],
            "example_quality": 0.7167604616568111,
            "example_similarity": 0.5887891409616117,
            "db_id": "flight_2"
        },
        {
            "index": 209,
            "question": "Return the number of flights departing from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of tests with \"Fail\" result. */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: Find the number of rooms with a king bed. */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights departing from Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3788,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "Count the number of tests with \"Fail\" result."
                },
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 2609,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "Find the number of rooms with a king bed."
                }
            ],
            "example_quality": 0.7170157462542843,
            "example_similarity": 0.5881890492028,
            "db_id": "flight_2"
        },
        {
            "index": 210,
            "question": "How many flights arriving in Aberdeen city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many wines are produced at Robert Biale winery? */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights arriving in Aberdeen city? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6538,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "How many wines are produced at Robert Biale winery?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                }
            ],
            "example_quality": 0.7183632903197401,
            "example_similarity": 0.5884745687215874,
            "db_id": "flight_2"
        },
        {
            "index": 211,
            "question": "Return the number of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of tests with \"Fail\" result. */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: Find the number of rooms with a king bed. */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Answer the following: Find the number of professors in accounting department. */\nSELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights arriving in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3788,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "Count the number of tests with \"Fail\" result."
                },
                {
                    "ex_id": 2609,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "Find the number of rooms with a king bed."
                },
                {
                    "ex_id": 3174,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
                    "question": "Find the number of professors in accounting department."
                }
            ],
            "example_quality": 0.7196980614556655,
            "example_similarity": 0.5880970802860562,
            "db_id": "flight_2"
        },
        {
            "index": 212,
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products have the color description 'red' and the characteristic name 'slow'? */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"\n\n/* Answer the following: How many products have the characteristic named \"hot\"? */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n\n/* Answer the following: How many churches have a wedding in year 2016? */\nSELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5576,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
                    "question": "How many products have the color description 'red' and the characteristic name 'slow'?"
                },
                {
                    "ex_id": 5571,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                    "question": "How many products have the characteristic named \"hot\"?"
                },
                {
                    "ex_id": 1649,
                    "db_id": "wedding",
                    "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many churches have a wedding in year 2016?"
                }
            ],
            "example_quality": 0.7208630077066609,
            "example_similarity": 0.5877932459947367,
            "db_id": "flight_2"
        },
        {
            "index": 213,
            "question": "How many flights fly from Aberdeen to Ashley?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly? */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5\n\n/* Answer the following: What are the names of all employees who have a certificate to fly Boeing 737-800? */\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"\n\n/* Answer the following: What are the names of all aircrafts that John Williams have certificates to be able to fly? */\nSELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights fly from Aberdeen to Ashley? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 435,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
                    "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?"
                },
                {
                    "ex_id": 427,
                    "db_id": "flight_1",
                    "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
                    "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?"
                },
                {
                    "ex_id": 425,
                    "db_id": "flight_1",
                    "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
                    "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?"
                }
            ],
            "example_quality": 0.7202241922791058,
            "example_similarity": 0.5861803182263877,
            "db_id": "flight_2"
        },
        {
            "index": 214,
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cards does customer Art Turcotte have? */\nSELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"\n\n/* Answer the following: How many stations does Mountain View city has? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many characteristics does the product named \"laurel\" have? */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights does airline 'JetBlue Airways' have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 706,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
                    "question": "How many cards does customer Art Turcotte have?"
                },
                {
                    "ex_id": 130,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations does Mountain View city has?"
                },
                {
                    "ex_id": 5565,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
                    "question": "How many characteristics does the product named \"laurel\" have?"
                }
            ],
            "example_quality": 0.7215315558665866,
            "example_similarity": 0.5867553410815692,
            "db_id": "flight_2"
        },
        {
            "index": 215,
            "question": "Give the number of Jetblue Airways flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of routes from the United States to Canada. */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: Find the number of rooms with a king bed. */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Answer the following: Find the number of members of club \"Pen and Paper Gaming\". */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the number of Jetblue Airways flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6876,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "Find the number of routes from the United States to Canada."
                },
                {
                    "ex_id": 2609,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "Find the number of rooms with a king bed."
                },
                {
                    "ex_id": 4265,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
                    "question": "Find the number of members of club \"Pen and Paper Gaming\"."
                }
            ],
            "example_quality": 0.7217575251068757,
            "example_similarity": 0.5865711950633477,
            "db_id": "flight_2"
        },
        {
            "index": 216,
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many games in total did team Boston Red Stockings attend from 2000 to 2010? */\nSELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;\n\n/* Answer the following: How many times has the student Linda Smith visited Subway? */\nSELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights go to Airport 'ASY'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 3695,
                    "db_id": "baseball_1",
                    "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
                    "question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?"
                },
                {
                    "ex_id": 2839,
                    "db_id": "restaurant_1",
                    "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
                    "question": "How many times has the student Linda Smith visited Subway?"
                }
            ],
            "example_quality": 0.7213200263780086,
            "example_similarity": 0.5861112353082173,
            "db_id": "flight_2"
        },
        {
            "index": 217,
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of wines produced at Robert Biale winery. */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of video games with Massively multiplayer online game type . */\nSELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights arriving in ASY Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6539,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "Count the number of wines produced at Robert Biale winery."
                },
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 5983,
                    "db_id": "game_1",
                    "query": "SELECT count(*) FROM Video_games WHERE gtype  =  \"Massively multiplayer online game\"",
                    "question": "Count the number of video games with Massively multiplayer online game type ."
                }
            ],
            "example_quality": 0.7226042658877874,
            "example_similarity": 0.5865738929174327,
            "db_id": "flight_2"
        },
        {
            "index": 218,
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many products have the characteristic named \"hot\"? */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n\n/* Answer the following: How many times has the student Linda Smith visited Subway? */\nSELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights depart from Airport 'AHD'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 5571,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                    "question": "How many products have the characteristic named \"hot\"?"
                },
                {
                    "ex_id": 2839,
                    "db_id": "restaurant_1",
                    "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
                    "question": "How many times has the student Linda Smith visited Subway?"
                }
            ],
            "example_quality": 0.7228222047714614,
            "example_similarity": 0.5860574639349106,
            "db_id": "flight_2"
        },
        {
            "index": 219,
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010. */\nSELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";\n\n/* Answer the following: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Answer the following: Count the number of games taken place in park \"Columbia Park\" in 1907. */\nSELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of United Airlines flights leaving from AHD Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2588,
                    "db_id": "inn_1",
                    "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";",
                    "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010."
                },
                {
                    "ex_id": 6872,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'."
                },
                {
                    "ex_id": 3691,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
                    "question": "Count the number of games taken place in park \"Columbia Park\" in 1907."
                }
            ],
            "example_quality": 0.7235805001327282,
            "example_similarity": 0.5854259221329516,
            "db_id": "flight_2"
        },
        {
            "index": 220,
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many routes go from the United States to Canada? */\nSELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')\n\n/* Answer the following: How many games in total did team Boston Red Stockings attend from 2000 to 2010? */\nSELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;\n\n/* Answer the following: How many times has the student Linda Smith visited Subway? */\nSELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many United Airlines flights go to City 'Aberdeen'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6877,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
                    "question": "How many routes go from the United States to Canada?"
                },
                {
                    "ex_id": 3695,
                    "db_id": "baseball_1",
                    "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
                    "question": "How many games in total did team Boston Red Stockings attend from 2000 to 2010?"
                },
                {
                    "ex_id": 2839,
                    "db_id": "restaurant_1",
                    "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
                    "question": "How many times has the student Linda Smith visited Subway?"
                }
            ],
            "example_quality": 0.7231426696760866,
            "example_similarity": 0.5852647053455545,
            "db_id": "flight_2"
        },
        {
            "index": 221,
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Answer the following: Count the number of wines produced at Robert Biale winery. */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights that arrive in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                },
                {
                    "ex_id": 6539,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "Count the number of wines produced at Robert Biale winery."
                }
            ],
            "example_quality": 0.7243954177770999,
            "example_similarity": 0.5857614937605292,
            "db_id": "flight_2"
        },
        {
            "index": 222,
            "question": "Which city has most number of arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which origin has most number of flights? */\nSELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which major has most number of students? */\nSELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which advisor has most number of students? */\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of arriving flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 408,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which origin has most number of flights?"
                },
                {
                    "ex_id": 492,
                    "db_id": "allergy_1",
                    "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which major has most number of students?"
                },
                {
                    "ex_id": 502,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which advisor has most number of students?"
                }
            ],
            "example_quality": 0.7256368798591851,
            "example_similarity": 0.5871269324773236,
            "db_id": "flight_2"
        },
        {
            "index": 223,
            "question": "Which city has the most frequent destination airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which vocal type is the most frequently appearring type? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most frequent status of bookings? */\nSELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the product ID of the most frequently ordered item on invoices? */\nSELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has the most frequent destination airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5221,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type is the most frequently appearring type?"
                },
                {
                    "ex_id": 5161,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most frequent status of bookings?"
                },
                {
                    "ex_id": 5169,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the product ID of the most frequently ordered item on invoices?"
                }
            ],
            "example_quality": 0.7268672077521933,
            "example_similarity": 0.586640973900899,
            "db_id": "flight_2"
        },
        {
            "index": 224,
            "question": "Which city has most number of departing flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which origin has most number of flights? */\nSELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which major has most number of students? */\nSELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which advisor has most number of students? */\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of departing flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 408,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which origin has most number of flights?"
                },
                {
                    "ex_id": 492,
                    "db_id": "allergy_1",
                    "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which major has most number of students?"
                },
                {
                    "ex_id": 502,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which advisor has most number of students?"
                }
            ],
            "example_quality": 0.728086550574728,
            "example_similarity": 0.5879902949499526,
            "db_id": "flight_2"
        },
        {
            "index": 225,
            "question": "Which city is the most frequent source airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which vocal type is the most frequently appearring type? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most frequent status of bookings? */\nSELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the product ID of the most frequently ordered item on invoices? */\nSELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city is the most frequent source airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5221,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type is the most frequently appearring type?"
                },
                {
                    "ex_id": 5161,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most frequent status of bookings?"
                },
                {
                    "ex_id": 5169,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the product ID of the most frequently ordered item on invoices?"
                }
            ],
            "example_quality": 0.7292950547943959,
            "example_similarity": 0.5880453549185252,
            "db_id": "flight_2"
        },
        {
            "index": 226,
            "question": "What is the code of airport that has the highest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of route that has the highest number of deliveries. */\nSELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and address of the department that has the highest number of students. */\nSELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the area of the appelation that produces the highest number of wines before the year of 2010? */\nSELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has the highest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2857,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of route that has the highest number of deliveries."
                },
                {
                    "ex_id": 3304,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and address of the department that has the highest number of students."
                },
                {
                    "ex_id": 6564,
                    "db_id": "wine_1",
                    "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?"
                }
            ],
            "example_quality": 0.7303289835916019,
            "example_similarity": 0.5878529563563077,
            "db_id": "flight_2"
        },
        {
            "index": 227,
            "question": "What is the airport code of the airport with the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most credits? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n\n/* Answer the following: What is the location of the party with the most hosts? */\nSELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\n\n/* Answer the following: What is the name of the airline with the most routes? */\nSELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport code of the airport with the most flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1374,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
                    "question": "What is the name of the department with the most credits?"
                },
                {
                    "ex_id": 2671,
                    "db_id": "party_host",
                    "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
                    "question": "What is the location of the party with the most hosts?"
                },
                {
                    "ex_id": 6881,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the airline with the most routes?"
                }
            ],
            "example_quality": 0.7309663008445024,
            "example_similarity": 0.5893297139189536,
            "db_id": "flight_2"
        },
        {
            "index": 228,
            "question": "What is the code of airport that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What destination has the fewest number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is the name and capacity of the dorm with the fewest amount of amenities? */\nSELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is the type with the fewest games? */\nSELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has fewest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 411,
                    "db_id": "flight_1",
                    "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
                    "question": "What destination has the fewest number of flights?"
                },
                {
                    "ex_id": 5760,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
                    "question": "What is the name and capacity of the dorm with the fewest amount of amenities?"
                },
                {
                    "ex_id": 5989,
                    "db_id": "game_1",
                    "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
                    "question": "What is the type with the fewest games?"
                }
            ],
            "example_quality": 0.7321462732092195,
            "example_similarity": 0.5889632205718057,
            "db_id": "flight_2"
        },
        {
            "index": 229,
            "question": "Give the code of the airport with the least flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Show the role code with the least employees. */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Find the name and position of the head of the department with the least employees. */\nSELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the code of the airport with the least flights. */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                },
                {
                    "ex_id": 4211,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the role code with the least employees."
                },
                {
                    "ex_id": 3904,
                    "db_id": "hospital_1",
                    "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
                    "question": "Find the name and position of the head of the department with the least employees."
                }
            ],
            "example_quality": 0.7333159401384369,
            "example_similarity": 0.588734691384287,
            "db_id": "flight_2"
        },
        {
            "index": 230,
            "question": "Which airline has most number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which origin has most number of flights? */\nSELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which major has most number of students? */\nSELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which advisor has most number of students? */\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has most number of flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 408,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which origin has most number of flights?"
                },
                {
                    "ex_id": 492,
                    "db_id": "allergy_1",
                    "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which major has most number of students?"
                },
                {
                    "ex_id": 502,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which advisor has most number of students?"
                }
            ],
            "example_quality": 0.7344754360508785,
            "example_similarity": 0.5905228014217466,
            "db_id": "flight_2"
        },
        {
            "index": 231,
            "question": "What airline serves the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which location has the most corresponding counties? */\nSELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which year has the most degrees conferred? */\nSELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1\n\n/* Answer the following: What instrument is used the most? */\nSELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What airline serves the most flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2564,
                    "db_id": "county_public_safety",
                    "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which location has the most corresponding counties?"
                },
                {
                    "ex_id": 2347,
                    "db_id": "csu_1",
                    "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
                    "question": "Which year has the most degrees conferred?"
                },
                {
                    "ex_id": 5208,
                    "db_id": "music_2",
                    "query": "SELECT instrument FROM instruments GROUP BY instrument ORDER BY count(*) DESC LIMIT 1",
                    "question": "What instrument is used the most?"
                }
            ],
            "example_quality": 0.7356248930376712,
            "example_similarity": 0.5902110945693518,
            "db_id": "flight_2"
        },
        {
            "index": 232,
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it? */\nSELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)\n\n/* Answer the following: What is the name of the wrestler with the fewest days held? */\nSELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\n\n/* Answer the following: Which school has the fewest professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the abbreviation and country of the airline that has fewest number of flights? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6517,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
                    "question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?"
                },
                {
                    "ex_id": 1849,
                    "db_id": "wrestler",
                    "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
                    "question": "What is the name of the wrestler with the fewest days held?"
                },
                {
                    "ex_id": 3215,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the fewest professors?"
                }
            ],
            "example_quality": 0.7353510850904199,
            "example_similarity": 0.5895782388341503,
            "db_id": "flight_2"
        },
        {
            "index": 233,
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which semeseter and year had the fewest students? */\nSELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Which school has the fewest professors? */\nSELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What destination has the fewest number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1414,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
                    "question": "Which semeseter and year had the fewest students?"
                },
                {
                    "ex_id": 3215,
                    "db_id": "college_1",
                    "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
                    "question": "Which school has the fewest professors?"
                },
                {
                    "ex_id": 411,
                    "db_id": "flight_1",
                    "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
                    "question": "What destination has the fewest number of flights?"
                }
            ],
            "example_quality": 0.7364869173432508,
            "example_similarity": 0.5885107448062175,
            "db_id": "flight_2"
        },
        {
            "index": 234,
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of regions with two or more storms? */\nSELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the card numbers of members from Kentucky? */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Answer the following: Who has a friend that is from new york city? */\nSELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have some flight departing from airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2730,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
                    "question": "What are the names of regions with two or more storms?"
                },
                {
                    "ex_id": 5444,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "What are the card numbers of members from Kentucky?"
                },
                {
                    "ex_id": 4463,
                    "db_id": "network_2",
                    "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
                    "question": "Who has a friend that is from new york city?"
                }
            ],
            "example_quality": 0.7363072486556489,
            "example_similarity": 0.5877867814260207,
            "db_id": "flight_2"
        },
        {
            "index": 235,
            "question": "Which airlines have a flight with source airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which committees have delegates from the Democratic party? */\nSELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n\n/* Answer the following: Which job titles correspond to jobs with salaries over 9000? */\nSELECT job_title FROM jobs WHERE min_salary  >  9000\n\n/* Answer the following: Which papers have \"Stephanie Weirich\" as an author? */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with source airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2774,
                    "db_id": "election",
                    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
                    "question": "Which committees have delegates from the Democratic party?"
                },
                {
                    "ex_id": 3443,
                    "db_id": "hr_1",
                    "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
                    "question": "Which job titles correspond to jobs with salaries over 9000?"
                },
                {
                    "ex_id": 2893,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
                    "question": "Which papers have \"Stephanie Weirich\" as an author?"
                }
            ],
            "example_quality": 0.7374293454698804,
            "example_similarity": 0.5876950900848007,
            "db_id": "flight_2"
        },
        {
            "index": 236,
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the date of enrollment of the course named \"Spanish\"? */\nSELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n\n/* Answer the following: What are the phones of departments in Room 268? */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have flights arriving at airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3819,
                    "db_id": "e_learning",
                    "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
                    "question": "What is the date of enrollment of the course named \"Spanish\"?"
                },
                {
                    "ex_id": 4646,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "What are the phones of departments in Room 268?"
                },
                {
                    "ex_id": 247,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
                    "question": "What are the names of musicals with nominee \"Bob Fosse\"?"
                }
            ],
            "example_quality": 0.7385419329890758,
            "example_similarity": 0.5867467144747603,
            "db_id": "flight_2"
        },
        {
            "index": 237,
            "question": "Which airlines have a flight with destination airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which committees have delegates from the Democratic party? */\nSELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n\n/* Answer the following: Which job titles correspond to jobs with salaries over 9000? */\nSELECT job_title FROM jobs WHERE min_salary  >  9000\n\n/* Answer the following: Which papers have \"Stephanie Weirich\" as an author? */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with destination airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2774,
                    "db_id": "election",
                    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
                    "question": "Which committees have delegates from the Democratic party?"
                },
                {
                    "ex_id": 3443,
                    "db_id": "hr_1",
                    "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
                    "question": "Which job titles correspond to jobs with salaries over 9000?"
                },
                {
                    "ex_id": 2893,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
                    "question": "Which papers have \"Stephanie Weirich\" as an author?"
                }
            ],
            "example_quality": 0.7396451315840585,
            "example_similarity": 0.5866601853682817,
            "db_id": "flight_2"
        },
        {
            "index": 238,
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the cities that have 2 to 4 parks. */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Find the names of all distinct wines that have appellations in North Coast area. */\nSELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"\n\n/* Answer the following: Find all the policy type codes associated with the customer \"Dayana Robel\" */\nSELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3709,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Find all the cities that have 2 to 4 parks."
                },
                {
                    "ex_id": 6536,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"",
                    "question": "Find the names of all distinct wines that have appellations in North Coast area."
                },
                {
                    "ex_id": 1510,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"",
                    "question": "Find all the policy type codes associated with the customer \"Dayana Robel\""
                }
            ],
            "example_quality": 0.7383175781895348,
            "example_similarity": 0.5859037648859758,
            "db_id": "flight_2"
        },
        {
            "index": 239,
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When did Carole Bernhard first become a customer? */\nSELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\n\n/* Answer the following: What are the times of elimination for wrestlers with over 50 days held? */\nSELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50\n\n/* Answer the following: When did customer with first name as Carole and last name as Bernhard became a customer? */\nSELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departing flights from both APG and CVO airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6670,
                    "db_id": "driving_school",
                    "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
                    "question": "When did Carole Bernhard first become a customer?"
                },
                {
                    "ex_id": 1864,
                    "db_id": "wrestler",
                    "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
                    "question": "What are the times of elimination for wrestlers with over 50 days held?"
                },
                {
                    "ex_id": 6669,
                    "db_id": "driving_school",
                    "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
                    "question": "When did customer with first name as Carole and last name as Bernhard became a customer?"
                }
            ],
            "example_quality": 0.737159506571748,
            "example_similarity": 0.5847503067597888,
            "db_id": "flight_2"
        },
        {
            "index": 240,
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the company name and the main industry for all companies whose headquarters are not from USA. */\nSELECT company ,  main_industry FROM company WHERE headquarters != 'USA'\n\n/* Answer the following: List the enrollment for each school that does not have \"Catholic\" as denomination. */\nSELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\n\n/* Answer the following: Find the appelations that produce wines after the year of 2008 but not in Central Coast area. */\nSELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1998,
                    "db_id": "gas_company",
                    "query": "SELECT company ,  main_industry FROM company WHERE headquarters != 'USA'",
                    "question": "Show the company name and the main industry for all companies whose headquarters are not from USA."
                },
                {
                    "ex_id": 4868,
                    "db_id": "school_player",
                    "query": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
                    "question": "List the enrollment for each school that does not have \"Catholic\" as denomination."
                },
                {
                    "ex_id": 6594,
                    "db_id": "wine_1",
                    "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
                    "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area."
                }
            ],
            "example_quality": 0.7367589487986391,
            "example_similarity": 0.583738348572791,
            "db_id": "flight_2"
        },
        {
            "index": 241,
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the appelations for wines produced after 2008 but not in the Central Coast area? */\nSELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\n\n/* Answer the following: What are the names of storms that did not affect two or more regions? */\nSELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the names of the airports which are not in the country 'Iceland'? */\nSELECT name FROM airport WHERE country != 'Iceland'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departures from CVO but not from APG airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6595,
                    "db_id": "wine_1",
                    "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
                    "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?"
                },
                {
                    "ex_id": 2724,
                    "db_id": "storm_record",
                    "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
                    "question": "What are the names of storms that did not affect two or more regions?"
                },
                {
                    "ex_id": 6373,
                    "db_id": "flight_company",
                    "query": "SELECT name FROM airport WHERE country != 'Iceland'",
                    "question": "What are the names of the airports which are not in the country 'Iceland'?"
                }
            ],
            "example_quality": 0.7364478438732617,
            "example_similarity": 0.5825915475719052,
            "db_id": "flight_2"
        },
        {
            "index": 242,
            "question": "Find all airlines that have at least 10 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the cities that have 2 to 4 parks. */\nSELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: Show all the buildings that have at least 10 professors. */\nSELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10\n\n/* Answer the following: Find all movies produced in 2015 */\nSELECT title FROM movie WHERE release_year  =  2015;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have at least 10 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3709,
                    "db_id": "baseball_1",
                    "query": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "Find all the cities that have 2 to 4 parks."
                },
                {
                    "ex_id": 6740,
                    "db_id": "activity_1",
                    "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
                    "question": "Show all the buildings that have at least 10 professors."
                },
                {
                    "ex_id": 8432,
                    "db_id": "imdb",
                    "query": "SELECT title FROM movie WHERE release_year  =  2015;",
                    "question": "Find all movies produced in 2015"
                }
            ],
            "example_quality": 0.7359704355625446,
            "example_similarity": 0.5825239763680515,
            "db_id": "flight_2"
        },
        {
            "index": 243,
            "question": "Which airlines have at least 10 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which countries have at least 3 cities? */\nSELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\n\n/* Answer the following: Which wineries produce at least four wines? */\nSELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4\n\n/* Answer the following: Which clubs have one or more members whose advisor is \"1121\"? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have at least 10 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2943,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
                    "question": "Which countries have at least 3 cities?"
                },
                {
                    "ex_id": 6581,
                    "db_id": "wine_1",
                    "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
                    "question": "Which wineries produce at least four wines?"
                },
                {
                    "ex_id": 4314,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
                    "question": "Which clubs have one or more members whose advisor is \"1121\"?"
                }
            ],
            "example_quality": 0.7357481063809886,
            "example_similarity": 0.5830798142949015,
            "db_id": "flight_2"
        },
        {
            "index": 244,
            "question": "Find all airlines that have fewer than 200 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Report all majors that have less than 3 students. */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: List all the contact channel codes that were used less than 5 times. */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Answer the following: List the file size and format for all songs that have resolution lower than 800. */\nSELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have fewer than 200 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5505,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "Report all majors that have less than 3 students."
                },
                {
                    "ex_id": 6096,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "List all the contact channel codes that were used less than 5 times."
                },
                {
                    "ex_id": 3540,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
                    "question": "List the file size and format for all songs that have resolution lower than 800."
                }
            ],
            "example_quality": 0.7358918982947278,
            "example_similarity": 0.5827705743688205,
            "db_id": "flight_2"
        },
        {
            "index": 245,
            "question": "Which airlines have less than 200 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wrestlers days held less than 100? */\nSELECT Name FROM wrestler WHERE Days_held  <  100\n\n/* Answer the following: Which contact channel codes were used less than 5 times? */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Answer the following: what ACL papers have less than 5 citations ? */\nSELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have less than 200 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1871,
                    "db_id": "wrestler",
                    "query": "SELECT Name FROM wrestler WHERE Days_held  <  100",
                    "question": "What are the names of wrestlers days held less than 100?"
                },
                {
                    "ex_id": 6097,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "Which contact channel codes were used less than 5 times?"
                },
                {
                    "ex_id": 8005,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
                    "question": "what ACL papers have less than 5 citations ?"
                }
            ],
            "example_quality": 0.7357605179086419,
            "example_similarity": 0.5825107751637224,
            "db_id": "flight_2"
        },
        {
            "index": 246,
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: What is the host year of city \"Taizhou ( Zhejiang )\"? */\nSELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"\n\n/* Answer the following: What is the location name of the document \"Robin CV\"? */\nSELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of Airline \"United Airlines\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 247,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
                    "question": "What are the names of musicals with nominee \"Bob Fosse\"?"
                },
                {
                    "ex_id": 6281,
                    "db_id": "city_record",
                    "query": "SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city WHERE T1.city  =  \"Taizhou ( Zhejiang )\"",
                    "question": "What is the host year of city \"Taizhou ( Zhejiang )\"?"
                },
                {
                    "ex_id": 4222,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
                    "question": "What is the location name of the document \"Robin CV\"?"
                }
            ],
            "example_quality": 0.7368346621447855,
            "example_similarity": 0.5831606042987022,
            "db_id": "flight_2"
        },
        {
            "index": 247,
            "question": "Which flight numbers correspond to United Airlines flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which job titles correspond to jobs with salaries over 9000? */\nSELECT job_title FROM jobs WHERE min_salary  >  9000\n\n/* Answer the following: Which authors with submissions are from college \"Florida\" or \"Temple\"? */\nSELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which flight numbers correspond to United Airlines flights? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3443,
                    "db_id": "hr_1",
                    "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
                    "question": "Which job titles correspond to jobs with salaries over 9000?"
                },
                {
                    "ex_id": 5822,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"",
                    "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                }
            ],
            "example_quality": 0.73790010885675,
            "example_similarity": 0.583179225141484,
            "db_id": "flight_2"
        },
        {
            "index": 248,
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the card numbers of members from Kentucky? */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Answer the following: What is the gender of the teacher with last name \"Medhurst\"? */\nSELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"\n\n/* Answer the following: What is the first name of the author with last name \"Ueno\"? */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5444,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "What are the card numbers of members from Kentucky?"
                },
                {
                    "ex_id": 3097,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"",
                    "question": "What is the gender of the teacher with last name \"Medhurst\"?"
                },
                {
                    "ex_id": 2915,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "What is the first name of the author with last name \"Ueno\"?"
                }
            ],
            "example_quality": 0.7386209417511448,
            "example_similarity": 0.5832291045999597,
            "db_id": "flight_2"
        },
        {
            "index": 249,
            "question": "Give the flight numbers of flights leaving from APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: Show the players from college UCLA. */\nSELECT Player FROM match_season WHERE College  =  \"UCLA\"\n\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                },
                {
                    "ex_id": 1061,
                    "db_id": "match_season",
                    "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
                    "question": "Show the players from college UCLA."
                },
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                }
            ],
            "example_quality": 0.7396706568445137,
            "example_similarity": 0.5830672579667442,
            "db_id": "flight_2"
        },
        {
            "index": 250,
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the date of enrollment of the course named \"Spanish\"? */\nSELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: What are the login names of the students with family name \"Ward\"? */\nSELECT login_name FROM Students WHERE family_name  =  \"Ward\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3819,
                    "db_id": "e_learning",
                    "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
                    "question": "What is the date of enrollment of the course named \"Spanish\"?"
                },
                {
                    "ex_id": 247,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
                    "question": "What are the names of musicals with nominee \"Bob Fosse\"?"
                },
                {
                    "ex_id": 3789,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
                    "question": "What are the login names of the students with family name \"Ward\"?"
                }
            ],
            "example_quality": 0.7407119742171356,
            "example_similarity": 0.5833598255361844,
            "db_id": "flight_2"
        },
        {
            "index": 251,
            "question": "Give the flight numbers of flights landing at APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the players from college UCLA. */\nSELECT Player FROM match_season WHERE College  =  \"UCLA\"\n\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: Give the title of the course offered in Chandler during the Fall of 2010. */\nSELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights landing at APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1061,
                    "db_id": "match_season",
                    "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
                    "question": "Show the players from college UCLA."
                },
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                },
                {
                    "ex_id": 1430,
                    "db_id": "college_2",
                    "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
                    "question": "Give the title of the course offered in Chandler during the Fall of 2010."
                }
            ],
            "example_quality": 0.741744994240175,
            "example_similarity": 0.582988655228994,
            "db_id": "flight_2"
        },
        {
            "index": 252,
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the card numbers of members from Kentucky? */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Answer the following: What is the gender of the teacher with last name \"Medhurst\"? */\nSELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"\n\n/* Answer the following: What is the first name of the author with last name \"Ueno\"? */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from City \"Aberdeen \"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5444,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "What are the card numbers of members from Kentucky?"
                },
                {
                    "ex_id": 3097,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"",
                    "question": "What is the gender of the teacher with last name \"Medhurst\"?"
                },
                {
                    "ex_id": 2915,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "What is the first name of the author with last name \"Ueno\"?"
                }
            ],
            "example_quality": 0.7424391278609151,
            "example_similarity": 0.583038499179845,
            "db_id": "flight_2"
        },
        {
            "index": 253,
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: Show the players from college UCLA. */\nSELECT Player FROM match_season WHERE College  =  \"UCLA\"\n\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                },
                {
                    "ex_id": 1061,
                    "db_id": "match_season",
                    "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
                    "question": "Show the players from college UCLA."
                },
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                }
            ],
            "example_quality": 0.7434571550235202,
            "example_similarity": 0.5828799647677875,
            "db_id": "flight_2"
        },
        {
            "index": 254,
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the date of enrollment of the course named \"Spanish\"? */\nSELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: What are the login names of the students with family name \"Ward\"? */\nSELECT login_name FROM Students WHERE family_name  =  \"Ward\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at City \"Aberdeen\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3819,
                    "db_id": "e_learning",
                    "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
                    "question": "What is the date of enrollment of the course named \"Spanish\"?"
                },
                {
                    "ex_id": 247,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
                    "question": "What are the names of musicals with nominee \"Bob Fosse\"?"
                },
                {
                    "ex_id": 3789,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
                    "question": "What are the login names of the students with family name \"Ward\"?"
                }
            ],
            "example_quality": 0.7444671662242148,
            "example_similarity": 0.5831686623487284,
            "db_id": "flight_2"
        },
        {
            "index": 255,
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: Show the players from college UCLA. */\nSELECT Player FROM match_season WHERE College  =  \"UCLA\"\n\n/* Answer the following: Give the title of the prerequisite to the course International Finance. */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights arriving in Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                },
                {
                    "ex_id": 1061,
                    "db_id": "match_season",
                    "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"",
                    "question": "Show the players from college UCLA."
                },
                {
                    "ex_id": 1424,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
                    "question": "Give the title of the prerequisite to the course International Finance."
                }
            ],
            "example_quality": 0.7446849420429436,
            "example_similarity": 0.5831240374837896,
            "db_id": "flight_2"
        },
        {
            "index": 256,
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of companies whose industry is \"Banking\" or \"Conglomerate\", */\nSELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"\n\n/* Answer the following: Find the number of games taken place in city Atlanta in 2000. */\nSELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';\n\n/* Answer the following: Find the number of papers published by the institution \"University of Pennsylvania\". */\nSELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the number of flights landing in the city of Aberdeen or Abilene. */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4580,
                    "db_id": "company_office",
                    "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
                    "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\","
                },
                {
                    "ex_id": 3693,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
                    "question": "Find the number of games taken place in city Atlanta in 2000."
                },
                {
                    "ex_id": 2889,
                    "db_id": "icfp_1",
                    "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Pennsylvania\"",
                    "question": "Find the number of papers published by the institution \"University of Pennsylvania\"."
                }
            ],
            "example_quality": 0.7455520581547549,
            "example_similarity": 0.5829658938917958,
            "db_id": "flight_2"
        },
        {
            "index": 257,
            "question": "How many flights land in Aberdeen or Abilene?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights land in Aberdeen or Abilene? */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                },
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                },
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.7465421279673824,
            "example_similarity": 0.5830321744603102,
            "db_id": "flight_2"
        },
        {
            "index": 258,
            "question": "Find the name of airports which do not have any flight in and out.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of dorms that do not have any amenity */\nSELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n\n/* Answer the following: Show names of parties that does not have any members. */\nSELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\n\n/* Answer the following: List the title of films that do not have any market estimation. */\nSELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the name of airports which do not have any flight in and out. */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5693,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
                    "question": "Find the name of dorms that do not have any amenity"
                },
                {
                    "ex_id": 2064,
                    "db_id": "party_people",
                    "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
                    "question": "Show names of parties that does not have any members."
                },
                {
                    "ex_id": 4147,
                    "db_id": "film_rank",
                    "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                    "question": "List the title of films that do not have any market estimation."
                }
            ],
            "example_quality": 0.7465045309801567,
            "example_similarity": 0.5826678446667405,
            "db_id": "flight_2"
        },
        {
            "index": 259,
            "question": "Which airports do not have departing or arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which ministers are not a part of the Progress Party? */\nSELECT minister FROM party WHERE party_name != 'Progress Party'\n\n/* Answer the following: Which parties did not have any delegates in elections? */\nSELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)\n\n/* Answer the following: What are the names of the ships that are not involved in any missions? */\nSELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airports do not have departing or arriving flights? */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2051,
                    "db_id": "party_people",
                    "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'",
                    "question": "Which ministers are not a part of the Progress Party?"
                },
                {
                    "ex_id": 2798,
                    "db_id": "election",
                    "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)",
                    "question": "Which parties did not have any delegates in elections?"
                },
                {
                    "ex_id": 4026,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)",
                    "question": "What are the names of the ships that are not involved in any missions?"
                }
            ],
            "example_quality": 0.7459253290384192,
            "example_similarity": 0.5816170648534166,
            "db_id": "flight_2"
        },
        {
            "index": 260,
            "question": "How many employees are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many employees are there? */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.746742282901092,
            "example_similarity": 0.5832262299885957,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 261,
            "question": "Count the number of employees",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of regions. */\nSELECT count(*) FROM region\n\n/* Answer the following: Count the number of films. */\nSELECT count(*) FROM film\n\n/* Answer the following: Count the number of cinemas. */\nSELECT count(*) FROM cinema\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2692,
                    "db_id": "storm_record",
                    "query": "SELECT count(*) FROM region",
                    "question": "Count the number of regions."
                },
                {
                    "ex_id": 4114,
                    "db_id": "film_rank",
                    "query": "SELECT count(*) FROM film",
                    "question": "Count the number of films."
                },
                {
                    "ex_id": 1934,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "Count the number of cinemas."
                }
            ],
            "example_quality": 0.7477126189819308,
            "example_similarity": 0.5841844947523687,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 262,
            "question": "Sort employee names by their age in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Sort the apartment numbers in ascending order of room count. */\nSELECT apt_number FROM Apartments ORDER BY room_count ASC\n\n/* Answer the following: List the names of gymnasts in ascending order by their heights. */\nSELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort employee names by their age in ascending order. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1252,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
                    "question": "Sort the apartment numbers in ascending order of room count."
                },
                {
                    "ex_id": 1767,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
                    "question": "List the names of gymnasts in ascending order by their heights."
                },
                {
                    "ex_id": 1385,
                    "db_id": "college_2",
                    "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
                    "question": "Find the name of the students and their department names sorted by their total credits in ascending order."
                }
            ],
            "example_quality": 0.7486755479171143,
            "example_similarity": 0.5841910326956705,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 263,
            "question": "List the names of employees and sort in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Sort the apartment numbers in ascending order of room count. */\nSELECT apt_number FROM Apartments ORDER BY room_count ASC\n\n/* Answer the following: List the titles of the books in ascending order of issues. */\nSELECT Title FROM book ORDER BY Issues ASC\n\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: List the names of employees and sort in ascending order of age. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1252,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC",
                    "question": "Sort the apartment numbers in ascending order of room count."
                },
                {
                    "ex_id": 216,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book ORDER BY Issues ASC",
                    "question": "List the titles of the books in ascending order of issues."
                },
                {
                    "ex_id": 651,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC",
                    "question": "List the names of editors in ascending order of age."
                }
            ],
            "example_quality": 0.7496311541987983,
            "example_similarity": 0.5849433530354257,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 264,
            "question": "What is the number of employees from each city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the order date of each booking? */\nSELECT Order_Date FROM BOOKINGS\n\n/* Answer the following: What are the numbers of races for each constructor id? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Answer the following: What are the names and capitals of each country? */\nSELECT Country_name ,  Capital FROM country\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the number of employees from each city? */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5094,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Order_Date FROM BOOKINGS",
                    "question": "What is the order date of each booking?"
                },
                {
                    "ex_id": 2190,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "What are the numbers of races for each constructor id?"
                },
                {
                    "ex_id": 1056,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  Capital FROM country",
                    "question": "What are the names and capitals of each country?"
                }
            ],
            "example_quality": 0.7488960193554527,
            "example_similarity": 0.5854827737714674,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 265,
            "question": "Count the number of employees for each city.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the country id and corresponding count of cities in each country. */\nSELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\n\n/* Answer the following: For each product with some problems, list the count of problems and the product id. */\nSELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\n\n/* Answer the following: Count the number of voting records for each election cycle. */\nSELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees for each city. */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3457,
                    "db_id": "hr_1",
                    "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
                    "question": "Give the country id and corresponding count of cities in each country."
                },
                {
                    "ex_id": 5378,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                    "question": "For each product with some problems, list the count of problems and the product id."
                },
                {
                    "ex_id": 5508,
                    "db_id": "voter_2",
                    "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
                    "question": "Count the number of voting records for each election cycle."
                }
            ],
            "example_quality": 0.7498435815465642,
            "example_similarity": 0.5856872691588911,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 266,
            "question": "Which cities do more than one employee under age 30 come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of captains that have either the rank Midshipman or Lieutenant? */\nSELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\n\n/* Answer the following: Which directors had a movie in either 1999 or 2000? */\nSELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000\n\n/* Answer the following: Which clubs have one or more members whose advisor is \"1121\"? */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which cities do more than one employee under age 30 come from? */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6236,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'",
                    "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?"
                },
                {
                    "ex_id": 6992,
                    "db_id": "culture_company",
                    "query": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000",
                    "question": "Which directors had a movie in either 1999 or 2000?"
                },
                {
                    "ex_id": 4314,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
                    "question": "Which clubs have one or more members whose advisor is \"1121\"?"
                }
            ],
            "example_quality": 0.7484067525137709,
            "example_similarity": 0.584703203321527,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 267,
            "question": "Find the cities that have more than one employee under age 30.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the ships that have more than one captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Answer the following: Find the name and email for the users who have more than one follower. */\nSELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n\n/* Answer the following: Find the names of users who have more than one tweet. */\nSELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the cities that have more than one employee under age 30. */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6259,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
                    "question": "Find the name of the ships that have more than one captain."
                },
                {
                    "ex_id": 287,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
                    "question": "Find the name and email for the users who have more than one follower."
                },
                {
                    "ex_id": 288,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the names of users who have more than one tweet."
                }
            ],
            "example_quality": 0.7488808845268278,
            "example_similarity": 0.5850689326767889,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 268,
            "question": "Find the number of shops in each location.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of stores in each city. */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Answer the following: Find the total number of students in each department. */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: Find each student's first name. */\nSELECT DISTINCT fname FROM student\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of shops in each location. */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4923,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
                    "question": "Find the number of stores in each city."
                },
                {
                    "ex_id": 1411,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "Find the total number of students in each department."
                },
                {
                    "ex_id": 4258,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT fname FROM student",
                    "question": "Find each student's first name."
                }
            ],
            "example_quality": 0.7489568169324395,
            "example_similarity": 0.5857465361618258,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 269,
            "question": "How many shops are there in each location?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are there in each major? */\nSELECT count(*) ,  major FROM student GROUP BY major\n\n/* Answer the following: how many airports are there in each country? */\nSELECT count(*) ,  country FROM airport GROUP BY country\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many shops are there in each location? */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5726,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  major FROM student GROUP BY major",
                    "question": "How many students are there in each major?"
                },
                {
                    "ex_id": 6383,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) ,  country FROM airport GROUP BY country",
                    "question": "how many airports are there in each country?"
                },
                {
                    "ex_id": 1412,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "How many students are in each department?"
                }
            ],
            "example_quality": 0.7498900629661479,
            "example_similarity": 0.5871488277112724,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 270,
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the largest state that borders the state with the highest population */\nSELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );\n\n/* Answer the following: which state 's capital city is the largest */\nSELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );\n\n/* Answer the following: Find the name of the user who has the largest number of followers. */\nSELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the manager name and district of the shop whose number of products is the largest. */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7474,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
                    "question": "what is the largest state that borders the state with the highest population"
                },
                {
                    "ex_id": 7410,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
                    "question": "which state 's capital city is the largest"
                },
                {
                    "ex_id": 291,
                    "db_id": "twitter_1",
                    "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
                    "question": "Find the name of the user who has the largest number of followers."
                }
            ],
            "example_quality": 0.7488102232267672,
            "example_similarity": 0.5866603622675074,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 271,
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the customer who made the order of the largest amount of goods. */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)\n\n/* Answer the following: what is the capital city of the largest state in the us */\nSELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: which is the density of the state that the largest river in the united states runs through */\nSELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the manager name and district of the shop that sells the largest number of products? */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6109,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
                    "question": "Find the name of the customer who made the order of the largest amount of goods."
                },
                {
                    "ex_id": 7517,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "what is the capital city of the largest state in the us"
                },
                {
                    "ex_id": 7427,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
                    "question": "which is the density of the state that the largest river in the united states runs through"
                }
            ],
            "example_quality": 0.7470395785552343,
            "example_similarity": 0.5858791650203552,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 272,
            "question": "find the minimum and maximum number of products of all stores.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minimum, maximum, average price for all products. */\nSELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products\n\n/* Answer the following: Give me the minimum and maximum bathroom count among all the apartments. */\nSELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments\n\n/* Answer the following: Show the minimum, maximum, and average age for all people. */\nSELECT min(age) ,  max(age) ,  avg(age) FROM people\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the minimum and maximum number of products of all stores. */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5663,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products",
                    "question": "Show the minimum, maximum, average price for all products."
                },
                {
                    "ex_id": 1208,
                    "db_id": "apartment_rentals",
                    "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments",
                    "question": "Give me the minimum and maximum bathroom count among all the apartments."
                },
                {
                    "ex_id": 1639,
                    "db_id": "wedding",
                    "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
                    "question": "Show the minimum, maximum, and average age for all people."
                }
            ],
            "example_quality": 0.7472487035187352,
            "example_similarity": 0.5850868532753184,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 273,
            "question": "What are the minimum and maximum number of products across all the shops?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum, mean, and maximum age across all students? */\nSELECT min(age) ,  avg(age) ,  max(age) FROM Student\n\n/* Answer the following: What is the minimum, maximum, and average market value for every company? */\nSELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company\n\n/* Answer the following: What is the minimum, maximum, and average seating for all tracks. */\nSELECT min(seating) ,  max(seating) ,  avg(seating) FROM track\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the minimum and maximum number of products across all the shops? */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 485,
                    "db_id": "allergy_1",
                    "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
                    "question": "What is the minimum, mean, and maximum age across all students?"
                },
                {
                    "ex_id": 2003,
                    "db_id": "gas_company",
                    "query": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
                    "question": "What is the minimum, maximum, and average market value for every company?"
                },
                {
                    "ex_id": 756,
                    "db_id": "race_track",
                    "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track",
                    "question": "What is the minimum, maximum, and average seating for all tracks."
                }
            ],
            "example_quality": 0.7470971784250445,
            "example_similarity": 0.5845755558109497,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 274,
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the method, date and amount of all the payments, in ascending order of date. */\nSELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n\n/* Answer the following: Show card number, name, and hometown for all members in a descending order of level. */\nSELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC\n\n/* Answer the following: Show theme and year for all exhibitions in an descending order of ticket price. */\nSELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Return the name, location and district of all shops in descending order of number of products. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3855,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
                    "question": "List the method, date and amount of all the payments, in ascending order of date."
                },
                {
                    "ex_id": 5417,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
                    "question": "Show card number, name, and hometown for all members in a descending order of level."
                },
                {
                    "ex_id": 1678,
                    "db_id": "theme_gallery",
                    "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC",
                    "question": "Show theme and year for all exhibitions in an descending order of ticket price."
                }
            ],
            "example_quality": 0.7477498380874564,
            "example_similarity": 0.5845124617557239,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 275,
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Sort the list of names and costs of all procedures in the descending order of cost. */\nSELECT name ,  cost FROM procedures ORDER BY cost DESC\n\n/* Answer the following: Sort all the industries in descending order of the count of companies in each industry */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC\n\n/* Answer the following: List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name. */\nSELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3970,
                    "db_id": "hospital_1",
                    "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC",
                    "question": "Sort the list of names and costs of all procedures in the descending order of cost."
                },
                {
                    "ex_id": 4573,
                    "db_id": "company_office",
                    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
                    "question": "Sort all the industries in descending order of the count of companies in each industry"
                },
                {
                    "ex_id": 6514,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
                    "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name."
                }
            ],
            "example_quality": 0.7477068595341594,
            "example_similarity": 0.5842370416396107,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 276,
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and budget of departments whose budgets are more than the average budget. */\nSELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)\n\n/* Answer the following: Show the crime rate of counties with a city having white percentage more than 90. */\nSELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90\n\n/* Answer the following: Find the count of universities whose campus fee is greater than the average campus fee. */\nSELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of stores whose number products is more than the average number of products. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1359,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
                    "question": "Find the name and budget of departments whose budgets are more than the average budget."
                },
                {
                    "ex_id": 2559,
                    "db_id": "county_public_safety",
                    "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90",
                    "question": "Show the crime rate of counties with a city having white percentage more than 90."
                },
                {
                    "ex_id": 2341,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
                    "question": "Find the count of universities whose campus fee is greater than the average campus fee."
                }
            ],
            "example_quality": 0.7476754400710619,
            "example_similarity": 0.5841431876240082,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 277,
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the mascots for schools with enrollments above the average? */\nSELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)\n\n/* Answer the following: Select the names of manufacturer whose products have an average price higher than or equal to $150. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150\n\n/* Answer the following: What is the theme and artist name for the exhibition with a ticket price higher than the average? */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops' number products is above the average? Give me the shop names. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1890,
                    "db_id": "school_finance",
                    "query": "SELECT mascot FROM school WHERE enrollment  >  (SELECT avg(enrollment) FROM school)",
                    "question": "What are the mascots for schools with enrollments above the average?"
                },
                {
                    "ex_id": 5345,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
                    "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150."
                },
                {
                    "ex_id": 1674,
                    "db_id": "theme_gallery",
                    "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
                    "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?"
                }
            ],
            "example_quality": 0.748010834547863,
            "example_similarity": 0.5833536169061071,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 278,
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name and country corresponding to the artist who has had the most exhibitions. */\nSELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which department offers the most credits all together? */\nSELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the name of employee who was awarded the most times in the evaluation. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1671,
                    "db_id": "theme_gallery",
                    "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name and country corresponding to the artist who has had the most exhibitions."
                },
                {
                    "ex_id": 263,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the nominee who has been nominated the greatest number of times."
                },
                {
                    "ex_id": 3241,
                    "db_id": "college_1",
                    "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
                    "question": "Which department offers the most credits all together?"
                }
            ],
            "example_quality": 0.7489172703948132,
            "example_similarity": 0.5822985437878956,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 279,
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the aircraft that has won an award the most? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Who is the nominee who has been nominated for the most musicals? */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which submission received the highest score in acceptance result. Show me the result. */\nSELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the most awards in evaluations? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4825,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the aircraft that has won an award the most?"
                },
                {
                    "ex_id": 264,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Who is the nominee who has been nominated for the most musicals?"
                },
                {
                    "ex_id": 5836,
                    "db_id": "workshop_paper",
                    "query": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
                    "question": "Which submission received the highest score in acceptance result. Show me the result."
                }
            ],
            "example_quality": 0.7493691798199213,
            "example_similarity": 0.5815926021342176,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 280,
            "question": "Find the name of the employee who got the highest one time bonus.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the author who achieved the highest score in a submission. */\nSELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Which submission received the highest score in acceptance result. Show me the result. */\nSELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the employee who got the highest one time bonus. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5826,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
                    "question": "Find the author who achieved the highest score in a submission."
                },
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                },
                {
                    "ex_id": 5836,
                    "db_id": "workshop_paper",
                    "query": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1",
                    "question": "Which submission received the highest score in acceptance result. Show me the result."
                }
            ],
            "example_quality": 0.750264289891993,
            "example_similarity": 0.5813975415506681,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 281,
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of the county with the biggest population. */\nSELECT County_name FROM county ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: What is the name of the perpetrator with the biggest weight. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1\n\n/* Answer the following: Which county has the largest population? Give me the name of the county. */\nSELECT County_name FROM county ORDER BY Population DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the biggest bonus? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2783,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
                    "question": "Show the name of the county with the biggest population."
                },
                {
                    "ex_id": 2312,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
                    "question": "What is the name of the perpetrator with the biggest weight."
                },
                {
                    "ex_id": 2784,
                    "db_id": "election",
                    "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1",
                    "question": "Which county has the largest population? Give me the name of the county."
                }
            ],
            "example_quality": 0.751153029073872,
            "example_similarity": 0.5808442617797616,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 282,
            "question": "Find the names of employees who never won any award in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the countries that have never participated in any competition with Friendly type. */\nSELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'\n\n/* Answer the following: List the name of physicians who never took any appointment. */\nSELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID\n\n/* Answer the following: What are the countries that have never participated in any friendly-type competitions? */\nSELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of employees who never won any award in the evaluation. */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3388,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
                    "question": "Find the countries that have never participated in any competition with Friendly type."
                },
                {
                    "ex_id": 3913,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
                    "question": "List the name of physicians who never took any appointment."
                },
                {
                    "ex_id": 3389,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
                    "question": "What are the countries that have never participated in any friendly-type competitions?"
                }
            ],
            "example_quality": 0.7506958276311356,
            "example_similarity": 0.5803854358262969,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 283,
            "question": "What are the names of the employees who never received any evaluation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the members that have never registered at any branch? */\nSELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)\n\n/* Answer the following: What are the countries that have never participated in any friendly-type competitions? */\nSELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'\n\n/* Answer the following: What are the emails and phone numbers of custoemrs who have never filed a complaint? */\nSELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the names of the employees who never received any evaluation? */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5426,
                    "db_id": "shop_membership",
                    "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
                    "question": "What are the names of the members that have never registered at any branch?"
                },
                {
                    "ex_id": 3389,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
                    "question": "What are the countries that have never participated in any friendly-type competitions?"
                },
                {
                    "ex_id": 5784,
                    "db_id": "customer_complaints",
                    "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
                    "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?"
                }
            ],
            "example_quality": 0.7511841423352266,
            "example_similarity": 0.5802746025118688,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 284,
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how high is the highest point in the largest state */\nSELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: what is the lowest point of the state with the largest area */\nSELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Answer the following: what is the highest point of the state with the largest area */\nSELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the name of the shop that is hiring the largest number of employees? */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7563,
                    "db_id": "geo",
                    "query": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "how high is the highest point in the largest state"
                },
                {
                    "ex_id": 7531,
                    "db_id": "geo",
                    "query": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the lowest point of the state with the largest area"
                },
                {
                    "ex_id": 7537,
                    "db_id": "geo",
                    "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the highest point of the state with the largest area"
                }
            ],
            "example_quality": 0.7497556367145024,
            "example_similarity": 0.5802719479155867,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 285,
            "question": "Which shop has the most employees? Give me the shop name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which paper has the most authors? Give me the paper title. */\nSELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n\n/* Answer the following: Which customer have the most policies? Give me the customer details. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which party had the most hosts? Give me the party location. */\nSELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shop has the most employees? Give me the shop name. */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2914,
                    "db_id": "icfp_1",
                    "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
                    "question": "Which paper has the most authors? Give me the paper title."
                },
                {
                    "ex_id": 1541,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer have the most policies? Give me the customer details."
                },
                {
                    "ex_id": 2672,
                    "db_id": "party_host",
                    "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
                    "question": "Which party had the most hosts? Give me the party location."
                }
            ],
            "example_quality": 0.7494831658813826,
            "example_similarity": 0.581410509167679,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 286,
            "question": "Find the name of the shops that do not hire any employee.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of scientists who are not assigned to any project. */\nSELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Answer the following: Find the famous titles of artists that do not have any volume. */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Answer the following: Show the name of buildings that do not have any institution. */\nSELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the shops that do not hire any employee. */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6508,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "Find the name of scientists who are not assigned to any project."
                },
                {
                    "ex_id": 6190,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
                    "question": "Find the famous titles of artists that do not have any volume."
                },
                {
                    "ex_id": 1921,
                    "db_id": "protein_institute",
                    "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)",
                    "question": "Show the name of buildings that do not have any institution."
                }
            ],
            "example_quality": 0.7503590988678114,
            "example_similarity": 0.5818820452939104,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 287,
            "question": "Which shops run with no employees? Find the shop names",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which faculty do not participate in any activity? Find their faculty ids. */\nSELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in\n\n/* Answer the following: Which employees do not destroy any document? Find their employee ids. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Find the names of the swimmers who have no record. */\nSELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops run with no employees? Find the shop names */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6773,
                    "db_id": "activity_1",
                    "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
                    "question": "Which faculty do not participate in any activity? Find their faculty ids."
                },
                {
                    "ex_id": 4248,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Which employees do not destroy any document? Find their employee ids."
                },
                {
                    "ex_id": 5627,
                    "db_id": "swimming",
                    "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
                    "question": "Find the names of the swimmers who have no record."
                }
            ],
            "example_quality": 0.7501449169515084,
            "example_similarity": 0.5812200330510411,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 288,
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of stores in each city. */\nSELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city\n\n/* Answer the following: Show the station name and number of trains in each station. */\nSELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id\n\n/* Answer the following: display the department name, city, and state province for each department. */\nSELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of employees hired in each shop; show the shop name as well. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4923,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
                    "question": "Find the number of stores in each city."
                },
                {
                    "ex_id": 6613,
                    "db_id": "train_station",
                    "query": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id",
                    "question": "Show the station name and number of trains in each station."
                },
                {
                    "ex_id": 3522,
                    "db_id": "hr_1",
                    "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
                    "question": "display the department name, city, and state province for each department."
                }
            ],
            "example_quality": 0.7502408643849331,
            "example_similarity": 0.5809954424095536,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 289,
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the characters and durations for each actor. */\nSELECT Character ,  Duration FROM actor\n\n/* Answer the following: For each station, return its longitude and the average duration of trips that started from the station. */\nSELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id\n\n/* Answer the following: For each college, return the college name and the count of authors with submissions from that college. */\nSELECT College ,  COUNT(*) FROM submission GROUP BY College\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: For each shop, return the number of employees working there and the name of the shop. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 240,
                    "db_id": "musical",
                    "query": "SELECT Character ,  Duration FROM actor",
                    "question": "Return the characters and durations for each actor."
                },
                {
                    "ex_id": 190,
                    "db_id": "bike_1",
                    "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
                    "question": "For each station, return its longitude and the average duration of trips that started from the station."
                },
                {
                    "ex_id": 5828,
                    "db_id": "workshop_paper",
                    "query": "SELECT College ,  COUNT(*) FROM submission GROUP BY College",
                    "question": "For each college, return the college name and the count of authors with submissions from that college."
                }
            ],
            "example_quality": 0.75015870127805,
            "example_similarity": 0.5809659210452157,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 290,
            "question": "What is total bonus given in all evaluations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is total amount claimed summed across all the claims? */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: What is the total student capacity of all dorms? */\nSELECT sum(student_capacity) FROM dorm\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is total bonus given in all evaluations? */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3898,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "What is total amount claimed summed across all the claims?"
                },
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                },
                {
                    "ex_id": 5684,
                    "db_id": "dorm_1",
                    "query": "SELECT sum(student_capacity) FROM dorm",
                    "question": "What is the total student capacity of all dorms?"
                }
            ],
            "example_quality": 0.7510202229977808,
            "example_similarity": 0.5810879553393905,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 291,
            "question": "Find the total amount of bonus given in all the evaluations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total claimed amount of all the claims. */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Answer the following: Compute the total amount of settlement across all the settlements. */\nSELECT sum(Amount_Settled) FROM Settlements\n\n/* Answer the following: Show all customer ids and the number of cards owned by each customer. */\nSELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the total amount of bonus given in all the evaluations. */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3897,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "Find the total claimed amount of all the claims."
                },
                {
                    "ex_id": 3874,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Settled) FROM Settlements",
                    "question": "Compute the total amount of settlement across all the settlements."
                },
                {
                    "ex_id": 712,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id",
                    "question": "Show all customer ids and the number of cards owned by each customer."
                }
            ],
            "example_quality": 0.7512590291748086,
            "example_similarity": 0.5808386737352929,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 292,
            "question": "Give me all the information about hiring.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the information about election. */\nSELECT * FROM election\n\n/* Answer the following: Display all the information about the department Marketing. */\nSELECT * FROM  departments WHERE department_name  =  'Marketing'\n\n/* Answer the following: display all the information about the department Marketing. */\nSELECT * FROM  departments WHERE department_name  =  'Marketing'\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Give me all the information about hiring. */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2757,
                    "db_id": "election",
                    "query": "SELECT * FROM election",
                    "question": "Show all the information about election."
                },
                {
                    "ex_id": 3414,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
                    "question": "Display all the information about the department Marketing."
                },
                {
                    "ex_id": 3484,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
                    "question": "display all the information about the department Marketing."
                }
            ],
            "example_quality": 0.7513498468070104,
            "example_similarity": 0.5808558652151672,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 293,
            "question": "What is all the information about hiring?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is all the information about the basketball match? */\nSELECT * FROM basketball_match\n\n/* Answer the following: What is all the information regarding employees who are managers? */\nSELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id\n\n/* Answer the following: What is all the information about all people? */\nSELECT * FROM people\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is all the information about hiring? */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1021,
                    "db_id": "university_basketball",
                    "query": "SELECT * FROM basketball_match",
                    "question": "What is all the information about the basketball match?"
                },
                {
                    "ex_id": 3483,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
                    "question": "What is all the information regarding employees who are managers?"
                },
                {
                    "ex_id": 2434,
                    "db_id": "candidate_poll",
                    "query": "SELECT * FROM people",
                    "question": "What is all the information about all people?"
                }
            ],
            "example_quality": 0.7517109151016721,
            "example_similarity": 0.5814584302055844,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 294,
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components. */\nSELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10\n\n/* Answer the following: What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000? */\nSELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000\n\n/* Answer the following: Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200. */\nSELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3405,
                    "db_id": "manufacturer",
                    "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
                    "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components."
                },
                {
                    "ex_id": 4028,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000",
                    "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?"
                },
                {
                    "ex_id": 1145,
                    "db_id": "climbing",
                    "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
                    "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200."
                }
            ],
            "example_quality": 0.7525554357986052,
            "example_similarity": 0.5807548409008143,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 295,
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200. */\nSELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200\n\n/* Answer the following: Give the ids and names of products with price lower than 600 or higher than 900. */\nSELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900\n\n/* Answer the following: Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees. */\nSELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1145,
                    "db_id": "climbing",
                    "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200",
                    "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200."
                },
                {
                    "ex_id": 4771,
                    "db_id": "department_store",
                    "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
                    "question": "Give the ids and names of products with price lower than 600 or higher than 900."
                },
                {
                    "ex_id": 1317,
                    "db_id": "performance_attendance",
                    "query": "SELECT LOCATION FROM performance WHERE Attendance  >  2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance  <  1000",
                    "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees."
                }
            ],
            "example_quality": 0.7527857998145855,
            "example_similarity": 0.5800836672729798,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 296,
            "question": "How many different store locations are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different advisors are listed? */\nSELECT count(DISTINCT advisor) FROM Student\n\n/* Answer the following: How many different jobs are listed? */\nSELECT count(DISTINCT job) FROM Person\n\n/* Answer the following: How many different classes are there? */\nSELECT count(DISTINCT class_code) FROM CLASS\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many different store locations are there? */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 464,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT advisor) FROM Student",
                    "question": "How many different advisors are listed?"
                },
                {
                    "ex_id": 4408,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT job) FROM Person",
                    "question": "How many different jobs are listed?"
                },
                {
                    "ex_id": 3228,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT class_code) FROM CLASS",
                    "question": "How many different classes are there?"
                }
            ],
            "example_quality": 0.7536209829233199,
            "example_similarity": 0.5806107870156763,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 297,
            "question": "Count the number of distinct store locations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of departments which offer courses. */\nSELECT count(DISTINCT dept_name) FROM course\n\n/* Answer the following: Count the number of cinemas. */\nSELECT count(*) FROM cinema\n\n/* Answer the following: Count the number of regions. */\nSELECT count(*) FROM region\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of distinct store locations. */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1340,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT dept_name) FROM course",
                    "question": "Count the number of departments which offer courses."
                },
                {
                    "ex_id": 1934,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "Count the number of cinemas."
                },
                {
                    "ex_id": 2692,
                    "db_id": "storm_record",
                    "query": "SELECT count(*) FROM region",
                    "question": "Count the number of regions."
                }
            ],
            "example_quality": 0.7541699582894592,
            "example_similarity": 0.580951552654742,
            "db_id": "employee_hire_evaluation"
        },
        {
            "index": 298,
            "question": "How many documents do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Answer the following: How many faculty do we have? */\nSELECT count(*) FROM Faculty\n\n/* Answer the following: How many activities do we have? */\nSELECT count(*) FROM Activity\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents do we have? */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                },
                {
                    "ex_id": 6716,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty",
                    "question": "How many faculty do we have?"
                },
                {
                    "ex_id": 6768,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Activity",
                    "question": "How many activities do we have?"
                }
            ],
            "example_quality": 0.7549948913153335,
            "example_similarity": 0.5823577554981825,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 299,
            "question": "Count the number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents. */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 236,
                    "db_id": "musical",
                    "query": "SELECT count(*) FROM actor",
                    "question": "Count the number of actors."
                },
                {
                    "ex_id": 669,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Count the number of accounts."
                }
            ],
            "example_quality": 0.7558143063945464,
            "example_similarity": 0.5837545523025363,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 300,
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first name middle name and last name of all staff. */\nSELECT first_name ,  middle_name ,  last_name FROM Staff;\n\n/* Answer the following: List the ids, names and market shares of all browsers. */\nSELECT id ,  name ,  market_share FROM browser\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List document IDs, document names, and document descriptions for all documents. */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6629,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
                    "question": "List the first name middle name and last name of all staff."
                },
                {
                    "ex_id": 1829,
                    "db_id": "browser_web",
                    "query": "SELECT id ,  name ,  market_share FROM browser",
                    "question": "List the ids, names and market shares of all browsers."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                }
            ],
            "example_quality": 0.7566282587065646,
            "example_similarity": 0.5839859913765604,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 301,
            "question": "What are the ids, names, and descriptions for all documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Answer the following: What are the ids and details of all accounts? */\nSELECT account_id ,  account_details FROM Accounts\n\n/* Answer the following: What are the ids and details of all statements? */\nSELECT STATEMENT_ID ,  statement_details FROM Statements\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, names, and descriptions for all documents? */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                },
                {
                    "ex_id": 6389,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT account_id ,  account_details FROM Accounts",
                    "question": "What are the ids and details of all accounts?"
                },
                {
                    "ex_id": 6393,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
                    "question": "What are the ids and details of all statements?"
                }
            ],
            "example_quality": 0.7574368026975726,
            "example_similarity": 0.583850009862205,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 302,
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it? */\nSELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'\n\n/* Answer the following: What is the category and typical buying price  of the product with name \"cumin\"? */\nSELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"\n\n/* Answer the following: What are the name and publication date of the catalogs with catalog level number above 5? */\nSELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document name and template id for document with description with the letter 'w' in it? */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5698,
                    "db_id": "dorm_1",
                    "query": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
                    "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?"
                },
                {
                    "ex_id": 5537,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
                    "question": "What is the category and typical buying price  of the product with name \"cumin\"?"
                },
                {
                    "ex_id": 315,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
                    "question": "What are the name and publication date of the catalogs with catalog level number above 5?"
                }
            ],
            "example_quality": 0.7576881157129229,
            "example_similarity": 0.5834874567645122,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 303,
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names and genders of players with a coach starting after 2011. */\nSELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Answer the following: Return the the names of the drama workshop groups that are located in Feliciaberg city. */\nSELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the names and template ids for documents that contain the letter w in their description. */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1731,
                    "db_id": "riding_club",
                    "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011",
                    "question": "Show the names and genders of players with a coach starting after 2011."
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                },
                {
                    "ex_id": 5152,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
                    "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city."
                }
            ],
            "example_quality": 0.7579377698964886,
            "example_similarity": 0.583099518058971,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 304,
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the employee ids and job titles for employees in department 80? */\nSELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80\n\n/* Answer the following: What are the invoice dates for customers with the first name Astrid and the last name Gruber? */\nSELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"\n\n/* Answer the following: What are the titles of movies and books corresponding to companies incorporated in China? */\nSELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id, template id and description for document named \"Robbin CV\"? */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3493,
                    "db_id": "hr_1",
                    "query": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
                    "question": "what are the employee ids and job titles for employees in department 80?"
                },
                {
                    "ex_id": 857,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
                    "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?"
                },
                {
                    "ex_id": 6998,
                    "db_id": "culture_company",
                    "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
                    "question": "What are the titles of movies and books corresponding to companies incorporated in China?"
                }
            ],
            "example_quality": 0.7587340272323554,
            "example_similarity": 0.5830073238014353,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 305,
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the color code and description for the product with the name 'chervil'. */\nSELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"\n\n/* Answer the following: Return the decor of the room named \"Recluse and defiance\". */\nSELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";\n\n/* Answer the following: Return the issue dates of volumes that are by the artist named Gorgoroth. */\nSELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the document id, template id, and description for the document with the name Robbin CV. */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5548,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"",
                    "question": "Return the color code and description for the product with the name 'chervil'."
                },
                {
                    "ex_id": 2596,
                    "db_id": "inn_1",
                    "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
                    "question": "Return the decor of the room named \"Recluse and defiance\"."
                },
                {
                    "ex_id": 6171,
                    "db_id": "music_4",
                    "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
                    "question": "Return the issue dates of volumes that are by the artist named Gorgoroth."
                }
            ],
            "example_quality": 0.7595250632086428,
            "example_similarity": 0.5827963650675593,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 306,
            "question": "How many different templates do all document use?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different services are provided by all stations? */\nSELECT count(DISTINCT services) FROM station\n\n/* Answer the following: How many different countries are all the swimmers from? */\nSELECT count(DISTINCT nationality) FROM swimmer\n\n/* Answer the following: For each nationality, how many different constructors are there? */\nSELECT count(*) ,  nationality FROM constructors GROUP BY nationality\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many different templates do all document use? */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3169,
                    "db_id": "station_weather",
                    "query": "SELECT count(DISTINCT services) FROM station",
                    "question": "How many different services are provided by all stations?"
                },
                {
                    "ex_id": 5617,
                    "db_id": "swimming",
                    "query": "SELECT count(DISTINCT nationality) FROM swimmer",
                    "question": "How many different countries are all the swimmers from?"
                },
                {
                    "ex_id": 2189,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
                    "question": "For each nationality, how many different constructors are there?"
                }
            ],
            "example_quality": 0.759808163806503,
            "example_similarity": 0.5826295339129137,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 307,
            "question": "Count the number of different templates used for documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different languages in these films. */\nSELECT count(DISTINCT language_id) FROM film\n\n/* Answer the following: Count the number of different ranks of captain. */\nSELECT count(DISTINCT rank) FROM captain\n\n/* Answer the following: Count the number of different hometowns of these people. */\nSELECT count(DISTINCT Hometown) FROM people\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of different templates used for documents. */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2972,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT language_id) FROM film",
                    "question": "Count the number of different languages in these films."
                },
                {
                    "ex_id": 6222,
                    "db_id": "ship_1",
                    "query": "SELECT count(DISTINCT rank) FROM captain",
                    "question": "Count the number of different ranks of captain."
                },
                {
                    "ex_id": 1774,
                    "db_id": "gymnast",
                    "query": "SELECT count(DISTINCT Hometown) FROM people",
                    "question": "Count the number of different hometowns of these people."
                }
            ],
            "example_quality": 0.7605905476377522,
            "example_similarity": 0.5829690751277533,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 308,
            "question": "How many documents are using the template with type code 'PPT'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many addresses have zip code 197? */\nSELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"\n\n/* Answer the following: How many allergies have type animal? */\nSELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"\n\n/* Answer the following: Of complaints with the type code \"Product Failure\", how many had each different status code? */\nSELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents are using the template with type code 'PPT'? */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3089,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"",
                    "question": "How many addresses have zip code 197?"
                },
                {
                    "ex_id": 452,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
                    "question": "How many allergies have type animal?"
                },
                {
                    "ex_id": 5810,
                    "db_id": "customer_complaints",
                    "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
                    "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?"
                }
            ],
            "example_quality": 0.7609813328108517,
            "example_similarity": 0.5824848132770812,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 309,
            "question": "Count the number of documents that use the PPT template type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Answer the following: Count the number of wines produced at Robert Biale winery. */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents that use the PPT template type. */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                },
                {
                    "ex_id": 6539,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "Count the number of wines produced at Robert Biale winery."
                }
            ],
            "example_quality": 0.7617548560056385,
            "example_similarity": 0.582703901746033,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 310,
            "question": "Show all template ids and number of documents using each template.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Answer the following: Show all branch names with the number of members in each branch registered after 2015. */\nSELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id\n\n/* Answer the following: Show the total number of rooms of all apartments with facility code \"Gym\". */\nSELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template ids and number of documents using each template. */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                },
                {
                    "ex_id": 5423,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
                    "question": "Show all branch names with the number of members in each branch registered after 2015."
                },
                {
                    "ex_id": 1241,
                    "db_id": "apartment_rentals",
                    "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
                    "question": "Show the total number of rooms of all apartments with facility code \"Gym\"."
                }
            ],
            "example_quality": 0.7618321444885695,
            "example_similarity": 0.5829234769975606,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 311,
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card types, and how many transactions have been made with each? */\nSELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code\n\n/* Answer the following: What are the different transaction types, and how many transactions of each have taken place? */\nSELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type\n\n/* Answer the following: What are the different role codes for users, and how many users have each? */\nSELECT count(*) ,  role_code FROM users GROUP BY role_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are all different template ids used for documents, and how many times were each of them used? */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 741,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
                    "question": "What are the different card types, and how many transactions have been made with each?"
                },
                {
                    "ex_id": 743,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "What are the different transaction types, and how many transactions of each have taken place?"
                },
                {
                    "ex_id": 4541,
                    "db_id": "document_management",
                    "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
                    "question": "What are the different role codes for users, and how many users have each?"
                }
            ],
            "example_quality": 0.7625979575287992,
            "example_similarity": 0.5827499653437325,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 312,
            "question": "What is the id and type code for the template used by the most documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and last name of the student that has the most behavior incidents? */\nSELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the city name, id, and number of addresses corresponding to the city with the most addressed? */\nSELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the ids and first names of the 3 teachers that have the most number of assessment notes? */\nSELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the id and type code for the template used by the most documents? */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3107,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and last name of the student that has the most behavior incidents?"
                },
                {
                    "ex_id": 2936,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?"
                },
                {
                    "ex_id": 3106,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?"
                }
            ],
            "example_quality": 0.7630337035772252,
            "example_similarity": 0.5820124879061914,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 313,
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the type code of the most frequently used policy. */\nSELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the code of the location with the largest number of documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the id and city of the student address with the highest average monthly rental. */\nSELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and type code of the template that is used for the greatest number of documents. */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1513,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the type code of the most frequently used policy."
                },
                {
                    "ex_id": 4230,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the location with the largest number of documents."
                },
                {
                    "ex_id": 3110,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1",
                    "question": "Find the id and city of the student address with the highest average monthly rental."
                }
            ],
            "example_quality": 0.7637907843964673,
            "example_similarity": 0.5813929971720243,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 314,
            "question": "Show ids for all templates that are used by more than one document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all employees with at least 100000 salary. */\nSELECT eid FROM Employee WHERE salary  >  100000\n\n/* Answer the following: Show the ids for all the faculty members who have at least 2 students. */\nSELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2\n\n/* Answer the following: Find the names of all distinct wines that have appellations in North Coast area. */\nSELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates that are used by more than one document. */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 366,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee WHERE salary  >  100000",
                    "question": "Show ids for all employees with at least 100000 salary."
                },
                {
                    "ex_id": 6762,
                    "db_id": "activity_1",
                    "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2",
                    "question": "Show the ids for all the faculty members who have at least 2 students."
                },
                {
                    "ex_id": 6536,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"",
                    "question": "Find the names of all distinct wines that have appellations in North Coast area."
                }
            ],
            "example_quality": 0.7629639559960538,
            "example_similarity": 0.5805689645613789,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 315,
            "question": "What are the template ids of any templates used in more than a single document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the carriers of devices that are in stock in more than a single shop? */\nSELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1\n\n/* Answer the following: What are the names of shops that have more than a single kind of device in stock? */\nSELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\n\n/* Answer the following: What are the official names of cities that have hosted more than one competition? */\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids of any templates used in more than a single document? */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5090,
                    "db_id": "device",
                    "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
                    "question": "What are the carriers of devices that are in stock in more than a single shop?"
                },
                {
                    "ex_id": 5072,
                    "db_id": "device",
                    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
                    "question": "What are the names of shops that have more than a single kind of device in stock?"
                },
                {
                    "ex_id": 38,
                    "db_id": "farm",
                    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
                    "question": "What are the official names of cities that have hosted more than one competition?"
                }
            ],
            "example_quality": 0.7637164513738441,
            "example_similarity": 0.5807427030064864,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 316,
            "question": "Show ids for all templates not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the titles of all movies not reviewed by Chris Jackson. */\nSELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'\n\n/* Answer the following: Find the countries that have never participated in any competition with Friendly type. */\nSELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'\n\n/* Answer the following: Find the personal names of students not enrolled in any course. */\nSELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates not used by any document. */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2485,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
                    "question": "Find the titles of all movies not reviewed by Chris Jackson."
                },
                {
                    "ex_id": 3388,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
                    "question": "Find the countries that have never participated in any competition with Friendly type."
                },
                {
                    "ex_id": 3843,
                    "db_id": "e_learning",
                    "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
                    "question": "Find the personal names of students not enrolled in any course."
                }
            ],
            "example_quality": 0.7640086797114606,
            "example_similarity": 0.5800024214320678,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 317,
            "question": "What are the ids for templates that are not used in any documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the movies that are not reviewed by Brittany Harris. */\nSELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"\n\n/* Answer the following: What are the ids of the students who are not involved in any activity */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in\n\n/* Answer the following: What are the student ids of students who don't have any allergies? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids for templates that are not used in any documents? */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2517,
                    "db_id": "movie_1",
                    "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"",
                    "question": "What are the ids of the movies that are not reviewed by Brittany Harris."
                },
                {
                    "ex_id": 6789,
                    "db_id": "activity_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                    "question": "What are the ids of the students who are not involved in any activity"
                },
                {
                    "ex_id": 508,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
                    "question": "What are the student ids of students who don't have any allergies?"
                }
            ],
            "example_quality": 0.7645619455148752,
            "example_similarity": 0.5796507371957474,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 318,
            "question": "How many templates do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cinema do we have? */\nSELECT count(*) FROM cinema\n\n/* Answer the following: How many faculty do we have? */\nSELECT count(*) FROM Faculty\n\n/* Answer the following: How many activities do we have? */\nSELECT count(*) FROM Activity\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates do we have? */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1933,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM cinema",
                    "question": "How many cinema do we have?"
                },
                {
                    "ex_id": 6716,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty",
                    "question": "How many faculty do we have?"
                },
                {
                    "ex_id": 6768,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Activity",
                    "question": "How many activities do we have?"
                }
            ],
            "example_quality": 0.7653023167553945,
            "example_similarity": 0.5809725902234337,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 319,
            "question": "Count the number of templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates. */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 236,
                    "db_id": "musical",
                    "query": "SELECT count(*) FROM actor",
                    "question": "Count the number of actors."
                },
                {
                    "ex_id": 669,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Count the number of accounts."
                }
            ],
            "example_quality": 0.7660380461699544,
            "example_similarity": 0.5822861557713226,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 320,
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first name middle name and last name of all staff. */\nSELECT first_name ,  middle_name ,  last_name FROM Staff;\n\n/* Answer the following: Show the premise type and address type code for all customer addresses. */\nSELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id\n\n/* Answer the following: Show the school name and driver name for all school buses. */\nSELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show template ids, version numbers, and template type codes for all templates. */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6629,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;",
                    "question": "List the first name middle name and last name of all staff."
                },
                {
                    "ex_id": 4632,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id",
                    "question": "Show the premise type and address type code for all customer addresses."
                },
                {
                    "ex_id": 6360,
                    "db_id": "school_bus",
                    "query": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
                    "question": "Show the school name and driver name for all school buses."
                }
            ],
            "example_quality": 0.7667691772756733,
            "example_similarity": 0.5823319799441234,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 321,
            "question": "What are the ids, version numbers, and type codes for each template?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the type codes and descriptions of each budget type? */\nSELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes\n\n/* Answer the following: What are the log id and entry description of each problem? */\nSELECT problem_log_id ,  log_entry_description FROM problem_log\n\n/* Answer the following: What are the names and ids of documents that have the type code BK? */\nSELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, version numbers, and type codes for each template? */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6443,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
                    "question": "What are the type codes and descriptions of each budget type?"
                },
                {
                    "ex_id": 5360,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
                    "question": "What are the log id and entry description of each problem?"
                },
                {
                    "ex_id": 6407,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
                    "question": "What are the names and ids of documents that have the type code BK?"
                }
            ],
            "example_quality": 0.7671496125143438,
            "example_similarity": 0.58201096583658,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 322,
            "question": "Show all distinct template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return all distinct detention type codes. */\nSELECT DISTINCT detention_type_code FROM Detention\n\n/* Answer the following: Show all distinct city where branches with at least 100 memberships are located. */\nSELECT DISTINCT city FROM branch WHERE membership_amount  >=  100\n\n/* Answer the following: Find the different billing countries for all invoices. */\nSELECT distinct(BillingCountry) FROM INVOICE\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all distinct template type codes for all templates. */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3091,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT DISTINCT detention_type_code FROM Detention",
                    "question": "Return all distinct detention type codes."
                },
                {
                    "ex_id": 5407,
                    "db_id": "shop_membership",
                    "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
                    "question": "Show all distinct city where branches with at least 100 memberships are located."
                },
                {
                    "ex_id": 817,
                    "db_id": "chinook_1",
                    "query": "SELECT distinct(BillingCountry) FROM INVOICE",
                    "question": "Find the different billing countries for all invoices."
                }
            ],
            "example_quality": 0.7672812093994663,
            "example_similarity": 0.5819472588811968,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 323,
            "question": "What are the different template type codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card type codes? */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Answer the following: What are the different allergy types? */\nSELECT DISTINCT allergytype FROM Allergy_type\n\n/* Answer the following: What are the different product sizes? */\nSELECT DISTINCT product_size FROM Products\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes? */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 731,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "What are the different card type codes?"
                },
                {
                    "ex_id": 445,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT allergytype FROM Allergy_type",
                    "question": "What are the different allergy types?"
                },
                {
                    "ex_id": 1597,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT DISTINCT product_size FROM Products",
                    "question": "What are the different product sizes?"
                }
            ],
            "example_quality": 0.7680017010112327,
            "example_similarity": 0.5829835418774366,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 324,
            "question": "What are the ids of templates with template type code PP or PPT?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id of problems reported by the staff named Dameon Frami or Jolie Weber? */\nSELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"\n\n/* Answer the following: What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3? */\nSELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of templates with template type code PP or PPT? */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5385,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
                    "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?"
                },
                {
                    "ex_id": 2940,
                    "db_id": "sakila_1",
                    "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
                    "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?"
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                }
            ],
            "example_quality": 0.7674289105217461,
            "example_similarity": 0.5827836501539932,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 325,
            "question": "Return the ids of templates that have the code PP or PPT.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the description of the budget type that has the code ORG. */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Answer the following: For the problem with id 10, return the ids and dates of its problem logs. */\nSELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10\n\n/* Answer the following: Return the type code of the document named \"David CV\". */\nSELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids of templates that have the code PP or PPT. */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6445,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "Return the description of the budget type that has the code ORG."
                },
                {
                    "ex_id": 5358,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
                    "question": "For the problem with id 10, return the ids and dates of its problem logs."
                },
                {
                    "ex_id": 4513,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"",
                    "question": "Return the type code of the document named \"David CV\"."
                }
            ],
            "example_quality": 0.7681445138739869,
            "example_similarity": 0.5826140421979065,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 326,
            "question": "How many templates have template type code CV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many staff have the first name Ludie? */\nSELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n\n/* Answer the following: How many members have the black membership card? */\nSELECT count(*) FROM member WHERE Membership_card  =  'Black'\n\n/* Answer the following: How many documents have document type code CV or BK? */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates have template type code CV? */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6637,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
                    "question": "How many staff have the first name Ludie?"
                },
                {
                    "ex_id": 790,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
                    "question": "How many members have the black membership card?"
                },
                {
                    "ex_id": 4174,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
                    "question": "How many documents have document type code CV or BK?"
                }
            ],
            "example_quality": 0.7688557270216126,
            "example_similarity": 0.5832994611054607,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 327,
            "question": "Count the number of templates of the type CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of customer cards of the type Debit. */\nSELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"\n\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates of the type CV. */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 709,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
                    "question": "Count the number of customer cards of the type Debit."
                },
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                },
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                }
            ],
            "example_quality": 0.7695625902417301,
            "example_similarity": 0.5837706362622445,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 328,
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the locations shared by shops with open year later than 2012 and shops with open year before 2008. */\nSELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008\n\n/* Answer the following: What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff? */\nSELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')\n\n/* Answer the following: Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff. */\nSELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the version number and template type code for the template with version number later than 5? */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5085,
                    "db_id": "device",
                    "query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
                    "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008."
                },
                {
                    "ex_id": 4756,
                    "db_id": "department_store",
                    "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
                    "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?"
                },
                {
                    "ex_id": 4757,
                    "db_id": "department_store",
                    "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
                    "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff."
                }
            ],
            "example_quality": 0.7683629127594942,
            "example_similarity": 0.5834107083642324,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 329,
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the host names for parties with number of hosts greater than 20. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Answer the following: Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10. */\nSELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10\n\n/* Answer the following: display the job title of jobs which minimum salary is greater than 9000. */\nSELECT job_title FROM jobs WHERE min_salary  >  9000\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the version numbers and template type codes of templates with a version number greater than 5. */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2685,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Show the host names for parties with number of hosts greater than 20."
                },
                {
                    "ex_id": 1907,
                    "db_id": "school_finance",
                    "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
                    "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10."
                },
                {
                    "ex_id": 3442,
                    "db_id": "hr_1",
                    "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
                    "question": "display the job title of jobs which minimum salary is greater than 9000."
                }
            ],
            "example_quality": 0.7682840718162259,
            "example_similarity": 0.5833390906635766,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 330,
            "question": "Show all template type codes and number of templates for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the total number of rooms of all apartments with facility code \"Gym\". */\nSELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n\n/* Answer the following: Show all party names and the number of members in each party. */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and number of templates for each. */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1241,
                    "db_id": "apartment_rentals",
                    "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
                    "question": "Show the total number of rooms of all apartments with facility code \"Gym\"."
                },
                {
                    "ex_id": 2058,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "Show all party names and the number of members in each party."
                },
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                }
            ],
            "example_quality": 0.7684811907905202,
            "example_similarity": 0.5836371669362677,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 331,
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different classes of races, and how many races correspond to each? */\nSELECT CLASS ,  count(*) FROM race GROUP BY CLASS\n\n/* Answer the following: What are the different budget type codes, and how many documents are there for each? */\nSELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code\n\n/* Answer the following: What are the different role codes for users, and how many users have each? */\nSELECT count(*) ,  role_code FROM users GROUP BY role_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many templates correspond to each? */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 769,
                    "db_id": "race_track",
                    "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
                    "question": "What are the different classes of races, and how many races correspond to each?"
                },
                {
                    "ex_id": 6455,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
                    "question": "What are the different budget type codes, and how many documents are there for each?"
                },
                {
                    "ex_id": 4541,
                    "db_id": "document_management",
                    "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
                    "question": "What are the different role codes for users, and how many users have each?"
                }
            ],
            "example_quality": 0.7691806433863193,
            "example_similarity": 0.5842877825691061,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 332,
            "question": "Which template type code has most number of templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which sport has most number of students on scholarship? */\nSELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which allergy type has most number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which game type has most number of games? */\nSELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code has most number of templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6020,
                    "db_id": "game_1",
                    "query": "SELECT sportname FROM Sportsinfo WHERE onscholarship  =  'Y' GROUP BY sportname ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which sport has most number of students on scholarship?"
                },
                {
                    "ex_id": 456,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which allergy type has most number of allergies?"
                },
                {
                    "ex_id": 5986,
                    "db_id": "game_1",
                    "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which game type has most number of games?"
                }
            ],
            "example_quality": 0.7697643250717912,
            "example_similarity": 0.5853391245894803,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 333,
            "question": "Return the type code of the template type that the most templates belong to.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the code of the city that has the most students. */\nSELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the code of the role that have the most employees. */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the description and code of the attraction type most tourist attractions belong to. */\nSELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type that the most templates belong to. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5514,
                    "db_id": "voter_2",
                    "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the city that has the most students."
                },
                {
                    "ex_id": 4208,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the role that have the most employees."
                },
                {
                    "ex_id": 5948,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the description and code of the attraction type most tourist attractions belong to."
                }
            ],
            "example_quality": 0.7704557234949989,
            "example_similarity": 0.5854378886423034,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 334,
            "question": "Show all template type codes with less than three templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the contact channel codes that were used less than 5 times. */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Answer the following: Report all majors that have less than 3 students. */\nSELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3\n\n/* Answer the following: List all the reviews which rated a business less than 1 */\nSELECT text FROM review WHERE rating  <  1;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes with less than three templates. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6096,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "List all the contact channel codes that were used less than 5 times."
                },
                {
                    "ex_id": 5505,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
                    "question": "Report all majors that have less than 3 students."
                },
                {
                    "ex_id": 8141,
                    "db_id": "yelp",
                    "query": "SELECT text FROM review WHERE rating  <  1;",
                    "question": "List all the reviews which rated a business less than 1"
                }
            ],
            "example_quality": 0.7704776458132108,
            "example_similarity": 0.5851197113309992,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 335,
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Answer the following: What are the names of customers with credit score less than the average credit score across customers? */\nSELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)\n\n/* Answer the following: What are the names of stations that have latitude lower than 37.5? */\nSELECT name FROM station WHERE lat  <  37.5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that have fewer than 3 templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                },
                {
                    "ex_id": 3046,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
                    "question": "What are the names of customers with credit score less than the average credit score across customers?"
                },
                {
                    "ex_id": 112,
                    "db_id": "bike_1",
                    "query": "SELECT name FROM station WHERE lat  <  37.5",
                    "question": "What are the names of stations that have latitude lower than 37.5?"
                }
            ],
            "example_quality": 0.7700019248141002,
            "example_similarity": 0.5850952106312409,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 336,
            "question": "What the smallest version number and its template type code?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the highest point of the state with the smallest population density */\nSELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );\n\n/* Answer the following: what is the population density of the state with the smallest population */\nSELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );\n\n/* Answer the following: what is the population density of the state with the smallest area */\nSELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What the smallest version number and its template type code? */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7339,
                    "db_id": "geo",
                    "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
                    "question": "what is the highest point of the state with the smallest population density"
                },
                {
                    "ex_id": 7526,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
                    "question": "what is the population density of the state with the smallest population"
                },
                {
                    "ex_id": 7152,
                    "db_id": "geo",
                    "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "what is the population density of the state with the smallest area"
                }
            ],
            "example_quality": 0.7689492095401302,
            "example_similarity": 0.5847179431392827,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 337,
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Find the name and checking balance of the account with the lowest savings balance. */\nSELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Answer the following: Find the name and checking balance of the account with the lowest saving balance. */\nSELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the lowest version number, along with its corresponding template type code. */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1756,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "Return the total points of the gymnast with the lowest age."
                },
                {
                    "ex_id": 1803,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "Find the name and checking balance of the account with the lowest savings balance."
                },
                {
                    "ex_id": 1815,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "Find the name and checking balance of the account with the lowest saving balance."
                }
            ],
            "example_quality": 0.7677272322333134,
            "example_similarity": 0.5843967343710216,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 338,
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the project detail for the project with document \"King Book\"? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"\n\n/* Answer the following: What is the document type code for document type \"Paper\"? */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Answer the following: What is the role name and role description for employee called Ebba? */\nSELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code of the template used by document with the name \"Data base\"? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6438,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                    "question": "What is the project detail for the project with document \"King Book\"?"
                },
                {
                    "ex_id": 4171,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "What is the document type code for document type \"Paper\"?"
                },
                {
                    "ex_id": 4213,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"",
                    "question": "What is the role name and role description for employee called Ebba?"
                }
            ],
            "example_quality": 0.7684144297710847,
            "example_similarity": 0.5843175308638006,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 339,
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the last name for the members of the club named \"Hopkins Student Enterprises\". */\nSELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"\n\n/* Answer the following: Find the last names of the members of the club \"Bootup Baltimore\". */\nSELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\n\n/* Answer the following: Find the contact channel code that was used by the customer named \"Tillman Ernser\". */\nSELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type code of the template that is used by a document named Data base. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4262,
                    "db_id": "club_1",
                    "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"",
                    "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\"."
                },
                {
                    "ex_id": 4259,
                    "db_id": "club_1",
                    "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
                    "question": "Find the last names of the members of the club \"Bootup Baltimore\"."
                },
                {
                    "ex_id": 6099,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
                    "question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\"."
                }
            ],
            "example_quality": 0.7689571038790783,
            "example_similarity": 0.5841795717966938,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 340,
            "question": "Show all document names using templates with template type code BK.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all invoice dates corresponding to customers with first name Astrid and last name Gruber. */\nSELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"\n\n/* Answer the following: Show all game names played by Linda Smith */\nSELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"\n\n/* Answer the following: Return the date of birth for all the guests with gender code \"Male\". */\nSELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document names using templates with template type code BK. */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 856,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"",
                    "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber."
                },
                {
                    "ex_id": 6048,
                    "db_id": "game_1",
                    "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
                    "question": "Show all game names played by Linda Smith"
                },
                {
                    "ex_id": 1219,
                    "db_id": "apartment_rentals",
                    "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"",
                    "question": "Return the date of birth for all the guests with gender code \"Male\"."
                }
            ],
            "example_quality": 0.7696366418088458,
            "example_similarity": 0.5840605983577393,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 341,
            "question": "What are the names of documents that use templates with the code BK?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the description for the budget type with code ORG? */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Answer the following: Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"\n\n/* Answer the following: Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the names of documents that use templates with the code BK? */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6444,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "What is the description for the budget type with code ORG?"
                },
                {
                    "ex_id": 4306,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"",
                    "question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs."
                },
                {
                    "ex_id": 4308,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"",
                    "question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs."
                }
            ],
            "example_quality": 0.7700329035770366,
            "example_similarity": 0.5835635462403574,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 342,
            "question": "Show all template type codes and the number of documents using each type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes and the number of customers holding cards in each type. */\nSELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code\n\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Answer the following: Show all video game types and the number of video games in each type. */\nSELECT gtype ,  count(*) FROM Video_games GROUP BY gtype\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and the number of documents using each type. */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 726,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
                    "question": "Show all card type codes and the number of customers holding cards in each type."
                },
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                },
                {
                    "ex_id": 5984,
                    "db_id": "game_1",
                    "query": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype",
                    "question": "Show all video game types and the number of video games in each type."
                }
            ],
            "example_quality": 0.7706303482284457,
            "example_similarity": 0.5841741848793749,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 343,
            "question": "What are the different template type codes, and how many documents use each type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card type codes, and how many different customers hold each type? */\nSELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code\n\n/* Answer the following: What are the different budget type codes, and how many documents are there for each? */\nSELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code\n\n/* Answer the following: What are the different role codes for users, and how many users have each? */\nSELECT count(*) ,  role_code FROM users GROUP BY role_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many documents use each type? */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 727,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
                    "question": "What are the different card type codes, and how many different customers hold each type?"
                },
                {
                    "ex_id": 6455,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
                    "question": "What are the different budget type codes, and how many documents are there for each?"
                },
                {
                    "ex_id": 4541,
                    "db_id": "document_management",
                    "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code",
                    "question": "What are the different role codes for users, and how many users have each?"
                }
            ],
            "example_quality": 0.7712243092375726,
            "example_similarity": 0.5847528346964168,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 344,
            "question": "Which template type code is used by most number of documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which payment method is used by most customers? */\nSELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the characteristic name used by most number of the products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the budget type code with most number of documents. */\nSELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code is used by most number of documents? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6066,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which payment method is used by most customers?"
                },
                {
                    "ex_id": 5595,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the characteristic name used by most number of the products?"
                },
                {
                    "ex_id": 6456,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the budget type code with most number of documents."
                }
            ],
            "example_quality": 0.771889354850254,
            "example_similarity": 0.5849102069469764,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 345,
            "question": "Return the code of the template type that is most commonly used in documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the code of the card type that is most common. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the code of the document type that is most common. */\nSELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the code of the city that has the most students. */\nSELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the code of the template type that is most commonly used in documents. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 723,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the card type that is most common."
                },
                {
                    "ex_id": 6421,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the document type that is most common."
                },
                {
                    "ex_id": 5514,
                    "db_id": "voter_2",
                    "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the city that has the most students."
                }
            ],
            "example_quality": 0.7725505451260504,
            "example_similarity": 0.5851116607375819,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 346,
            "question": "Show all template type codes that are not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the titles of all movies not reviewed by Chris Jackson. */\nSELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'\n\n/* Answer the following: Find all the zip codes in which the max dew point have never reached 70. */\nSELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70\n\n/* Answer the following: List the branch name and city without any registered members. */\nSELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes that are not used by any document. */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2485,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'",
                    "question": "Find the titles of all movies not reviewed by Chris Jackson."
                },
                {
                    "ex_id": 196,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
                    "question": "Find all the zip codes in which the max dew point have never reached 70."
                },
                {
                    "ex_id": 5427,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
                    "question": "List the branch name and city without any registered members."
                }
            ],
            "example_quality": 0.7722210551359376,
            "example_similarity": 0.5845016110310274,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 347,
            "question": "What are the codes of template types that are not used for any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of shops that do not have any devices in stock? */\nSELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)\n\n/* Answer the following: What are the names and cities of the branches that do not have any registered members? */\nSELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)\n\n/* Answer the following: What are the details of the lots which are not used in any transactions? */\nSELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that are not used for any document? */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5084,
                    "db_id": "device",
                    "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)",
                    "question": "What are the names of shops that do not have any devices in stock?"
                },
                {
                    "ex_id": 5428,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
                    "question": "What are the names and cities of the branches that do not have any registered members?"
                },
                {
                    "ex_id": 5885,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id",
                    "question": "What are the details of the lots which are not used in any transactions?"
                }
            ],
            "example_quality": 0.7719809048009316,
            "example_similarity": 0.5844326383389608,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 348,
            "question": "Show all template type codes and descriptions.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all businesses with rating 3.5 */\nSELECT name FROM business WHERE rating  =  3.5;\n\n/* Answer the following: Show all storm names affecting region \"Denmark\". */\nSELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n\n/* Answer the following: Show all game names played by Linda Smith */\nSELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and descriptions. */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8135,
                    "db_id": "yelp",
                    "query": "SELECT name FROM business WHERE rating  =  3.5;",
                    "question": "List all businesses with rating 3.5"
                },
                {
                    "ex_id": 2727,
                    "db_id": "storm_record",
                    "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
                    "question": "Show all storm names affecting region \"Denmark\"."
                },
                {
                    "ex_id": 6048,
                    "db_id": "game_1",
                    "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
                    "question": "Show all game names played by Linda Smith"
                }
            ],
            "example_quality": 0.7716782776798562,
            "example_similarity": 0.5840506915377428,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 349,
            "question": "What are the type codes and descriptions for all template types?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the type codes and descriptions of each budget type? */\nSELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes\n\n/* Answer the following: What are all the the participant ids, type code and details? */\nSELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants\n\n/* Answer the following: What are the ids of all students for courses and what are the names of those courses? */\nSELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the type codes and descriptions for all template types? */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6443,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
                    "question": "What are the type codes and descriptions of each budget type?"
                },
                {
                    "ex_id": 2142,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",
                    "question": "What are all the the participant ids, type code and details?"
                },
                {
                    "ex_id": 67,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id",
                    "question": "What are the ids of all students for courses and what are the names of those courses?"
                }
            ],
            "example_quality": 0.7723324946492548,
            "example_similarity": 0.5840059972380712,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 350,
            "question": "What is the template type descriptions for template type code \"AD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the document type code for document type \"Paper\"? */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Answer the following: What is the document type description for document type named Film? */\nSELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type descriptions for template type code \"AD\". */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4171,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "What is the document type code for document type \"Paper\"?"
                },
                {
                    "ex_id": 6428,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"",
                    "question": "What is the document type description for document type named Film?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                }
            ],
            "example_quality": 0.7729829732359712,
            "example_similarity": 0.5843172066543321,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 351,
            "question": "Return the template type description of the template type with the code AD.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the description of the budget type that has the code ORG. */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Answer the following: Show the description of transaction type with code \"PUR\". */\nSELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"\n\n/* Answer the following: Find the code of the document type \"Paper\". */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type description of the template type with the code AD. */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6445,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "Return the description of the budget type that has the code ORG."
                },
                {
                    "ex_id": 5854,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"",
                    "question": "Show the description of transaction type with code \"PUR\"."
                },
                {
                    "ex_id": 4172,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "Find the code of the document type \"Paper\"."
                }
            ],
            "example_quality": 0.7736297453919941,
            "example_similarity": 0.584080090181296,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 352,
            "question": "What is the template type code for template type description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the document type code for document type \"Paper\"? */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Answer the following: What is the document type description for document type named Film? */\nSELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code for template type description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4171,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "What is the document type code for document type \"Paper\"?"
                },
                {
                    "ex_id": 6428,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"",
                    "question": "What is the document type description for document type named Film?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                }
            ],
            "example_quality": 0.7742728427062214,
            "example_similarity": 0.584389320870921,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 353,
            "question": "Return the type code of the template type with the description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the type code of the document named \"David CV\". */\nSELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"\n\n/* Answer the following: Return the apartment numbers of the apartments with type code \"Flat\". */\nSELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"\n\n/* Answer the following: Return the description of the budget type that has the code ORG. */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type with the description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4513,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"",
                    "question": "Return the type code of the document named \"David CV\"."
                },
                {
                    "ex_id": 1215,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"",
                    "question": "Return the apartment numbers of the apartments with type code \"Flat\"."
                },
                {
                    "ex_id": 6445,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "Return the description of the budget type that has the code ORG."
                }
            ],
            "example_quality": 0.7749122964096032,
            "example_similarity": 0.584820284856678,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 354,
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct names and nationalities of the architects who have ever built a mill? */\nSELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id\n\n/* Answer the following: What are the names and types of the companies that have ever operated a flight? */\nSELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id\n\n/* Answer the following: What are the different names for each station that has ever had 7 bikes available? */\nSELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the distinct template type descriptions for the templates ever used by any document? */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6951,
                    "db_id": "architecture",
                    "query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
                    "question": "What are the distinct names and nationalities of the architects who have ever built a mill?"
                },
                {
                    "ex_id": 6372,
                    "db_id": "flight_company",
                    "query": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
                    "question": "What are the names and types of the companies that have ever operated a flight?"
                },
                {
                    "ex_id": 133,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
                    "question": "What are the different names for each station that has ever had 7 bikes available?"
                }
            ],
            "example_quality": 0.7750907792957209,
            "example_similarity": 0.5846927771019489,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 355,
            "question": "Return the different descriptions for templates that have been used in a document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total credits of courses provided by different department. */\nSELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name\n\n/* Answer the following: Return the different countries for artists. */\nSELECT DISTINCT country FROM artist\n\n/* Answer the following: Find the number of courses provided in each semester and year. */\nSELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different descriptions for templates that have been used in a document. */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1399,
                    "db_id": "college_2",
                    "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
                    "question": "Find the total credits of courses provided by different department."
                },
                {
                    "ex_id": 1655,
                    "db_id": "theme_gallery",
                    "query": "SELECT DISTINCT country FROM artist",
                    "question": "Return the different countries for artists."
                },
                {
                    "ex_id": 1403,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
                    "question": "Find the number of courses provided in each semester and year."
                }
            ],
            "example_quality": 0.7744242180539345,
            "example_similarity": 0.5839735441505773,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 356,
            "question": "What are the template ids with template type description \"Presentation\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the login names of the students with family name \"Ward\"? */\nSELECT login_name FROM Students WHERE family_name  =  \"Ward\"\n\n/* Answer the following: What is the partition id of the user named \"Iron Man\". */\nSELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'\n\n/* Answer the following: What is the first name of the author with last name \"Ueno\"? */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids with template type description \"Presentation\". */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3789,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
                    "question": "What are the login names of the students with family name \"Ward\"?"
                },
                {
                    "ex_id": 276,
                    "db_id": "twitter_1",
                    "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'",
                    "question": "What is the partition id of the user named \"Iron Man\"."
                },
                {
                    "ex_id": 2915,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "What is the first name of the author with last name \"Ueno\"?"
                }
            ],
            "example_quality": 0.7750578578908616,
            "example_similarity": 0.5842850031309872,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 357,
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For the problem with id 10, return the ids and dates of its problem logs. */\nSELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10\n\n/* Answer the following: Give the ids for documents that have the budget description 'Government'. */\nSELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\n\n/* Answer the following: Find the ids of the problems reported after 1978-06-26. */\nSELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids corresponding to templates with the description 'Presentation'. */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5358,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
                    "question": "For the problem with id 10, return the ids and dates of its problem logs."
                },
                {
                    "ex_id": 6453,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
                    "question": "Give the ids for documents that have the budget description 'Government'."
                },
                {
                    "ex_id": 5374,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
                    "question": "Find the ids of the problems reported after 1978-06-26."
                }
            ],
            "example_quality": 0.7756879479247808,
            "example_similarity": 0.5837842772026156,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 358,
            "question": "How many paragraphs in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many colleges in total? */\nSELECT count(*) FROM College\n\n/* Answer the following: How many vehicle in total? */\nSELECT count(*) FROM Vehicles;\n\n/* Answer the following: How many staff in total? */\nSELECT count(*) FROM Staff;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs in total? */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4949,
                    "db_id": "soccer_2",
                    "query": "SELECT count(*) FROM College",
                    "question": "How many colleges in total?"
                },
                {
                    "ex_id": 6625,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Vehicles;",
                    "question": "How many vehicle in total?"
                },
                {
                    "ex_id": 6641,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff;",
                    "question": "How many staff in total?"
                }
            ],
            "example_quality": 0.7763145179026444,
            "example_similarity": 0.5849468909534462,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 359,
            "question": "Count the number of paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs. */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 236,
                    "db_id": "musical",
                    "query": "SELECT count(*) FROM actor",
                    "question": "Count the number of actors."
                },
                {
                    "ex_id": 669,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Count the number of accounts."
                }
            ],
            "example_quality": 0.7769375972399629,
            "example_similarity": 0.5861030277474478,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 360,
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many policies are listed for the customer named \"Dayana Robel\"? */\nSELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"\n\n/* Answer the following: How many papers are \"Atsushi Ohori\" the author of? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Answer the following: For how many clubs is \"Tracy Kim\" a member? */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs for the document with name 'Summer Show'? */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 908,
                    "db_id": "insurance_fnol",
                    "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"",
                    "question": "How many policies are listed for the customer named \"Dayana Robel\"?"
                },
                {
                    "ex_id": 2870,
                    "db_id": "icfp_1",
                    "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
                    "question": "How many papers are \"Atsushi Ohori\" the author of?"
                },
                {
                    "ex_id": 4270,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
                    "question": "For how many clubs is \"Tracy Kim\" a member?"
                }
            ],
            "example_quality": 0.7775572150254076,
            "example_similarity": 0.5858093864394347,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 361,
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of characteristics of the product named 'laurel'. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"\n\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs in the document named 'Summer Show'. */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5566,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
                    "question": "Count the number of characteristics of the product named 'laurel'."
                },
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                }
            ],
            "example_quality": 0.7781734000253372,
            "example_similarity": 0.5861784674161886,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 362,
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the camera lens names containing substring \"Digital\". */\nSELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"\n\n/* Answer the following: Find the city and name of bank branches that provide business loans. */\nSELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'\n\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show paragraph details for paragraph with text 'Korea ' . */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3727,
                    "db_id": "mountain_photos",
                    "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
                    "question": "List the camera lens names containing substring \"Digital\"."
                },
                {
                    "ex_id": 3077,
                    "db_id": "loan_1",
                    "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
                    "question": "Find the city and name of bank branches that provide business loans."
                },
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                }
            ],
            "example_quality": 0.7768329466908177,
            "example_similarity": 0.5854669679393182,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 363,
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the resident details containing the substring 'Miss'? */\nSELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'\n\n/* Answer the following: What are the names of documents that contain the substring \"CV\"? */\nSELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"\n\n/* Answer the following: What is the name of the department that offers a course that has a description including the word \"Statistics\"? */\nSELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the details for the paragraph that includes the text 'Korea ' ? */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4857,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
                    "question": "What are the resident details containing the substring 'Miss'?"
                },
                {
                    "ex_id": 4531,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"",
                    "question": "What are the names of documents that contain the substring \"CV\"?"
                },
                {
                    "ex_id": 3335,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
                    "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?"
                }
            ],
            "example_quality": 0.7756111846705492,
            "example_similarity": 0.5849974076456704,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 364,
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the titles of all the papers written by \"Aaron Turon\". */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"\n\n/* Answer the following: Find the titles of all the papers written by \"Jeremy Gibbons\" */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"\n\n/* Answer the following: List name of all tracks in Balls to the Wall. */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2868,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Aaron\" AND t1.lname  =  \"Turon\"",
                    "question": "Find the titles of all the papers written by \"Aaron Turon\"."
                },
                {
                    "ex_id": 2866,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
                    "question": "Find the titles of all the papers written by \"Jeremy Gibbons\""
                },
                {
                    "ex_id": 626,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "List name of all tracks in Balls to the Wall."
                }
            ],
            "example_quality": 0.7762276374599159,
            "example_similarity": 0.5842526040227122,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 365,
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names of accounts with 4 or more transactions? */\nSELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n\n/* Answer the following: What are the id and address of the shops which have a happy hour in May? */\nSELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\n\n/* Answer the following: What are the papers published under the institution \"Indiana University\"? */\nSELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1595,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
                    "question": "What are the ids and names of accounts with 4 or more transactions?"
                },
                {
                    "ex_id": 804,
                    "db_id": "coffee_shop",
                    "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
                    "question": "What are the id and address of the shops which have a happy hour in May?"
                },
                {
                    "ex_id": 2883,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"",
                    "question": "What are the papers published under the institution \"Indiana University\"?"
                }
            ],
            "example_quality": 0.776101421275529,
            "example_similarity": 0.5839170950565048,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 366,
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all company names with a book published by Alyson. */\nSELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'\n\n/* Answer the following: Find all reviews for businesses rated 2.5 */\nSELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;\n\n/* Answer the following: Show first name and last name for all the students advised by Michael Goodrich. */\nSELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph texts for the document \"Customer reviews\". */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6995,
                    "db_id": "culture_company",
                    "query": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
                    "question": "List all company names with a book published by Alyson."
                },
                {
                    "ex_id": 8183,
                    "db_id": "yelp",
                    "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;",
                    "question": "Find all reviews for businesses rated 2.5"
                },
                {
                    "ex_id": 6754,
                    "db_id": "activity_1",
                    "query": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
                    "question": "Show first name and last name for all the students advised by Michael Goodrich."
                }
            ],
            "example_quality": 0.7767131660261423,
            "example_similarity": 0.5834237733337763,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 367,
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are names of the movies that are either made after 2000 or reviewed by Brittany Harris? */\nSELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000\n\n/* Answer the following: What are the titles of papers published by \"Jeremy Gibbons\"? */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"\n\n/* Answer the following: What are the checking and savings balances in accounts belonging to Brown? */\nSELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the paragraph texts for the document with the name 'Customer reviews'? */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2525,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000",
                    "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?"
                },
                {
                    "ex_id": 2865,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"",
                    "question": "What are the titles of papers published by \"Jeremy Gibbons\"?"
                },
                {
                    "ex_id": 1792,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
                    "question": "What are the checking and savings balances in accounts belonging to Brown?"
                }
            ],
            "example_quality": 0.7771918248445477,
            "example_similarity": 0.5828055405904481,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 368,
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all branch names with the number of members in each branch registered after 2015. */\nSELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id\n\n/* Answer the following: Show the total number of rooms of all apartments with facility code \"Gym\". */\nSELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids and the number of paragraphs in each document. Order by document id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5423,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
                    "question": "Show all branch names with the number of members in each branch registered after 2015."
                },
                {
                    "ex_id": 1241,
                    "db_id": "apartment_rentals",
                    "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
                    "question": "Show the total number of rooms of all apartments with facility code \"Gym\"."
                },
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                }
            ],
            "example_quality": 0.7768041611640298,
            "example_similarity": 0.5826581652860485,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 369,
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the account name, id and the number of transactions for each account. */\nSELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id\n\n/* Answer the following: Show the id of each employee and the number of document destruction authorised by that employee. */\nSELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID\n\n/* Answer the following: Show the id, name of each editor and the number of journal committees they are on. */\nSELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1590,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id",
                    "question": "Show the account name, id and the number of transactions for each account."
                },
                {
                    "ex_id": 4237,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
                    "question": "Show the id of each employee and the number of document destruction authorised by that employee."
                },
                {
                    "ex_id": 663,
                    "db_id": "journal_committee",
                    "query": "SELECT T1.editor_id ,  T1.Name ,  COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID  =  T2.Editor_ID GROUP BY T1.editor_id",
                    "question": "Show the id, name of each editor and the number of journal committees they are on."
                }
            ],
            "example_quality": 0.7767315211608753,
            "example_similarity": 0.5822408018546117,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 370,
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all payment methods and number of payments using each payment methods. */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Answer the following: Show the names of all the activities Mark Giuliano participates in. */\nSELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n\n/* Answer the following: Show all branch names with the number of members in each branch registered after 2015. */\nSELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids, names and the number of paragraphs in each document. */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6697,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "List all payment methods and number of payments using each payment methods."
                },
                {
                    "ex_id": 6778,
                    "db_id": "activity_1",
                    "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
                    "question": "Show the names of all the activities Mark Giuliano participates in."
                },
                {
                    "ex_id": 5423,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
                    "question": "Show all branch names with the number of members in each branch registered after 2015."
                }
            ],
            "example_quality": 0.7766518487989614,
            "example_similarity": 0.5823490456919554,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 371,
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Answer the following: What are the ids and details for each project? */\nSELECT project_id ,  project_details FROM Projects\n\n/* Answer the following: What are ids and total number of hours played for each game? */\nSELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and names of each document, as well as the number of paragraphs in each? */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                },
                {
                    "ex_id": 6435,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id ,  project_details FROM Projects",
                    "question": "What are the ids and details for each project?"
                },
                {
                    "ex_id": 6041,
                    "db_id": "game_1",
                    "query": "SELECT gameid ,  sum(hours_played) FROM Plays_games GROUP BY gameid",
                    "question": "What are ids and total number of hours played for each game?"
                }
            ],
            "example_quality": 0.7759176753635828,
            "example_similarity": 0.5819673577845572,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 372,
            "question": "List all document ids with at least two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all church names that have hosted least two weddings. */\nSELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2\n\n/* Answer the following: Show all advisors who have at least two students. */\nSELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2\n\n/* Answer the following: Show all student IDs who have at least two allergies. */\nSELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List all document ids with at least two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1644,
                    "db_id": "wedding",
                    "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2",
                    "question": "Show all church names that have hosted least two weddings."
                },
                {
                    "ex_id": 5998,
                    "db_id": "game_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor HAVING count(*)  >=  2",
                    "question": "Show all advisors who have at least two students."
                },
                {
                    "ex_id": 506,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
                    "question": "Show all student IDs who have at least two allergies."
                }
            ],
            "example_quality": 0.7765200472040032,
            "example_similarity": 0.5817814791690624,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 373,
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names of accounts with 4 or more transactions? */\nSELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n\n/* Answer the following: What are the ids of songs that are available in either mp4 format or have resolution above 720? */\nSELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720\n\n/* Answer the following: What are the id and address of the shops which have a happy hour in May? */\nSELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that have 2 or more paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1595,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
                    "question": "What are the ids and names of accounts with 4 or more transactions?"
                },
                {
                    "ex_id": 3582,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
                    "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?"
                },
                {
                    "ex_id": 804,
                    "db_id": "coffee_shop",
                    "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
                    "question": "What are the id and address of the shops which have a happy hour in May?"
                }
            ],
            "example_quality": 0.7759425433538883,
            "example_similarity": 0.5817553191968231,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 374,
            "question": "What is the document id and name with greatest number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of member in charge of greatest number of events? */\nSELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the title, id, and description of the movie with the greatest number of actors? */\nSELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id and name with greatest number of paragraphs? */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2078,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of member in charge of greatest number of events?"
                },
                {
                    "ex_id": 2952,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the title, id, and description of the movie with the greatest number of actors?"
                },
                {
                    "ex_id": 1603,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
                }
            ],
            "example_quality": 0.7765416274625677,
            "example_similarity": 0.5818141815553072,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 375,
            "question": "Return the id and name of the document with the most paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id and full name of the customer with the most accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the name of the party with the most members. */\nSELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the id of the customer who has the most cards, as well as the number of cards. */\nSELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and name of the document with the most paragraphs. */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1569,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the id and full name of the customer with the most accounts."
                },
                {
                    "ex_id": 2061,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name of the party with the most members."
                },
                {
                    "ex_id": 715,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the id of the customer who has the most cards, as well as the number of cards."
                }
            ],
            "example_quality": 0.7769258762443607,
            "example_similarity": 0.582226684078645,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 376,
            "question": "What is the document id with least number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type has least number of allergies? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Which game type has least number of games? */\nSELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1\n\n/* Answer the following: what is the name and position of the head whose department has least number of employees? */\nSELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with least number of paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 458,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which allergy type has least number of allergies?"
                },
                {
                    "ex_id": 5988,
                    "db_id": "game_1",
                    "query": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1",
                    "question": "Which game type has least number of games?"
                },
                {
                    "ex_id": 3903,
                    "db_id": "hospital_1",
                    "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;",
                    "question": "what is the name and position of the head whose department has least number of employees?"
                }
            ],
            "example_quality": 0.7775191584883917,
            "example_similarity": 0.5821254416852432,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 377,
            "question": "Return the id of the document with the fewest paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id of the project that has the fewest corresponding documents. */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Return the id and full name of the customer who has the fewest accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Return the id of the department with the fewest staff assignments. */\nSELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id of the document with the fewest paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6415,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Return the id of the project that has the fewest corresponding documents."
                },
                {
                    "ex_id": 719,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Return the id and full name of the customer who has the fewest accounts."
                },
                {
                    "ex_id": 4745,
                    "db_id": "department_store",
                    "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                    "question": "Return the id of the department with the fewest staff assignments."
                }
            ],
            "example_quality": 0.7781092933465127,
            "example_similarity": 0.5824456363434755,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 378,
            "question": "What is the document id with 1 to 2 paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals with nominee \"Bob Fosse\"? */\nSELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"\n\n/* Answer the following: What is title of album which track Balls to the Wall belongs to? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";\n\n/* Answer the following: What is the project detail for the project with document \"King Book\"? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with 1 to 2 paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 247,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
                    "question": "What are the names of musicals with nominee \"Bob Fosse\"?"
                },
                {
                    "ex_id": 624,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";",
                    "question": "What is title of album which track Balls to the Wall belongs to?"
                },
                {
                    "ex_id": 6438,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                    "question": "What is the project detail for the project with document \"King Book\"?"
                }
            ],
            "example_quality": 0.7768288921658574,
            "example_similarity": 0.5825729112620259,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 379,
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids of the investors who have at least two transactions. */\nSELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Show the ids and names of festivals that have at least two nominations for artworks. */\nSELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2\n\n/* Answer the following: Show the name of colleges that have at least two players. */\nSELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Give the ids of documents that have between one and two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5881,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2",
                    "question": "Show the ids of the investors who have at least two transactions."
                },
                {
                    "ex_id": 4612,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
                    "question": "Show the ids and names of festivals that have at least two nominations for artworks."
                },
                {
                    "ex_id": 1101,
                    "db_id": "match_season",
                    "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
                    "question": "Show the name of colleges that have at least two players."
                }
            ],
            "example_quality": 0.776796905332578,
            "example_similarity": 0.5823034563239663,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 380,
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the address and email of the customer with the first name Linda. */\nSELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'\n\n/* Answer the following: Find the full names of employees living in the city of Calgary. */\nSELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"\n\n/* Answer the following: Find the full names of employees who help customers with the first name Leonie. */\nSELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2992,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
                    "question": "Return the address and email of the customer with the first name Linda."
                },
                {
                    "ex_id": 815,
                    "db_id": "chinook_1",
                    "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"",
                    "question": "Find the full names of employees living in the city of Calgary."
                },
                {
                    "ex_id": 851,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"",
                    "question": "Find the full names of employees who help customers with the first name Leonie."
                }
            ],
            "example_quality": 0.7759672778489092,
            "example_similarity": 0.582161250142094,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 381,
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and address of the shops which have a happy hour in May? */\nSELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\n\n/* Answer the following: What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3? */\nSELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3\n\n/* Answer the following: What are the ids of songs that are available in either mp4 format or have resolution above 720? */\nSELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 804,
                    "db_id": "coffee_shop",
                    "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
                    "question": "What are the id and address of the shops which have a happy hour in May?"
                },
                {
                    "ex_id": 2940,
                    "db_id": "sakila_1",
                    "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
                    "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?"
                },
                {
                    "ex_id": 3582,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
                    "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?"
                }
            ],
            "example_quality": 0.7755615333437378,
            "example_similarity": 0.5818244651124458,
            "db_id": "cre_Doc_Template_Mgt"
        },
        {
            "index": 382,
            "question": "How many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: How many teachers are there? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.7760399935531347,
            "example_similarity": 0.5829191654655546,
            "db_id": "course_teach"
        },
        {
            "index": 383,
            "question": "What is the total count of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total count of enzymes? */\nSELECT count(*) FROM enzyme\n\n/* Answer the following: What is the total number of students? */\nSELECT count(*) FROM Student\n\n/* Answer the following: What is the total number of companies? */\nSELECT count(*) FROM company\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the total count of teachers? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 935,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme",
                    "question": "What is the total count of enzymes?"
                },
                {
                    "ex_id": 461,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student",
                    "question": "What is the total number of students?"
                },
                {
                    "ex_id": 1995,
                    "db_id": "gas_company",
                    "query": "SELECT count(*) FROM company",
                    "question": "What is the total number of companies?"
                }
            ],
            "example_quality": 0.7766247455281917,
            "example_similarity": 0.5836213395814457,
            "db_id": "course_teach"
        },
        {
            "index": 384,
            "question": "List the names of teachers in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of phones in ascending order of price. */\nSELECT Name FROM phone ORDER BY Price ASC\n\n/* Answer the following: List the name of ships in ascending order of tonnage. */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers in ascending order of age. */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1980,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone ORDER BY Price ASC",
                    "question": "List the names of phones in ascending order of price."
                },
                {
                    "ex_id": 4001,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "List the name of ships in ascending order of tonnage."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                }
            ],
            "example_quality": 0.7772064519200454,
            "example_similarity": 0.584705659009619,
            "db_id": "course_teach"
        },
        {
            "index": 385,
            "question": "What are the names of the teachers ordered by ascending age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names of the ships ordered by ascending tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Answer the following: What are the names of gymnasts, ordered by their heights ascending? */\nSELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC\n\n/* Answer the following: What are the names of wines, sorted by price ascending? */\nSELECT DISTINCT Name FROM WINE ORDER BY price\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers ordered by ascending age? */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4002,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "what are the names of the ships ordered by ascending tonnage?"
                },
                {
                    "ex_id": 1768,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC",
                    "question": "What are the names of gymnasts, ordered by their heights ascending?"
                },
                {
                    "ex_id": 6563,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Name FROM WINE ORDER BY price",
                    "question": "What are the names of wines, sorted by price ascending?"
                }
            ],
            "example_quality": 0.7776889363643128,
            "example_similarity": 0.5853514451766936,
            "db_id": "course_teach"
        },
        {
            "index": 386,
            "question": "What are the age and hometown of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the characters and duration of actors? */\nSELECT Character ,  Duration FROM actor\n\n/* Answer the following: What are the names and ages of editors? */\nSELECT Name ,  Age FROM editor\n\n/* Answer the following: What are the names and parties of representatives? */\nSELECT Name ,  Party FROM representative\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the age and hometown of teachers? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 239,
                    "db_id": "musical",
                    "query": "SELECT Character ,  Duration FROM actor",
                    "question": "What are the characters and duration of actors?"
                },
                {
                    "ex_id": 652,
                    "db_id": "journal_committee",
                    "query": "SELECT Name ,  Age FROM editor",
                    "question": "What are the names and ages of editors?"
                },
                {
                    "ex_id": 1179,
                    "db_id": "election_representative",
                    "query": "SELECT Name ,  Party FROM representative",
                    "question": "What are the names and parties of representatives?"
                }
            ],
            "example_quality": 0.7782648717623327,
            "example_similarity": 0.58642566423064,
            "db_id": "course_teach"
        },
        {
            "index": 387,
            "question": "What is the age and hometown of every teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the types and nationalities of every ship? */\nSELECT TYPE ,  Nationality FROM ship\n\n/* Answer the following: What are the first and last names for all customers? */\nSELECT first_name ,  last_name FROM Customers;\n\n/* Answer the following: What are the areas and counties for all appelations? */\nSELECT Area ,  County FROM APPELLATIONS\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the age and hometown of every teacher? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4004,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  Nationality FROM ship",
                    "question": "What are the types and nationalities of every ship?"
                },
                {
                    "ex_id": 6660,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers;",
                    "question": "What are the first and last names for all customers?"
                },
                {
                    "ex_id": 6529,
                    "db_id": "wine_1",
                    "query": "SELECT Area ,  County FROM APPELLATIONS",
                    "question": "What are the areas and counties for all appelations?"
                }
            ],
            "example_quality": 0.778837830750027,
            "example_similarity": 0.586509528454543,
            "db_id": "course_teach"
        },
        {
            "index": 388,
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of artworks whose type is not \"Program Talent Show\". */\nSELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\n\n/* Answer the following: List the name of ships whose nationality is not \"United States\". */\nSELECT Name FROM ship WHERE Nationality != \"United States\"\n\n/* Answer the following: List the name of technicians whose team is not \"NYY\". */\nSELECT Name FROM technician WHERE Team != \"NYY\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the name of teachers whose hometown is not `` Little Lever Urban District '' . */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4601,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
                    "question": "List the name of artworks whose type is not \"Program Talent Show\"."
                },
                {
                    "ex_id": 4005,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
                    "question": "List the name of ships whose nationality is not \"United States\"."
                },
                {
                    "ex_id": 2240,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Team != \"NYY\"",
                    "question": "List the name of technicians whose team is not \"NYY\"."
                }
            ],
            "example_quality": 0.7773827995220262,
            "example_similarity": 0.5867161190169453,
            "db_id": "course_teach"
        },
        {
            "index": 389,
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of the books whose writer is not \"Elaine Lee\"? */\nSELECT Title FROM book WHERE Writer != \"Elaine Lee\"\n\n/* Answer the following: What are the names of gymnasts whose hometown is not \"Santo Domingo\"? */\nSELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"\n\n/* Answer the following: What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"? */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 217,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
                    "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?"
                },
                {
                    "ex_id": 1749,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"",
                    "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?"
                },
                {
                    "ex_id": 2276,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
                    "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?"
                }
            ],
            "example_quality": 0.775935249174375,
            "example_similarity": 0.5869216474170732,
            "db_id": "course_teach"
        },
        {
            "index": 390,
            "question": "Show the name of teachers aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of technicians aged either 36 or 37 */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: Show the names of companies in the banking or retailing industry? */\nSELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"\n\n/* Answer the following: Show the names of editors of age either 24 or 25. */\nSELECT Name FROM editor WHERE Age  =  24 OR Age  =  25\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of teachers aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2242,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
                    "question": "Show the name of technicians aged either 36 or 37"
                },
                {
                    "ex_id": 4100,
                    "db_id": "company_employee",
                    "query": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"",
                    "question": "Show the names of companies in the banking or retailing industry?"
                },
                {
                    "ex_id": 654,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor WHERE Age  =  24 OR Age  =  25",
                    "question": "Show the names of editors of age either 24 or 25."
                }
            ],
            "example_quality": 0.7765097741764919,
            "example_similarity": 0.587508645284852,
            "db_id": "course_teach"
        },
        {
            "index": 391,
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the songs in volumes associated with the artist aged 32 or older? */\nSELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32\n\n/* Answer the following: What are the name of pilots aged 25 or older? */\nSELECT Name FROM pilot WHERE Age  >=  25\n\n/* Answer the following: What are the issue dates of volumes associated with the artist aged 23 or younger? */\nSELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who are aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6172,
                    "db_id": "music_4",
                    "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
                    "question": "What are the songs in volumes associated with the artist aged 32 or older?"
                },
                {
                    "ex_id": 4810,
                    "db_id": "aircraft",
                    "query": "SELECT Name FROM pilot WHERE Age  >=  25",
                    "question": "What are the name of pilots aged 25 or older?"
                },
                {
                    "ex_id": 6202,
                    "db_id": "music_4",
                    "query": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
                    "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?"
                }
            ],
            "example_quality": 0.777081360431795,
            "example_similarity": 0.5875013319281313,
            "db_id": "course_teach"
        },
        {
            "index": 392,
            "question": "What is the hometown of the youngest teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the youngest editor? */\nSELECT Name FROM editor ORDER BY Age ASC LIMIT 1\n\n/* Answer the following: What is the party of the youngest people? */\nSELECT Party FROM people ORDER BY Age ASC LIMIT 1\n\n/* Answer the following: What is the name of the youngest captain? */\nSELECT name FROM captain ORDER BY age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the hometown of the youngest teacher? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 655,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
                    "question": "What is the name of the youngest editor?"
                },
                {
                    "ex_id": 1498,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
                    "question": "What is the party of the youngest people?"
                },
                {
                    "ex_id": 6243,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                    "question": "What is the name of the youngest captain?"
                }
            ],
            "example_quality": 0.7776500304306935,
            "example_similarity": 0.5885536244487227,
            "db_id": "course_teach"
        },
        {
            "index": 393,
            "question": "Where is the youngest teacher from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the youngest editor? */\nSELECT Name FROM editor ORDER BY Age ASC LIMIT 1\n\n/* Answer the following: What is the party of the youngest people? */\nSELECT Party FROM people ORDER BY Age ASC LIMIT 1\n\n/* Answer the following: What is the name of the youngest captain? */\nSELECT name FROM captain ORDER BY age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Where is the youngest teacher from? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 655,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
                    "question": "What is the name of the youngest editor?"
                },
                {
                    "ex_id": 1498,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
                    "question": "What is the party of the youngest people?"
                },
                {
                    "ex_id": 6243,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain ORDER BY age LIMIT 1",
                    "question": "What is the name of the youngest captain?"
                }
            ],
            "example_quality": 0.7782158064346867,
            "example_similarity": 0.5882126367390451,
            "db_id": "course_teach"
        },
        {
            "index": 394,
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different types of ships and the number of ships of each type. */\nSELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n\n/* Answer the following: Show different teams in eliminations and the number of eliminations from each team. */\nSELECT Team ,  COUNT(*) FROM elimination GROUP BY Team\n\n/* Answer the following: Show different teams of technicians and the number of technicians in each team. */\nSELECT Team ,  COUNT(*) FROM technician GROUP BY Team\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show different hometown of teachers and the number of teachers from each hometown. */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4011,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
                    "question": "Show different types of ships and the number of ships of each type."
                },
                {
                    "ex_id": 1865,
                    "db_id": "wrestler",
                    "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
                    "question": "Show different teams in eliminations and the number of eliminations from each team."
                },
                {
                    "ex_id": 2246,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
                    "question": "Show different teams of technicians and the number of technicians in each team."
                }
            ],
            "example_quality": 0.7787787104792686,
            "example_similarity": 0.5889193728556127,
            "db_id": "course_teach"
        },
        {
            "index": 395,
            "question": "For each hometown, how many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each team, how many technicians are there? */\nSELECT Team ,  COUNT(*) FROM technician GROUP BY Team\n\n/* Answer the following: For each type, how many ships are there? */\nSELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n\n/* Answer the following: For each constructor id, how many races are there? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: For each hometown, how many teachers are there? */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2247,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
                    "question": "For each team, how many technicians are there?"
                },
                {
                    "ex_id": 4012,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
                    "question": "For each type, how many ships are there?"
                },
                {
                    "ex_id": 2191,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "For each constructor id, how many races are there?"
                }
            ],
            "example_quality": 0.7793387643767895,
            "example_similarity": 0.5898833667716669,
            "db_id": "course_teach"
        },
        {
            "index": 396,
            "question": "List the most common hometown of teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the most common type of artworks. */\nSELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: List the most common result of the musicals. */\nSELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: List the most common type of competition. */\nSELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the most common hometown of teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4615,
                    "db_id": "entertainment_awards",
                    "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of artworks."
                },
                {
                    "ex_id": 265,
                    "db_id": "musical",
                    "query": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common result of the musicals."
                },
                {
                    "ex_id": 3368,
                    "db_id": "sports_competition",
                    "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of competition."
                }
            ],
            "example_quality": 0.7798959897192723,
            "example_similarity": 0.5906384312214578,
            "db_id": "course_teach"
        },
        {
            "index": 397,
            "question": "What is the most commmon hometowns for teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which year had the most NIPS papers ? */\nSELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;\n\n/* Answer the following: what year had the most NIPS papers ? */\nSELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;\n\n/* Answer the following: what year had the most number of NIPS papers ? */\nSELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the most commmon hometowns for teachers? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7863,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
                    "question": "which year had the most NIPS papers ?"
                },
                {
                    "ex_id": 7864,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
                    "question": "what year had the most NIPS papers ?"
                },
                {
                    "ex_id": 7865,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
                    "question": "what year had the most number of NIPS papers ?"
                }
            ],
            "example_quality": 0.7795742716420034,
            "example_similarity": 0.5903460251593212,
            "db_id": "course_teach"
        },
        {
            "index": 398,
            "question": "Show the hometowns shared by at least two teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the denomination shared by more than one school. */\nSELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1\n\n/* Answer the following: Show the headquarters shared by more than two companies. */\nSELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2\n\n/* Answer the following: List the locations that are shared by more than two wrestlers. */\nSELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the hometowns shared by at least two teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4899,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
                    "question": "Show the denomination shared by more than one school."
                },
                {
                    "ex_id": 4582,
                    "db_id": "company_office",
                    "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
                    "question": "Show the headquarters shared by more than two companies."
                },
                {
                    "ex_id": 1875,
                    "db_id": "wrestler",
                    "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
                    "question": "List the locations that are shared by more than two wrestlers."
                }
            ],
            "example_quality": 0.7797930967551306,
            "example_similarity": 0.5902629068982801,
            "db_id": "course_teach"
        },
        {
            "index": 399,
            "question": "What are the towns from which at least two teachers come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of studios that have made two or more films? */\nSELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\n\n/* Answer the following: Give the names of characteristics that are in two or more products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n\n/* Answer the following: What are the names of the customers who have made two or less orders? */\nSELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the towns from which at least two teachers come from? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4146,
                    "db_id": "film_rank",
                    "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2",
                    "question": "What are the names of studios that have made two or more films?"
                },
                {
                    "ex_id": 5600,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
                    "question": "Give the names of characteristics that are in two or more products?"
                },
                {
                    "ex_id": 6941,
                    "db_id": "tracking_orders",
                    "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
                    "question": "What are the names of the customers who have made two or less orders?"
                }
            ],
            "example_quality": 0.7802336041706706,
            "example_similarity": 0.5894489955163602,
            "db_id": "course_teach"
        },
        {
            "index": 400,
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of courses taught by the tutor who has personal name \"Julio\". */\nSELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"\n\n/* Answer the following: Find the first names of the teachers that teach first grade. */\nSELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n\n/* Answer the following: Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\". */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3811,
                    "db_id": "e_learning",
                    "query": "SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T1.personal_name  =  \"Julio\"",
                    "question": "Find the names of courses taught by the tutor who has personal name \"Julio\"."
                },
                {
                    "ex_id": 4049,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
                    "question": "Find the first names of the teachers that teach first grade."
                },
                {
                    "ex_id": 3805,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"",
                    "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\"."
                }
            ],
            "example_quality": 0.7798703217475453,
            "example_similarity": 0.588708929860264,
            "db_id": "course_teach"
        },
        {
            "index": 401,
            "question": "What is the name of each teacher and what course they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the last names of the teachers who teach grade 5? */\nSELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5\n\n/* Answer the following: What are the first names of the teachers who teach grade 1? */\nSELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n\n/* Answer the following: What are the course names for courses taught on MTW? */\nSELECT CName FROM COURSE WHERE Days  =  \"MTW\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the name of each teacher and what course they teach? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4048,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
                    "question": "what are the last names of the teachers who teach grade 5?"
                },
                {
                    "ex_id": 4050,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
                    "question": "What are the first names of the teachers who teach grade 1?"
                },
                {
                    "ex_id": 4643,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
                    "question": "What are the course names for courses taught on MTW?"
                }
            ],
            "example_quality": 0.7794296840453685,
            "example_similarity": 0.5882568063628755,
            "db_id": "course_teach"
        },
        {
            "index": 402,
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members and the location of performances they attended in ascending alphabetical order of their names. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\n\n/* Answer the following: Find the login name of the course author that teaches the course with name \"advanced database\". */\nSELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"\n\n/* Answer the following: Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\". */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1319,
                    "db_id": "performance_attendance",
                    "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names."
                },
                {
                    "ex_id": 3803,
                    "db_id": "e_learning",
                    "query": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
                    "question": "Find the login name of the course author that teaches the course with name \"advanced database\"."
                },
                {
                    "ex_id": 3805,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"",
                    "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\"."
                }
            ],
            "example_quality": 0.7792413109599414,
            "example_similarity": 0.5878274480433279,
            "db_id": "course_teach"
        },
        {
            "index": 403,
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members and the location of performances they attended in ascending alphabetical order of their names. */\nSELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC\n\n/* Answer the following: What are the personal names and family names of the students? Sort the result in alphabetical order of the family name. */\nSELECT personal_name ,  family_name FROM Students ORDER BY family_name\n\n/* Answer the following: What details are there on the research staff? List the result in ascending alphabetical order. */\nSELECT staff_details FROM Research_Staff ORDER BY staff_details ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1319,
                    "db_id": "performance_attendance",
                    "query": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names."
                },
                {
                    "ex_id": 3800,
                    "db_id": "e_learning",
                    "query": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name",
                    "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name."
                },
                {
                    "ex_id": 4388,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT staff_details FROM Research_Staff ORDER BY staff_details ASC",
                    "question": "What details are there on the research staff? List the result in ascending alphabetical order."
                }
            ],
            "example_quality": 0.7797890992702146,
            "example_similarity": 0.5876573896721691,
            "db_id": "course_teach"
        },
        {
            "index": 404,
            "question": "Show the name of the teacher for the math course.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the delegate from district 1 in election. */\nSELECT Delegate FROM election WHERE District  =  1\n\n/* Answer the following: Give the phones for departments in room 268. */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: Show the positions of the players from the team with name \"Ryley Goldner\". */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of the teacher for the math course. */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2747,
                    "db_id": "election",
                    "query": "SELECT Delegate FROM election WHERE District  =  1",
                    "question": "Show the delegate from district 1 in election."
                },
                {
                    "ex_id": 4647,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "Give the phones for departments in room 268."
                },
                {
                    "ex_id": 1085,
                    "db_id": "match_season",
                    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
                    "question": "Show the positions of the players from the team with name \"Ryley Goldner\"."
                }
            ],
            "example_quality": 0.7803341757571695,
            "example_similarity": 0.5875766852183937,
            "db_id": "course_teach"
        },
        {
            "index": 405,
            "question": "What are the names of the people who teach math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the last names of the teachers who teach grade 5? */\nSELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5\n\n/* Answer the following: What are the first names of the teachers who teach grade 1? */\nSELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n\n/* Answer the following: What are the last names of the teachers who teach the student called GELL TAMI? */\nSELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the people who teach math courses? */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4048,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
                    "question": "what are the last names of the teachers who teach grade 5?"
                },
                {
                    "ex_id": 4050,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
                    "question": "What are the first names of the teachers who teach grade 1?"
                },
                {
                    "ex_id": 4066,
                    "db_id": "student_1",
                    "query": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
                    "question": "What are the last names of the teachers who teach the student called GELL TAMI?"
                }
            ],
            "example_quality": 0.7806414047176751,
            "example_similarity": 0.5879517941396306,
            "db_id": "course_teach"
        },
        {
            "index": 406,
            "question": "Show names of teachers and the number of courses they teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of teachers who teach the student called CHRISSY NABOZNY. */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"\n\n/* Answer the following: Find the number of teachers who teach the student called MADLOCK RAY. */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"\n\n/* Answer the following: Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\". */\nSELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the number of courses they teach. */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4074,
                    "db_id": "student_1",
                    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
                    "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY."
                },
                {
                    "ex_id": 4076,
                    "db_id": "student_1",
                    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
                    "question": "Find the number of teachers who teach the student called MADLOCK RAY."
                },
                {
                    "ex_id": 3805,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"",
                    "question": "Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\"."
                }
            ],
            "example_quality": 0.7800449025840391,
            "example_similarity": 0.5874816144090635,
            "db_id": "course_teach"
        },
        {
            "index": 407,
            "question": "What are the names of the teachers and how many courses do they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are enrolled in some classes that are taught by an accounting professor? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\n\n/* Answer the following: How many students are enrolled in the class taught by some professor from the accounting department? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and how many courses do they teach? */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3253,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
                    "question": "How many students are enrolled in some classes that are taught by an accounting professor?"
                },
                {
                    "ex_id": 3252,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
                    "question": "How many students are enrolled in the class taught by some professor from the accounting department?"
                },
                {
                    "ex_id": 4682,
                    "db_id": "college_3",
                    "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which building does the instructor who teaches the most number of courses live in?"
                }
            ],
            "example_quality": 0.7795913318048195,
            "example_similarity": 0.5868467855780664,
            "db_id": "course_teach"
        },
        {
            "index": 408,
            "question": "Show names of teachers that teach at least two courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the addresses and author IDs of the course authors that teach at least two courses. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Answer the following: Which course authors teach two or more courses? Give me their addresses and author IDs. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Answer the following: Find the first names of the teachers that teach first grade. */\nSELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers that teach at least two courses. */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3809,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Find the addresses and author IDs of the course authors that teach at least two courses."
                },
                {
                    "ex_id": 3810,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Which course authors teach two or more courses? Give me their addresses and author IDs."
                },
                {
                    "ex_id": 4049,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
                    "question": "Find the first names of the teachers that teach first grade."
                }
            ],
            "example_quality": 0.7795698661222914,
            "example_similarity": 0.586442571911031,
            "db_id": "course_teach"
        },
        {
            "index": 409,
            "question": "What are the names of the teachers who teach at least two courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the last names of the teachers who teach grade 5? */\nSELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5\n\n/* Answer the following: What are the first names of the teachers who teach grade 1? */\nSELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1\n\n/* Answer the following: Find the addresses and author IDs of the course authors that teach at least two courses. */\nSELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who teach at least two courses? */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4048,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
                    "question": "what are the last names of the teachers who teach grade 5?"
                },
                {
                    "ex_id": 4050,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
                    "question": "What are the first names of the teachers who teach grade 1?"
                },
                {
                    "ex_id": 3809,
                    "db_id": "e_learning",
                    "query": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2",
                    "question": "Find the addresses and author IDs of the course authors that teach at least two courses."
                }
            ],
            "example_quality": 0.7789881957079744,
            "example_similarity": 0.5865174396864649,
            "db_id": "course_teach"
        },
        {
            "index": 410,
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of technicians who have not been assigned to repair machines. */\nSELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)\n\n/* Answer the following: List the names of representatives that have not participated in elections listed here. */\nSELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)\n\n/* Answer the following: List the names of members who did not attend any performance. */\nSELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers who have not been arranged to teach courses. */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2260,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
                    "question": "List the names of technicians who have not been assigned to repair machines."
                },
                {
                    "ex_id": 1192,
                    "db_id": "election_representative",
                    "query": "SELECT Name FROM representative WHERE Representative_ID NOT IN (SELECT Representative_ID FROM election)",
                    "question": "List the names of representatives that have not participated in elections listed here."
                },
                {
                    "ex_id": 1322,
                    "db_id": "performance_attendance",
                    "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
                    "question": "List the names of members who did not attend any performance."
                }
            ],
            "example_quality": 0.7795272488891745,
            "example_similarity": 0.5865121906264428,
            "db_id": "course_teach"
        },
        {
            "index": 411,
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the technicians that have not been assigned to repair machines? */\nSELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)\n\n/* Answer the following: What are the names of the mills which are not located in 'Donceel'? */\nSELECT name FROM mill WHERE LOCATION != 'Donceel'\n\n/* Answer the following: What are the names and cities of the branches that do not have any registered members? */\nSELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose courses have not been arranged? */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2261,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)",
                    "question": "What are the names of the technicians that have not been assigned to repair machines?"
                },
                {
                    "ex_id": 6952,
                    "db_id": "architecture",
                    "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
                    "question": "What are the names of the mills which are not located in 'Donceel'?"
                },
                {
                    "ex_id": 5428,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
                    "question": "What are the names and cities of the branches that do not have any registered members?"
                }
            ],
            "example_quality": 0.7796002332216188,
            "example_similarity": 0.5864774218468704,
            "db_id": "course_teach"
        },
        {
            "index": 412,
            "question": "How many visitors below age 30 are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are attending English courses? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many students attend course English? */\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"\n\n/* Answer the following: How many staff live in state Georgia? */\nSELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many visitors below age 30 are there? */\nSELECT ",
            "response": "count(*) FROM visitor WHERE age < 30",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 71,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students are attending English courses?"
                },
                {
                    "ex_id": 70,
                    "db_id": "student_assessment",
                    "query": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
                    "question": "How many students attend course English?"
                },
                {
                    "ex_id": 6651,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
                    "question": "How many staff live in state Georgia?"
                }
            ],
            "example_quality": 0.7801351841118576,
            "example_similarity": 0.5862001034011796,
            "db_id": "museum_visit"
        },
        {
            "index": 413,
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the dates when the max temperature was higher than 85. */\nSELECT date FROM weather WHERE max_temperature_f  >  85\n\n/* Answer the following: Count the number of people of each sex who have a weight higher than 85. */\nSELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex\n\n/* Answer the following: List the grape, appelation and name of wines whose score is higher than 93 ordered by Name. */\nSELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. */\nSELECT ",
            "response": "name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 110,
                    "db_id": "bike_1",
                    "query": "SELECT date FROM weather WHERE max_temperature_f  >  85",
                    "question": "Give me the dates when the max temperature was higher than 85."
                },
                {
                    "ex_id": 2426,
                    "db_id": "candidate_poll",
                    "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
                    "question": "Count the number of people of each sex who have a weight higher than 85."
                },
                {
                    "ex_id": 6592,
                    "db_id": "wine_1",
                    "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
                    "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name."
                }
            ],
            "example_quality": 0.7797944062796107,
            "example_similarity": 0.5856074802096941,
            "db_id": "museum_visit"
        },
        {
            "index": 414,
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of schools that have more than one donator whose donation amount is less than 8.5. */\nSELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)\n\n/* Answer the following: What is the number of players who have points less than 30 for each position? */\nSELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION\n\n/* Answer the following: How many rooms whose capacity is less than 50 does the Lamberton building have? */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the average age of the visitors whose membership level is not higher than 4? */\nSELECT ",
            "response": "avg(age) FROM visitor WHERE Level_of_membership <= 4",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1909,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
                    "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5."
                },
                {
                    "ex_id": 3383,
                    "db_id": "sports_competition",
                    "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
                    "question": "What is the number of players who have points less than 30 for each position?"
                },
                {
                    "ex_id": 1357,
                    "db_id": "college_2",
                    "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
                    "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
                }
            ],
            "example_quality": 0.779242031170508,
            "example_similarity": 0.5849933297897413,
            "db_id": "museum_visit"
        },
        {
            "index": 415,
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of people of each sex who have a weight higher than 85. */\nSELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex\n\n/* Answer the following: Count the number of artists who are older than 46 and joined after 1990. */\nSELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990\n\n/* Answer the following: Count the number of captains younger than 50 of each rank. */\nSELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. */\nSELECT ",
            "response": "name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2426,
                    "db_id": "candidate_poll",
                    "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
                    "question": "Count the number of people of each sex who have a weight higher than 85."
                },
                {
                    "ex_id": 1659,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990",
                    "question": "Count the number of artists who are older than 46 and joined after 1990."
                },
                {
                    "ex_id": 6226,
                    "db_id": "ship_1",
                    "query": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank",
                    "question": "Count the number of captains younger than 50 of each rank."
                }
            ],
            "example_quality": 0.7785382660042648,
            "example_similarity": 0.5840739800877496,
            "db_id": "museum_visit"
        },
        {
            "index": 416,
            "question": "Find the id and name of the museum that has the most staff members?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many employees have a first name of Ludie? */\nSELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n\n/* Answer the following: Which organisation hired the most number of research staff? List the organisation id, type and detail. */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the activity that has the most faculty members involved in? */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the id and name of the museum that has the most staff members? */\nSELECT ",
            "response": "museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6638,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
                    "question": "How many employees have a first name of Ludie?"
                },
                {
                    "ex_id": 4361,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
                },
                {
                    "ex_id": 6786,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the activity that has the most faculty members involved in?"
                }
            ],
            "example_quality": 0.777954554513183,
            "example_similarity": 0.5835098347014557,
            "db_id": "museum_visit"
        },
        {
            "index": 417,
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of employees of the departments whose rank is between 10 and 15? */\nSELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15\n\n/* Answer the following: What are the average score and average staff number of all shops? */\nSELECT avg(num_of_staff) ,  avg(score) FROM shop\n\n/* Answer the following: Show the names of companies and the number of employees they have */\nSELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the average number of staff working for the museums that were open before 2009. */\nSELECT ",
            "response": "avg(num_of_staff) FROM museum WHERE open_year < 2009",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5,
                    "db_id": "department_management",
                    "query": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
                    "question": "What is the average number of employees of the departments whose rank is between 10 and 15?"
                },
                {
                    "ex_id": 801,
                    "db_id": "coffee_shop",
                    "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
                    "question": "What are the average score and average staff number of all shops?"
                },
                {
                    "ex_id": 4110,
                    "db_id": "company_employee",
                    "query": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
                    "question": "Show the names of companies and the number of employees they have"
                }
            ],
            "example_quality": 0.7775339539089885,
            "example_similarity": 0.5828288370152023,
            "db_id": "museum_visit"
        },
        {
            "index": 418,
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the shop addresses ordered by their opening year. */\nSELECT address FROM shop ORDER BY open_year\n\n/* Answer the following: Show name, opening year, and capacity for each cinema. */\nSELECT name ,  openning_year ,  capacity FROM cinema\n\n/* Answer the following: Return the names of shops, ordered by year of opening ascending. */\nSELECT Shop_Name FROM shop ORDER BY Open_Year ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the opening year and staff number of the museum named Plaza Museum? */\nSELECT ",
            "response": "Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 800,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM shop ORDER BY open_year",
                    "question": "Show the shop addresses ordered by their opening year."
                },
                {
                    "ex_id": 1935,
                    "db_id": "cinema",
                    "query": "SELECT name ,  openning_year ,  capacity FROM cinema",
                    "question": "Show name, opening year, and capacity for each cinema."
                },
                {
                    "ex_id": 5058,
                    "db_id": "device",
                    "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC",
                    "question": "Return the names of shops, ordered by year of opening ascending."
                }
            ],
            "example_quality": 0.7770915104608632,
            "example_similarity": 0.5820863368503716,
            "db_id": "museum_visit"
        },
        {
            "index": 419,
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the campus which has more faculties in 2002 than every campus in Orange county. */\nSELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")\n\n/* Answer the following: Find the total population of the districts where the area is bigger than the average city area. */\nSELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)\n\n/* Answer the following: What is the total population for all the districts that have an area larger tahn the average city area? */\nSELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. */\nSELECT ",
            "response": "name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2361,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
                    "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county."
                },
                {
                    "ex_id": 4941,
                    "db_id": "store_product",
                    "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
                    "question": "Find the total population of the districts where the area is bigger than the average city area."
                },
                {
                    "ex_id": 4942,
                    "db_id": "store_product",
                    "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
                    "question": "What is the total population for all the districts that have an area larger tahn the average city area?"
                }
            ],
            "example_quality": 0.777033514179526,
            "example_similarity": 0.5815473347020513,
            "db_id": "museum_visit"
        },
        {
            "index": 420,
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who tweeted more than once, and number of tweets tweeted by them. */\nSELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1\n\n/* Answer the following: Which cities have served as host cities more than once? Return me their GDP and population. */\nSELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1\n\n/* Answer the following: List the id of students who attended some courses? */\nSELECT student_id FROM student_course_attendance\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the id, name and age for visitors who visited some museums more than once. */\nSELECT ",
            "response": "t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 298,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
                    "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them."
                },
                {
                    "ex_id": 6308,
                    "db_id": "city_record",
                    "query": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
                    "question": "Which cities have served as host cities more than once? Return me their GDP and population."
                },
                {
                    "ex_id": 65,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance",
                    "question": "List the id of students who attended some courses?"
                }
            ],
            "example_quality": 0.7767886378687631,
            "example_similarity": 0.5810940750150899,
            "db_id": "museum_visit"
        },
        {
            "index": 421,
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and details for all organizations that have grants of more than 6000 dollars? */\nSELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000\n\n/* Answer the following: Find the name of the department that offers the largest number of credits of all classes. */\nSELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1\n\n/* Answer the following: Find the id and number of shops for the company that produces the most expensive furniture. */\nSELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? */\nSELECT ",
            "response": "t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4330,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000",
                    "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?"
                },
                {
                    "ex_id": 3240,
                    "db_id": "college_1",
                    "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
                    "question": "Find the name of the department that offers the largest number of credits of all classes."
                },
                {
                    "ex_id": 3401,
                    "db_id": "manufacturer",
                    "query": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
                    "question": "Find the id and number of shops for the company that produces the most expensive furniture."
                }
            ],
            "example_quality": 0.776688544008759,
            "example_similarity": 0.5802290251565152,
            "db_id": "museum_visit"
        },
        {
            "index": 422,
            "question": "What are the id and name of the museum visited most times?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id and detail of the vehicle used in lessons for most of the times? */\nSELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the entry names of catalog with the attribute possessed by most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: What is the name of the movie that is rated by most of times? */\nSELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id and name of the museum visited most times? */\nSELECT ",
            "response": "t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6715,
                    "db_id": "driving_school",
                    "query": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id and detail of the vehicle used in lessons for most of the times?"
                },
                {
                    "ex_id": 316,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the entry names of catalog with the attribute possessed by most entries."
                },
                {
                    "ex_id": 2509,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the movie that is rated by most of times?"
                }
            ],
            "example_quality": 0.7769333578855154,
            "example_similarity": 0.5799786279488192,
            "db_id": "museum_visit"
        },
        {
            "index": 423,
            "question": "What is the name of the museum that had no visitor yet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of artists who have not released any albums? */\nSELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId\n\n/* Answer the following: What are the names of artists that have not had any exhibitions? */\nSELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)\n\n/* Answer the following: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'? */\nSELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the museum that had no visitor yet? */\nSELECT ",
            "response": "name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 879,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
                    "question": "What are the names of artists who have not released any albums?"
                },
                {
                    "ex_id": 1673,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)",
                    "question": "What are the names of artists that have not had any exhibitions?"
                },
                {
                    "ex_id": 3005,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
                    "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?"
                }
            ],
            "example_quality": 0.7769944558048825,
            "example_similarity": 0.5793760099751133,
            "db_id": "museum_visit"
        },
        {
            "index": 424,
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the stores in the district with the most population. */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n\n/* Answer the following: Find the number of distinct products Rodrick Heaney has bought so far. */\nSELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"\n\n/* Answer the following: return me the authors who have the most number of papers in PVLDB . */\nSELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and age of the visitor who bought the most tickets at once. */\nSELECT ",
            "response": "t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4919,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
                    "question": "Find all the stores in the district with the most population."
                },
                {
                    "ex_id": 6115,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
                    "question": "Find the number of distinct products Rodrick Heaney has bought so far."
                },
                {
                    "ex_id": 8415,
                    "db_id": "academic",
                    "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
                    "question": "return me the authors who have the most number of papers in PVLDB ."
                }
            ],
            "example_quality": 0.7762515167678276,
            "example_similarity": 0.578813432627899,
            "db_id": "museum_visit"
        },
        {
            "index": 425,
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the average and maximum attendances of all events? */\nSELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n\n/* Answer the following: What is the average and maximum damage in millions for storms that had a max speed over 1000? */\nSELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000\n\n/* Answer the following: What is the maximum page size for everything that has more than 3 products listed? */\nSELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the average and maximum number of tickets bought in all visits? */\nSELECT ",
            "response": "avg(num_of_ticket) , max(num_of_ticket) FROM visit",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2818,
                    "db_id": "news_report",
                    "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
                    "question": "what are the average and maximum attendances of all events?"
                },
                {
                    "ex_id": 2704,
                    "db_id": "storm_record",
                    "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
                    "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?"
                },
                {
                    "ex_id": 4904,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
                    "question": "What is the maximum page size for everything that has more than 3 products listed?"
                }
            ],
            "example_quality": 0.7761705829321185,
            "example_similarity": 0.578382237623023,
            "db_id": "museum_visit"
        },
        {
            "index": 426,
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name of rooms booked by customers whose first name has \"ROY\" in part? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'\n\n/* Answer the following: What is the average ticket sales gross in dollars of films? */\nSELECT avg(Gross_in_dollar) FROM film\n\n/* Answer the following: What is the average fee for a CSU campus in the year of 1996? */\nSELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the total ticket expense of the visitors whose membership level is 1? */\nSELECT ",
            "response": "sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2646,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
                    "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?"
                },
                {
                    "ex_id": 4117,
                    "db_id": "film_rank",
                    "query": "SELECT avg(Gross_in_dollar) FROM film",
                    "question": "What is the average ticket sales gross in dollars of films?"
                },
                {
                    "ex_id": 2354,
                    "db_id": "csu_1",
                    "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
                    "question": "What is the average fee for a CSU campus in the year of 1996?"
                }
            ],
            "example_quality": 0.7758708511611154,
            "example_similarity": 0.5779918753565085,
            "db_id": "museum_visit"
        },
        {
            "index": 427,
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the instructors who taught C Programming course before. */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are names of the movies that are either made before 1980 or directed by James Cameron? */\nSELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980\n\n/* Answer the following: What are the member names and hometowns of those who registered at a branch in 2016? */\nSELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? */\nSELECT ",
            "response": "t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1431,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
                    "question": "Find the name of the instructors who taught C Programming course before."
                },
                {
                    "ex_id": 2527,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
                    "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?"
                },
                {
                    "ex_id": 5432,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
                    "question": "What are the member names and hometowns of those who registered at a branch in 2016?"
                }
            ],
            "example_quality": 0.7751347097334278,
            "example_similarity": 0.5776465912351948,
            "db_id": "museum_visit"
        },
        {
            "index": 428,
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of items that did not receive any review. */\nSELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n\n/* Answer the following: Find the number of users who did not write any review. */\nSELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n\n/* Answer the following: Count the number of students who did not enroll in any course. */\nSELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the number of visitors who did not visit any museum opened after 2010. */\nSELECT ",
            "response": "count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1698,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                    "question": "Find the number of items that did not receive any review."
                },
                {
                    "ex_id": 1718,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
                    "question": "Find the number of users who did not write any review."
                },
                {
                    "ex_id": 3846,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Course_Enrolment)",
                    "question": "Count the number of students who did not enroll in any course."
                }
            ],
            "example_quality": 0.7754141539679414,
            "example_similarity": 0.5777231886463846,
            "db_id": "museum_visit"
        },
        {
            "index": 429,
            "question": "How many museums were opened after 2013 or before 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many exhibition are there in year 2005 or after? */\nSELECT count(*) FROM exhibition WHERE YEAR  >=  2005\n\n/* Answer the following: How many aircrafts have distance between 1000 and 5000? */\nSELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000\n\n/* Answer the following: How many employees have salary between 100000 and 200000? */\nSELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many museums were opened after 2013 or before 2008? */\nSELECT ",
            "response": "count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1664,
                    "db_id": "theme_gallery",
                    "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
                    "question": "How many exhibition are there in year 2005 or after?"
                },
                {
                    "ex_id": 350,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
                    "question": "How many aircrafts have distance between 1000 and 5000?"
                },
                {
                    "ex_id": 368,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
                    "question": "How many employees have salary between 100000 and 200000?"
                }
            ],
            "example_quality": 0.7754595097742442,
            "example_similarity": 0.577597515767977,
            "db_id": "museum_visit"
        },
        {
            "index": 430,
            "question": "Find the total number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of employees. */\nSELECT count(*) FROM employee\n\n/* Answer the following: Find the total number of scientists. */\nSELECT count(*) FROM scientists\n\n/* Answer the following: Find the total number of catalog contents. */\nSELECT count(*) FROM catalog_contents\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of players. */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3248,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee",
                    "question": "Find the total number of employees."
                },
                {
                    "ex_id": 6470,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists",
                    "question": "Find the total number of scientists."
                },
                {
                    "ex_id": 341,
                    "db_id": "product_catalog",
                    "query": "SELECT count(*) FROM catalog_contents",
                    "question": "Find the total number of catalog contents."
                }
            ],
            "example_quality": 0.7759816969608156,
            "example_similarity": 0.57848294790185,
            "db_id": "wta_1"
        },
        {
            "index": 431,
            "question": "How many players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there? */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.7764047866043714,
            "example_similarity": 0.5794609457025417,
            "db_id": "wta_1"
        },
        {
            "index": 432,
            "question": "Find the total number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of employees. */\nSELECT count(*) FROM employee\n\n/* Answer the following: Find the total number of scientists. */\nSELECT count(*) FROM scientists\n\n/* Answer the following: Find the total number of catalog contents. */\nSELECT count(*) FROM catalog_contents\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3248,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM employee",
                    "question": "Find the total number of employees."
                },
                {
                    "ex_id": 6470,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists",
                    "question": "Find the total number of scientists."
                },
                {
                    "ex_id": 341,
                    "db_id": "product_catalog",
                    "query": "SELECT count(*) FROM catalog_contents",
                    "question": "Find the total number of catalog contents."
                }
            ],
            "example_quality": 0.7769223681168613,
            "example_similarity": 0.5803379651183537,
            "db_id": "wta_1"
        },
        {
            "index": 433,
            "question": "Count the number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Count the number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 236,
                    "db_id": "musical",
                    "query": "SELECT count(*) FROM actor",
                    "question": "Count the number of actors."
                },
                {
                    "ex_id": 669,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Count the number of accounts."
                }
            ],
            "example_quality": 0.7774375589526191,
            "example_similarity": 0.5813071615037616,
            "db_id": "wta_1"
        },
        {
            "index": 434,
            "question": "List the first name and birth date of all players from the country with code USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all transaction ids with transaction code 'PUR'. */\nSELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'\n\n/* Answer the following: List all characteristics of product named \"sesame\" with type code \"Grade\". */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"\n\n/* Answer the following: Find the names of all instructors in Comp. Sci. department with salary > 80000. */\nSELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first name and birth date of all players from the country with code USA. */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5851,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'",
                    "question": "Show all transaction ids with transaction code 'PUR'."
                },
                {
                    "ex_id": 5563,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
                    "question": "List all characteristics of product named \"sesame\" with type code \"Grade\"."
                },
                {
                    "ex_id": 1467,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
                    "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000."
                }
            ],
            "example_quality": 0.77795037563706,
            "example_similarity": 0.5810430128981462,
            "db_id": "wta_1"
        },
        {
            "index": 435,
            "question": "What are the first names and birth dates of players from the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the title and rental rate of the film with the highest rental rate? */\nSELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1\n\n/* Answer the following: What are the first name and last name of Linda Smith's advisor? */\nSELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"\n\n/* Answer the following: What is the id and market share of the browser Safari? */\nSELECT id ,  market_share FROM browser WHERE name  =  'Safari'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and birth dates of players from the USA? */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2950,
                    "db_id": "sakila_1",
                    "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
                    "question": "What are the title and rental rate of the film with the highest rental rate?"
                },
                {
                    "ex_id": 6750,
                    "db_id": "activity_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
                    "question": "What are the first name and last name of Linda Smith's advisor?"
                },
                {
                    "ex_id": 1831,
                    "db_id": "browser_web",
                    "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
                    "question": "What is the id and market share of the browser Safari?"
                }
            ],
            "example_quality": 0.7780428617118756,
            "example_similarity": 0.5814299172483315,
            "db_id": "wta_1"
        },
        {
            "index": 436,
            "question": "Find the average age of losers and winners of all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the average number of weeks on top for volumes by artists that are at most 25 years old. */\nSELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25\n\n/* Answer the following: List names of all pilot aged 30 or younger in descending alphabetical order. */\nSELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC\n\n/* Answer the following: How old is the average person for each job? */\nSELECT avg(age) ,  job FROM Person GROUP BY job\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average age of losers and winners of all matches. */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6175,
                    "db_id": "music_4",
                    "query": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
                    "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old."
                },
                {
                    "ex_id": 4814,
                    "db_id": "aircraft",
                    "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC",
                    "question": "List names of all pilot aged 30 or younger in descending alphabetical order."
                },
                {
                    "ex_id": 4424,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) ,  job FROM Person GROUP BY job",
                    "question": "How old is the average person for each job?"
                }
            ],
            "example_quality": 0.7774124134529367,
            "example_similarity": 0.5807096821340175,
            "db_id": "wta_1"
        },
        {
            "index": 437,
            "question": "What are the average ages of losers and winners across matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How old is the average person for each job? */\nSELECT avg(age) ,  job FROM Person GROUP BY job\n\n/* Answer the following: How old are the students with allergies to food and animal types on average? */\nSELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")\n\n/* Answer the following: What is the average number of votes of representatives from party \"Republican\"? */\nSELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the average ages of losers and winners across matches? */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4424,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) ,  job FROM Person GROUP BY job",
                    "question": "How old is the average person for each job?"
                },
                {
                    "ex_id": 527,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
                    "question": "How old are the students with allergies to food and animal types on average?"
                },
                {
                    "ex_id": 1187,
                    "db_id": "election_representative",
                    "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
                    "question": "What is the average number of votes of representatives from party \"Republican\"?"
                }
            ],
            "example_quality": 0.776843014326618,
            "example_similarity": 0.5802475111682012,
            "db_id": "wta_1"
        },
        {
            "index": 438,
            "question": "Find the average rank of winners in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average hours of all projects. */\nSELECT avg(hours) FROM projects\n\n/* Answer the following: Show the average population of all counties. */\nSELECT avg(Population) FROM county\n\n/* Answer the following: Find the average elevation of all airports for each country. */\nSELECT avg(elevation) ,  country FROM airports GROUP BY country\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average rank of winners in all matches. */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6478,
                    "db_id": "scientist_1",
                    "query": "SELECT avg(hours) FROM projects",
                    "question": "Find the average hours of all projects."
                },
                {
                    "ex_id": 2739,
                    "db_id": "election",
                    "query": "SELECT avg(Population) FROM county",
                    "question": "Show the average population of all counties."
                },
                {
                    "ex_id": 6864,
                    "db_id": "flight_4",
                    "query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
                    "question": "Find the average elevation of all airports for each country."
                }
            ],
            "example_quality": 0.7770354072416511,
            "example_similarity": 0.5805866444276068,
            "db_id": "wta_1"
        },
        {
            "index": 439,
            "question": "What is the average rank for winners in all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average amount due for all the payments? */\nSELECT avg(amount_due) FROM payments\n\n/* Answer the following: What is the average horizontal bar points for all gymnasts? */\nSELECT avg(Horizontal_Bar_Points) FROM gymnast\n\n/* Answer the following: What is the average money requested by all entrepreneurs? */\nSELECT avg(Money_Requested) FROM entrepreneur\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the average rank for winners in all matches? */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1971,
                    "db_id": "products_for_hire",
                    "query": "SELECT avg(amount_due) FROM payments",
                    "question": "What is the average amount due for all the payments?"
                },
                {
                    "ex_id": 1743,
                    "db_id": "gymnast",
                    "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
                    "question": "What is the average horizontal bar points for all gymnasts?"
                },
                {
                    "ex_id": 2270,
                    "db_id": "entrepreneur",
                    "query": "SELECT avg(Money_Requested) FROM entrepreneur",
                    "question": "What is the average money requested by all entrepreneurs?"
                }
            ],
            "example_quality": 0.7775432992524901,
            "example_similarity": 0.5810991020839347,
            "db_id": "wta_1"
        },
        {
            "index": 440,
            "question": "Find the highest rank of losers in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Answer the following: Return the highest acc percent across all basketball matches. */\nSELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1\n\n/* Answer the following: For each city, return the highest latitude among its stations. */\nSELECT city ,  max(lat) FROM station GROUP BY city\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the highest rank of losers in all matches. */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1695,
                    "db_id": "epinions_1",
                    "query": "SELECT min(rank) FROM review",
                    "question": "Find the highest rank of all reviews."
                },
                {
                    "ex_id": 989,
                    "db_id": "university_basketball",
                    "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
                    "question": "Return the highest acc percent across all basketball matches."
                },
                {
                    "ex_id": 114,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  max(lat) FROM station GROUP BY city",
                    "question": "For each city, return the highest latitude among its stations."
                }
            ],
            "example_quality": 0.777116481730879,
            "example_similarity": 0.5810764992295481,
            "db_id": "wta_1"
        },
        {
            "index": 441,
            "question": "What is the best rank of losers across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the first name and last name of all candidates? */\nSELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id\n\n/* Answer the following: What are the first name and department name of all employees? */\nSELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n\n/* Answer the following: What are the first and last names for all customers? */\nSELECT first_name ,  last_name FROM Customers;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the best rank of losers across all matches? */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 61,
                    "db_id": "student_assessment",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                    "question": "what are the first name and last name of all candidates?"
                },
                {
                    "ex_id": 3407,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
                    "question": "What are the first name and department name of all employees?"
                },
                {
                    "ex_id": 6660,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers;",
                    "question": "What are the first and last names for all customers?"
                }
            ],
            "example_quality": 0.7766500692358624,
            "example_similarity": 0.5811626015420608,
            "db_id": "wta_1"
        },
        {
            "index": 442,
            "question": "find the number of distinct country codes of all players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of rooms located on each block floor. */\nSELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor\n\n/* Answer the following: Find the number of checking accounts for each account name. */\nSELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: List the name and the number of stations for all the cities that have at least 15 stations. */\nSELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of distinct country codes of all players. */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3933,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
                    "question": "Find the number of rooms located on each block floor."
                },
                {
                    "ex_id": 1805,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "Find the number of checking accounts for each account name."
                },
                {
                    "ex_id": 178,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
                    "question": "List the name and the number of stations for all the cities that have at least 15 stations."
                }
            ],
            "example_quality": 0.7759690533001274,
            "example_similarity": 0.5809838728104373,
            "db_id": "wta_1"
        },
        {
            "index": 443,
            "question": "How many distinct countries do players come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct countries are the climbers from? */\nSELECT COUNT(DISTINCT Country) FROM climber\n\n/* Answer the following: How many distinct artists do the volumes associate to? */\nSELECT COUNT(DISTINCT Artist_ID) FROM volume\n\n/* Answer the following: How many distinct locations of perpetrators are there? */\nSELECT count(DISTINCT LOCATION) FROM perpetrator\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many distinct countries do players come from? */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1119,
                    "db_id": "climbing",
                    "query": "SELECT COUNT(DISTINCT Country) FROM climber",
                    "question": "How many distinct countries are the climbers from?"
                },
                {
                    "ex_id": 6164,
                    "db_id": "music_4",
                    "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
                    "question": "How many distinct artists do the volumes associate to?"
                },
                {
                    "ex_id": 2322,
                    "db_id": "perpetrator",
                    "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator",
                    "question": "How many distinct locations of perpetrators are there?"
                }
            ],
            "example_quality": 0.7764747664980955,
            "example_similarity": 0.5809663749558591,
            "db_id": "wta_1"
        },
        {
            "index": 444,
            "question": "Find the number of distinct name of losers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of distinct amenities. */\nSELECT count(*) FROM dorm_amenity\n\n/* Answer the following: Find the number of distinct projects. */\nSELECT count(DISTINCT name) FROM projects\n\n/* Answer the following: Find the number of distinct gender for dorms. */\nSELECT count(DISTINCT gender) FROM dorm\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of distinct name of losers. */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5681,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM dorm_amenity",
                    "question": "Find the number of distinct amenities."
                },
                {
                    "ex_id": 6476,
                    "db_id": "scientist_1",
                    "query": "SELECT count(DISTINCT name) FROM projects",
                    "question": "Find the number of distinct projects."
                },
                {
                    "ex_id": 5695,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT gender) FROM dorm",
                    "question": "Find the number of distinct gender for dorms."
                }
            ],
            "example_quality": 0.7768843578648416,
            "example_similarity": 0.5813034771083002,
            "db_id": "wta_1"
        },
        {
            "index": 445,
            "question": "How many different loser names are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different bike ids are there? */\nSELECT count(DISTINCT bike_id) FROM trip\n\n/* Answer the following: How many different card types are there? */\nSELECT count(DISTINCT card_type_code) FROM Customers_Cards\n\n/* Answer the following: How many different product types are there? */\nSELECT count(DISTINCT product_type_code) FROM products_for_hire\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different loser names are there? */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 127,
                    "db_id": "bike_1",
                    "query": "SELECT count(DISTINCT bike_id) FROM trip",
                    "question": "How many different bike ids are there?"
                },
                {
                    "ex_id": 733,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
                    "question": "How many different card types are there?"
                },
                {
                    "ex_id": 1969,
                    "db_id": "products_for_hire",
                    "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
                    "question": "How many different product types are there?"
                }
            ],
            "example_quality": 0.7773857413303139,
            "example_similarity": 0.5822443681709782,
            "db_id": "wta_1"
        },
        {
            "index": 446,
            "question": "Find the name of tourney that has more than 10 matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of states that have more than 2 parks. */\nSELECT state FROM park GROUP BY state HAVING count(*)  >  2;\n\n/* Answer the following: Find the name of dorms that can accommodate more than 300 students. */\nSELECT dorm_name FROM dorm WHERE student_capacity  >  300\n\n/* Answer the following: Show the locations of schools that have more than 1 player. */\nSELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of tourney that has more than 10 matches. */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3704,
                    "db_id": "baseball_1",
                    "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
                    "question": "List the names of states that have more than 2 parks."
                },
                {
                    "ex_id": 5671,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
                    "question": "Find the name of dorms that can accommodate more than 300 students."
                },
                {
                    "ex_id": 4881,
                    "db_id": "school_player",
                    "query": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
                    "question": "Show the locations of schools that have more than 1 player."
                }
            ],
            "example_quality": 0.7773866203358014,
            "example_similarity": 0.5824229789192603,
            "db_id": "wta_1"
        },
        {
            "index": 447,
            "question": "What are the names of tournaments that have more than 10 matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers who have a loan of more than 3000 in amount? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n\n/* Answer the following: What are the names of all the dorms that can accomdate more than 300 students? */\nSELECT dorm_name FROM dorm WHERE student_capacity  >  300\n\n/* Answer the following: Which headquarter locations are used by more than 2 companies? */\nSELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of tournaments that have more than 10 matches? */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3076,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
                    "question": "What are the names of customers who have a loan of more than 3000 in amount?"
                },
                {
                    "ex_id": 5672,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
                    "question": "What are the names of all the dorms that can accomdate more than 300 students?"
                },
                {
                    "ex_id": 4583,
                    "db_id": "company_office",
                    "query": "SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*)  >  2",
                    "question": "Which headquarter locations are used by more than 2 companies?"
                }
            ],
            "example_quality": 0.7768903539716399,
            "example_similarity": 0.5822560310267232,
            "db_id": "wta_1"
        },
        {
            "index": 448,
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names of all students who took some course and the course description. */\nSELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code\n\n/* Answer the following: Find the driver id and number of races of all drivers who have at most participated in 30 races? */\nSELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30\n\n/* Answer the following: Find the names and number of works of all artists who have at least one English songs. */\nSELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the names of all winners who played in both 2013 and 2016. */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3318,
                    "db_id": "college_1",
                    "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
                    "question": "Find names of all students who took some course and the course description."
                },
                {
                    "ex_id": 2230,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
                    "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?"
                },
                {
                    "ex_id": 3606,
                    "db_id": "music_1",
                    "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
                    "question": "Find the names and number of works of all artists who have at least one English songs."
                }
            ],
            "example_quality": 0.7759010344620495,
            "example_similarity": 0.581975772780459,
            "db_id": "wta_1"
        },
        {
            "index": 449,
            "question": "What are the names of players who won in both 2013 and 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: Which vocal type has the band mate with first name \"Solveig\" played the most? */\nSELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards? */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of players who won in both 2013 and 2016? */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 272,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?"
                },
                {
                    "ex_id": 5255,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Solveig\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type has the band mate with first name \"Solveig\" played the most?"
                },
                {
                    "ex_id": 274,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
                    "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?"
                }
            ],
            "example_quality": 0.7755617072662391,
            "example_similarity": 0.5813482402691744,
            "db_id": "wta_1"
        },
        {
            "index": 450,
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of classes offered for all class rooms that held at least 2 classes. */\nSELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2\n\n/* Answer the following: Find the driver id and number of races of all drivers who have at most participated in 30 races? */\nSELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30\n\n/* Answer the following: List the name and the number of stations for all the cities that have at least 15 stations. */\nSELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the number of all matches who played in years of 2013 or 2016. */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3204,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
                    "question": "Find the number of classes offered for all class rooms that held at least 2 classes."
                },
                {
                    "ex_id": 2230,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
                    "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?"
                },
                {
                    "ex_id": 178,
                    "db_id": "bike_1",
                    "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15",
                    "question": "List the name and the number of stations for all the cities that have at least 15 stations."
                }
            ],
            "example_quality": 0.7747271256945364,
            "example_similarity": 0.5809511486348672,
            "db_id": "wta_1"
        },
        {
            "index": 451,
            "question": "How many matches were played in 2013 or 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many games were played in city Atlanta in 2000? */\nSELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';\n\n/* Answer the following: How many games were played in park \"Columbia Park\" in 1907? */\nSELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';\n\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in 2013 or 2016? */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3692,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
                    "question": "How many games were played in city Atlanta in 2000?"
                },
                {
                    "ex_id": 3690,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';",
                    "question": "How many games were played in park \"Columbia Park\" in 1907?"
                },
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                }
            ],
            "example_quality": 0.7749423535129406,
            "example_similarity": 0.581063935848134,
            "db_id": "wta_1"
        },
        {
            "index": 452,
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"? */\nSELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"\n\n/* Answer the following: Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\". */\nSELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3670,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the name and id of the team with the most victories in 2008 postseason?"
                },
                {
                    "ex_id": 6194,
                    "db_id": "music_4",
                    "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
                    "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?"
                },
                {
                    "ex_id": 6195,
                    "db_id": "music_4",
                    "query": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
                    "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\"."
                }
            ],
            "example_quality": 0.774210303934496,
            "example_similarity": 0.5807417354240263,
            "db_id": "wta_1"
        },
        {
            "index": 453,
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: What is all the job history info done by employees earning a salary greater than or equal to 12000? */\nSELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000\n\n/* Answer the following: Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005. */\nSELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3670,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the name and id of the team with the most victories in 2008 postseason?"
                },
                {
                    "ex_id": 3467,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
                    "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?"
                },
                {
                    "ex_id": 6546,
                    "db_id": "wine_1",
                    "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005",
                    "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005."
                }
            ],
            "example_quality": 0.7734178083192097,
            "example_similarity": 0.5802388481593963,
            "db_id": "wta_1"
        },
        {
            "index": 454,
            "question": "Find the first name and country code of the oldest player.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the order id and customer id associated with the oldest order. */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Answer the following: Show the name and the nationality of the oldest host. */\nSELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the famous release date for the oldest artist. */\nSELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the oldest player. */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6889,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "Find the order id and customer id associated with the oldest order."
                },
                {
                    "ex_id": 2687,
                    "db_id": "party_host",
                    "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
                    "question": "Show the name and the nationality of the oldest host."
                },
                {
                    "ex_id": 6181,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
                    "question": "Return the famous release date for the oldest artist."
                }
            ],
            "example_quality": 0.7736499009854401,
            "example_similarity": 0.5804292178036855,
            "db_id": "wta_1"
        },
        {
            "index": 455,
            "question": "What is the first name and country code of the oldest player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the order id and customer id of the oldest order? */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Answer the following: What is the famous release date of the artist with the oldest age? */\nSELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: What is the starting year of the oldest technicians? */\nSELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the oldest player? */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6888,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "what are the order id and customer id of the oldest order?"
                },
                {
                    "ex_id": 6180,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1",
                    "question": "What is the famous release date of the artist with the oldest age?"
                },
                {
                    "ex_id": 2244,
                    "db_id": "machine_repair",
                    "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
                    "question": "What is the starting year of the oldest technicians?"
                }
            ],
            "example_quality": 0.7738809734641269,
            "example_similarity": 0.5808486947069548,
            "db_id": "wta_1"
        },
        {
            "index": 456,
            "question": "List the first and last name of all players in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the first and last names, and the addresses of all employees in the ascending order of their birth date. */\nSELECT fname ,  lname ,  address FROM employee ORDER BY Bdate\n\n/* Answer the following: List all ship names in the order of built year and class. */\nSELECT name FROM ship ORDER BY built_year ,  CLASS\n\n/* Answer the following: List the vehicle flight number, date and pilot of all the flights, ordered by altitude. */\nSELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2138,
                    "db_id": "company_1",
                    "query": "SELECT fname ,  lname ,  address FROM employee ORDER BY Bdate",
                    "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date."
                },
                {
                    "ex_id": 6253,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM ship ORDER BY built_year ,  CLASS",
                    "question": "List all ship names in the order of built year and class."
                },
                {
                    "ex_id": 6368,
                    "db_id": "flight_company",
                    "query": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC",
                    "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude."
                }
            ],
            "example_quality": 0.7742306496919101,
            "example_similarity": 0.5811529887582702,
            "db_id": "wta_1"
        },
        {
            "index": 457,
            "question": "What are the full names of all players, sorted by birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all customers, ordered by account balance? */\nSELECT cust_name FROM customer ORDER BY acc_bal\n\n/* Answer the following: What are the full names of all students */\nSELECT Fname ,  Lname FROM Student\n\n/* Answer the following: What are the full names, departments, cities, and state provinces for each employee? */\nSELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all players, sorted by birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3022,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
                    "question": "What are the names of all customers, ordered by account balance?"
                },
                {
                    "ex_id": 463,
                    "db_id": "allergy_1",
                    "query": "SELECT Fname ,  Lname FROM Student",
                    "question": "What are the full names of all students"
                },
                {
                    "ex_id": 3519,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
                    "question": "What are the full names, departments, cities, and state provinces for each employee?"
                }
            ],
            "example_quality": 0.7739952799259906,
            "example_similarity": 0.5812289625593965,
            "db_id": "wta_1"
        },
        {
            "index": 458,
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all students' first names and last names who majored in 600. */\nSELECT Fname , Lname FROM Student WHERE Major  =  600;\n\n/* Answer the following: List all the distinct stations from which a trip of duration below 100 started. */\nSELECT DISTINCT start_station_name FROM trip WHERE duration  <  100\n\n/* Answer the following: List all the product names with the color description \"white\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players who are left / L hand in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2829,
                    "db_id": "restaurant_1",
                    "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;",
                    "question": "List all students' first names and last names who majored in 600."
                },
                {
                    "ex_id": 194,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
                    "question": "List all the distinct stations from which a trip of duration below 100 started."
                },
                {
                    "ex_id": 5551,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
                    "question": "List all the product names with the color description \"white\"."
                }
            ],
            "example_quality": 0.7735756792751002,
            "example_similarity": 0.5809319471838481,
            "db_id": "wta_1"
        },
        {
            "index": 459,
            "question": "What are the full names of all left handed players, in order of birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all clubs? */\nSELECT clubname FROM club\n\n/* Answer the following: What is the installation date for each ending station on all the trips? */\nSELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id\n\n/* Answer the following: What are the names of all customers, ordered by account balance? */\nSELECT cust_name FROM customer ORDER BY acc_bal\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all left handed players, in order of birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4253,
                    "db_id": "club_1",
                    "query": "SELECT clubname FROM club",
                    "question": "What are the names of all clubs?"
                },
                {
                    "ex_id": 163,
                    "db_id": "bike_1",
                    "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
                    "question": "What is the installation date for each ending station on all the trips?"
                },
                {
                    "ex_id": 3022,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
                    "question": "What are the names of all customers, ordered by account balance?"
                }
            ],
            "example_quality": 0.7730522754713054,
            "example_similarity": 0.5806403033413139,
            "db_id": "wta_1"
        },
        {
            "index": 460,
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which project made the most number of outcomes? List the project details and the project id. */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and city of the airport which is the destination of the most number of routes. */\nSELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the names of the top 10 airlines that operate the most number of routes. */\nSELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the player who did the most number of tours. */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4357,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which project made the most number of outcomes? List the project details and the project id."
                },
                {
                    "ex_id": 6834,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and city of the airport which is the destination of the most number of routes."
                },
                {
                    "ex_id": 6836,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
                    "question": "Find the names of the top 10 airlines that operate the most number of routes."
                }
            ],
            "example_quality": 0.7727304226985418,
            "example_similarity": 0.5808404924051963,
            "db_id": "wta_1"
        },
        {
            "index": 461,
            "question": "What is the first name and country code of the player with the most tours?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id and name of the browser that is compatible with the most web accelerators? */\nSELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the time of elimination for the wrestler with the most days held? */\nSELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1\n\n/* Answer the following: What is the first and last name of the faculty participating in the most activities? */\nSELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the player with the most tours? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1835,
                    "db_id": "browser_web",
                    "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id and name of the browser that is compatible with the most web accelerators?"
                },
                {
                    "ex_id": 1862,
                    "db_id": "wrestler",
                    "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
                    "question": "What is the time of elimination for the wrestler with the most days held?"
                },
                {
                    "ex_id": 6784,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the first and last name of the faculty participating in the most activities?"
                }
            ],
            "example_quality": 0.7726811159247922,
            "example_similarity": 0.5814567250621844,
            "db_id": "wta_1"
        },
        {
            "index": 462,
            "question": "Find the year that has the most number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the business which has the most number of categories */\nSELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;\n\n/* Answer the following: Show the range that has the most number of mountains. */\nSELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the year that has the most number of matches. */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8244,
                    "db_id": "yelp",
                    "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
                    "question": "Find the business which has the most number of categories"
                },
                {
                    "ex_id": 1147,
                    "db_id": "climbing",
                    "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the range that has the most number of mountains."
                },
                {
                    "ex_id": 6484,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and hours of project that has the most number of scientists."
                }
            ],
            "example_quality": 0.7731307069224934,
            "example_similarity": 0.5818696373936997,
            "db_id": "wta_1"
        },
        {
            "index": 463,
            "question": "Which year had the most matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which artist has the most albums? */\nSELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which major has the most students? */\nSELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which state has the most customers? */\nSELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Which year had the most matches? */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 826,
                    "db_id": "chinook_1",
                    "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which artist has the most albums?"
                },
                {
                    "ex_id": 5509,
                    "db_id": "voter_2",
                    "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which major has the most students?"
                },
                {
                    "ex_id": 5813,
                    "db_id": "customer_complaints",
                    "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
                    "question": "Which state has the most customers?"
                }
            ],
            "example_quality": 0.7735360062892385,
            "example_similarity": 0.5822327699263267,
            "db_id": "wta_1"
        },
        {
            "index": 464,
            "question": "Find the name and rank points of the winner who won the most times.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the nominee who has been nominated the greatest number of times. */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Find the employee id for all employees who earn more than the average salary. */\nSELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank points of the winner who won the most times. */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 263,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the nominee who has been nominated the greatest number of times."
                },
                {
                    "ex_id": 3670,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the name and id of the team with the most victories in 2008 postseason?"
                },
                {
                    "ex_id": 3476,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
                    "question": "Find the employee id for all employees who earn more than the average salary."
                }
            ],
            "example_quality": 0.7735069726813703,
            "example_similarity": 0.5817488792796782,
            "db_id": "wta_1"
        },
        {
            "index": 465,
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and id of the team with the most victories in 2008 postseason? */\nSELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Who is the nominee who has been nominated for the most musicals? */\nSELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: How many gold medals has the club with the most coaches won? */\nSELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3670,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name ,  T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T1.year  =  2008 GROUP BY T1.team_id_winner ORDER BY count(*) DESC LIMIT 1;",
                    "question": "What are the name and id of the team with the most victories in 2008 postseason?"
                },
                {
                    "ex_id": 264,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Who is the nominee who has been nominated for the most musicals?"
                },
                {
                    "ex_id": 1736,
                    "db_id": "riding_club",
                    "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many gold medals has the club with the most coaches won?"
                }
            ],
            "example_quality": 0.7739144049185349,
            "example_similarity": 0.5813643234165614,
            "db_id": "wta_1"
        },
        {
            "index": 466,
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of instructor who is the advisor of the student who has the highest number of total credits. */\nSELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\n\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Answer the following: Find the name and building of the department with the highest budget. */\nSELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1439,
                    "db_id": "college_2",
                    "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
                    "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits."
                },
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                },
                {
                    "ex_id": 1331,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
                    "question": "Find the name and building of the department with the highest budget."
                }
            ],
            "example_quality": 0.7740419133486096,
            "example_similarity": 0.5813579894573258,
            "db_id": "wta_1"
        },
        {
            "index": 467,
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the teams in the basketball competition, sorted by all home scores in descending order? */\nSELECT team_name FROM basketball_match ORDER BY All_Home DESC\n\n/* Answer the following: What are the players who played for Columbus Crew, and how many years did each play for? */\nSELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"\n\n/* Answer the following: What is the name of the activity that has the most faculty members involved in? */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1023,
                    "db_id": "university_basketball",
                    "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
                    "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?"
                },
                {
                    "ex_id": 1090,
                    "db_id": "match_season",
                    "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
                    "question": "What are the players who played for Columbus Crew, and how many years did each play for?"
                },
                {
                    "ex_id": 6786,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the activity that has the most faculty members involved in?"
                }
            ],
            "example_quality": 0.7736790295157402,
            "example_similarity": 0.5809074750086708,
            "db_id": "wta_1"
        },
        {
            "index": 468,
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the train whose route runs through greatest number of stations. */\nSELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of the customers who use the most frequently used payment method. */\nSELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Show the names of customers who have the most mailshots. */\nSELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the names of loser and winner who played in the match with greatest number of minutes. */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3164,
                    "db_id": "station_weather",
                    "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the train whose route runs through greatest number of stations."
                },
                {
                    "ex_id": 6069,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)",
                    "question": "Find the name of the customers who use the most frequently used payment method."
                },
                {
                    "ex_id": 4630,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the names of customers who have the most mailshots."
                }
            ],
            "example_quality": 0.7732010828714759,
            "example_similarity": 0.580611647748952,
            "db_id": "wta_1"
        },
        {
            "index": 469,
            "question": "What are the names of the winner and loser who played in the longest match?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of the faculty members playing both Canoeing and Kayaking? */\nSELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'\n\n/* Answer the following: What are the draft pick numbers and draft classes for players who play the Defender position? */\nSELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Answer the following: What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'? */\nSELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of the winner and loser who played in the longest match? */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6801,
                    "db_id": "activity_1",
                    "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
                    "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?"
                },
                {
                    "ex_id": 1066,
                    "db_id": "match_season",
                    "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
                    "question": "What are the draft pick numbers and draft classes for players who play the Defender position?"
                },
                {
                    "ex_id": 4394,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT role_code FROM Project_Staff WHERE date_from  >  '2003-04-19 15:06:20' AND date_to  <  '2016-03-15 00:33:18'",
                    "question": "What roles did staff members play between '2003-04-19 15:06:20' and '2016-03-15 00:33:18'?"
                }
            ],
            "example_quality": 0.7724494331464917,
            "example_similarity": 0.580311289416318,
            "db_id": "wta_1"
        },
        {
            "index": 470,
            "question": "Find the average ranking for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average price of hotels for each star rating code. */\nSELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code\n\n/* Answer the following: Select the average price of each manufacturer's products, showing the manufacturer's name. */\nSELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: For each bed type, find the average base price of different bed type. */\nSELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average ranking for each player and their first name. */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5936,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
                    "question": "Show the average price of hotels for each star rating code."
                },
                {
                    "ex_id": 5343,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Select the average price of each manufacturer's products, showing the manufacturer's name."
                },
                {
                    "ex_id": 2598,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
                    "question": "For each bed type, find the average base price of different bed type."
                }
            ],
            "example_quality": 0.7729335832887333,
            "example_similarity": 0.580202992555232,
            "db_id": "wta_1"
        },
        {
            "index": 471,
            "question": "What are the first names of all players, and their average rankings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average money requested by all entrepreneurs? */\nSELECT avg(Money_Requested) FROM entrepreneur\n\n/* Answer the following: What is the average training hours of all players? */\nSELECT avg(HS) FROM Player\n\n/* Answer the following: What is the average horizontal bar points for all gymnasts? */\nSELECT avg(Horizontal_Bar_Points) FROM gymnast\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their average rankings? */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2270,
                    "db_id": "entrepreneur",
                    "query": "SELECT avg(Money_Requested) FROM entrepreneur",
                    "question": "What is the average money requested by all entrepreneurs?"
                },
                {
                    "ex_id": 4955,
                    "db_id": "soccer_2",
                    "query": "SELECT avg(HS) FROM Player",
                    "question": "What is the average training hours of all players?"
                },
                {
                    "ex_id": 1743,
                    "db_id": "gymnast",
                    "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
                    "question": "What is the average horizontal bar points for all gymnasts?"
                }
            ],
            "example_quality": 0.7725310349873418,
            "example_similarity": 0.5801477137316894,
            "db_id": "wta_1"
        },
        {
            "index": 472,
            "question": "Find the total ranking points for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: Find the total rating ratio for each channel owner. */\nSELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER\n\n/* Answer the following: Find the total revenue for each manufacturer. */\nSELECT sum(revenue) ,  name FROM manufacturers GROUP BY name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total ranking points for each player and their first name. */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                },
                {
                    "ex_id": 3765,
                    "db_id": "program_share",
                    "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
                    "question": "Find the total rating ratio for each channel owner."
                },
                {
                    "ex_id": 5311,
                    "db_id": "manufactory_1",
                    "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
                    "question": "Find the total revenue for each manufacturer."
                }
            ],
            "example_quality": 0.7730129607606736,
            "example_similarity": 0.5802044217945755,
            "db_id": "wta_1"
        },
        {
            "index": 473,
            "question": "What are the first names of all players, and their total ranking points?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What is the total checking balance in all accounts? */\nSELECT sum(balance) FROM checking\n\n/* Answer the following: What is the total rating of channel for each channel owner? */\nSELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their total ranking points? */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1808,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "What are the names of customers with accounts, and what are the total savings balances for each?"
                },
                {
                    "ex_id": 1781,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(balance) FROM checking",
                    "question": "What is the total checking balance in all accounts?"
                },
                {
                    "ex_id": 3766,
                    "db_id": "program_share",
                    "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
                    "question": "What is the total rating of channel for each channel owner?"
                }
            ],
            "example_quality": 0.7731992147783278,
            "example_similarity": 0.580046162115481,
            "db_id": "wta_1"
        },
        {
            "index": 474,
            "question": "find the number of players for each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of followers for each user. */\nSELECT count(*) FROM follows GROUP BY f1\n\n/* Answer the following: Find the number of students for each department. */\nSELECT count(*) ,  dept_code FROM student GROUP BY dept_code\n\n/* Answer the following: Find the number of phones for each accreditation type. */\nSELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of players for each country. */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 279,
                    "db_id": "twitter_1",
                    "query": "SELECT count(*) FROM follows GROUP BY f1",
                    "question": "Find the number of followers for each user."
                },
                {
                    "ex_id": 3218,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",
                    "question": "Find the number of students for each department."
                },
                {
                    "ex_id": 1043,
                    "db_id": "phone_1",
                    "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
                    "question": "Find the number of phones for each accreditation type."
                }
            ],
            "example_quality": 0.7735604916341634,
            "example_similarity": 0.5808618171883738,
            "db_id": "wta_1"
        },
        {
            "index": 475,
            "question": "How many players are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players are from each country? */\nSELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name\n\n/* Answer the following: How many climbers are from each country? */\nSELECT Country ,  COUNT(*) FROM climber GROUP BY Country\n\n/* Answer the following: How many gymnasts are from each hometown? */\nSELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are from each country? */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1094,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
                    "question": "How many players are from each country?"
                },
                {
                    "ex_id": 1140,
                    "db_id": "climbing",
                    "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country",
                    "question": "How many climbers are from each country?"
                },
                {
                    "ex_id": 1762,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown",
                    "question": "How many gymnasts are from each hometown?"
                }
            ],
            "example_quality": 0.7740372063886178,
            "example_similarity": 0.5817442133627141,
            "db_id": "wta_1"
        },
        {
            "index": 476,
            "question": "find the code of the country where has the greatest number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the code of the location with the largest number of documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the code of the role that have the most employees. */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the code of the country where has the greatest number of players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4230,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the location with the largest number of documents."
                },
                {
                    "ex_id": 39,
                    "db_id": "farm",
                    "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the status of the city that has hosted the greatest number of competitions."
                },
                {
                    "ex_id": 4208,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the role that have the most employees."
                }
            ],
            "example_quality": 0.7745119181399023,
            "example_similarity": 0.5818021897182665,
            "db_id": "wta_1"
        },
        {
            "index": 477,
            "question": "What is the code of the country with the most players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the code of the city with the most students? */\nSELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id of the account with the most transactions? */\nSELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id of the event with the most participants? */\nSELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the code of the country with the most players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5714,
                    "db_id": "dorm_1",
                    "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the code of the city with the most students?"
                },
                {
                    "ex_id": 1593,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the account with the most transactions?"
                },
                {
                    "ex_id": 2149,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the event with the most participants?"
                }
            ],
            "example_quality": 0.7749846394855209,
            "example_similarity": 0.582463895604467,
            "db_id": "wta_1"
        },
        {
            "index": 478,
            "question": "Find the codes of countries that have more than 50 players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the codes of document types that have more than 2 corresponding documents. */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\n\n/* Answer the following: Find the types of documents with more than 4 documents. */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Answer the following: List the names of states that have more than 2 parks. */\nSELECT state FROM park GROUP BY state HAVING count(*)  >  2;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the codes of countries that have more than 50 players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4543,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                    "question": "Give the codes of document types that have more than 2 corresponding documents."
                },
                {
                    "ex_id": 4504,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "Find the types of documents with more than 4 documents."
                },
                {
                    "ex_id": 3704,
                    "db_id": "baseball_1",
                    "query": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;",
                    "question": "List the names of states that have more than 2 parks."
                }
            ],
            "example_quality": 0.7754553829175596,
            "example_similarity": 0.5827031456070213,
            "db_id": "wta_1"
        },
        {
            "index": 479,
            "question": "What are the codes of countries with more than 50 players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of representatives with more than 10000 votes in election? */\nSELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000\n\n/* Answer the following: What are the attribute data types with more than 3 attribute definitions? */\nSELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3\n\n/* Answer the following: What are the songs in volumes with more than 1 week on top? */\nSELECT Song FROM volume WHERE Weeks_on_Top  >  1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the codes of countries with more than 50 players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1183,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE Votes  >  10000",
                    "question": "What are the names of representatives with more than 10000 votes in election?"
                },
                {
                    "ex_id": 305,
                    "db_id": "product_catalog",
                    "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3",
                    "question": "What are the attribute data types with more than 3 attribute definitions?"
                },
                {
                    "ex_id": 6160,
                    "db_id": "music_4",
                    "query": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
                    "question": "What are the songs in volumes with more than 1 week on top?"
                }
            ],
            "example_quality": 0.7749963018583488,
            "example_similarity": 0.5828958321506391,
            "db_id": "wta_1"
        },
        {
            "index": 480,
            "question": "Find the total number of tours for each ranking date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total number of rooms in the apartments that have facility code \"Gym\". */\nSELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"\n\n/* Answer the following: Find the total number of king beds available. */\nSELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';\n\n/* Answer the following: Find the number of rooms with king bed for each decor type. */\nSELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of tours for each ranking date. */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1242,
                    "db_id": "apartment_rentals",
                    "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"",
                    "question": "Find the total number of rooms in the apartments that have facility code \"Gym\"."
                },
                {
                    "ex_id": 2590,
                    "db_id": "inn_1",
                    "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';",
                    "question": "Find the total number of king beds available."
                },
                {
                    "ex_id": 2619,
                    "db_id": "inn_1",
                    "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
                    "question": "Find the number of rooms with king bed for each decor type."
                }
            ],
            "example_quality": 0.7747456863434372,
            "example_similarity": 0.5829694079110743,
            "db_id": "wta_1"
        },
        {
            "index": 481,
            "question": "How many total tours were there for each ranking date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many people are under 40 for each gender? */\nSELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender\n\n/* Answer the following: How many faculty, in total, are there in the year 2002? */\nSELECT sum(faculty) FROM faculty WHERE YEAR  =  2002\n\n/* Answer the following: How many faculty is there in total in the year of 2002? */\nSELECT sum(faculty) FROM faculty WHERE YEAR  =  2002\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many total tours were there for each ranking date? */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4430,
                    "db_id": "network_2",
                    "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
                    "question": "How many people are under 40 for each gender?"
                },
                {
                    "ex_id": 2374,
                    "db_id": "csu_1",
                    "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
                    "question": "How many faculty, in total, are there in the year 2002?"
                },
                {
                    "ex_id": 2373,
                    "db_id": "csu_1",
                    "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
                    "question": "How many faculty is there in total in the year of 2002?"
                }
            ],
            "example_quality": 0.7744961128888789,
            "example_similarity": 0.5828564935846333,
            "db_id": "wta_1"
        },
        {
            "index": 482,
            "question": "Find the number of matches happened in each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of departments in each school. */\nSELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code\n\n/* Answer the following: Find the number of classes in each department. */\nSELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code\n\n/* Answer the following: Find the number of classes in each school. */\nSELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of matches happened in each year. */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3196,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
                    "question": "Find the number of departments in each school."
                },
                {
                    "ex_id": 3206,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
                    "question": "Find the number of classes in each department."
                },
                {
                    "ex_id": 3208,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
                    "question": "Find the number of classes in each school."
                }
            ],
            "example_quality": 0.7749107661284435,
            "example_similarity": 0.5835144676643332,
            "db_id": "wta_1"
        },
        {
            "index": 483,
            "question": "How many matches were played in each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Answer the following: How many games were played in city Atlanta in 2000? */\nSELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';\n\n/* Answer the following: How many storms occured in each region? */\nSELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in each year? */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                },
                {
                    "ex_id": 3692,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year  =  2000 AND T2.city  =  'Atlanta';",
                    "question": "How many games were played in city Atlanta in 2000?"
                },
                {
                    "ex_id": 2714,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
                    "question": "How many storms occured in each region?"
                }
            ],
            "example_quality": 0.775111354338933,
            "example_similarity": 0.5837863110331748,
            "db_id": "wta_1"
        },
        {
            "index": 484,
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of all the activities Mark Giuliano participates in. */\nSELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n\n/* Answer the following: Find the names of all modern rooms with a base price below $160 and two beds. */\nSELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';\n\n/* Answer the following: Find the names of all the employees whose the role name is \"Editor\". */\nSELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank of the 3 youngest winners across all matches. */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6778,
                    "db_id": "activity_1",
                    "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
                    "question": "Show the names of all the activities Mark Giuliano participates in."
                },
                {
                    "ex_id": 2573,
                    "db_id": "inn_1",
                    "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';",
                    "question": "Find the names of all modern rooms with a base price below $160 and two beds."
                },
                {
                    "ex_id": 4216,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"",
                    "question": "Find the names of all the employees whose the role name is \"Editor\"."
                }
            ],
            "example_quality": 0.774370766141263,
            "example_similarity": 0.5837156847182368,
            "db_id": "wta_1"
        },
        {
            "index": 485,
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and descriptions of the all courses under the \"Computer Science\" subject? */\nSELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"\n\n/* Answer the following: What are the names of all the stores located in Khanewal District? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"\n\n/* Answer the following: What are the bed type and name of all the rooms with traditional decor? */\nSELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names and ranks of the three youngest winners across all matches? */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3814,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
                    "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?"
                },
                {
                    "ex_id": 4918,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
                    "question": "What are the names of all the stores located in Khanewal District?"
                },
                {
                    "ex_id": 2618,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";",
                    "question": "What are the bed type and name of all the rooms with traditional decor?"
                }
            ],
            "example_quality": 0.7736332319155421,
            "example_similarity": 0.5838617867361346,
            "db_id": "wta_1"
        },
        {
            "index": 486,
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many faculty members are at the university that gave the least number of degrees in 2001? */\nSELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1\n\n/* Answer the following: How many times did Boston Red Stockings lose in 2009 postseason? */\nSELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;\n\n/* Answer the following: How many drivers did not participate in the races held in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different winners both participated in the WTA Championships and were left handed? */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2384,
                    "db_id": "csu_1",
                    "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
                    "question": "How many faculty members are at the university that gave the least number of degrees in 2001?"
                },
                {
                    "ex_id": 3668,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;",
                    "question": "How many times did Boston Red Stockings lose in 2009 postseason?"
                },
                {
                    "ex_id": 2174,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not participate in the races held in 2009?"
                }
            ],
            "example_quality": 0.7732588151146185,
            "example_similarity": 0.5833943070652098,
            "db_id": "wta_1"
        },
        {
            "index": 487,
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many airports are there per city in the United States? Order the cities by decreasing number of airports. */\nSELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC\n\n/* Answer the following: Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ. */\nSELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";\n\n/* Answer the following: How many airports are there per country? Order the countries by decreasing number of airports. */\nSELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of left handed winners who participated in the WTA Championships. */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6850,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
                    "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports."
                },
                {
                    "ex_id": 2580,
                    "db_id": "inn_1",
                    "query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";",
                    "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ."
                },
                {
                    "ex_id": 6848,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
                    "question": "How many airports are there per country? Order the countries by decreasing number of airports."
                }
            ],
            "example_quality": 0.7726224474518529,
            "example_similarity": 0.582958871108889,
            "db_id": "wta_1"
        },
        {
            "index": 488,
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of instructor who is the advisor of the student who has the highest number of total credits. */\nSELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1\n\n/* Answer the following: display the department ID, full name (first and last name), salary for those employees who is highest salary in every department. */\nSELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id\n\n/* Answer the following: Show the name and population of the country that has the highest roller coaster. */\nSELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1439,
                    "db_id": "college_2",
                    "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
                    "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits."
                },
                {
                    "ex_id": 3516,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
                    "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department."
                },
                {
                    "ex_id": 6217,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the name and population of the country that has the highest roller coaster."
                }
            ],
            "example_quality": 0.7727240863345789,
            "example_similarity": 0.5828409752365874,
            "db_id": "wta_1"
        },
        {
            "index": 489,
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the invoice dates, order ids, and order details for all invoices? */\nSELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Answer the following: What are the names, checking balances, and savings balances for all customers? */\nSELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1607,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
                    "question": "What are the invoice dates, order ids, and order details for all invoices?"
                },
                {
                    "ex_id": 671,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
                    "question": "What are the account ids, customer ids, and account names for all the accounts?"
                },
                {
                    "ex_id": 1818,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
                    "question": "What are the names, checking balances, and savings balances for all customers?"
                }
            ],
            "example_quality": 0.7719618693891096,
            "example_similarity": 0.5827094364702927,
            "db_id": "wta_1"
        },
        {
            "index": 490,
            "question": "Find the number of players for each hand type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of medications prescribed for each brand. */\nSELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand\n\n/* Answer the following: Find the number of phones for each accreditation type. */\nSELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\n\n/* Answer the following: Find the number of rooms for each bed type. */\nSELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of players for each hand type. */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3945,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
                    "question": "Find the number of medications prescribed for each brand."
                },
                {
                    "ex_id": 1043,
                    "db_id": "phone_1",
                    "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
                    "question": "Find the number of phones for each accreditation type."
                },
                {
                    "ex_id": 2611,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;",
                    "question": "Find the number of rooms for each bed type."
                }
            ],
            "example_quality": 0.7724272533291319,
            "example_similarity": 0.5831899923513366,
            "db_id": "wta_1"
        },
        {
            "index": 491,
            "question": "How many players are there for each hand type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts are there for each customer id? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n\n/* Answer the following: How many students are there for each major? */\nSELECT major ,  count(*) FROM Student GROUP BY major\n\n/* Answer the following: How many events are there for each party? */\nSELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there for each hand type? */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 679,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
                    "question": "How many accounts are there for each customer id?"
                },
                {
                    "ex_id": 491,
                    "db_id": "allergy_1",
                    "query": "SELECT major ,  count(*) FROM Student GROUP BY major",
                    "question": "How many students are there for each major?"
                },
                {
                    "ex_id": 2073,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "How many events are there for each party?"
                }
            ],
            "example_quality": 0.7728907416115571,
            "example_similarity": 0.5837796813134057,
            "db_id": "wta_1"
        },
        {
            "index": 492,
            "question": "How many ships ended up being 'Captured'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many trains have 'Express' in their names? */\nSELECT count(*) FROM train WHERE name LIKE \"%Express%\"\n\n/* Answer the following: How many tests have result \"Fail\"? */\nSELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"\n\n/* Answer the following: How many events had participants whose details had the substring 'Dr.' */\nSELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many ships ended up being 'Captured'? */\nSELECT ",
            "response": "count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3161,
                    "db_id": "station_weather",
                    "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
                    "question": "How many trains have 'Express' in their names?"
                },
                {
                    "ex_id": 3787,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
                    "question": "How many tests have result \"Fail\"?"
                },
                {
                    "ex_id": 2146,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
                    "question": "How many events had participants whose details had the substring 'Dr.'"
                }
            ],
            "example_quality": 0.7731059796952489,
            "example_similarity": 0.5832330047554818,
            "db_id": "battle_death"
        },
        {
            "index": 493,
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the height and weight of people in descending order of height. */\nSELECT Height ,  Weight FROM people ORDER BY Height DESC\n\n/* Answer the following: List the names of perpetrators in descending order of the year. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC\n\n/* Answer the following: List the names of climbers in descending order of points. */\nSELECT Name FROM climber ORDER BY Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and tonnage ordered by in descending alphaetical order for the names. */\nSELECT ",
            "response": "name , tonnage FROM ship ORDER BY name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1167,
                    "db_id": "body_builder",
                    "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
                    "question": "List the height and weight of people in descending order of height."
                },
                {
                    "ex_id": 2319,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
                    "question": "List the names of perpetrators in descending order of the year."
                },
                {
                    "ex_id": 1113,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM climber ORDER BY Points DESC",
                    "question": "List the names of climbers in descending order of points."
                }
            ],
            "example_quality": 0.7735662109737576,
            "example_similarity": 0.583181283051704,
            "db_id": "battle_death"
        },
        {
            "index": 494,
            "question": "List the name, date and result of each battle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name, origin and owner of each program. */\nSELECT name ,  origin ,  OWNER FROM program\n\n/* Answer the following: Give the years and official names of the cities of each competition. */\nSELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID\n\n/* Answer the following: List the name for storms and the number of affected regions for each storm. */\nSELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name, date and result of each battle. */\nSELECT ",
            "response": "name , date FROM battle",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3739,
                    "db_id": "program_share",
                    "query": "SELECT name ,  origin ,  OWNER FROM program",
                    "question": "List the name, origin and owner of each program."
                },
                {
                    "ex_id": 36,
                    "db_id": "farm",
                    "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
                    "question": "Give the years and official names of the cities of each competition."
                },
                {
                    "ex_id": 2715,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
                    "question": "List the name for storms and the number of affected regions for each storm."
                }
            ],
            "example_quality": 0.773574736412632,
            "example_similarity": 0.5835021036663092,
            "db_id": "battle_death"
        },
        {
            "index": 495,
            "question": "What is maximum and minimum death toll caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average, maximum, and minimum budget for all movies before 2000. */\nSELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000\n\n/* Answer the following: What are the maximum and minimum settlement amount on record? */\nSELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements\n\n/* Answer the following: What are the maximum and minimum product prices for each product type? */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is maximum and minimum death toll caused each time? */\nSELECT ",
            "response": "max(killed) , min(killed) FROM death",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6993,
                    "db_id": "culture_company",
                    "query": "SELECT avg(budget_million) ,  max(budget_million) ,  min(budget_million) FROM movie WHERE YEAR  <  2000",
                    "question": "What is the average, maximum, and minimum budget for all movies before 2000."
                },
                {
                    "ex_id": 928,
                    "db_id": "insurance_fnol",
                    "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements",
                    "question": "What are the maximum and minimum settlement amount on record?"
                },
                {
                    "ex_id": 4747,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "What are the maximum and minimum product prices for each product type?"
                }
            ],
            "example_quality": 0.7735860071810304,
            "example_similarity": 0.583209955757668,
            "db_id": "battle_death"
        },
        {
            "index": 496,
            "question": "What is the average number of injuries caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are affected by each allergy type? */\nSELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype\n\n/* Answer the following: How many books fall into each category? */\nSELECT category ,  count(*) FROM book_club GROUP BY category\n\n/* Answer the following: How many students are affected by food related allergies? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the average number of injuries caused each time? */\nSELECT ",
            "response": "avg(injured) FROM death",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 519,
                    "db_id": "allergy_1",
                    "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
                    "question": "How many students are affected by each allergy type?"
                },
                {
                    "ex_id": 6976,
                    "db_id": "culture_company",
                    "query": "SELECT category ,  count(*) FROM book_club GROUP BY category",
                    "question": "How many books fall into each category?"
                },
                {
                    "ex_id": 513,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students are affected by food related allergies?"
                }
            ],
            "example_quality": 0.7730499311739968,
            "example_similarity": 0.5823428858364907,
            "db_id": "battle_death"
        },
        {
            "index": 497,
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids, scores, and dates of the games which caused at least two injury accidents? */\nSELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2\n\n/* Answer the following: What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'? */\nSELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'\n\n/* Answer the following: What is the season of the game which causes the player 'Walter Samuel' to get injured? */\nSELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the death and injury situations caused by the ship with tonnage 't'? */\nSELECT ",
            "response": "T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1282,
                    "db_id": "game_injury",
                    "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
                    "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?"
                },
                {
                    "ex_id": 942,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
                    "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?"
                },
                {
                    "ex_id": 1281,
                    "db_id": "game_injury",
                    "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
                    "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?"
                }
            ],
            "example_quality": 0.7730594439438232,
            "example_similarity": 0.5820481123354928,
            "db_id": "battle_death"
        },
        {
            "index": 498,
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the carriers of devices whose software platforms are not \"Android\"? */\nSELECT Carrier FROM device WHERE Software_Platform != 'Android'\n\n/* Answer the following: What are the nicknames of schools whose division is not 1? */\nSELECT Nickname FROM school_details WHERE Division != \"Division 1\"\n\n/* Answer the following: What are the distinct nominees of the musicals with the award that is not \"Tony Award\"? */\nSELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' */\nSELECT ",
            "response": "name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5055,
                    "db_id": "device",
                    "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                    "question": "What are the carriers of devices whose software platforms are not \"Android\"?"
                },
                {
                    "ex_id": 4898,
                    "db_id": "school_player",
                    "query": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
                    "question": "What are the nicknames of schools whose division is not 1?"
                },
                {
                    "ex_id": 249,
                    "db_id": "musical",
                    "query": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"",
                    "question": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?"
                }
            ],
            "example_quality": 0.7734195272940987,
            "example_similarity": 0.5818675935525984,
            "db_id": "battle_death"
        },
        {
            "index": 499,
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different product names for products that have the 'warm' characteristic:? */\nSELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"\n\n/* Answer the following: What are the different positions of players from UCLA or Duke colleges? */\nSELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n\n/* Answer the following: What are the different fates of the mission that involved ships from the United States? */\nSELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? */\nSELECT ",
            "response": "DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5574,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
                    "question": "What are the different product names for products that have the 'warm' characteristic:?"
                },
                {
                    "ex_id": 1064,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
                    "question": "What are the different positions of players from UCLA or Duke colleges?"
                },
                {
                    "ex_id": 4024,
                    "db_id": "ship_mission",
                    "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"",
                    "question": "What are the different fates of the mission that involved ships from the United States?"
                }
            ],
            "example_quality": 0.7738735963776776,
            "example_similarity": 0.5818712538534832,
            "db_id": "battle_death"
        },
        {
            "index": 500,
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the payment method codes that have been used by more than 3 parties? */\nSELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\n\n/* Answer the following: What are the categories of music festivals for which there have been more than 1 music festival? */\nSELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1\n\n/* Answer the following: What are the names and account balances for customers who have taken a total amount of more than 5000 in loans? */\nSELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the ids and names of the battles that led to more than 10 people killed in total. */\nSELECT ",
            "response": "T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6336,
                    "db_id": "e_government",
                    "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
                    "question": "What are the payment method codes that have been used by more than 3 parties?"
                },
                {
                    "ex_id": 6187,
                    "db_id": "music_4",
                    "query": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1",
                    "question": "What are the categories of music festivals for which there have been more than 1 music festival?"
                },
                {
                    "ex_id": 3066,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
                    "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?"
                }
            ],
            "example_quality": 0.7741480714071445,
            "example_similarity": 0.5816057829507144,
            "db_id": "battle_death"
        },
        {
            "index": 501,
            "question": "What is the ship id and name that caused most total injuries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured. */\nSELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'\n\n/* Answer the following: What is the season of the game which causes the player 'Walter Samuel' to get injured? */\nSELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'\n\n/* Answer the following: What are the id and the amount of refund of the booking that incurred the most times of payments? */\nSELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the ship id and name that caused most total injuries? */\nSELECT ",
            "response": "T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1289,
                    "db_id": "game_injury",
                    "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
                    "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured."
                },
                {
                    "ex_id": 1281,
                    "db_id": "game_injury",
                    "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
                    "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?"
                },
                {
                    "ex_id": 1964,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?"
                }
            ],
            "example_quality": 0.7737173500590337,
            "example_similarity": 0.5810847230573503,
            "db_id": "battle_death"
        },
        {
            "index": 502,
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct first names and cities of the students who have allergy either to milk or to cat? */\nSELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"\n\n/* Answer the following: What are the distinct types of mills that are built by American or Canadian architects? */\nSELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'\n\n/* Answer the following: What are the distinct secretary votes in the fall election cycle? */\nSELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? */\nSELECT ",
            "response": "name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 533,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
                    "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?"
                },
                {
                    "ex_id": 6953,
                    "db_id": "architecture",
                    "query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'",
                    "question": "What are the distinct types of mills that are built by American or Canadian architects?"
                },
                {
                    "ex_id": 5465,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
                    "question": "What are the distinct secretary votes in the fall election cycle?"
                }
            ],
            "example_quality": 0.7738835363281252,
            "example_similarity": 0.5808308781567677,
            "db_id": "battle_death"
        },
        {
            "index": 503,
            "question": "How many different results are there for the battles?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different professors are there for the different schools? */\nSELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code\n\n/* Answer the following: How many different genders are there in the dorms? */\nSELECT count(DISTINCT gender) FROM dorm\n\n/* Answer the following: How many different roles are there on the project staff? */\nSELECT count(DISTINCT role_code) FROM Project_Staff\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many different results are there for the battles? */\nSELECT ",
            "response": "count(DISTINCT RESULT) FROM battle",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3211,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
                    "question": "How many different professors are there for the different schools?"
                },
                {
                    "ex_id": 5696,
                    "db_id": "dorm_1",
                    "query": "SELECT count(DISTINCT gender) FROM dorm",
                    "question": "How many different genders are there in the dorms?"
                },
                {
                    "ex_id": 4346,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(DISTINCT role_code) FROM Project_Staff",
                    "question": "How many different roles are there on the project staff?"
                }
            ],
            "example_quality": 0.7740272148764865,
            "example_similarity": 0.5813178099611431,
            "db_id": "battle_death"
        },
        {
            "index": 504,
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many scientists do not have any projects assigned to them? */\nSELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Answer the following: How many trips did not end in San Francisco? */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\n\n/* Answer the following: How many tourists did not make any visit? */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many battles did not lose any ship with tonnage '225'? */\nSELECT ",
            "response": "count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6511,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "How many scientists do not have any projects assigned to them?"
                },
                {
                    "ex_id": 167,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
                    "question": "How many trips did not end in San Francisco?"
                },
                {
                    "ex_id": 5968,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "How many tourists did not make any visit?"
                }
            ],
            "example_quality": 0.7739882441424305,
            "example_similarity": 0.5812641007469604,
            "db_id": "battle_death"
        },
        {
            "index": 505,
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\" */\nSELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";\n\n/* Answer the following: Find the state, account type, and credit score of the customer whose number of loan is 0. */\nSELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n\n/* Answer the following: List the top 5 genres by number of tracks. List genres name and total tracks. */\nSELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' */\nSELECT ",
            "response": "T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1033,
                    "db_id": "phone_1",
                    "query": "SELECT T2.Hardware_Model_name ,  T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\";",
                    "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\""
                },
                {
                    "ex_id": 3025,
                    "db_id": "loan_1",
                    "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
                    "question": "Find the state, account type, and credit score of the customer whose number of loan is 0."
                },
                {
                    "ex_id": 550,
                    "db_id": "store_1",
                    "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;",
                    "question": "List the top 5 genres by number of tracks. List genres name and total tracks."
                }
            ],
            "example_quality": 0.7732679830852306,
            "example_similarity": 0.5809710461638474,
            "db_id": "battle_death"
        },
        {
            "index": 506,
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the school name and type for schools without a school bus. */\nSELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)\n\n/* Answer the following: Show the names and total passengers for all train stations not in London. */\nSELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'\n\n/* Answer the following: display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50. */\nSELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. */\nSELECT ",
            "response": "name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6362,
                    "db_id": "school_bus",
                    "query": "SELECT school ,  TYPE FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus)",
                    "question": "Show the school name and type for schools without a school bus."
                },
                {
                    "ex_id": 6603,
                    "db_id": "train_station",
                    "query": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'",
                    "question": "Show the names and total passengers for all train stations not in London."
                },
                {
                    "ex_id": 3446,
                    "db_id": "hr_1",
                    "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
                    "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50."
                }
            ],
            "example_quality": 0.7728896237941888,
            "example_similarity": 0.5806170556612545,
            "db_id": "battle_death"
        },
        {
            "index": 507,
            "question": "What are the notes of the death events which has substring 'East'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the phones of departments in Room 268? */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: What are the names of the storms that affected Denmark? */\nSELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'\n\n/* Answer the following: What are the different names of the genres? */\nSELECT DISTINCT name FROM genres;\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the notes of the death events which has substring 'East'? */\nSELECT ",
            "response": "note FROM death WHERE note LIKE '%East%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4646,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "What are the phones of departments in Room 268?"
                },
                {
                    "ex_id": 2728,
                    "db_id": "storm_record",
                    "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
                    "question": "What are the names of the storms that affected Denmark?"
                },
                {
                    "ex_id": 615,
                    "db_id": "store_1",
                    "query": "SELECT DISTINCT name FROM genres;",
                    "question": "What are the different names of the genres?"
                }
            ],
            "example_quality": 0.7726435853806857,
            "example_similarity": 0.5805237938815151,
            "db_id": "battle_death"
        },
        {
            "index": 508,
            "question": "what are all the addresses including line 1 and line 2?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first name and last name of all the teachers? */\nSELECT DISTINCT firstname ,  lastname FROM teachers\n\n/* Answer the following: What are the claim dates and settlement dates of all the settlements? */\nSELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements\n\n/* Answer the following: what are the first name and last name of all candidates? */\nSELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: what are all the addresses including line 1 and line 2? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4056,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT firstname ,  lastname FROM teachers",
                    "question": "What are the first name and last name of all the teachers?"
                },
                {
                    "ex_id": 3877,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements",
                    "question": "What are the claim dates and settlement dates of all the settlements?"
                },
                {
                    "ex_id": 61,
                    "db_id": "student_assessment",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
                    "question": "what are the first name and last name of all candidates?"
                }
            ],
            "example_quality": 0.7729599037821674,
            "example_similarity": 0.5809673706767499,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 509,
            "question": "What is the first and second line for all addresses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all colleges that have two or more players? */\nSELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2\n\n/* Answer the following: What are the areas and counties for all appelations? */\nSELECT Area ,  County FROM APPELLATIONS\n\n/* Answer the following: What are the first and last names for all customers? */\nSELECT first_name ,  last_name FROM Customers;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first and second line for all addresses? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1102,
                    "db_id": "match_season",
                    "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
                    "question": "What are the names of all colleges that have two or more players?"
                },
                {
                    "ex_id": 6529,
                    "db_id": "wine_1",
                    "query": "SELECT Area ,  County FROM APPELLATIONS",
                    "question": "What are the areas and counties for all appelations?"
                },
                {
                    "ex_id": 6660,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers;",
                    "question": "What are the first and last names for all customers?"
                }
            ],
            "example_quality": 0.7729381844464553,
            "example_similarity": 0.5810251928569505,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 510,
            "question": "How many courses in total are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts are there in total? */\nSELECT count(*) FROM accounts\n\n/* Answer the following: How many counties are there in total? */\nSELECT count(*) FROM county\n\n/* Answer the following: How many courses are there in total? */\nSELECT count(*) FROM COURSES\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses in total are listed? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1779,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM accounts",
                    "question": "How many accounts are there in total?"
                },
                {
                    "ex_id": 2735,
                    "db_id": "election",
                    "query": "SELECT count(*) FROM county",
                    "question": "How many counties are there in total?"
                },
                {
                    "ex_id": 3769,
                    "db_id": "e_learning",
                    "query": "SELECT count(*) FROM COURSES",
                    "question": "How many courses are there in total?"
                }
            ],
            "example_quality": 0.7733834036926388,
            "example_similarity": 0.5814109822391481,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 511,
            "question": "How many courses are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses are there? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.7737453409326401,
            "example_similarity": 0.5822301388296782,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 512,
            "question": "How is the math course described?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the description of the restaurant type Sandwich? */\nSELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";\n\n/* Answer the following: What is the description of the marketing region China? */\nSELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"\n\n/* Answer the following: How many customers are from California? */\nSELECT count(*) FROM customers WHERE state = \"CA\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How is the math course described? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2825,
                    "db_id": "restaurant_1",
                    "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
                    "question": "What is the description of the restaurant type Sandwich?"
                },
                {
                    "ex_id": 5107,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"",
                    "question": "What is the description of the marketing region China?"
                },
                {
                    "ex_id": 581,
                    "db_id": "store_1",
                    "query": "SELECT count(*) FROM customers WHERE state = \"CA\";",
                    "question": "How many customers are from California?"
                }
            ],
            "example_quality": 0.7739702306747422,
            "example_similarity": 0.5818959219786654,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 513,
            "question": "What are the descriptions for all the math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and descriptions of the all courses under the \"Computer Science\" subject? */\nSELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"\n\n/* Answer the following: What are the names of all the stores located in Khanewal District? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"\n\n/* Answer the following: What are all the movies rated as R? List the titles. */\nSELECT title FROM film WHERE rating  =  'R'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the descriptions for all the math courses? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3814,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
                    "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?"
                },
                {
                    "ex_id": 4918,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
                    "question": "What are the names of all the stores located in Khanewal District?"
                },
                {
                    "ex_id": 2973,
                    "db_id": "sakila_1",
                    "query": "SELECT title FROM film WHERE rating  =  'R'",
                    "question": "What are all the movies rated as R? List the titles."
                }
            ],
            "example_quality": 0.774410834513583,
            "example_similarity": 0.5817624996987804,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 514,
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the zip code of the customer Carole Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What are the email addresses of teachers whose address has zip code \"918\"? */\nSELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"\n\n/* Answer the following: What is the incident type description for the incident type with code \"VIOLENCE\"? */\nSELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code of the address in the city Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6688,
                    "db_id": "driving_school",
                    "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "What is the zip code of the customer Carole Bernhard?"
                },
                {
                    "ex_id": 3123,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"",
                    "question": "What are the email addresses of teachers whose address has zip code \"918\"?"
                },
                {
                    "ex_id": 3098,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"",
                    "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?"
                }
            ],
            "example_quality": 0.7748497239405993,
            "example_similarity": 0.5818399148447201,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 515,
            "question": "What is the zip code for Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the zip code of the customer Carole Bernhard? */\nSELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"\n\n/* Answer the following: What is the address for the customer with id 10? */\nSELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10\n\n/* Answer the following: What is the title of the course that is a prerequisite for Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code for Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6688,
                    "db_id": "driving_school",
                    "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"",
                    "question": "What is the zip code of the customer Carole Bernhard?"
                },
                {
                    "ex_id": 4717,
                    "db_id": "department_store",
                    "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
                    "question": "What is the address for the customer with id 10?"
                },
                {
                    "ex_id": 1438,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the title of the course that is a prerequisite for Mobile Computing?"
                }
            ],
            "example_quality": 0.7748985594280932,
            "example_similarity": 0.5818967521190237,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 516,
            "question": "Which department offers the most number of degrees? List department name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and first name of the student that has the most number of assessment notes? */\nSELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the ids and first names of the 3 teachers that have the most number of assessment notes? */\nSELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: What is the organisation type and id of the organisation which has the most number of research staff? */\nSELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which department offers the most number of degrees? List department name and id. */\nSELECT ",
            "response": "T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3105,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and first name of the student that has the most number of assessment notes?"
                },
                {
                    "ex_id": 3106,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?"
                },
                {
                    "ex_id": 4331,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the organisation type and id of the organisation which has the most number of research staff?"
                }
            ],
            "example_quality": 0.7753348025299767,
            "example_similarity": 0.5817135679819204,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 517,
            "question": "What is the name and id of the department with the most number of degrees ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name, address, and number of students in the departments that have the 3 most students? */\nSELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: What is the name of party with most number of members? */\nSELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the organisation type and id of the organisation which has the most number of research staff? */\nSELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name and id of the department with the most number of degrees ? */\nSELECT ",
            "response": "t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3307,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What is the name, address, and number of students in the departments that have the 3 most students?"
                },
                {
                    "ex_id": 2060,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of party with most number of members?"
                },
                {
                    "ex_id": 4331,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type ,  T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the organisation type and id of the organisation which has the most number of research staff?"
                }
            ],
            "example_quality": 0.7742667432371687,
            "example_similarity": 0.5818510229331697,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 518,
            "question": "How many departments offer any degree?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many departments offer courses? */\nSELECT count(DISTINCT dept_name) FROM course\n\n/* Answer the following: How many customers have an account? */\nSELECT count(DISTINCT customer_id) FROM Accounts\n\n/* Answer the following: How many video games exist? */\nSELECT count(*) FROM Video_games\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many departments offer any degree? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1339,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT dept_name) FROM course",
                    "question": "How many departments offer courses?"
                },
                {
                    "ex_id": 690,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
                    "question": "How many customers have an account?"
                },
                {
                    "ex_id": 5970,
                    "db_id": "game_1",
                    "query": "SELECT count(*) FROM Video_games",
                    "question": "How many video games exist?"
                }
            ],
            "example_quality": 0.7746220841446901,
            "example_similarity": 0.5820390186499644,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 519,
            "question": "How many different departments offer degrees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different courses offered by Physics department? */\nSELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'\n\n/* Answer the following: How many different instructors have taught some course? */\nSELECT COUNT (DISTINCT id) FROM teaches\n\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different departments offer degrees? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1341,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
                    "question": "How many different courses offered by Physics department?"
                },
                {
                    "ex_id": 1351,
                    "db_id": "college_2",
                    "query": "SELECT COUNT (DISTINCT id) FROM teaches",
                    "question": "How many different instructors have taught some course?"
                },
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                }
            ],
            "example_quality": 0.7749278861662482,
            "example_similarity": 0.582116442934304,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 520,
            "question": "How many different degree names are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different advisors are listed? */\nSELECT count(DISTINCT advisor) FROM Student\n\n/* Answer the following: How many different jobs are listed? */\nSELECT count(DISTINCT job) FROM Person\n\n/* Answer the following: How many different position for players are listed? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degree names are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 464,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT advisor) FROM Student",
                    "question": "How many different advisors are listed?"
                },
                {
                    "ex_id": 4408,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT job) FROM Person",
                    "question": "How many different jobs are listed?"
                },
                {
                    "ex_id": 3379,
                    "db_id": "sports_competition",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "How many different position for players are listed?"
                }
            ],
            "example_quality": 0.77536071715439,
            "example_similarity": 0.5822013394407045,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 521,
            "question": "How many different degrees are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different advisors are listed? */\nSELECT count(DISTINCT advisor) FROM Student\n\n/* Answer the following: How many different jobs are listed? */\nSELECT count(DISTINCT job) FROM Person\n\n/* Answer the following: How many different classes are there? */\nSELECT count(DISTINCT class_code) FROM CLASS\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degrees are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 464,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT advisor) FROM Student",
                    "question": "How many different advisors are listed?"
                },
                {
                    "ex_id": 4408,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT job) FROM Person",
                    "question": "How many different jobs are listed?"
                },
                {
                    "ex_id": 3228,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT class_code) FROM CLASS",
                    "question": "How many different classes are there?"
                }
            ],
            "example_quality": 0.77579188660323,
            "example_similarity": 0.5825234098064613,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 522,
            "question": "How many degrees does the engineering department offer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many courses does the department of Computer Information Systmes offer? */\nSELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"\n\n/* Answer the following: How many documents are with document type code BK for each product id? */\nSELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id\n\n/* Answer the following: How many wines are produced at Robert Biale winery? */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department offer? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3235,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
                    "question": "How many courses does the department of Computer Information Systmes offer?"
                },
                {
                    "ex_id": 6408,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
                    "question": "How many documents are with document type code BK for each product id?"
                },
                {
                    "ex_id": 6538,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "How many wines are produced at Robert Biale winery?"
                }
            ],
            "example_quality": 0.7759933434889562,
            "example_similarity": 0.5822058715056222,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 523,
            "question": "How many degrees does the engineering department have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many Parsing papers did acl 2012 have ? */\nSELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";\n\n/* Answer the following: How many courses does the department of Computer Information Systmes offer? */\nSELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"\n\n/* Answer the following: How many documents are with document type code BK for each product id? */\nSELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department have? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7714,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
                    "question": "how many Parsing papers did acl 2012 have ?"
                },
                {
                    "ex_id": 3235,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
                    "question": "How many courses does the department of Computer Information Systmes offer?"
                },
                {
                    "ex_id": 6408,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
                    "question": "How many documents are with document type code BK for each product id?"
                }
            ],
            "example_quality": 0.7759390905331822,
            "example_similarity": 0.5819070570781276,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 524,
            "question": "What are the names and descriptions of all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the customers? */\nSELECT customer_name FROM customers\n\n/* Answer the following: What are the names of all the subjects. */\nSELECT subject_name FROM SUBJECTS\n\n/* Answer the following: What are the names of all clubs? */\nSELECT clubname FROM club\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions of all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6057,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT customer_name FROM customers",
                    "question": "What are the names of all the customers?"
                },
                {
                    "ex_id": 3796,
                    "db_id": "e_learning",
                    "query": "SELECT subject_name FROM SUBJECTS",
                    "question": "What are the names of all the subjects."
                },
                {
                    "ex_id": 4253,
                    "db_id": "club_1",
                    "query": "SELECT clubname FROM club",
                    "question": "What are the names of all clubs?"
                }
            ],
            "example_quality": 0.7763666876886532,
            "example_similarity": 0.5822037492160963,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 525,
            "question": "What are the names and descriptions for all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the customers? */\nSELECT customer_name FROM customers\n\n/* Answer the following: What are the names of all the subjects. */\nSELECT subject_name FROM SUBJECTS\n\n/* Answer the following: What are the names of all the stores located in Khanewal District? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions for all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6057,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT customer_name FROM customers",
                    "question": "What are the names of all the customers?"
                },
                {
                    "ex_id": 3796,
                    "db_id": "e_learning",
                    "query": "SELECT subject_name FROM SUBJECTS",
                    "question": "What are the names of all the subjects."
                },
                {
                    "ex_id": 4918,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
                    "question": "What are the names of all the stores located in Khanewal District?"
                }
            ],
            "example_quality": 0.7765810156909394,
            "example_similarity": 0.5821774107764011,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 526,
            "question": "What are the names and id of courses having at most 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of products with price at most 200? */\nSELECT name FROM products WHERE price  <=  200\n\n/* Answer the following: What are the names of catalog entries with level number 8? */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"\n\n/* Answer the following: Which country has at most 3 stadiums listed? */\nSELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and id of courses having at most 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5328,
                    "db_id": "manufactory_1",
                    "query": "SELECT name FROM products WHERE price  <=  200",
                    "question": "What are the names of products with price at most 200?"
                },
                {
                    "ex_id": 331,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
                    "question": "What are the names of catalog entries with level number 8?"
                },
                {
                    "ex_id": 5610,
                    "db_id": "swimming",
                    "query": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3",
                    "question": "Which country has at most 3 stadiums listed?"
                }
            ],
            "example_quality": 0.7761608151963855,
            "example_similarity": 0.5820258396159746,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 527,
            "question": "What are the names and ids of every course with less than 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all songs that are in mp3 format and have a resolution lower than 1000? */\nSELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\n\n/* Answer the following: What is the id of every employee who has at least a salary of  100000? */\nSELECT eid FROM Employee WHERE salary  >  100000\n\n/* Answer the following: What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds? */\nSELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and ids of every course with less than 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3595,
                    "db_id": "music_1",
                    "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
                    "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?"
                },
                {
                    "ex_id": 367,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee WHERE salary  >  100000",
                    "question": "What is the id of every employee who has at least a salary of  100000?"
                },
                {
                    "ex_id": 2163,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
                    "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?"
                }
            ],
            "example_quality": 0.7753178998818656,
            "example_similarity": 0.5817096358850714,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 528,
            "question": "List the section_name in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of all distinct races in reversed  lexicographic order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Answer the following: What are the different names of all the races in reverse alphabetical order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List the section_name in reversed lexicographical order. */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2202,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "List the names of all distinct races in reversed  lexicographic order?"
                },
                {
                    "ex_id": 2203,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "What are the different names of all the races in reverse alphabetical order?"
                },
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.7756031423554338,
            "example_similarity": 0.5812336883866626,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 529,
            "question": "What are the names of the sections in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the courses in alphabetical order? */\nSELECT course_name FROM courses ORDER BY course_name\n\n/* Answer the following: What are the names of the regions in alphabetical order? */\nSELECT region_name FROM region ORDER BY region_name\n\n/* Answer the following: What are the names of the pilots in alphabetical order? */\nSELECT Name FROM pilot ORDER BY Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of the sections in reverse alphabetical order? */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 97,
                    "db_id": "student_assessment",
                    "query": "SELECT course_name FROM courses ORDER BY course_name",
                    "question": "What are the names of the courses in alphabetical order?"
                },
                {
                    "ex_id": 2696,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region ORDER BY region_name",
                    "question": "What are the names of the regions in alphabetical order?"
                },
                {
                    "ex_id": 4813,
                    "db_id": "aircraft",
                    "query": "SELECT Name FROM pilot ORDER BY Name ASC",
                    "question": "What are the names of the pilots in alphabetical order?"
                }
            ],
            "example_quality": 0.7756072531974422,
            "example_similarity": 0.5816819726588542,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 530,
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What the full names, ids of each employee and the name of the country they are in? */\nSELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\n\n/* Answer the following: What are the ids and full names of customers who hold two or more cards? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids, date opened, name, and other details for all accounts? */\nSELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the semester which most student registered in? Show both the name and the id. */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3525,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
                    "question": "What the full names, ids of each employee and the name of the country they are in?"
                },
                {
                    "ex_id": 717,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
                    "question": "What are the ids and full names of customers who hold two or more cards?"
                },
                {
                    "ex_id": 1553,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts",
                    "question": "What are the ids, date opened, name, and other details for all accounts?"
                }
            ],
            "example_quality": 0.7748224265363282,
            "example_similarity": 0.5811094004366401,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 531,
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and address of the department with the most students? */\nSELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name, address, and number of students in the departments that have the 3 most students? */\nSELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: What the full names, ids of each employee and the name of the country they are in? */\nSELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: For each semester, what is the name and id of the one with the most students registered? */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3305,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and address of the department with the most students?"
                },
                {
                    "ex_id": 3307,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What is the name, address, and number of students in the departments that have the 3 most students?"
                },
                {
                    "ex_id": 3525,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
                    "question": "What the full names, ids of each employee and the name of the country they are in?"
                }
            ],
            "example_quality": 0.7746262165440468,
            "example_similarity": 0.5810150449700425,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 532,
            "question": "What is the description of the department whose name has the substring the computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions of the courses with name \"database\"? */\nSELECT course_description FROM COURSES WHERE course_name  =  \"database\"\n\n/* Answer the following: What is the name of the department in the Building Mergenthaler? */\nSELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"\n\n/* Answer the following: What are the other account details for the account with the name 338? */\nSELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description of the department whose name has the substring the computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3771,
                    "db_id": "e_learning",
                    "query": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"",
                    "question": "What are the descriptions of the courses with name \"database\"?"
                },
                {
                    "ex_id": 4659,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"",
                    "question": "What is the name of the department in the Building Mergenthaler?"
                },
                {
                    "ex_id": 673,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
                    "question": "What are the other account details for the account with the name 338?"
                }
            ],
            "example_quality": 0.7745799266633249,
            "example_similarity": 0.5807807984413207,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 533,
            "question": "What is the department description for the one whose name has the word computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color description of the product with name \"catnip\"? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: What city and state is the bank with the name morningside in? */\nSELECT city ,  state FROM bank WHERE bname  =  'morningside'\n\n/* Answer the following: What are the other account details for the account with the name 338? */\nSELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the department description for the one whose name has the word computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5545,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "What is the color description of the product with name \"catnip\"?"
                },
                {
                    "ex_id": 3018,
                    "db_id": "loan_1",
                    "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
                    "question": "What city and state is the bank with the name morningside in?"
                },
                {
                    "ex_id": 673,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
                    "question": "What are the other account details for the account with the name 338?"
                }
            ],
            "example_quality": 0.7745338104782155,
            "example_similarity": 0.5805979701765777,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 534,
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the ids of the nurses who are on call in block floor 1 and block code 1. */\nSELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1\n\n/* Answer the following: Find the ids and names of members who are under age 30 or with black membership card. */\nSELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30\n\n/* Answer the following: Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix? */\nSELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3966,
                    "db_id": "hospital_1",
                    "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1",
                    "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1."
                },
                {
                    "ex_id": 793,
                    "db_id": "coffee_shop",
                    "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",
                    "question": "Find the ids and names of members who are under age 30 or with black membership card."
                },
                {
                    "ex_id": 2180,
                    "db_id": "formula_1",
                    "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
                    "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?"
                }
            ],
            "example_quality": 0.7737179960183103,
            "example_similarity": 0.5804211483507926,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 535,
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id, forename, and number of races for all drivers that have participated in at least 2 races? */\nSELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Answer the following: What are the ids of all the employees who have destroyed documents? */\nSELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Find the id, forename and number of races of all drivers who have at least participated in two races? */\nSELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2229,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
                    "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?"
                },
                {
                    "ex_id": 4246,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "What are the ids of all the employees who have destroyed documents?"
                },
                {
                    "ex_id": 2228,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
                    "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?"
                }
            ],
            "example_quality": 0.7732479104598128,
            "example_similarity": 0.5800569697288016,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 536,
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of medication used on the patient who stays in room 111? */\nSELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111\n\n/* Answer the following: Which authors have last name \"Ueno\"? List their first names. */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Answer the following: Which authors have first name \"Amal\"? List their last names. */\nSELECT lname FROM authors WHERE fname  =  \"Amal\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3923,
                    "db_id": "hospital_1",
                    "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
                    "question": "Find the name of medication used on the patient who stays in room 111?"
                },
                {
                    "ex_id": 2916,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "Which authors have last name \"Ueno\"? List their first names."
                },
                {
                    "ex_id": 2918,
                    "db_id": "icfp_1",
                    "query": "SELECT lname FROM authors WHERE fname  =  \"Amal\"",
                    "question": "Which authors have first name \"Amal\"? List their last names."
                }
            ],
            "example_quality": 0.773404430882729,
            "example_similarity": 0.5796712913026907,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 537,
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many professors attained either Ph.D. or Masters degrees? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'\n\n/* Answer the following: What are the course codes for every class that the student with the last name Smithson took? */\nSELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'\n\n/* Answer the following: What are the first names, office locations of all lecturers who have taught some course? */\nSELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3289,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
                    "question": "How many professors attained either Ph.D. or Masters degrees?"
                },
                {
                    "ex_id": 3285,
                    "db_id": "college_1",
                    "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
                    "question": "What are the course codes for every class that the student with the last name Smithson took?"
                },
                {
                    "ex_id": 3315,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
                    "question": "What are the first names, office locations of all lecturers who have taught some course?"
                }
            ],
            "example_quality": 0.7732233993097454,
            "example_similarity": 0.5790016550588355,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 538,
            "question": "Find the kind of program which most number of students are enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the entry names of catalog with the attribute possessed by most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: which country did participated in the most number of Tournament competitions? */\nSELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the characteristic name used by most number of the products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the kind of program which most number of students are enrolled in? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 316,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the entry names of catalog with the attribute possessed by most entries."
                },
                {
                    "ex_id": 3384,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                    "question": "which country did participated in the most number of Tournament competitions?"
                },
                {
                    "ex_id": 5595,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the characteristic name used by most number of the products?"
                }
            ],
            "example_quality": 0.7733530267514799,
            "example_similarity": 0.578506913484062,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 539,
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the salary and name of the employee who has the most number of aircraft certificates? */\nSELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the country with the most number of home airlines? */\nSELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the document with the most number of sections? */\nSELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the degree summary name that has the most number of students enrolled? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 436,
                    "db_id": "flight_1",
                    "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
                    "question": "what is the salary and name of the employee who has the most number of aircraft certificates?"
                },
                {
                    "ex_id": 6843,
                    "db_id": "flight_4",
                    "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the country with the most number of home airlines?"
                },
                {
                    "ex_id": 4528,
                    "db_id": "document_management",
                    "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the document with the most number of sections?"
                }
            ],
            "example_quality": 0.7737735220636293,
            "example_similarity": 0.5786258108478998,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 540,
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the entry names of catalog with the attribute possessed by most entries. */\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: Find the enrollment date for all the tests that have \"Pass\" result. */\nSELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"\n\n/* Answer the following: Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies. */\nSELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the program which most number of students are enrolled in. List both the id and the summary. */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 316,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the entry names of catalog with the attribute possessed by most entries."
                },
                {
                    "ex_id": 3830,
                    "db_id": "e_learning",
                    "query": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
                    "question": "Find the enrollment date for all the tests that have \"Pass\" result."
                },
                {
                    "ex_id": 2130,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies."
                }
            ],
            "example_quality": 0.7733875355468224,
            "example_similarity": 0.5780429646961238,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 541,
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the code of the city with the most students? */\nSELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the id and surname of the driver who participated the most number of races? */\nSELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the code of the role that have the most employees. */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the program id and the summary of the degree that has the most students enrolled? */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5714,
                    "db_id": "dorm_1",
                    "query": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the code of the city with the most students?"
                },
                {
                    "ex_id": 2232,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and surname of the driver who participated the most number of races?"
                },
                {
                    "ex_id": 4208,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the role that have the most employees."
                }
            ],
            "example_quality": 0.773806412560599,
            "example_similarity": 0.5777633430918199,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 542,
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the description and code of the service type that is performed the most times. */\nSELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: For each id of a driver who participated in at most 30 races, how many races did they participate in? */\nSELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30\n\n/* Answer the following: How many events have each participants attended? List the participant id, type and the number. */\nSELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5132,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Find the description and code of the service type that is performed the most times."
                },
                {
                    "ex_id": 2231,
                    "db_id": "formula_1",
                    "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
                    "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?"
                },
                {
                    "ex_id": 2141,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID",
                    "question": "How many events have each participants attended? List the participant id, type and the number."
                }
            ],
            "example_quality": 0.7735058939148738,
            "example_similarity": 0.577198037147679,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 543,
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the details of the student who registered for the most number of courses? */\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which organisation hired the most number of research staff? List the organisation id, type and detail. */\nSELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which building does the instructor who teaches the most number of courses live in? */\nSELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 79,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the details of the student who registered for the most number of courses?"
                },
                {
                    "ex_id": 4361,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_id ,  T1.organisation_type ,  T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail."
                },
                {
                    "ex_id": 4682,
                    "db_id": "college_3",
                    "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which building does the instructor who teaches the most number of courses live in?"
                }
            ],
            "example_quality": 0.7733625168982957,
            "example_similarity": 0.5767541452489997,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 544,
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which projects have no outcome? List the project details. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )\n\n/* Answer the following: Which buildings do not have any company office? Give me the building names. */\nSELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n\n/* Answer the following: Which schools do not have any player? Give me the school locations. */\nSELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which semesters do not have any student enrolled? List the semester name. */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4359,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_outcomes )",
                    "question": "Which projects have no outcome? List the project details."
                },
                {
                    "ex_id": 4577,
                    "db_id": "company_office",
                    "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
                    "question": "Which buildings do not have any company office? Give me the building names."
                },
                {
                    "ex_id": 4894,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school WHERE School_ID NOT IN (SELECT School_ID FROM Player)",
                    "question": "Which schools do not have any player? Give me the school locations."
                }
            ],
            "example_quality": 0.7737791299187032,
            "example_similarity": 0.5769945169302869,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 545,
            "question": "What is the name of the semester with no students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of parties that have no members? */\nSELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\n\n/* Answer the following: Find the name of the department that has no students minored in? */\nSELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO\n\n/* Answer the following: What is the name of the department htat has no students minoring in it? */\nSELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the semester with no students enrolled? */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2065,
                    "db_id": "party_people",
                    "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
                    "question": "What are the names of parties that have no members?"
                },
                {
                    "ex_id": 4674,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
                    "question": "Find the name of the department that has no students minored in?"
                },
                {
                    "ex_id": 4675,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
                    "question": "What is the name of the department htat has no students minoring in it?"
                }
            ],
            "example_quality": 0.7736233680085569,
            "example_similarity": 0.5768509939814311,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 546,
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the distinct participant ids who attended any events? */\nSELECT count(DISTINCT participant_id) FROM participants_in_Events\n\n/* Answer the following: What are the names and types of the companies that have ever operated a flight? */\nSELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id\n\n/* Answer the following: What are the names of every person who has a friend over 40 and under 30? */\nSELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are all the course names of the courses which ever have students enrolled in? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2153,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
                    "question": "What are all the distinct participant ids who attended any events?"
                },
                {
                    "ex_id": 6372,
                    "db_id": "flight_company",
                    "query": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
                    "question": "What are the names and types of the companies that have ever operated a flight?"
                },
                {
                    "ex_id": 4446,
                    "db_id": "network_2",
                    "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
                    "question": "What are the names of every person who has a friend over 40 and under 30?"
                }
            ],
            "example_quality": 0.7731527513394325,
            "example_similarity": 0.5766339286688889,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 547,
            "question": "What are the names of all courses that have some students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the games that have been played for at least 1000 hours? */\nSELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000\n\n/* Answer the following: What are the names of all the stores located in Khanewal District? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"\n\n/* Answer the following: find the name of all departments that do actually have one or more employees assigned to them. */\nSELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of all courses that have some students enrolled? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6047,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
                    "question": "What are the names of all the games that have been played for at least 1000 hours?"
                },
                {
                    "ex_id": 4918,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
                    "question": "What are the names of all the stores located in Khanewal District?"
                },
                {
                    "ex_id": 3480,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
                    "question": "find the name of all departments that do actually have one or more employees assigned to them."
                }
            ],
            "example_quality": 0.7728594161682425,
            "example_similarity": 0.5764152672705743,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 548,
            "question": "What's the name of the course with most number of enrollments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of party with most number of members? */\nSELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the airport with the most number of routes that start in China? */\nSELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: how many papers are in sigir ? */\nSELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What's the name of the course with most number of enrollments? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2060,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of party with most number of members?"
                },
                {
                    "ex_id": 6883,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the airport with the most number of routes that start in China?"
                },
                {
                    "ex_id": 7999,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
                    "question": "how many papers are in sigir ?"
                }
            ],
            "example_quality": 0.7728221483416097,
            "example_similarity": 0.5761261690054627,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 549,
            "question": "What is the name of the course with the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the course with the most registered students? */\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the activity with the most students? */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the course with the most students enrolled? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                },
                {
                    "ex_id": 58,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the course with the most registered students?"
                },
                {
                    "ex_id": 6794,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the activity with the most students?"
                }
            ],
            "example_quality": 0.7732359513500948,
            "example_similarity": 0.5765750708106864,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 550,
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of stations that have latitude above 37.4 and never had bike availability below 7? */\nSELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7\n\n/* Answer the following: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'? */\nSELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\n\n/* Answer the following: Find the countries that have never participated in any competition with Friendly type. */\nSELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 170,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
                    "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?"
                },
                {
                    "ex_id": 3005,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
                    "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?"
                },
                {
                    "ex_id": 3388,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'",
                    "question": "Find the countries that have never participated in any competition with Friendly type."
                }
            ],
            "example_quality": 0.7730253539974717,
            "example_similarity": 0.5760916875650566,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 551,
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the emails and phone numbers of custoemrs who have never filed a complaint? */\nSELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)\n\n/* Answer the following: What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'? */\nSELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )\n\n/* Answer the following: What is the total number of people who have no friends living in Austin? */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5784,
                    "db_id": "customer_complaints",
                    "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
                    "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?"
                },
                {
                    "ex_id": 3005,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
                    "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?"
                },
                {
                    "ex_id": 4482,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who have no friends living in Austin?"
                }
            ],
            "example_quality": 0.7726534780249205,
            "example_similarity": 0.5758656898590709,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 552,
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids for projects with at least 2 documents. */\nSELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2\n\n/* Answer the following: Find the id and color description of the products with at least 2 characteristics. */\nSELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n\n/* Answer the following: Show the account id and name with at least 4 transactions. */\nSELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date and id of the transcript with at least 2 course results. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6416,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
                    "question": "Show the ids for projects with at least 2 documents."
                },
                {
                    "ex_id": 5549,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
                    "question": "Find the id and color description of the products with at least 2 characteristics."
                },
                {
                    "ex_id": 1594,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
                    "question": "Show the account id and name with at least 4 transactions."
                }
            ],
            "example_quality": 0.7730653376661796,
            "example_similarity": 0.5760190839275985,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 553,
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and distance for the aircraft that has an id of 12? */\nSELECT name ,  distance FROM Aircraft WHERE aid  =  12\n\n/* Answer the following: What is the id and salary of the employee named Mark Young? */\nSELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'\n\n/* Answer the following: What are the id and address of the shops which have a happy hour in May? */\nSELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with at least 2 courses listed? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 353,
                    "db_id": "flight_1",
                    "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
                    "question": "What is the name and distance for the aircraft that has an id of 12?"
                },
                {
                    "ex_id": 381,
                    "db_id": "flight_1",
                    "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
                    "question": "What is the id and salary of the employee named Mark Young?"
                },
                {
                    "ex_id": 804,
                    "db_id": "coffee_shop",
                    "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
                    "question": "What are the id and address of the shops which have a happy hour in May?"
                }
            ],
            "example_quality": 0.7722701622514728,
            "example_similarity": 0.5760659947782063,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 554,
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the phone number of the performer Ashley? */\nSELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n\n/* Answer the following: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"? */\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"\n\n/* Answer the following: What are the phone numbers of customers using the policy with the code \"Life Insurance\"? */\nSELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the phone number of the man with the first name Timmothy and the last name Ward? */\nSELECT ",
            "response": "cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5115,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
                    "question": "What is the phone number of the performer Ashley?"
                },
                {
                    "ex_id": 87,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
                    "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?"
                },
                {
                    "ex_id": 895,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
                    "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?"
                }
            ],
            "example_quality": 0.7726812269405496,
            "example_similarity": 0.5758465366929366,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 555,
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the phone number of the performer Ashley? */\nSELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n\n/* Answer the following: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"? */\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"\n\n/* Answer the following: Find the phone number of performer \"Ashley\". */\nSELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the mobile phone number of the student named Timmothy Ward ? */\nSELECT ",
            "response": "cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5115,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
                    "question": "What is the phone number of the performer Ashley?"
                },
                {
                    "ex_id": 87,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
                    "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?"
                },
                {
                    "ex_id": 5116,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
                    "question": "Find the phone number of performer \"Ashley\"."
                }
            ],
            "example_quality": 0.7715735035349669,
            "example_similarity": 0.5757179701364493,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 556,
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which staff have contacted which engineers? List the staff name and the engineer first name and last name. */\nSELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id\n\n/* Answer the following: What are the gas station ids, locations, and manager names for the gas stations ordered by opening year? */\nSELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the names, address roads, and cities of the branches ordered by opening year? */\nSELECT name ,  address_road ,  city FROM branch ORDER BY open_year\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the first student to register? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3147,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
                    "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name."
                },
                {
                    "ex_id": 2015,
                    "db_id": "gas_company",
                    "query": "SELECT station_id ,  LOCATION ,  manager_name FROM gas_station ORDER BY open_year",
                    "question": "What are the gas station ids, locations, and manager names for the gas stations ordered by opening year?"
                },
                {
                    "ex_id": 5404,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",
                    "question": "What are the names, address roads, and cities of the branches ordered by opening year?"
                }
            ],
            "example_quality": 0.771384822173693,
            "example_similarity": 0.5755946653229435,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 557,
            "question": "What is the first, middle, and last name of the first student to register?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, address roads, and cities of the branches ordered by opening year? */\nSELECT name ,  address_road ,  city FROM branch ORDER BY open_year\n\n/* Answer the following: What are the id and name of the photos for mountains? */\nSELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000\n\n/* Answer the following: What is the theme, date, and attendance for the exhibition in year 2004? */\nSELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the first student to register? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5404,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",
                    "question": "What are the names, address roads, and cities of the branches ordered by opening year?"
                },
                {
                    "ex_id": 3718,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
                    "question": "What are the id and name of the photos for mountains?"
                },
                {
                    "ex_id": 1680,
                    "db_id": "theme_gallery",
                    "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004",
                    "question": "What is the theme, date, and attendance for the exhibition in year 2004?"
                }
            ],
            "example_quality": 0.7710227254906109,
            "example_similarity": 0.575716173740319,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 558,
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names and date of birth of professors teaching course ACCT-211? */\nSELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: What are the first and last names of the employee with the earliest date of birth? */\nSELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the earliest graduate of the school? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3180,
                    "db_id": "college_1",
                    "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
                    "question": "What are the first names and date of birth of professors teaching course ACCT-211?"
                },
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                },
                {
                    "ex_id": 3265,
                    "db_id": "college_1",
                    "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
                    "question": "What are the first and last names of the employee with the earliest date of birth?"
                }
            ],
            "example_quality": 0.771084612282842,
            "example_similarity": 0.5752768521254505,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 559,
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names and date of birth of professors teaching course ACCT-211? */\nSELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"\n\n/* Answer the following: What is the first and last name of the youngest student with a GPA above 3, and what is their GPA? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the earliest school graduate? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3180,
                    "db_id": "college_1",
                    "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
                    "question": "What are the first names and date of birth of professors teaching course ACCT-211?"
                },
                {
                    "ex_id": 3267,
                    "db_id": "college_1",
                    "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
                    "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?"
                },
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                }
            ],
            "example_quality": 0.7709627998333045,
            "example_similarity": 0.574948016397589,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 560,
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different positions of players from UCLA or Duke colleges? */\nSELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n\n/* Answer the following: What are the different product names for products that have the 'warm' characteristic:? */\nSELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"\n\n/* Answer the following: What are the distinct last names of the students who have class president votes? */\nSELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Whose permanent address is different from his or her current address? List his or her first name. */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1064,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
                    "question": "What are the different positions of players from UCLA or Duke colleges?"
                },
                {
                    "ex_id": 5574,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
                    "question": "What are the different product names for products that have the 'warm' characteristic:?"
                },
                {
                    "ex_id": 5474,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
                    "question": "What are the distinct last names of the students who have class president votes?"
                }
            ],
            "example_quality": 0.770946624765575,
            "example_similarity": 0.5744522419143969,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 561,
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different fates of the mission that involved ships from the United States? */\nSELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"\n\n/* Answer the following: What are the different positions of players from UCLA or Duke colleges? */\nSELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n\n/* Answer the following: What are the different location codes for documents? */\nSELECT DISTINCT location_code FROM Document_locations\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first name of the student whose permanent address is different from his or her current one? */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4024,
                    "db_id": "ship_mission",
                    "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"",
                    "question": "What are the different fates of the mission that involved ships from the United States?"
                },
                {
                    "ex_id": 1064,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
                    "question": "What are the different positions of players from UCLA or Duke colleges?"
                },
                {
                    "ex_id": 4219,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT DISTINCT location_code FROM Document_locations",
                    "question": "What are the different location codes for documents?"
                }
            ],
            "example_quality": 0.7709305073629711,
            "example_similarity": 0.5742539374960173,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 562,
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which project made the most number of outcomes? List the project details and the project id. */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which countries has the most number of airlines whose active status is 'Y'? */\nSELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name of airline which runs the most number of routes. */\nSELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which address holds the most number of students currently? List the address id and all lines. */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4357,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which project made the most number of outcomes? List the project details and the project id."
                },
                {
                    "ex_id": 6844,
                    "db_id": "flight_4",
                    "query": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which countries has the most number of airlines whose active status is 'Y'?"
                },
                {
                    "ex_id": 6880,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of airline which runs the most number of routes."
                }
            ],
            "example_quality": 0.7712722021238252,
            "example_similarity": 0.5742291394939203,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 563,
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and last name of the student that has the most behavior incidents? */\nSELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the details and id of the project with the most outcomes? */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the city name, id, and number of addresses corresponding to the city with the most addressed? */\nSELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id, line 1, and line 2 of the address with the most students? */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3107,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the id and last name of the student that has the most behavior incidents?"
                },
                {
                    "ex_id": 4358,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the details and id of the project with the most outcomes?"
                },
                {
                    "ex_id": 2936,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?"
                }
            ],
            "example_quality": 0.7714982740998712,
            "example_similarity": 0.5743349895108761,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 564,
            "question": "On average, when were the transcripts printed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: when were most NIPS papers published ? */\nSELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;\n\n/* Answer the following: On which day was the order placed whose shipment tracking number is 3452? */\nSELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\n\n/* Answer the following: On what day was the order with invoice number 10 placed? */\nSELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: On average, when were the transcripts printed? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7866,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
                    "question": "when were most NIPS papers published ?"
                },
                {
                    "ex_id": 6915,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
                    "question": "On which day was the order placed whose shipment tracking number is 3452?"
                },
                {
                    "ex_id": 6917,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
                    "question": "On what day was the order with invoice number 10 placed?"
                }
            ],
            "example_quality": 0.7708098956316717,
            "example_similarity": 0.5737771578313473,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 565,
            "question": "What is the average transcript date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average enrollment of schools? */\nSELECT avg(Enrollment) FROM school\n\n/* Answer the following: What is the average quantity of stocks? */\nSELECT avg(Quantity) FROM stock\n\n/* Answer the following: What is the average score of submissions? */\nSELECT avg(Scores) FROM submission\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the average transcript date? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4869,
                    "db_id": "school_player",
                    "query": "SELECT avg(Enrollment) FROM school",
                    "question": "What is the average enrollment of schools?"
                },
                {
                    "ex_id": 5059,
                    "db_id": "device",
                    "query": "SELECT avg(Quantity) FROM stock",
                    "question": "What is the average quantity of stocks?"
                },
                {
                    "ex_id": 5823,
                    "db_id": "workshop_paper",
                    "query": "SELECT avg(Scores) FROM submission",
                    "question": "What is the average score of submissions?"
                }
            ],
            "example_quality": 0.7712155418340935,
            "example_similarity": 0.5743102956050972,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 566,
            "question": "When is the first transcript released? List the date and details.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When was the document named \"Marry CV\" stored? Give me the date. */\nSELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"\n\n/* Answer the following: When was the order placed whose shipment tracking number is 3452? Give me the date. */\nSELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\n\n/* Answer the following: When was the first asset acquired? */\nSELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When is the first transcript released? List the date and details. */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4176,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
                    "question": "When was the document named \"Marry CV\" stored? Give me the date."
                },
                {
                    "ex_id": 6914,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
                    "question": "When was the order placed whose shipment tracking number is 3452? Give me the date."
                },
                {
                    "ex_id": 3143,
                    "db_id": "assets_maintenance",
                    "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
                    "question": "When was the first asset acquired?"
                }
            ],
            "example_quality": 0.7709772875841457,
            "example_similarity": 0.5740247622430712,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 567,
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Of all the claims, what was the earliest date when any claim was made? */\nSELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1\n\n/* Answer the following: What are the enrollment and primary conference for the university which was founded the earliest? */\nSELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1\n\n/* Answer the following: Which company started the earliest the maintenance contract? Show the company name. */\nSELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the earliest date of a transcript release, and what details can you tell me? */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3871,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                    "question": "Of all the claims, what was the earliest date when any claim was made?"
                },
                {
                    "ex_id": 999,
                    "db_id": "university_basketball",
                    "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
                    "question": "What are the enrollment and primary conference for the university which was founded the earliest?"
                },
                {
                    "ex_id": 3153,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
                    "question": "Which company started the earliest the maintenance contract? Show the company name."
                }
            ],
            "example_quality": 0.7713812077118634,
            "example_similarity": 0.5734545461733519,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 568,
            "question": "How many transcripts are released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many songs were released for each format? */\nSELECT count(*) ,  formats FROM files GROUP BY formats\n\n/* Answer the following: How many courses are offered? */\nSELECT count(DISTINCT crs_code) FROM CLASS\n\n/* Answer the following: How many colleges in total? */\nSELECT count(*) FROM College\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are released? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3569,
                    "db_id": "music_1",
                    "query": "SELECT count(*) ,  formats FROM files GROUP BY formats",
                    "question": "How many songs were released for each format?"
                },
                {
                    "ex_id": 3230,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
                    "question": "How many courses are offered?"
                },
                {
                    "ex_id": 4949,
                    "db_id": "soccer_2",
                    "query": "SELECT count(*) FROM College",
                    "question": "How many colleges in total?"
                }
            ],
            "example_quality": 0.7714658260863924,
            "example_similarity": 0.5734509793164069,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 569,
            "question": "How many transcripts are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many reviewers listed? */\nSELECT count(*) FROM Reviewer\n\n/* Answer the following: How many farms are there? */\nSELECT count(*) FROM farm\n\n/* Answer the following: How many books are there? */\nSELECT count(*) FROM book\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are listed? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2443,
                    "db_id": "movie_1",
                    "query": "SELECT count(*) FROM Reviewer",
                    "question": "How many reviewers listed?"
                },
                {
                    "ex_id": 17,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "How many farms are there?"
                },
                {
                    "ex_id": 214,
                    "db_id": "book_2",
                    "query": "SELECT count(*) FROM book",
                    "question": "How many books are there?"
                }
            ],
            "example_quality": 0.7718674678683143,
            "example_similarity": 0.5737682328746703,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 570,
            "question": "What is the last transcript release date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions for the aircrafts? */\nSELECT Description FROM aircraft\n\n/* Answer the following: What ranks do we have for faculty? */\nSELECT DISTINCT rank FROM Faculty\n\n/* Answer the following: When and in what zip code did max temperature reach 80? */\nSELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the last transcript release date? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4801,
                    "db_id": "aircraft",
                    "query": "SELECT Description FROM aircraft",
                    "question": "What are the descriptions for the aircrafts?"
                },
                {
                    "ex_id": 6718,
                    "db_id": "activity_1",
                    "query": "SELECT DISTINCT rank FROM Faculty",
                    "question": "What ranks do we have for faculty?"
                },
                {
                    "ex_id": 154,
                    "db_id": "bike_1",
                    "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
                    "question": "When and in what zip code did max temperature reach 80?"
                }
            ],
            "example_quality": 0.7712257014440904,
            "example_similarity": 0.5734173015428504,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 571,
            "question": "When was the last transcript released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When was the first asset acquired? */\nSELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1\n\n/* Answer the following: When did the first payment happen? */\nSELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1\n\n/* Answer the following: When did Carole Bernhard first become a customer? */\nSELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When was the last transcript released? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3143,
                    "db_id": "assets_maintenance",
                    "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1",
                    "question": "When was the first asset acquired?"
                },
                {
                    "ex_id": 2989,
                    "db_id": "sakila_1",
                    "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
                    "question": "When did the first payment happen?"
                },
                {
                    "ex_id": 6670,
                    "db_id": "driving_school",
                    "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
                    "question": "When did Carole Bernhard first become a customer?"
                }
            ],
            "example_quality": 0.7710956559021037,
            "example_similarity": 0.5733698041606323,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 572,
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms have king beds? Report the number for each decor type. */\nSELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;\n\n/* Answer the following: How many times in total did the team Boston Red Stockings participate in postseason games? */\nSELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );\n\n/* Answer the following: How many workshops did each author submit to? Return the author name and the number of workshops. */\nSELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2620,
                    "db_id": "inn_1",
                    "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;",
                    "question": "How many rooms have king beds? Report the number for each decor type."
                },
                {
                    "ex_id": 3675,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) FROM ( SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' );",
                    "question": "How many times in total did the team Boston Red Stockings participate in postseason games?"
                },
                {
                    "ex_id": 5838,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
                    "question": "How many workshops did each author submit to? Return the author name and the number of workshops."
                }
            ],
            "example_quality": 0.7707011784362864,
            "example_similarity": 0.5728502946772371,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 573,
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of each course and the corresponding number of student enrollment? */\nSELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name\n\n/* Answer the following: What is the maximum and mininum number of stars a rating can receive? */\nSELECT max(stars) ,  min(stars) FROM Rating\n\n/* Answer the following: Which department has more than 1 head at a time? List the id, name and the number of heads. */\nSELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3827,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
                    "question": "What is the name of each course and the corresponding number of student enrollment?"
                },
                {
                    "ex_id": 2452,
                    "db_id": "movie_1",
                    "query": "SELECT max(stars) ,  min(stars) FROM Rating",
                    "question": "What is the maximum and mininum number of stars a rating can receive?"
                },
                {
                    "ex_id": 15,
                    "db_id": "department_management",
                    "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
                    "question": "Which department has more than 1 head at a time? List the id, name and the number of heads."
                }
            ],
            "example_quality": 0.7703293193970088,
            "example_similarity": 0.5724497489456261,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 574,
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which staff handled least number of payments? List the full name and the id. */\nSELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Answer the following: Find the name and capacity of the dorm with least number of amenities. */\nSELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date of the transcript which shows the least number of results, also list the id. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2977,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Which staff handled least number of payments? List the full name and the id."
                },
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                },
                {
                    "ex_id": 5759,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
                    "question": "Find the name and capacity of the dorm with least number of amenities."
                }
            ],
            "example_quality": 0.7705911758451586,
            "example_similarity": 0.572124724793954,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 575,
            "question": "What is the date and id of the transcript with the least number of results?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the structure of the document with the least number of accesses? */\nSELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the id of the department with the least number of staff? */\nSELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: What is the id of the project with least number of documents? */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with the least number of results? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4510,
                    "db_id": "document_management",
                    "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the structure of the document with the least number of accesses?"
                },
                {
                    "ex_id": 4744,
                    "db_id": "department_store",
                    "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                    "question": "What is the id of the department with the least number of staff?"
                },
                {
                    "ex_id": 6414,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the id of the project with least number of documents?"
                }
            ],
            "example_quality": 0.770921946519733,
            "example_similarity": 0.5724873552810984,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 576,
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the title of the course offered in Chandler during the Fall of 2010. */\nSELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010\n\n/* Answer the following: Find the the date of enrollment of the \"Spanish\" course. */\nSELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"\n\n/* Answer the following: Find the name of the instructors who taught C Programming course before. */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the semester when both Master students and Bachelor students got enrolled in. */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1430,
                    "db_id": "college_2",
                    "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
                    "question": "Give the title of the course offered in Chandler during the Fall of 2010."
                },
                {
                    "ex_id": 3820,
                    "db_id": "e_learning",
                    "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
                    "question": "Find the the date of enrollment of the \"Spanish\" course."
                },
                {
                    "ex_id": 1431,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
                    "question": "Find the name of the instructors who taught C Programming course before."
                }
            ],
            "example_quality": 0.7702779848070251,
            "example_similarity": 0.5721601231900614,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 577,
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the reviewer whose name has substring \u201cMike\u201d? */\nSELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"\n\n/* Answer the following: What are the id of students who registered course 301? */\nSELECT student_id FROM student_course_attendance WHERE course_id  =  301\n\n/* Answer the following: What are the dates when customers with ids between 10 and 20 became customers? */\nSELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id of the semester that had both Masters and Bachelors students enrolled? */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2445,
                    "db_id": "movie_1",
                    "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"",
                    "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?"
                },
                {
                    "ex_id": 88,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
                    "question": "What are the id of students who registered course 301?"
                },
                {
                    "ex_id": 6065,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
                    "question": "What are the dates when customers with ids between 10 and 20 became customers?"
                }
            ],
            "example_quality": 0.7696986978520125,
            "example_similarity": 0.5718877886003189,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 578,
            "question": "How many different addresses do the students currently live?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in each city? */\nSELECT city_code ,  count(*) FROM Student GROUP BY city_code\n\n/* Answer the following: How many distinct students have been in detention? */\nSELECT count(DISTINCT student_id) FROM Students_in_Detention\n\n/* Answer the following: How many different teams have had eliminated wrestlers? */\nSELECT COUNT (DISTINCT team) FROM elimination\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different addresses do the students currently live? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 499,
                    "db_id": "allergy_1",
                    "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code",
                    "question": "How many students live in each city?"
                },
                {
                    "ex_id": 3096,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT count(DISTINCT student_id) FROM Students_in_Detention",
                    "question": "How many distinct students have been in detention?"
                },
                {
                    "ex_id": 1882,
                    "db_id": "wrestler",
                    "query": "SELECT COUNT (DISTINCT team) FROM elimination",
                    "question": "How many different teams have had eliminated wrestlers?"
                }
            ],
            "example_quality": 0.7698309731950952,
            "example_similarity": 0.5716588485500769,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 579,
            "question": "What are the different addresses that have students living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Answer the following: What are the different cities where students live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id\n\n/* Answer the following: What are the different album labels listed? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the different addresses that have students living there? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 93,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "What are the different cities where people live?"
                },
                {
                    "ex_id": 95,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
                    "question": "What are the different cities where students live?"
                },
                {
                    "ex_id": 5176,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are the different album labels listed?"
                }
            ],
            "example_quality": 0.7695808333450174,
            "example_similarity": 0.5716273458814565,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 580,
            "question": "List all the student details in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of all distinct races in reversed  lexicographic order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Answer the following: List in alphabetic order all different amenities. */\nSELECT amenity_name FROM dorm_amenity ORDER BY amenity_name\n\n/* Answer the following: Sort all the distinct products in alphabetical order. */\nSELECT DISTINCT product_name FROM products ORDER BY product_name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List all the student details in reversed lexicographical order. */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2202,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "List the names of all distinct races in reversed  lexicographic order?"
                },
                {
                    "ex_id": 5711,
                    "db_id": "dorm_1",
                    "query": "SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name",
                    "question": "List in alphabetic order all different amenities."
                },
                {
                    "ex_id": 6927,
                    "db_id": "tracking_orders",
                    "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
                    "question": "Sort all the distinct products in alphabetical order."
                }
            ],
            "example_quality": 0.7696141230959551,
            "example_similarity": 0.5714025915631605,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 581,
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first names of people in alphabetical order? */\nSELECT first_name FROM people ORDER BY first_name\n\n/* Answer the following: What are the first names of the people in alphabetical order? */\nSELECT first_name FROM people ORDER BY first_name\n\n/* Answer the following: What amenities does Smith Hall have in alphabetical order? */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What other details can you tell me about students in reverse alphabetical order? */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 98,
                    "db_id": "student_assessment",
                    "query": "SELECT first_name FROM people ORDER BY first_name",
                    "question": "List the first names of people in alphabetical order?"
                },
                {
                    "ex_id": 99,
                    "db_id": "student_assessment",
                    "query": "SELECT first_name FROM people ORDER BY first_name",
                    "question": "What are the first names of the people in alphabetical order?"
                },
                {
                    "ex_id": 5754,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
                    "question": "What amenities does Smith Hall have in alphabetical order?"
                }
            ],
            "example_quality": 0.7695470415254625,
            "example_similarity": 0.5711971993518222,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 582,
            "question": "Describe the section h.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Answer the following: Show the players and the years played. */\nSELECT Player ,  Years_Played FROM player\n\n/* Answer the following: which state has the highest elevation */\nSELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Describe the section h. */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                },
                {
                    "ex_id": 1069,
                    "db_id": "match_season",
                    "query": "SELECT Player ,  Years_Played FROM player",
                    "question": "Show the players and the years played."
                },
                {
                    "ex_id": 7435,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
                    "question": "which state has the highest elevation"
                }
            ],
            "example_quality": 0.7692032226301342,
            "example_similarity": 0.5707025878981821,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 583,
            "question": "What is the description for the section named h?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the description of the restaurant type Sandwich? */\nSELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";\n\n/* Answer the following: What is the description of the marketing region China? */\nSELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"\n\n/* Answer the following: What is the description of the claim status \"Open\"? */\nSELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description for the section named h? */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2825,
                    "db_id": "restaurant_1",
                    "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";",
                    "question": "What is the description of the restaurant type Sandwich?"
                },
                {
                    "ex_id": 5107,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"",
                    "question": "What is the description of the marketing region China?"
                },
                {
                    "ex_id": 1542,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
                    "question": "What is the description of the claim status \"Open\"?"
                }
            ],
            "example_quality": 0.7695991004643878,
            "example_similarity": 0.5710551113772998,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 584,
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: Return the full name and phone of the customer who has card number 4560596484842. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\n\n/* Answer the following: Give the full name and phone of the customer who has the account name 162. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                },
                {
                    "ex_id": 705,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
                    "question": "Return the full name and phone of the customer who has card number 4560596484842."
                },
                {
                    "ex_id": 675,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
                    "question": "Give the full name and phone of the customer who has the account name 162."
                }
            ],
            "example_quality": 0.7684470030210385,
            "example_similarity": 0.5707187907664549,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 585,
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: What are the address and phone number of the buildings managed by \"Brenden\"? */\nSELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"\n\n/* Answer the following: What is the phone number of the performer Ashley? */\nSELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                },
                {
                    "ex_id": 1204,
                    "db_id": "apartment_rentals",
                    "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
                    "question": "What are the address and phone number of the buildings managed by \"Brenden\"?"
                },
                {
                    "ex_id": 5115,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
                    "question": "What is the phone number of the performer Ashley?"
                }
            ],
            "example_quality": 0.7672988443723673,
            "example_similarity": 0.5703350666447575,
            "db_id": "student_transcripts_tracking"
        },
        {
            "index": 586,
            "question": "List the title of all cartoons in alphabetical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Answer the following: List all cities of addresses in alphabetical order. */\nSELECT city FROM Addresses ORDER BY city\n\n/* Answer the following: List the names of all distinct wines in alphabetical order. */\nSELECT DISTINCT Name FROM WINE ORDER BY Name\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoons in alphabetical order. */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                },
                {
                    "ex_id": 3102,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT city FROM Addresses ORDER BY city",
                    "question": "List all cities of addresses in alphabetical order."
                },
                {
                    "ex_id": 6560,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
                    "question": "List the names of all distinct wines in alphabetical order."
                }
            ],
            "example_quality": 0.7676327421856618,
            "example_similarity": 0.5708562654657692,
            "db_id": "tvshow"
        },
        {
            "index": 587,
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wines, sorted in alphabetical order? */\nSELECT DISTINCT Name FROM WINE ORDER BY Name\n\n/* Answer the following: What are the names of actors, ordered alphabetically? */\nSELECT Name FROM actor ORDER BY Name ASC\n\n/* Answer the following: What is the list of program origins ordered alphabetically? */\nSELECT origin FROM program ORDER BY origin\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of the cartoons sorted alphabetically? */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6561,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
                    "question": "What are the names of wines, sorted in alphabetical order?"
                },
                {
                    "ex_id": 238,
                    "db_id": "musical",
                    "query": "SELECT Name FROM actor ORDER BY Name ASC",
                    "question": "What are the names of actors, ordered alphabetically?"
                },
                {
                    "ex_id": 3758,
                    "db_id": "program_share",
                    "query": "SELECT origin FROM program ORDER BY origin",
                    "question": "What is the list of program origins ordered alphabetically?"
                }
            ],
            "example_quality": 0.7679655023573438,
            "example_similarity": 0.5708926016271318,
            "db_id": "tvshow"
        },
        {
            "index": 588,
            "question": "List all cartoon directed by \"Ben Jones\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all businesses with rating 3.5 */\nSELECT name FROM business WHERE rating  =  3.5;\n\n/* Answer the following: List all different genre types. */\nSELECT DISTINCT name FROM genres;\n\n/* Answer the following: List all the product names with the color description \"white\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List all cartoon directed by \"Ben Jones\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 8135,
                    "db_id": "yelp",
                    "query": "SELECT name FROM business WHERE rating  =  3.5;",
                    "question": "List all businesses with rating 3.5"
                },
                {
                    "ex_id": 614,
                    "db_id": "store_1",
                    "query": "SELECT DISTINCT name FROM genres;",
                    "question": "List all different genre types."
                },
                {
                    "ex_id": 5551,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
                    "question": "List all the product names with the color description \"white\"."
                }
            ],
            "example_quality": 0.7681171645253464,
            "example_similarity": 0.570955582590224,
            "db_id": "tvshow"
        },
        {
            "index": 589,
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all games played by Linda Smith? */\nSELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"\n\n/* Answer the following: What are the names of all video games that are collectible cards? */\nSELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"\n\n/* Answer the following: What are the names and descriptions of the all courses under the \"Computer Science\" subject? */\nSELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the names of all cartoons directed by Ben Jones? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6049,
                    "db_id": "game_1",
                    "query": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"",
                    "question": "What are the names of all games played by Linda Smith?"
                },
                {
                    "ex_id": 5979,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Video_games WHERE gtype  =  \"Collectible card game\"",
                    "question": "What are the names of all video games that are collectible cards?"
                },
                {
                    "ex_id": 3814,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
                    "question": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?"
                }
            ],
            "example_quality": 0.7685108535499214,
            "example_similarity": 0.5712373872039868,
            "db_id": "tvshow"
        },
        {
            "index": 590,
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many activities does Mark Giuliano participate in? */\nSELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n\n/* Answer the following: How many papers are \"Atsushi Ohori\" the author of? */\nSELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"\n\n/* Answer the following: How many students are age 18? */\nSELECT count(*) FROM Student WHERE age  =  18\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons were written by \"Joseph Kuhr\"? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6776,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
                    "question": "How many activities does Mark Giuliano participate in?"
                },
                {
                    "ex_id": 2870,
                    "db_id": "icfp_1",
                    "query": "SELECT count(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Atsushi\" AND t1.lname  =  \"Ohori\"",
                    "question": "How many papers are \"Atsushi Ohori\" the author of?"
                },
                {
                    "ex_id": 474,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE age  =  18",
                    "question": "How many students are age 18?"
                }
            ],
            "example_quality": 0.76890320803543,
            "example_similarity": 0.5712915180785132,
            "db_id": "tvshow"
        },
        {
            "index": 591,
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of faculty lines in campus \"Long Beach State University\" in 2002? */\nSELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"\n\n/* Answer the following: What is the number of airlines based in Russia? */\nSELECT count(*) FROM airlines WHERE country  =  'Russia'\n\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the number of cartoones written by Joseph Kuhr? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2375,
                    "db_id": "csu_1",
                    "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
                    "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?"
                },
                {
                    "ex_id": 6811,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
                    "question": "What is the number of airlines based in Russia?"
                },
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.7690498279127906,
            "example_similarity": 0.5713918146665689,
            "db_id": "tvshow"
        },
        {
            "index": 592,
            "question": "list all cartoon titles and their directors ordered by their air date",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all directors along with the number of films directed by each director. */\nSELECT directed_by ,  count(*) FROM film GROUP BY directed_by\n\n/* Answer the following: list the name, job title of all people ordered by their names. */\nSELECT name ,  job FROM Person ORDER BY name\n\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: list all cartoon titles and their directors ordered by their air date */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1950,
                    "db_id": "cinema",
                    "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
                    "question": "List all directors along with the number of films directed by each director."
                },
                {
                    "ex_id": 4435,
                    "db_id": "network_2",
                    "query": "SELECT name ,  job FROM Person ORDER BY name",
                    "question": "list the name, job title of all people ordered by their names."
                },
                {
                    "ex_id": 1049,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
                    "question": "List all the model names sorted by their launch year."
                }
            ],
            "example_quality": 0.7691181961249713,
            "example_similarity": 0.5712324625869918,
            "db_id": "tvshow"
        },
        {
            "index": 593,
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all customers, ordered by account balance? */\nSELECT cust_name FROM customer ORDER BY acc_bal\n\n/* Answer the following: What are all the employee ids and the names of the countries in which they work? */\nSELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id\n\n/* Answer the following: What are the names and headquarters of all companies ordered by descending market value? */\nSELECT company ,  headquarters FROM company ORDER BY market_value DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name and directors of all the cartoons that are ordered by air date? */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3022,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
                    "question": "What are the names of all customers, ordered by account balance?"
                },
                {
                    "ex_id": 3463,
                    "db_id": "hr_1",
                    "query": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
                    "question": "What are all the employee ids and the names of the countries in which they work?"
                },
                {
                    "ex_id": 2001,
                    "db_id": "gas_company",
                    "query": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
                    "question": "What are the names and headquarters of all companies ordered by descending market value?"
                }
            ],
            "example_quality": 0.7691015705990595,
            "example_similarity": 0.5712007092706485,
            "db_id": "tvshow"
        },
        {
            "index": 594,
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". */\nSELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n\n/* Answer the following: Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\". */\nSELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'\n\n/* Answer the following: list the card number of all members whose hometown address includes word \"Kentucky\". */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4217,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
                    "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\"."
                },
                {
                    "ex_id": 5619,
                    "db_id": "swimming",
                    "query": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
                    "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\"."
                },
                {
                    "ex_id": 5443,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "list the card number of all members whose hometown address includes word \"Kentucky\"."
                }
            ],
            "example_quality": 0.7693499966867154,
            "example_similarity": 0.5713614263706417,
            "db_id": "tvshow"
        },
        {
            "index": 595,
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students in Smith Hall? */\nSELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\n\n/* Answer the following: What are the names of all the aircrafts associated with London Gatwick airport? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"\n\n/* Answer the following: What are all the policy types of the customer named \"Dayana Robel\"? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5744,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
                    "question": "What are the first names of all students in Smith Hall?"
                },
                {
                    "ex_id": 4817,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
                    "question": "What are the names of all the aircrafts associated with London Gatwick airport?"
                },
                {
                    "ex_id": 912,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
                    "question": "What are all the policy types of the customer named \"Dayana Robel\"?"
                }
            ],
            "example_quality": 0.7696576117383023,
            "example_similarity": 0.5715021510197543,
            "db_id": "tvshow"
        },
        {
            "index": 596,
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city has the most addresses? List the city name, number of addresses, and city id. */\nSELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which document has the most draft copies? List its document id and number of draft copies. */\nSELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;\n\n/* Answer the following: Which project made the most number of outcomes? List the project details and the project id. */\nSELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2935,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which city has the most addresses? List the city name, number of addresses, and city id."
                },
                {
                    "ex_id": 2126,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;",
                    "question": "Which document has the most draft copies? List its document id and number of draft copies."
                },
                {
                    "ex_id": 4357,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which project made the most number of outcomes? List the project details and the project id."
                }
            ],
            "example_quality": 0.7698622959692591,
            "example_similarity": 0.5717701428744908,
            "db_id": "tvshow"
        },
        {
            "index": 597,
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers are there in the customer type with the most customers? */\nSELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: How many problems does the product with the most problems have? List the number of the problems and product name. */\nSELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer with the most accounts, and how many accounts does this person have? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the country with the most number of TV Channels and how many does it have? */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5801,
                    "db_id": "customer_complaints",
                    "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many customers are there in the customer type with the most customers?"
                },
                {
                    "ex_id": 5367,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many problems does the product with the most problems have? List the number of the problems and product name."
                },
                {
                    "ex_id": 681,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?"
                }
            ],
            "example_quality": 0.770194610328195,
            "example_similarity": 0.5717734380685661,
            "db_id": "tvshow"
        },
        {
            "index": 598,
            "question": "List the number of different series names and contents in the TV Channel table.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different payment method codes used by parties. */\nSELECT count(DISTINCT payment_method_code) FROM parties\n\n/* Answer the following: find the number of different programs that are broadcast during night time. */\nSELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'\n\n/* Answer the following: Find the number of matches in different competitions. */\nSELECT count(*) ,  Competition FROM MATCH GROUP BY Competition\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the number of different series names and contents in the TV Channel table. */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6340,
                    "db_id": "e_government",
                    "query": "SELECT count(DISTINCT payment_method_code) FROM parties",
                    "question": "Count the number of different payment method codes used by parties."
                },
                {
                    "ex_id": 3751,
                    "db_id": "program_share",
                    "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
                    "question": "find the number of different programs that are broadcast during night time."
                },
                {
                    "ex_id": 6301,
                    "db_id": "city_record",
                    "query": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
                    "question": "Find the number of matches in different competitions."
                }
            ],
            "example_quality": 0.7698547310111102,
            "example_similarity": 0.5716387468179085,
            "db_id": "tvshow"
        },
        {
            "index": 599,
            "question": "How many different series and contents are listed in the TV Channel table?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different position for players are listed? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Answer the following: How many different kinds of information sources are there for injury accidents? */\nSELECT count(DISTINCT SOURCE) FROM injury_accident\n\n/* Answer the following: How many different software platforms are there for devices? */\nSELECT count(DISTINCT Software_Platform) FROM device\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many different series and contents are listed in the TV Channel table? */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3379,
                    "db_id": "sports_competition",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "How many different position for players are listed?"
                },
                {
                    "ex_id": 1286,
                    "db_id": "game_injury",
                    "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
                    "question": "How many different kinds of information sources are there for injury accidents?"
                },
                {
                    "ex_id": 5063,
                    "db_id": "device",
                    "query": "SELECT count(DISTINCT Software_Platform) FROM device",
                    "question": "How many different software platforms are there for devices?"
                }
            ],
            "example_quality": 0.7695234686411894,
            "example_similarity": 0.5714937661414803,
            "db_id": "tvshow"
        },
        {
            "index": 600,
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color description of the product with name \"catnip\"? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: What is the attribute data type of the attribute with name \"Green\"? */\nSELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"\n\n/* Answer the following: What are the other account details for the account with the name 338? */\nSELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5545,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "What is the color description of the product with name \"catnip\"?"
                },
                {
                    "ex_id": 306,
                    "db_id": "product_catalog",
                    "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
                    "question": "What is the attribute data type of the attribute with name \"Green\"?"
                },
                {
                    "ex_id": 673,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
                    "question": "What are the other account details for the account with the name 338?"
                }
            ],
            "example_quality": 0.7699075961934541,
            "example_similarity": 0.5717711741920632,
            "db_id": "tvshow"
        },
        {
            "index": 601,
            "question": "What is the content of the series Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the age of the doctor named Zach? */\nSELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'\n\n/* Answer the following: What is the age of student Linda Smith? */\nSELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";\n\n/* Answer the following: What is the address of employee Nancy Edwards? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of the series Sky Radio? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4416,
                    "db_id": "network_2",
                    "query": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
                    "question": "What is the age of the doctor named Zach?"
                },
                {
                    "ex_id": 2827,
                    "db_id": "restaurant_1",
                    "query": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";",
                    "question": "What is the age of student Linda Smith?"
                },
                {
                    "ex_id": 592,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is the address of employee Nancy Edwards?"
                }
            ],
            "example_quality": 0.7702904454510356,
            "example_similarity": 0.5723727751224147,
            "db_id": "tvshow"
        },
        {
            "index": 602,
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the attribute data type of the attribute with name \"Green\"? */\nSELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"\n\n/* Answer the following: What is the color description of the product with name \"catnip\"? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: What are the other account details for the account with the name 338? */\nSELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the Package Option of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 306,
                    "db_id": "product_catalog",
                    "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
                    "question": "What is the attribute data type of the attribute with name \"Green\"?"
                },
                {
                    "ex_id": 5545,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "What is the color description of the product with name \"catnip\"?"
                },
                {
                    "ex_id": 673,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"",
                    "question": "What are the other account details for the account with the name 338?"
                }
            ],
            "example_quality": 0.7706720227841735,
            "example_similarity": 0.5725782662457539,
            "db_id": "tvshow"
        },
        {
            "index": 603,
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tourist attractions that have parking or shopping as their feature details? */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'\n\n/* Answer the following: What are the total purchases for members rated at level 6? */\nSELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6\n\n/* Answer the following: What are the names of the clubs that have players in the position of \"Right Wing\"? */\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the Package Options of the TV Channels whose series names are Sky Radio? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5960,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
                    "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?"
                },
                {
                    "ex_id": 5440,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
                    "question": "What are the total purchases for members rated at level 6?"
                },
                {
                    "ex_id": 3359,
                    "db_id": "sports_competition",
                    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
                    "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?"
                }
            ],
            "example_quality": 0.770570413640919,
            "example_similarity": 0.5725211828633722,
            "db_id": "tvshow"
        },
        {
            "index": 604,
            "question": "How many TV Channel using language English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many patients stay in room 112? */\nSELECT count(patient) FROM stay WHERE room  =  112\n\n/* Answer the following: How many students enrolled in class ACCT-211? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'\n\n/* Answer the following: How many activities does Mark Giuliano participate in? */\nSELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channel using language English? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3919,
                    "db_id": "hospital_1",
                    "query": "SELECT count(patient) FROM stay WHERE room  =  112",
                    "question": "How many patients stay in room 112?"
                },
                {
                    "ex_id": 3242,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
                    "question": "How many students enrolled in class ACCT-211?"
                },
                {
                    "ex_id": 6776,
                    "db_id": "activity_1",
                    "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
                    "question": "How many activities does Mark Giuliano participate in?"
                }
            ],
            "example_quality": 0.7709502639494605,
            "example_similarity": 0.5727400448200781,
            "db_id": "tvshow"
        },
        {
            "index": 605,
            "question": "How many TV Channels use the English language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many churches have a wedding in year 2016? */\nSELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016\n\n/* Answer the following: How many staff have the first name Ludie? */\nSELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n\n/* Answer the following: How many members have the black membership card? */\nSELECT count(*) FROM member WHERE Membership_card  =  'Black'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channels use the English language? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1649,
                    "db_id": "wedding",
                    "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
                    "question": "How many churches have a wedding in year 2016?"
                },
                {
                    "ex_id": 6637,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
                    "question": "How many staff have the first name Ludie?"
                },
                {
                    "ex_id": 790,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
                    "question": "How many members have the black membership card?"
                }
            ],
            "example_quality": 0.7712737621357699,
            "example_similarity": 0.5729963055357108,
            "db_id": "tvshow"
        },
        {
            "index": 606,
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the team that attended the least number of home games in 1980. */\nSELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;\n\n/* Answer the following: Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company. */\nSELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;\n\n/* Answer the following: At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total. */\nSELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the language used least number of TV Channel. List language and number of TV Channel. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3703,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance ASC LIMIT 1;",
                    "question": "Find the team that attended the least number of home games in 1980."
                },
                {
                    "ex_id": 1034,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name ,  count(*) FROM phone GROUP BY Company_name ORDER BY count(*) ASC LIMIT 1;",
                    "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company."
                },
                {
                    "ex_id": 2841,
                    "db_id": "restaurant_1",
                    "query": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;",
                    "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total."
                }
            ],
            "example_quality": 0.7713261656685992,
            "example_similarity": 0.5727610554978774,
            "db_id": "tvshow"
        },
        {
            "index": 607,
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many faculty lines are there in the university that conferred the least number of degrees in year 2001? */\nSELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1\n\n/* Answer the following: With which kind of payment method were the least number of payments processed? */\nSELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name. */\nSELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the languages used by the least number of TV Channels and how many channels use it? */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2383,
                    "db_id": "csu_1",
                    "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
                    "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?"
                },
                {
                    "ex_id": 3881,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1",
                    "question": "With which kind of payment method were the least number of payments processed?"
                },
                {
                    "ex_id": 3146,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name."
                }
            ],
            "example_quality": 0.7711668197195624,
            "example_similarity": 0.5724403539865056,
            "db_id": "tvshow"
        },
        {
            "index": 608,
            "question": "List each language and the number of TV Channels using it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show each premise type and the number of premises in that type. */\nSELECT premises_type ,  count(*) FROM premises GROUP BY premises_type\n\n/* Answer the following: List each birth place along with the number of people from there. */\nSELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place\n\n/* Answer the following: Show each state and the number of addresses in each state. */\nSELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List each language and the number of TV Channels using it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4624,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",
                    "question": "Show each premise type and the number of premises in that type."
                },
                {
                    "ex_id": 1164,
                    "db_id": "body_builder",
                    "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
                    "question": "List each birth place along with the number of people from there."
                },
                {
                    "ex_id": 5656,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county",
                    "question": "Show each state and the number of addresses in each state."
                }
            ],
            "example_quality": 0.7715431900818657,
            "example_similarity": 0.5724445639306068,
            "db_id": "tvshow"
        },
        {
            "index": 609,
            "question": "For each language, list the number of TV Channels that use it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each building, show the name of the building and the number of institutions in it. */\nSELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id\n\n/* Answer the following: List each birth place along with the number of people from there. */\nSELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place\n\n/* Answer the following: Show each premise type and the number of premises in that type. */\nSELECT premises_type ,  count(*) FROM premises GROUP BY premises_type\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: For each language, list the number of TV Channels that use it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1923,
                    "db_id": "protein_institute",
                    "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id",
                    "question": "For each building, show the name of the building and the number of institutions in it."
                },
                {
                    "ex_id": 1164,
                    "db_id": "body_builder",
                    "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
                    "question": "List each birth place along with the number of people from there."
                },
                {
                    "ex_id": 4624,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type",
                    "question": "Show each premise type and the number of premises in that type."
                }
            ],
            "example_quality": 0.7719183244167066,
            "example_similarity": 0.5723386393723243,
            "db_id": "tvshow"
        },
        {
            "index": 610,
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of vocal types used in song \"Demon Kitty Rag\"? */\nSELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"\n\n/* Answer the following: What are the types of vocals used in the song \"Demon Kitty Rag\"? */\nSELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"\n\n/* Answer the following: Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5227,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
                    "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?"
                },
                {
                    "ex_id": 5228,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
                    "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?"
                },
                {
                    "ex_id": 273,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
                    "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\"."
                }
            ],
            "example_quality": 0.7719279300779542,
            "example_similarity": 0.5718601359874012,
            "db_id": "tvshow"
        },
        {
            "index": 611,
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the types of vocals used in the song \"Demon Kitty Rag\"? */\nSELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"\n\n/* Answer the following: What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"? */\nSELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"\n\n/* Answer the following: What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"? */\nSELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5228,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
                    "question": "What are the types of vocals used in the song \"Demon Kitty Rag\"?"
                },
                {
                    "ex_id": 6277,
                    "db_id": "city_record",
                    "query": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
                    "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?"
                },
                {
                    "ex_id": 2284,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
                    "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?"
                }
            ],
            "example_quality": 0.7721193555424567,
            "example_similarity": 0.5716363707453114,
            "db_id": "tvshow"
        },
        {
            "index": 612,
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". */\nSELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n\n/* Answer the following: list the card number of all members whose hometown address includes word \"Kentucky\". */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Answer the following: Show the document name and the document date for all documents on project with details 'Graph Database project'. */\nSELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4217,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
                    "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\"."
                },
                {
                    "ex_id": 5443,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "list the card number of all members whose hometown address includes word \"Kentucky\"."
                },
                {
                    "ex_id": 6410,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                    "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'."
                }
            ],
            "example_quality": 0.7723555439593263,
            "example_similarity": 0.5716433610279834,
            "db_id": "tvshow"
        },
        {
            "index": 613,
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the theme and year for all exhibitions that have a ticket price under 15? */\nSELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15\n\n/* Answer the following: What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"\n\n/* Answer the following: What are all company names that have a corresponding movie directed in the year 1999? */\nSELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1667,
                    "db_id": "theme_gallery",
                    "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15",
                    "question": "What are the theme and year for all exhibitions that have a ticket price under 15?"
                },
                {
                    "ex_id": 4835,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"",
                    "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?"
                },
                {
                    "ex_id": 7000,
                    "db_id": "culture_company",
                    "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999",
                    "question": "What are all company names that have a corresponding movie directed in the year 1999?"
                }
            ],
            "example_quality": 0.7724341039537038,
            "example_similarity": 0.571439455104581,
            "db_id": "tvshow"
        },
        {
            "index": 614,
            "question": "List the Episode of all TV series sorted by rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the model names sorted by their launch year. */\nSELECT model_name FROM chip_model ORDER BY launch_year\n\n/* Answer the following: List the names of all distinct wines ordered by price. */\nSELECT DISTINCT Name FROM WINE ORDER BY price\n\n/* Answer the following: List the names of all courses ordered by their titles and credits. */\nSELECT title FROM course ORDER BY title ,  credits\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all TV series sorted by rating. */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1049,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model ORDER BY launch_year",
                    "question": "List all the model names sorted by their launch year."
                },
                {
                    "ex_id": 6562,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Name FROM WINE ORDER BY price",
                    "question": "List the names of all distinct wines ordered by price."
                },
                {
                    "ex_id": 1375,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course ORDER BY title ,  credits",
                    "question": "List the names of all courses ordered by their titles and credits."
                }
            ],
            "example_quality": 0.7726358339086593,
            "example_similarity": 0.5717248016706032,
            "db_id": "tvshow"
        },
        {
            "index": 615,
            "question": "What are all of the episodes ordered by ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the locations of all the gas stations ordered by opening year? */\nSELECT LOCATION FROM gas_station ORDER BY open_year\n\n/* Answer the following: What are the names of all people, ordered by their date of birth? */\nSELECT name FROM people ORDER BY date_of_birth\n\n/* Answer the following: What are the descriptions of all the project outcomes? */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are all of the episodes ordered by ratings? */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2035,
                    "db_id": "gas_company",
                    "query": "SELECT LOCATION FROM gas_station ORDER BY open_year",
                    "question": "What are the locations of all the gas stations ordered by opening year?"
                },
                {
                    "ex_id": 2408,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people ORDER BY date_of_birth",
                    "question": "What are the names of all people, ordered by their date of birth?"
                },
                {
                    "ex_id": 4395,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
                    "question": "What are the descriptions of all the project outcomes?"
                }
            ],
            "example_quality": 0.7727345290296751,
            "example_similarity": 0.5719049884687645,
            "db_id": "tvshow"
        },
        {
            "index": 616,
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and years of the movies that has the top 3 highest rating star? */\nSELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\n\n/* Answer the following: What are the names and years released for the movies with the top 3 highest ratings? */\nSELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3\n\n/* Answer the following: Return the top 3 greatest support rates. */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2501,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
                    "question": "What are the names and years of the movies that has the top 3 highest rating star?"
                },
                {
                    "ex_id": 2502,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3",
                    "question": "What are the names and years released for the movies with the top 3 highest ratings?"
                },
                {
                    "ex_id": 2400,
                    "db_id": "candidate_poll",
                    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                    "question": "Return the top 3 greatest support rates."
                }
            ],
            "example_quality": 0.773103466482549,
            "example_similarity": 0.5715587084407762,
            "db_id": "tvshow"
        },
        {
            "index": 617,
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the storm name and max speed which affected the greatest number of regions? */\nSELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the shop that has the greatest quantity of devices in stock? */\nSELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1\n\n/* Answer the following: Which state has the greatest total number of bank customers? */\nSELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2717,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the storm name and max speed which affected the greatest number of regions?"
                },
                {
                    "ex_id": 5076,
                    "db_id": "device",
                    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1",
                    "question": "What is the name of the shop that has the greatest quantity of devices in stock?"
                },
                {
                    "ex_id": 3056,
                    "db_id": "loan_1",
                    "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
                    "question": "Which state has the greatest total number of bank customers?"
                }
            ],
            "example_quality": 0.772863428449352,
            "example_similarity": 0.5711588175651175,
            "db_id": "tvshow"
        },
        {
            "index": 618,
            "question": "What is minimum and maximum share of TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum vote percents of elections? */\nSELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\n\n/* Answer the following: What are the minimum and maximum crime rate of counties? */\nSELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety\n\n/* Answer the following: What is the maximum and minimum market value of companies? */\nSELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is minimum and maximum share of TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1178,
                    "db_id": "election_representative",
                    "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
                    "question": "What are the minimum and maximum vote percents of elections?"
                },
                {
                    "ex_id": 2539,
                    "db_id": "county_public_safety",
                    "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety",
                    "question": "What are the minimum and maximum crime rate of counties?"
                },
                {
                    "ex_id": 4101,
                    "db_id": "company_employee",
                    "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
                    "question": "What is the maximum and minimum market value of companies?"
                }
            ],
            "example_quality": 0.7732309633547737,
            "example_similarity": 0.5715340141435402,
            "db_id": "tvshow"
        },
        {
            "index": 619,
            "question": "What is the maximum and minimum share for the TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum market value of companies? */\nSELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company\n\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum population of the counties? */\nSELECT max(Population) ,  min(Population) FROM county\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the maximum and minimum share for the TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4101,
                    "db_id": "company_employee",
                    "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
                    "question": "What is the maximum and minimum market value of companies?"
                },
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                },
                {
                    "ex_id": 2742,
                    "db_id": "election",
                    "query": "SELECT max(Population) ,  min(Population) FROM county",
                    "question": "What are the maximum and minimum population of the counties?"
                }
            ],
            "example_quality": 0.7735973107483848,
            "example_similarity": 0.5717172898637956,
            "db_id": "tvshow"
        },
        {
            "index": 620,
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Answer the following: What is the first name of the author with last name \"Ueno\"? */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Answer the following: What is the product description of the product booked with an amount of 102.76? */\nSELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the air date of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                },
                {
                    "ex_id": 2915,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "What is the first name of the author with last name \"Ueno\"?"
                },
                {
                    "ex_id": 1966,
                    "db_id": "products_for_hire",
                    "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
                    "question": "What is the product description of the product booked with an amount of 102.76?"
                }
            ],
            "example_quality": 0.77396247637621,
            "example_similarity": 0.5718914103738576,
            "db_id": "tvshow"
        },
        {
            "index": 621,
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When did Linda Smith visit Subway? */\nSELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";\n\n/* Answer the following: When did Carole Bernhard first become a customer? */\nSELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";\n\n/* Answer the following: When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible? */\nSELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: When did the episode \"A Love of a Lifetime\" air? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2840,
                    "db_id": "restaurant_1",
                    "query": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";",
                    "question": "When did Linda Smith visit Subway?"
                },
                {
                    "ex_id": 6670,
                    "db_id": "driving_school",
                    "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";",
                    "question": "When did Carole Bernhard first become a customer?"
                },
                {
                    "ex_id": 1836,
                    "db_id": "browser_web",
                    "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'",
                    "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?"
                }
            ],
            "example_quality": 0.7743264659472627,
            "example_similarity": 0.5717614330482563,
            "db_id": "tvshow"
        },
        {
            "index": 622,
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name of the author with last name \"Ueno\"? */\nSELECT fname FROM authors WHERE lname  =  \"Ueno\"\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Answer the following: What are the login names of the students with family name \"Ward\"? */\nSELECT login_name FROM Students WHERE family_name  =  \"Ward\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2915,
                    "db_id": "icfp_1",
                    "query": "SELECT fname FROM authors WHERE lname  =  \"Ueno\"",
                    "question": "What is the first name of the author with last name \"Ueno\"?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                },
                {
                    "ex_id": 3789,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Students WHERE family_name  =  \"Ward\"",
                    "question": "What are the login names of the students with family name \"Ward\"?"
                }
            ],
            "example_quality": 0.7746892851338427,
            "example_similarity": 0.5718566216223961,
            "db_id": "tvshow"
        },
        {
            "index": 623,
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the project detail for the project with document \"King Book\"? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"\n\n/* Answer the following: What is the location name of the document \"Robin CV\"? */\nSELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"\n\n/* Answer the following: What is the address content of the customer named \"Maudie Kertzmann\"? */\nSELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the weekly rank for the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6438,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                    "question": "What is the project detail for the project with document \"King Book\"?"
                },
                {
                    "ex_id": 4222,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
                    "question": "What is the location name of the document \"Robin CV\"?"
                },
                {
                    "ex_id": 6078,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
                    "question": "What is the address content of the customer named \"Maudie Kertzmann\"?"
                }
            ],
            "example_quality": 0.7750509395718301,
            "example_similarity": 0.5721690123338505,
            "db_id": "tvshow"
        },
        {
            "index": 624,
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names. */\nSELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"\n\n/* Answer the following: Find the dates of assessment notes for students with first name \"Fanny\". */\nSELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"\n\n/* Answer the following: Find the texts of assessment notes for teachers with last name \"Schuster\". */\nSELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 329,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
                    "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names."
                },
                {
                    "ex_id": 3113,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"",
                    "question": "Find the dates of assessment notes for students with first name \"Fanny\"."
                },
                {
                    "ex_id": 3114,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"",
                    "question": "Find the texts of assessment notes for teachers with last name \"Schuster\"."
                }
            ],
            "example_quality": 0.7752778878524308,
            "example_similarity": 0.571998507201142,
            "db_id": "tvshow"
        },
        {
            "index": 625,
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the color description of the product with name \"catnip\"? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: What is the name of the product with the color description 'yellow'? */\nSELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'\n\n/* Answer the following: What is the name of the department in the Building Mergenthaler? */\nSELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name of the series that has the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5545,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "What is the color description of the product with name \"catnip\"?"
                },
                {
                    "ex_id": 5541,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'",
                    "question": "What is the name of the product with the color description 'yellow'?"
                },
                {
                    "ex_id": 4659,
                    "db_id": "college_3",
                    "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"",
                    "question": "What is the name of the department in the Building Mergenthaler?"
                }
            ],
            "example_quality": 0.7756374432318669,
            "example_similarity": 0.5720142186805293,
            "db_id": "tvshow"
        },
        {
            "index": 626,
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\". */\nSELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n\n/* Answer the following: list the card number of all members whose hometown address includes word \"Kentucky\". */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Answer the following: Show the document name and the document date for all documents on project with details 'Graph Database project'. */\nSELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4217,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
                    "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\"."
                },
                {
                    "ex_id": 5443,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "list the card number of all members whose hometown address includes word \"Kentucky\"."
                },
                {
                    "ex_id": 6410,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                    "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'."
                }
            ],
            "example_quality": 0.7758627295312835,
            "example_similarity": 0.5720124408885497,
            "db_id": "tvshow"
        },
        {
            "index": 627,
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the project detail for the project with document \"King Book\"? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"\n\n/* Answer the following: What is the document type code for document type \"Paper\"? */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Answer the following: What is the address content of the customer named \"Maudie Kertzmann\"? */\nSELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the episode for the TV series named \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6438,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"",
                    "question": "What is the project detail for the project with document \"King Book\"?"
                },
                {
                    "ex_id": 4171,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "What is the document type code for document type \"Paper\"?"
                },
                {
                    "ex_id": 6078,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
                    "question": "What is the address content of the customer named \"Maudie Kertzmann\"?"
                }
            ],
            "example_quality": 0.7762202052417599,
            "example_similarity": 0.5725507365323061,
            "db_id": "tvshow"
        },
        {
            "index": 628,
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of medications prescribed for each brand. */\nSELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand\n\n/* Answer the following: Find the number of products for each manufacturer, showing the name of each company. */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Answer the following: For each faculty rank, show the number of faculty members who have it. */\nSELECT rank ,  count(*) FROM Faculty GROUP BY rank\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the number of cartoons directed by each of the listed directors. */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3945,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
                    "question": "Find the number of medications prescribed for each brand."
                },
                {
                    "ex_id": 5321,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the number of products for each manufacturer, showing the name of each company."
                },
                {
                    "ex_id": 6742,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
                    "question": "For each faculty rank, show the number of faculty members who have it."
                }
            ],
            "example_quality": 0.7765765424945598,
            "example_similarity": 0.5725169340080871,
            "db_id": "tvshow"
        },
        {
            "index": 629,
            "question": "How many cartoons did each director create?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each payment method, how many payments were made? */\nSELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;\n\n/* Answer the following: How many faculty members do we have for each faculty rank? */\nSELECT rank ,  count(*) FROM Faculty GROUP BY rank\n\n/* Answer the following: How many eliminations did each team have? */\nSELECT Team ,  COUNT(*) FROM elimination GROUP BY Team\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons did each director create? */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6698,
                    "db_id": "driving_school",
                    "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;",
                    "question": "For each payment method, how many payments were made?"
                },
                {
                    "ex_id": 6743,
                    "db_id": "activity_1",
                    "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
                    "question": "How many faculty members do we have for each faculty rank?"
                },
                {
                    "ex_id": 1866,
                    "db_id": "wrestler",
                    "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
                    "question": "How many eliminations did each team have?"
                }
            ],
            "example_quality": 0.7769317467195286,
            "example_similarity": 0.572290609359678,
            "db_id": "tvshow"
        },
        {
            "index": 630,
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount claimed in the most recently created document. */\nSELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)\n\n/* Answer the following: find the name of the program that was launched most recently. */\nSELECT name FROM program ORDER BY launch DESC LIMIT 1\n\n/* Answer the following: Find the patient who most recently stayed in room 111. */\nSELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the production code and channel of the most recently aired cartoon . */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1518,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
                    "question": "Find the total amount claimed in the most recently created document."
                },
                {
                    "ex_id": 3741,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                    "question": "find the name of the program that was launched most recently."
                },
                {
                    "ex_id": 3925,
                    "db_id": "hospital_1",
                    "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
                    "question": "Find the patient who most recently stayed in room 111."
                }
            ],
            "example_quality": 0.776140530887075,
            "example_similarity": 0.572405139256638,
            "db_id": "tvshow"
        },
        {
            "index": 631,
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is id of the city that hosted events in the most recent year? */\nSELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1\n\n/* Answer the following: What is the name and date of the most recent race? */\nSELECT name ,  date FROM races ORDER BY date DESC LIMIT 1\n\n/* Answer the following: Find the id of the appointment with the most recent start date? */\nSELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the produdction code and channel of the most recent cartoon ? */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6269,
                    "db_id": "city_record",
                    "query": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
                    "question": "What is id of the city that hosted events in the most recent year?"
                },
                {
                    "ex_id": 2156,
                    "db_id": "formula_1",
                    "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
                    "question": "What is the name and date of the most recent race?"
                },
                {
                    "ex_id": 3909,
                    "db_id": "hospital_1",
                    "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1",
                    "question": "Find the id of the appointment with the most recent start date?"
                }
            ],
            "example_quality": 0.7754698504521836,
            "example_similarity": 0.5724413246068463,
            "db_id": "tvshow"
        },
        {
            "index": 632,
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: highly cited parsing papers */\nSELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;\n\n/* Answer the following: List the first name and last name of customers have the amount of outstanding between 1000 and 3000. */\nSELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;\n\n/* Answer the following: Give the title and credits for the course that is taught in the classroom with the greatest capacity. */\nSELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the package choice and series name of the TV channel that has high definition TV. */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7932,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
                    "question": "highly cited parsing papers"
                },
                {
                    "ex_id": 6681,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;",
                    "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000."
                },
                {
                    "ex_id": 1452,
                    "db_id": "college_2",
                    "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)",
                    "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity."
                }
            ],
            "example_quality": 0.774900925199742,
            "example_similarity": 0.572055216581569,
            "db_id": "tvshow"
        },
        {
            "index": 633,
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and zip code of the address with the highest monthly rental? */\nSELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1\n\n/* Answer the following: What is the department name and corresponding building for the department with the greatest budget? */\nSELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1\n\n/* Answer the following: What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes? */\nSELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3117,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1",
                    "question": "What are the id and zip code of the address with the highest monthly rental?"
                },
                {
                    "ex_id": 1332,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1",
                    "question": "What is the department name and corresponding building for the department with the greatest budget?"
                },
                {
                    "ex_id": 4341,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'omnis' UNION SELECT T1.task_details ,  T1.task_id ,  T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id  =  T3.project_id GROUP BY T2.project_id HAVING count(*)  >  2",
                    "question": "What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?"
                }
            ],
            "example_quality": 0.7743059291066435,
            "example_similarity": 0.5718471836491658,
            "db_id": "tvshow"
        },
        {
            "index": 634,
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the draft pick numbers and draft classes for players who play the Defender position? */\nSELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Answer the following: Find the name and position of physicians who prescribe some medication whose brand is X? */\nSELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"\n\n/* Answer the following: Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians. */\nSELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are playing some cartoon written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1066,
                    "db_id": "match_season",
                    "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
                    "question": "What are the draft pick numbers and draft classes for players who play the Defender position?"
                },
                {
                    "ex_id": 3943,
                    "db_id": "hospital_1",
                    "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
                    "question": "Find the name and position of physicians who prescribe some medication whose brand is X?"
                },
                {
                    "ex_id": 3944,
                    "db_id": "hospital_1",
                    "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
                    "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians."
                }
            ],
            "example_quality": 0.774511695629759,
            "example_similarity": 0.5716494985611059,
            "db_id": "tvshow"
        },
        {
            "index": 635,
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of procedures physician John Wen was trained in? */\nSELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Answer the following: What is the email of the student with first name \"Emma\" and last name \"Rohan\"? */\nSELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"\n\n/* Answer the following: What are the types of film market estimations in year 1995? */\nSELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that have cartoons on TV that were written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3980,
                    "db_id": "hospital_1",
                    "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "What are the names of procedures physician John Wen was trained in?"
                },
                {
                    "ex_id": 3095,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"",
                    "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?"
                },
                {
                    "ex_id": 4121,
                    "db_id": "film_rank",
                    "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
                    "question": "What are the types of film market estimations in year 1995?"
                }
            ],
            "example_quality": 0.7748667953216806,
            "example_similarity": 0.5715635844170631,
            "db_id": "tvshow"
        },
        {
            "index": 636,
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address do not have any member with the black membership card? */\nSELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'\n\n/* Answer the following: Which cmi cross reference id is not related to any parking taxes? */\nSELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines\n\n/* Answer the following: Which events id does not have any participant with detail 'Kenyatta Kuhn'? */\nSELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are not playing any cartoon written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 799,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
                    "question": "Which address do not have any member with the black membership card?"
                },
                {
                    "ex_id": 2659,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
                    "question": "Which cmi cross reference id is not related to any parking taxes?"
                },
                {
                    "ex_id": 2150,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
                    "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?"
                }
            ],
            "example_quality": 0.7751254857997817,
            "example_similarity": 0.5714663878829074,
            "db_id": "tvshow"
        },
        {
            "index": 637,
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? */\nSELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'\n\n/* Answer the following: What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'? */\nSELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'\n\n/* Answer the following: What are the first names of the professors who do not play Canoeing or Kayaking as activities? */\nSELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that are not playing cartoons written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 971,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
                    "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?"
                },
                {
                    "ex_id": 3717,
                    "db_id": "mountain_photos",
                    "query": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'",
                    "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?"
                },
                {
                    "ex_id": 6799,
                    "db_id": "activity_1",
                    "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
                    "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?"
                }
            ],
            "example_quality": 0.7751285168692581,
            "example_similarity": 0.5713466335608747,
            "db_id": "tvshow"
        },
        {
            "index": 638,
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the draft pick numbers and draft classes for players who play the Defender position? */\nSELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Answer the following: Return the names of countries that have players that play the Forward position, as well as players who play the Defender position. */\nSELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Answer the following: Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position. */\nSELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1066,
                    "db_id": "match_season",
                    "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
                    "question": "What are the draft pick numbers and draft classes for players who play the Defender position?"
                },
                {
                    "ex_id": 1108,
                    "db_id": "match_season",
                    "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position."
                },
                {
                    "ex_id": 1110,
                    "db_id": "match_season",
                    "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
                    "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position."
                }
            ],
            "example_quality": 0.7751996521414267,
            "example_similarity": 0.571003427164041,
            "db_id": "tvshow"
        },
        {
            "index": 639,
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the email addresses and date of births for all customers who have a first name of Carole? */\nSELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"\n\n/* Answer the following: What are the first names and ages of all students who are playing both Football and Lacrosse? */\nSELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")\n\n/* Answer the following: What is the first name and job id for all employees in the Finance department? */\nSELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6662,
                    "db_id": "driving_school",
                    "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"",
                    "question": "What are the email addresses and date of births for all customers who have a first name of Carole?"
                },
                {
                    "ex_id": 6053,
                    "db_id": "game_1",
                    "query": "SELECT fname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Football\" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName  =  \"Lacrosse\")",
                    "question": "What are the first names and ages of all students who are playing both Football and Lacrosse?"
                },
                {
                    "ex_id": 3494,
                    "db_id": "hr_1",
                    "query": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
                    "question": "What is the first name and job id for all employees in the Finance department?"
                }
            ],
            "example_quality": 0.7747762755413026,
            "example_similarity": 0.5708917110937334,
            "db_id": "tvshow"
        },
        {
            "index": 640,
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: Find the id and name of customers whose address contains WY state and do not use credit card for payment. */\nSELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n\n/* Answer the following: What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? */\nSELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the pixel aspect ratio and nation of the tv channels that do not use English. */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                },
                {
                    "ex_id": 4792,
                    "db_id": "department_store",
                    "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                    "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment."
                },
                {
                    "ex_id": 4793,
                    "db_id": "department_store",
                    "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                    "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?"
                }
            ],
            "example_quality": 0.7743860001107692,
            "example_similarity": 0.5708429467634034,
            "db_id": "tvshow"
        },
        {
            "index": 641,
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students that are not enrolled in courses? */\nSELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n\n/* Answer the following: What are the full name (first and last name) and salary for all employees who does not have any value for commission? */\nSELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"\n\n/* Answer the following: What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? */\nSELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4709,
                    "db_id": "college_3",
                    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
                    "question": "What are the first names of all students that are not enrolled in courses?"
                },
                {
                    "ex_id": 3426,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
                    "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?"
                },
                {
                    "ex_id": 4793,
                    "db_id": "department_store",
                    "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                    "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?"
                }
            ],
            "example_quality": 0.7742328089658077,
            "example_similarity": 0.5707983601176669,
            "db_id": "tvshow"
        },
        {
            "index": 642,
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the order id and order details for the order more than two invoices. */\nSELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2\n\n/* Answer the following: Find the name and email for the users who have more than one follower. */\nSELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1\n\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find id of the tv channels that from the countries where have more than two tv channels. */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1610,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2",
                    "question": "What is the order id and order details for the order more than two invoices."
                },
                {
                    "ex_id": 287,
                    "db_id": "twitter_1",
                    "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
                    "question": "Find the name and email for the users who have more than one follower."
                },
                {
                    "ex_id": 6216,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                    "question": "Show the names of countries that have more than one roller coaster."
                }
            ],
            "example_quality": 0.7745844712571383,
            "example_similarity": 0.5707376433290384,
            "db_id": "tvshow"
        },
        {
            "index": 643,
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all playlists that have more than 100 tracks? */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Answer the following: What are the first and last names of all customers with more than 2 payments? */\nSELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;\n\n/* Answer the following: What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research? */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of all tv channels that have more than 2 TV channels? */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 639,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "What are the names of all playlists that have more than 100 tracks?"
                },
                {
                    "ex_id": 6696,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;",
                    "question": "What are the first and last names of all customers with more than 2 payments?"
                },
                {
                    "ex_id": 4336,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "What are the send dates for all documents that have a grant amount of more than 5000 and are involved in research?"
                }
            ],
            "example_quality": 0.7745894375192232,
            "example_similarity": 0.5710674603439185,
            "db_id": "tvshow"
        },
        {
            "index": 644,
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and flag of ships that are not steered by any captain with Midshipman rank. */\nSELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')\n\n/* Answer the following: Find the names of the trains that do not pass any station located in London. */\nSELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")\n\n/* Answer the following: Find the first name of students not enrolled in any course. */\nSELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6265,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')",
                    "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank."
                },
                {
                    "ex_id": 6621,
                    "db_id": "train_station",
                    "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")",
                    "question": "Find the names of the trains that do not pass any station located in London."
                },
                {
                    "ex_id": 4708,
                    "db_id": "college_3",
                    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
                    "question": "Find the first name of students not enrolled in any course."
                }
            ],
            "example_quality": 0.7743406636798568,
            "example_similarity": 0.5711476972146468,
            "db_id": "tvshow"
        },
        {
            "index": 645,
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Answer the following: What are the names of documents that do not have any images? */\nSELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                },
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                },
                {
                    "ex_id": 4527,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                    "question": "What are the names of documents that do not have any images?"
                }
            ],
            "example_quality": 0.7742114966451936,
            "example_similarity": 0.5713569881505577,
            "db_id": "tvshow"
        },
        {
            "index": 646,
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the famous titles of artists that do not have any volume. */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: Give the names of tracks that do not have a race in the class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6190,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
                    "question": "Find the famous titles of artists that do not have any volume."
                },
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                },
                {
                    "ex_id": 775,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
                    "question": "Give the names of tracks that do not have a race in the class 'GT'."
                }
            ],
            "example_quality": 0.7742840460797561,
            "example_similarity": 0.5714191666235735,
            "db_id": "tvshow"
        },
        {
            "index": 647,
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the first and last name of the students who do not have any food type allergy. */\nSELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")\n\n/* Answer the following: What are the first names of the professors who do not play Canoeing or Kayaking as activities? */\nSELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Answer the following: What are the first names of all students that are not enrolled in courses? */\nSELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 528,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
                    "question": "List the first and last name of the students who do not have any food type allergy."
                },
                {
                    "ex_id": 6799,
                    "db_id": "activity_1",
                    "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
                    "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?"
                },
                {
                    "ex_id": 4709,
                    "db_id": "college_3",
                    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
                    "question": "What are the first names of all students that are not enrolled in courses?"
                }
            ],
            "example_quality": 0.7743967789640567,
            "example_similarity": 0.5713441660150266,
            "db_id": "tvshow"
        },
        {
            "index": 648,
            "question": "How many poker players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customer cards are there? */\nSELECT count(*) FROM Customers_cards\n\n/* Answer the following: How many body builders are there? */\nSELECT count(*) FROM body_builder\n\n/* Answer the following: How many CSU campuses are there? */\nSELECT count(*) FROM campuses\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many poker players are there? */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 699,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards",
                    "question": "How many customer cards are there?"
                },
                {
                    "ex_id": 1151,
                    "db_id": "body_builder",
                    "query": "SELECT count(*) FROM body_builder",
                    "question": "How many body builders are there?"
                },
                {
                    "ex_id": 2393,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM campuses",
                    "question": "How many CSU campuses are there?"
                }
            ],
            "example_quality": 0.7747449320829393,
            "example_similarity": 0.5720056719316702,
            "db_id": "poker_player"
        },
        {
            "index": 649,
            "question": "Count the number of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of party events. */\nSELECT count(*) FROM party_events\n\n/* Answer the following: Count the number of book clubs. */\nSELECT count(*) FROM book_club\n\n/* Answer the following: Count the number of documents with expenses. */\nSELECT count(*) FROM Documents_with_expenses\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of poker players. */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2071,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM party_events",
                    "question": "Count the number of party events."
                },
                {
                    "ex_id": 6964,
                    "db_id": "culture_company",
                    "query": "SELECT count(*) FROM book_club",
                    "question": "Count the number of book clubs."
                },
                {
                    "ex_id": 6447,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT count(*) FROM Documents_with_expenses",
                    "question": "Count the number of documents with expenses."
                }
            ],
            "example_quality": 0.7750920123108547,
            "example_similarity": 0.5726009379738916,
            "db_id": "poker_player"
        },
        {
            "index": 650,
            "question": "List the earnings of poker players in descending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the total points of gymnasts in descending order. */\nSELECT Total_Points FROM gymnast ORDER BY Total_Points DESC\n\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Answer the following: List the names of climbers in descending order of points. */\nSELECT Name FROM climber ORDER BY Points DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the earnings of poker players in descending order. */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1739,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC",
                    "question": "List the total points of gymnasts in descending order."
                },
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                },
                {
                    "ex_id": 1113,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM climber ORDER BY Points DESC",
                    "question": "List the names of climbers in descending order of points."
                }
            ],
            "example_quality": 0.7754380245996072,
            "example_similarity": 0.5731605728944912,
            "db_id": "poker_player"
        },
        {
            "index": 651,
            "question": "What are the earnings of poker players, ordered descending by value?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the companies of entrepreneurs, ordered descending by amount of money requested? */\nSELECT Company FROM entrepreneur ORDER BY Money_Requested DESC\n\n/* Answer the following: What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested? */\nSELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested\n\n/* Answer the following: What are the names of captains, sorted by age descending? */\nSELECT name FROM captain ORDER BY age DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the earnings of poker players, ordered descending by value? */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2267,
                    "db_id": "entrepreneur",
                    "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
                    "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?"
                },
                {
                    "ex_id": 2295,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
                    "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?"
                },
                {
                    "ex_id": 6228,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain ORDER BY age DESC",
                    "question": "What are the names of captains, sorted by age descending?"
                }
            ],
            "example_quality": 0.7756691888105539,
            "example_similarity": 0.5733590681010755,
            "db_id": "poker_player"
        },
        {
            "index": 652,
            "question": "List the final tables made and the best finishes of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all document type codes and document type names. */\nSELECT document_type_code ,  document_type_name FROM Ref_document_types\n\n/* Answer the following: Please list the countries and years of film market estimations. */\nSELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID\n\n/* Answer the following: List the dates and vote percents of elections. */\nSELECT Date ,  Vote_Percent FROM election\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the final tables made and the best finishes of poker players. */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4167,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types",
                    "question": "List all document type codes and document type names."
                },
                {
                    "ex_id": 4137,
                    "db_id": "film_rank",
                    "query": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
                    "question": "Please list the countries and years of film market estimations."
                },
                {
                    "ex_id": 1177,
                    "db_id": "election_representative",
                    "query": "SELECT Date ,  Vote_Percent FROM election",
                    "question": "List the dates and vote percents of elections."
                }
            ],
            "example_quality": 0.7760132544718874,
            "example_similarity": 0.5735920675752683,
            "db_id": "poker_player"
        },
        {
            "index": 653,
            "question": "What are the final tables made and best finishes for all poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the invoice dates, order ids, and order details for all invoices? */\nSELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id\n\n/* Answer the following: What are the names, checking balances, and savings balances for all customers? */\nSELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid\n\n/* Answer the following: What are the account ids, customer ids, and account names for all the accounts? */\nSELECT account_id ,  customer_id ,  account_name FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the final tables made and best finishes for all poker players? */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1607,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id",
                    "question": "What are the invoice dates, order ids, and order details for all invoices?"
                },
                {
                    "ex_id": 1818,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
                    "question": "What are the names, checking balances, and savings balances for all customers?"
                },
                {
                    "ex_id": 671,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
                    "question": "What are the account ids, customer ids, and account names for all the accounts?"
                }
            ],
            "example_quality": 0.7763562663333393,
            "example_similarity": 0.5739954638024449,
            "db_id": "poker_player"
        },
        {
            "index": 654,
            "question": "What is the average earnings of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average speed of roller coasters? */\nSELECT avg(Speed) FROM roller_coaster\n\n/* Answer the following: What is the average access count of documents? */\nSELECT avg(access_count) FROM documents\n\n/* Answer the following: What is the average balance in checking accounts? */\nSELECT avg(balance) FROM checking\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players? */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6210,
                    "db_id": "roller_coaster",
                    "query": "SELECT avg(Speed) FROM roller_coaster",
                    "question": "What is the average speed of roller coasters?"
                },
                {
                    "ex_id": 4508,
                    "db_id": "document_management",
                    "query": "SELECT avg(access_count) FROM documents",
                    "question": "What is the average access count of documents?"
                },
                {
                    "ex_id": 1784,
                    "db_id": "small_bank_1",
                    "query": "SELECT avg(balance) FROM checking",
                    "question": "What is the average balance in checking accounts?"
                }
            ],
            "example_quality": 0.7766982292288541,
            "example_similarity": 0.5745449100861312,
            "db_id": "poker_player"
        },
        {
            "index": 655,
            "question": "Return the average earnings across all poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the average money requested across all entrepreneurs. */\nSELECT avg(Money_Requested) FROM entrepreneur\n\n/* Answer the following: Return the average age across all gymnasts. */\nSELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n\n/* Answer the following: Return the average age across all artists. */\nSELECT avg(Age) FROM artist\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the average earnings across all poker players. */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2271,
                    "db_id": "entrepreneur",
                    "query": "SELECT avg(Money_Requested) FROM entrepreneur",
                    "question": "Return the average money requested across all entrepreneurs."
                },
                {
                    "ex_id": 1758,
                    "db_id": "gymnast",
                    "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
                    "question": "Return the average age across all gymnasts."
                },
                {
                    "ex_id": 6149,
                    "db_id": "music_4",
                    "query": "SELECT avg(Age) FROM artist",
                    "question": "Return the average age across all artists."
                }
            ],
            "example_quality": 0.7770391479628559,
            "example_similarity": 0.5750813696522988,
            "db_id": "poker_player"
        },
        {
            "index": 656,
            "question": "What is the money rank of the poker player with the highest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and sex of the candidate with the highest support rate? */\nSELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1\n\n/* Answer the following: What is the savings balance of the account belonging to the customer with the highest checking balance? */\nSELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1\n\n/* Answer the following: What is the author of the submission with the highest score? */\nSELECT Author FROM submission ORDER BY Scores DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the poker player with the highest earnings? */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2416,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
                    "question": "What is the name and sex of the candidate with the highest support rate?"
                },
                {
                    "ex_id": 1812,
                    "db_id": "small_bank_1",
                    "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
                    "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?"
                },
                {
                    "ex_id": 5825,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
                    "question": "What is the author of the submission with the highest score?"
                }
            ],
            "example_quality": 0.7773790273104735,
            "example_similarity": 0.5755097283206408,
            "db_id": "poker_player"
        },
        {
            "index": 657,
            "question": "Return the money rank of the player with the greatest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the name of the mountain with the greatest height. */\nSELECT Name FROM mountain ORDER BY Height DESC LIMIT 1\n\n/* Answer the following: Return the age of the person with the greatest height. */\nSELECT Age FROM people ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the player with the greatest earnings. */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 246,
                    "db_id": "musical",
                    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                    "question": "Return the duration of the actor with the greatest age."
                },
                {
                    "ex_id": 1126,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
                    "question": "Return the name of the mountain with the greatest height."
                },
                {
                    "ex_id": 1752,
                    "db_id": "gymnast",
                    "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
                    "question": "Return the age of the person with the greatest height."
                }
            ],
            "example_quality": 0.7777178720177634,
            "example_similarity": 0.5760289930669819,
            "db_id": "poker_player"
        },
        {
            "index": 658,
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5? */\nSELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5\n\n/* Answer the following: What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance? */\nSELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)\n\n/* Answer the following: What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5? */\nSELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the maximum number of final tables made among poker players with earnings less than 200000? */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4934,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
                    "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?"
                },
                {
                    "ex_id": 1788,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
                    "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?"
                },
                {
                    "ex_id": 4932,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
                    "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?"
                }
            ],
            "example_quality": 0.7774963318542781,
            "example_similarity": 0.5759235503317954,
            "db_id": "poker_player"
        },
        {
            "index": 659,
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the maximum and minimum weeks on top across all volumes. */\nSELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume\n\n/* Answer the following: For each team, return the team name, id and the maximum salary among the team. */\nSELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;\n\n/* Answer the following: Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates? */\nSELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the maximum final tables made across all poker players who have earnings below 200000. */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6159,
                    "db_id": "music_4",
                    "query": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
                    "question": "Give the maximum and minimum weeks on top across all volumes."
                },
                {
                    "ex_id": 3659,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;",
                    "question": "For each team, return the team name, id and the maximum salary among the team."
                },
                {
                    "ex_id": 2428,
                    "db_id": "candidate_poll",
                    "query": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
                    "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?"
                }
            ],
            "example_quality": 0.7771638708930494,
            "example_similarity": 0.5757758693867536,
            "db_id": "poker_player"
        },
        {
            "index": 660,
            "question": "What are the names of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of body builders? */\nSELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Answer the following: What are the price ranges of hotels? */\nSELECT price_range FROM HOTELS\n\n/* Answer the following: What are the names of gymnasts? */\nSELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1157,
                    "db_id": "body_builder",
                    "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of body builders?"
                },
                {
                    "ex_id": 5888,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT price_range FROM HOTELS",
                    "question": "What are the price ranges of hotels?"
                },
                {
                    "ex_id": 1747,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
                    "question": "What are the names of gymnasts?"
                }
            ],
            "example_quality": 0.7775015013916963,
            "example_similarity": 0.5763555019078849,
            "db_id": "poker_player"
        },
        {
            "index": 661,
            "question": "Return the names of all the poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the low and high estimates for all film markets. */\nSELECT Low_Estimate ,  High_Estimate FROM film_market_estimation\n\n/* Answer the following: Return all detention summaries. */\nSELECT detention_summary FROM Detention\n\n/* Answer the following: Return the day Number and stored date for all the documents. */\nSELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of all the poker players. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4120,
                    "db_id": "film_rank",
                    "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
                    "question": "Return the low and high estimates for all film markets."
                },
                {
                    "ex_id": 3093,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT detention_summary FROM Detention",
                    "question": "Return all detention summaries."
                },
                {
                    "ex_id": 4178,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
                    "question": "Return the day Number and stored date for all the documents."
                }
            ],
            "example_quality": 0.7778381103154608,
            "example_similarity": 0.5763455852178586,
            "db_id": "poker_player"
        },
        {
            "index": 662,
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wines with scores higher than 90? */\nSELECT Name FROM WINE WHERE score  >  90\n\n/* Answer the following: What are the distinct publishers of publications with price higher than 5000000? */\nSELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000\n\n/* Answer the following: What are the wines that have prices higher than 50 and made of Red color grapes? */\nSELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players whose earnings is higher than 300000? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6533,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE score  >  90",
                    "question": "What are the names of wines with scores higher than 90?"
                },
                {
                    "ex_id": 220,
                    "db_id": "book_2",
                    "query": "SELECT DISTINCT Publisher FROM publication WHERE Price  >  5000000",
                    "question": "What are the distinct publishers of publications with price higher than 5000000?"
                },
                {
                    "ex_id": 6550,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
                    "question": "What are the wines that have prices higher than 50 and made of Red color grapes?"
                }
            ],
            "example_quality": 0.778101770197735,
            "example_similarity": 0.5765084127732705,
            "db_id": "poker_player"
        },
        {
            "index": 663,
            "question": "Give the names of poker players who have earnings above 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first names of students with age above 22. */\nSELECT Fname FROM STUDENT WHERE Age  >  22\n\n/* Answer the following: Show the names of clubs that have players with position \"Right Wing\". */\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"\n\n/* Answer the following: Show the name and location of track with 1 race. */\nSELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the names of poker players who have earnings above 300000. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5455,
                    "db_id": "voter_2",
                    "query": "SELECT Fname FROM STUDENT WHERE Age  >  22",
                    "question": "Find the first names of students with age above 22."
                },
                {
                    "ex_id": 3358,
                    "db_id": "sports_competition",
                    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
                    "question": "Show the names of clubs that have players with position \"Right Wing\"."
                },
                {
                    "ex_id": 786,
                    "db_id": "race_track",
                    "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
                    "question": "Show the name and location of track with 1 race."
                }
            ],
            "example_quality": 0.778101281521385,
            "example_similarity": 0.5764815979104605,
            "db_id": "poker_player"
        },
        {
            "index": 664,
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of journalists in ascending order of years working. */\nSELECT Name FROM journalist ORDER BY Years_working ASC\n\n/* Answer the following: List the names of roller coasters by ascending order of length. */\nSELECT Name FROM roller_coaster ORDER BY LENGTH ASC\n\n/* Answer the following: Find the name of the students and their department names sorted by their total credits in ascending order. */\nSELECT name ,  dept_name FROM student ORDER BY tot_cred\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of poker players ordered by the final tables made in ascending order. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2804,
                    "db_id": "news_report",
                    "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
                    "question": "List the names of journalists in ascending order of years working."
                },
                {
                    "ex_id": 6205,
                    "db_id": "roller_coaster",
                    "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
                    "question": "List the names of roller coasters by ascending order of length."
                },
                {
                    "ex_id": 1385,
                    "db_id": "college_2",
                    "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
                    "question": "Find the name of the students and their department names sorted by their total credits in ascending order."
                }
            ],
            "example_quality": 0.7784354663383709,
            "example_similarity": 0.5765977322076463,
            "db_id": "poker_player"
        },
        {
            "index": 665,
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Answer the following: What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos. */\nSELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)\n\n/* Answer the following: What is the total number of routes for each country and airline in that country? */\nSELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players, ordered ascending by the number of final tables they have made? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2315,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
                    "question": "What are the heights of perpetrators in descending order of the number of people they injured?"
                },
                {
                    "ex_id": 3728,
                    "db_id": "mountain_photos",
                    "query": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
                    "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos."
                },
                {
                    "ex_id": 6869,
                    "db_id": "flight_4",
                    "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
                    "question": "What is the total number of routes for each country and airline in that country?"
                }
            ],
            "example_quality": 0.77808062695938,
            "example_similarity": 0.5763924330841367,
            "db_id": "poker_player"
        },
        {
            "index": 666,
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the room name and base price of the room with the lowest base price? */\nSELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;\n\n/* Answer the following: What is the name and checking balance of the account which has the lowest savings balance? */\nSELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Answer the following: What are the name, latitude, and city of the station with the lowest latitude? */\nSELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the birth date of the poker player with the lowest earnings? */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2594,
                    "db_id": "inn_1",
                    "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;",
                    "question": "What are the room name and base price of the room with the lowest base price?"
                },
                {
                    "ex_id": 1816,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "What is the name and checking balance of the account which has the lowest savings balance?"
                },
                {
                    "ex_id": 174,
                    "db_id": "bike_1",
                    "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
                    "question": "What are the name, latitude, and city of the station with the lowest latitude?"
                }
            ],
            "example_quality": 0.7784138392312127,
            "example_similarity": 0.5766113967314912,
            "db_id": "poker_player"
        },
        {
            "index": 667,
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the total points of the gymnast with the lowest age. */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Answer the following: Find the name and checking balance of the account with the lowest savings balance. */\nSELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Answer the following: Find the name and checking balance of the account with the lowest saving balance. */\nSELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the birth date of the poker player with the lowest earnings. */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1756,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "Return the total points of the gymnast with the lowest age."
                },
                {
                    "ex_id": 1803,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "Find the name and checking balance of the account with the lowest savings balance."
                },
                {
                    "ex_id": 1815,
                    "db_id": "small_bank_1",
                    "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "Find the name and checking balance of the account with the lowest saving balance."
                }
            ],
            "example_quality": 0.7787460523657986,
            "example_similarity": 0.5769578448738613,
            "db_id": "poker_player"
        },
        {
            "index": 668,
            "question": "What is the money rank of the tallest poker player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the age of the tallest person? */\nSELECT Age FROM people ORDER BY Height DESC LIMIT 1\n\n/* Answer the following: What is the name of the tallest building? */\nSELECT name FROM building ORDER BY height_feet DESC LIMIT 1\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the tallest poker player? */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1751,
                    "db_id": "gymnast",
                    "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
                    "question": "What is the age of the tallest person?"
                },
                {
                    "ex_id": 1913,
                    "db_id": "protein_institute",
                    "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1",
                    "question": "What is the name of the tallest building?"
                },
                {
                    "ex_id": 2302,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the company of the tallest entrepreneur."
                }
            ],
            "example_quality": 0.779077270850281,
            "example_similarity": 0.5771409928595301,
            "db_id": "poker_player"
        },
        {
            "index": 669,
            "question": "Return the money rank of the poker player with the greatest height.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: Return the name of the mountain with the greatest height. */\nSELECT Name FROM mountain ORDER BY Height DESC LIMIT 1\n\n/* Answer the following: Return the age of the person with the greatest height. */\nSELECT Age FROM people ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the poker player with the greatest height. */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 246,
                    "db_id": "musical",
                    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                    "question": "Return the duration of the actor with the greatest age."
                },
                {
                    "ex_id": 1126,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
                    "question": "Return the name of the mountain with the greatest height."
                },
                {
                    "ex_id": 1752,
                    "db_id": "gymnast",
                    "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
                    "question": "Return the age of the person with the greatest height."
                }
            ],
            "example_quality": 0.7794074991449742,
            "example_similarity": 0.5775431047478624,
            "db_id": "poker_player"
        },
        {
            "index": 670,
            "question": "What is the average earnings of poker players with height higher than 200?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and average salaries for departments with average salary higher than 42000? */\nSELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000\n\n/* Answer the following: What is the theme and artist name for the exhibition with a ticket price higher than the average? */\nSELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)\n\n/* Answer the following: What are the names of wines with scores higher than 90? */\nSELECT Name FROM WINE WHERE score  >  90\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players with height higher than 200? */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1488,
                    "db_id": "college_2",
                    "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
                    "question": "What are the names and average salaries for departments with average salary higher than 42000?"
                },
                {
                    "ex_id": 1674,
                    "db_id": "theme_gallery",
                    "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)",
                    "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?"
                },
                {
                    "ex_id": 6533,
                    "db_id": "wine_1",
                    "query": "SELECT Name FROM WINE WHERE score  >  90",
                    "question": "What are the names of wines with scores higher than 90?"
                }
            ],
            "example_quality": 0.7790547350500646,
            "example_similarity": 0.5777010006114229,
            "db_id": "poker_player"
        },
        {
            "index": 671,
            "question": "Give average earnings of poker players who are taller than 200.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the total money requested by entrepreneurs who are taller than 1.85. */\nSELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85\n\n/* Answer the following: find the names of people who are taller than 200 or lower than 190. */\nSELECT name FROM people WHERE height  >  200 OR height  <  190\n\n/* Answer the following: Show the company of the tallest entrepreneur. */\nSELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give average earnings of poker players who are taller than 200. */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2283,
                    "db_id": "entrepreneur",
                    "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
                    "question": "Give the total money requested by entrepreneurs who are taller than 1.85."
                },
                {
                    "ex_id": 2411,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
                    "question": "find the names of people who are taller than 200 or lower than 190."
                },
                {
                    "ex_id": 2302,
                    "db_id": "entrepreneur",
                    "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
                    "question": "Show the company of the tallest entrepreneur."
                }
            ],
            "example_quality": 0.7787997153375258,
            "example_similarity": 0.5775876369546667,
            "db_id": "poker_player"
        },
        {
            "index": 672,
            "question": "What are the names of poker players in descending order of earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lifespans of representatives in descending order of vote percent? */\nSELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC\n\n/* Answer the following: What are the weights of entrepreneurs in descending order of money requested? */\nSELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC\n\n/* Answer the following: What are the characters of actors in descending order of age? */\nSELECT Character FROM actor ORDER BY age DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players in descending order of earnings? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1186,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
                    "question": "What are the lifespans of representatives in descending order of vote percent?"
                },
                {
                    "ex_id": 2286,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
                    "question": "What are the weights of entrepreneurs in descending order of money requested?"
                },
                {
                    "ex_id": 243,
                    "db_id": "musical",
                    "query": "SELECT Character FROM actor ORDER BY age DESC",
                    "question": "What are the characters of actors in descending order of age?"
                }
            ],
            "example_quality": 0.7791288824277973,
            "example_similarity": 0.5781780704924708,
            "db_id": "poker_player"
        },
        {
            "index": 673,
            "question": "Return the names of poker players sorted by their earnings descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the themes of farm competitions, sorted by year ascending. */\nSELECT Theme FROM farm_competition ORDER BY YEAR ASC\n\n/* Answer the following: Return the characters for actors, ordered by age descending. */\nSELECT Character FROM actor ORDER BY age DESC\n\n/* Answer the following: List the dates of games by the home team name in descending order. */\nSELECT Date FROM game ORDER BY home_team DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of poker players sorted by their earnings descending. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 24,
                    "db_id": "farm",
                    "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
                    "question": "Return the themes of farm competitions, sorted by year ascending."
                },
                {
                    "ex_id": 244,
                    "db_id": "musical",
                    "query": "SELECT Character FROM actor ORDER BY age DESC",
                    "question": "Return the characters for actors, ordered by age descending."
                },
                {
                    "ex_id": 1276,
                    "db_id": "game_injury",
                    "query": "SELECT Date FROM game ORDER BY home_team DESC",
                    "question": "List the dates of games by the home team name in descending order."
                }
            ],
            "example_quality": 0.7793470058208108,
            "example_similarity": 0.5781991188336534,
            "db_id": "poker_player"
        },
        {
            "index": 674,
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of different different airports that are destinations for American Airlines? */\nSELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'\n\n/* Answer the following: What are the different statement ids on accounts, and the number of accounts for each? */\nSELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID\n\n/* Answer the following: What is the number of professors for different school? */\nSELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are different nationalities of people and the corresponding number of people from each nation? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6841,
                    "db_id": "flight_4",
                    "query": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
                    "question": "What is the number of different different airports that are destinations for American Airlines?"
                },
                {
                    "ex_id": 6397,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID",
                    "question": "What are the different statement ids on accounts, and the number of accounts for each?"
                },
                {
                    "ex_id": 3210,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
                    "question": "What is the number of professors for different school?"
                }
            ],
            "example_quality": 0.7794624299325646,
            "example_similarity": 0.5780791713240403,
            "db_id": "poker_player"
        },
        {
            "index": 675,
            "question": "How many people are there of each nationality?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers are there of each gender? */\nSELECT gender ,  count(*) FROM Customers GROUP BY gender\n\n/* Answer the following: How many students are there in each major? */\nSELECT count(*) ,  major FROM student GROUP BY major\n\n/* Answer the following: how many airports are there in each country? */\nSELECT count(*) ,  country FROM airport GROUP BY country\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many people are there of each nationality? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1577,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
                    "question": "How many customers are there of each gender?"
                },
                {
                    "ex_id": 5726,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  major FROM student GROUP BY major",
                    "question": "How many students are there in each major?"
                },
                {
                    "ex_id": 6383,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) ,  country FROM airport GROUP BY country",
                    "question": "how many airports are there in each country?"
                }
            ],
            "example_quality": 0.7797891522585905,
            "example_similarity": 0.5785067083541776,
            "db_id": "poker_player"
        },
        {
            "index": 676,
            "question": "What is the most common nationality of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common type of ships? */\nSELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common participant type? */\nSELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the most common nationality of people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                },
                {
                    "ex_id": 4014,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common type of ships?"
                },
                {
                    "ex_id": 2147,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common participant type?"
                }
            ],
            "example_quality": 0.7801149079505156,
            "example_similarity": 0.5790754306243089,
            "db_id": "poker_player"
        },
        {
            "index": 677,
            "question": "Give the nationality that is most common across all people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the color description that is most common across all products. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the flag that is most common among all ships. */\nSELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the name of the characteristic that is most common across all products. */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the nationality that is most common across all people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5592,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the color description that is most common across all products."
                },
                {
                    "ex_id": 6252,
                    "db_id": "ship_1",
                    "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the flag that is most common among all ships."
                },
                {
                    "ex_id": 5596,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name of the characteristic that is most common across all products."
                }
            ],
            "example_quality": 0.7804397012918,
            "example_similarity": 0.5792679362059594,
            "db_id": "poker_player"
        },
        {
            "index": 678,
            "question": "What are the nationalities that are shared by at least two people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the hometowns that are shared by at least two gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the birth places that are shared by at least two people? */\nSELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2\n\n/* Answer the following: Which locations are shared by more than two wrestlers? */\nSELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the nationalities that are shared by at least two people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1765,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
                    "question": "What are the hometowns that are shared by at least two gymnasts?"
                },
                {
                    "ex_id": 1166,
                    "db_id": "body_builder",
                    "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2",
                    "question": "What are the birth places that are shared by at least two people?"
                },
                {
                    "ex_id": 1876,
                    "db_id": "wrestler",
                    "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
                    "question": "Which locations are shared by more than two wrestlers?"
                }
            ],
            "example_quality": 0.7806979842626904,
            "example_similarity": 0.5795768190082965,
            "db_id": "poker_player"
        },
        {
            "index": 679,
            "question": "Return the nationalities for which there are two or more people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the districts which have two or more addresses. */\nSELECT district FROM address GROUP BY district HAVING count(*)  >=  2\n\n/* Answer the following: Give the hometowns from which two or more gymnasts are from. */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2\n\n/* Answer the following: Return the names of parties that have two or more events. */\nSELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the nationalities for which there are two or more people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2932,
                    "db_id": "sakila_1",
                    "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
                    "question": "Give the districts which have two or more addresses."
                },
                {
                    "ex_id": 1766,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2",
                    "question": "Give the hometowns from which two or more gymnasts are from."
                },
                {
                    "ex_id": 2077,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2",
                    "question": "Return the names of parties that have two or more events."
                }
            ],
            "example_quality": 0.7810209621945569,
            "example_similarity": 0.5795437793000998,
            "db_id": "poker_player"
        },
        {
            "index": 680,
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the date and venue of each workshop in ascending alphabetical order of the venue. */\nSELECT Date ,  Venue FROM workshop ORDER BY Venue\n\n/* Answer the following: Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names. */\nSELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC\n\n/* Answer the following: Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name. */\nSELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names and birth dates of people in ascending alphabetical order of name. */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5841,
                    "db_id": "workshop_paper",
                    "query": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
                    "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue."
                },
                {
                    "ex_id": 4494,
                    "db_id": "decoration_competition",
                    "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC",
                    "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names."
                },
                {
                    "ex_id": 1503,
                    "db_id": "debate",
                    "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
                    "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name."
                }
            ],
            "example_quality": 0.7813429901913296,
            "example_similarity": 0.5796025805357301,
            "db_id": "poker_player"
        },
        {
            "index": 681,
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of the people in alphabetical order? */\nSELECT first_name FROM people ORDER BY first_name\n\n/* Answer the following: List the first names of people in alphabetical order? */\nSELECT first_name FROM people ORDER BY first_name\n\n/* Answer the following: What are the personal names and family names of the students? Sort the result in alphabetical order of the family name. */\nSELECT personal_name ,  family_name FROM Students ORDER BY family_name\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names and birth dates of people, ordered by their names in alphabetical order? */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 99,
                    "db_id": "student_assessment",
                    "query": "SELECT first_name FROM people ORDER BY first_name",
                    "question": "What are the first names of the people in alphabetical order?"
                },
                {
                    "ex_id": 98,
                    "db_id": "student_assessment",
                    "query": "SELECT first_name FROM people ORDER BY first_name",
                    "question": "List the first names of people in alphabetical order?"
                },
                {
                    "ex_id": 3800,
                    "db_id": "e_learning",
                    "query": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name",
                    "question": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name."
                }
            ],
            "example_quality": 0.7816640724377447,
            "example_similarity": 0.5795205160990481,
            "db_id": "poker_player"
        },
        {
            "index": 682,
            "question": "Show names of people whose nationality is not \"Russia\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of technicians whose team is not \"NYY\". */\nSELECT Name FROM technician WHERE Team != \"NYY\"\n\n/* Answer the following: List the names of countries whose language is not \"German\". */\nSELECT Name FROM country WHERE Languages != \"German\"\n\n/* Answer the following: Show the census ranking of cities whose status are not \"Village\". */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Show names of people whose nationality is not \"Russia\". */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2240,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Team != \"NYY\"",
                    "question": "List the name of technicians whose team is not \"NYY\"."
                },
                {
                    "ex_id": 6207,
                    "db_id": "roller_coaster",
                    "query": "SELECT Name FROM country WHERE Languages != \"German\"",
                    "question": "List the names of countries whose language is not \"German\"."
                },
                {
                    "ex_id": 55,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "Show the census ranking of cities whose status are not \"Village\"."
                }
            ],
            "example_quality": 0.7819842130939944,
            "example_similarity": 0.5797972513661375,
            "db_id": "poker_player"
        },
        {
            "index": 683,
            "question": "What are the names of people who are not from Russia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of climbers who are not from the country of Switzerland? */\nSELECT Name FROM climber WHERE Country != \"Switzerland\"\n\n/* Answer the following: What are the names of the mills which are not located in 'Donceel'? */\nSELECT name FROM mill WHERE LOCATION != 'Donceel'\n\n/* Answer the following: What are the names of people who are not entrepreneurs? */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who are not from Russia? */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1116,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
                    "question": "What are the names of climbers who are not from the country of Switzerland?"
                },
                {
                    "ex_id": 6952,
                    "db_id": "architecture",
                    "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'",
                    "question": "What are the names of the mills which are not located in 'Donceel'?"
                },
                {
                    "ex_id": 2297,
                    "db_id": "entrepreneur",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
                    "question": "What are the names of people who are not entrepreneurs?"
                }
            ],
            "example_quality": 0.7820245346114612,
            "example_similarity": 0.5800572955184673,
            "db_id": "poker_player"
        },
        {
            "index": 684,
            "question": "List the names of people that are not poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that are not entrepreneurs. */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)\n\n/* Answer the following: List the names of people that are not perpetrators. */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)\n\n/* Answer the following: List the name of musicals that do not have actors. */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of people that are not poker players. */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2296,
                    "db_id": "entrepreneur",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
                    "question": "List the names of people that are not entrepreneurs."
                },
                {
                    "ex_id": 2320,
                    "db_id": "perpetrator",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
                    "question": "List the names of people that are not perpetrators."
                },
                {
                    "ex_id": 269,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
                    "question": "List the name of musicals that do not have actors."
                }
            ],
            "example_quality": 0.7823432121924386,
            "example_similarity": 0.5804326939706769,
            "db_id": "poker_player"
        },
        {
            "index": 685,
            "question": "What are the names of people who do not play poker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of enzymes who does not produce 'Heme'? */\nSELECT name FROM enzyme WHERE product != 'Heme'\n\n/* Answer the following: What are the first names of the professors who do not play Canoeing or Kayaking as activities? */\nSELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'\n\n/* Answer the following: What are the names of instructors who didn't teach? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who do not play poker? */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 944,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme WHERE product != 'Heme'",
                    "question": "What are the names of enzymes who does not produce 'Heme'?"
                },
                {
                    "ex_id": 6799,
                    "db_id": "activity_1",
                    "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
                    "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?"
                },
                {
                    "ex_id": 1442,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
                    "question": "What are the names of instructors who didn't teach?"
                }
            ],
            "example_quality": 0.7821666172277425,
            "example_similarity": 0.580526721088736,
            "db_id": "poker_player"
        },
        {
            "index": 686,
            "question": "How many distinct nationalities are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct allergies are there? */\nSELECT count(DISTINCT allergytype) FROM Allergy_type\n\n/* Answer the following: How many distinct companies are there? */\nSELECT count(DISTINCT Company) FROM entrepreneur\n\n/* Answer the following: How many distinct governors are there? */\nSELECT count(DISTINCT Governor) FROM party\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many distinct nationalities are there? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 443,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
                    "question": "How many distinct allergies are there?"
                },
                {
                    "ex_id": 2300,
                    "db_id": "entrepreneur",
                    "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
                    "question": "How many distinct companies are there?"
                },
                {
                    "ex_id": 2751,
                    "db_id": "election",
                    "query": "SELECT count(DISTINCT Governor) FROM party",
                    "question": "How many distinct governors are there?"
                }
            ],
            "example_quality": 0.782484158602046,
            "example_similarity": 0.5811381981716971,
            "db_id": "poker_player"
        },
        {
            "index": 687,
            "question": "Count the number of different nationalities.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different statuses. */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: Count the number of different parties. */\nSELECT count(DISTINCT party_name) FROM party\n\n/* Answer the following: Count the number of different companies. */\nSELECT count(DISTINCT Company) FROM entrepreneur\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of different nationalities. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 30,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "Count the number of different statuses."
                },
                {
                    "ex_id": 2045,
                    "db_id": "party_people",
                    "query": "SELECT count(DISTINCT party_name) FROM party",
                    "question": "Count the number of different parties."
                },
                {
                    "ex_id": 2301,
                    "db_id": "entrepreneur",
                    "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
                    "question": "Count the number of different companies."
                }
            ],
            "example_quality": 0.7828007755473123,
            "example_similarity": 0.5817478951175898,
            "db_id": "poker_player"
        },
        {
            "index": 688,
            "question": "How many states are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many states are there? */\nSELECT ",
            "response": "count(*) FROM area_code_state",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.7830559100789781,
            "example_similarity": 0.5823558196886398,
            "db_id": "voter_1"
        },
        {
            "index": 689,
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of pilots in ascending order of rank. */\nSELECT Pilot_name FROM pilot ORDER BY Rank ASC\n\n/* Answer the following: Show the names of players and names of their coaches in descending order of the votes of players. */\nSELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC\n\n/* Answer the following: List the name of browsers in descending order by market share. */\nSELECT name FROM browser ORDER BY market_share DESC\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the contestant numbers and names, ordered by contestant name descending. */\nSELECT ",
            "response": "contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2085,
                    "db_id": "pilot_record",
                    "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC",
                    "question": "List the names of pilots in ascending order of rank."
                },
                {
                    "ex_id": 1732,
                    "db_id": "riding_club",
                    "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
                    "question": "Show the names of players and names of their coaches in descending order of the votes of players."
                },
                {
                    "ex_id": 1828,
                    "db_id": "browser_web",
                    "query": "SELECT name FROM browser ORDER BY market_share DESC",
                    "question": "List the name of browsers in descending order by market share."
                }
            ],
            "example_quality": 0.783263268592544,
            "example_similarity": 0.5821712534547949,
            "db_id": "voter_1"
        },
        {
            "index": 690,
            "question": "List the vote ids, phone numbers and states of all votes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the ids, names and market shares of all browsers. */\nSELECT id ,  name ,  market_share FROM browser\n\n/* Answer the following: List the season, home team, away team of all the games. */\nSELECT season ,  home_team ,  away_team FROM game\n\n/* Answer the following: List the first name and last name of all customers. */\nSELECT first_name ,  last_name FROM Customers;\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the vote ids, phone numbers and states of all votes. */\nSELECT ",
            "response": "vote_id , phone_number , state FROM votes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1829,
                    "db_id": "browser_web",
                    "query": "SELECT id ,  name ,  market_share FROM browser",
                    "question": "List the ids, names and market shares of all browsers."
                },
                {
                    "ex_id": 1277,
                    "db_id": "game_injury",
                    "query": "SELECT season ,  home_team ,  away_team FROM game",
                    "question": "List the season, home team, away team of all the games."
                },
                {
                    "ex_id": 6659,
                    "db_id": "driving_school",
                    "query": "SELECT first_name ,  last_name FROM Customers;",
                    "question": "List the first name and last name of all customers."
                }
            ],
            "example_quality": 0.7835773797974824,
            "example_similarity": 0.5825687012851654,
            "db_id": "voter_1"
        },
        {
            "index": 691,
            "question": "What are the maximum and minimum values of area codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum budget of the departments? */\nSELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department\n\n/* Answer the following: What are the maximum and minimum population of the counties? */\nSELECT max(Population) ,  min(Population) FROM county\n\n/* Answer the following: What are the minimum and maximum vote percents of elections? */\nSELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the maximum and minimum values of area codes? */\nSELECT ",
            "response": "max(area_code) , min(area_code) FROM area_code_state",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4,
                    "db_id": "department_management",
                    "query": "SELECT max(budget_in_billions) ,  min(budget_in_billions) FROM department",
                    "question": "What are the maximum and minimum budget of the departments?"
                },
                {
                    "ex_id": 2742,
                    "db_id": "election",
                    "query": "SELECT max(Population) ,  min(Population) FROM county",
                    "question": "What are the maximum and minimum population of the counties?"
                },
                {
                    "ex_id": 1178,
                    "db_id": "election_representative",
                    "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
                    "question": "What are the minimum and maximum vote percents of elections?"
                }
            ],
            "example_quality": 0.7838905818527683,
            "example_similarity": 0.5829316023445693,
            "db_id": "voter_1"
        },
        {
            "index": 692,
            "question": "What is last date created of votes from the state 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: On which day was the order placed whose shipment tracking number is 3452? */\nSELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452\n\n/* Answer the following: What are first and last names of players participating in all star game in 1998? */\nSELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998\n\n/* Answer the following: What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there? */\nSELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is last date created of votes from the state 'CA'? */\nSELECT ",
            "response": "max(created) FROM votes WHERE state = 'CA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6915,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
                    "question": "On which day was the order placed whose shipment tracking number is 3452?"
                },
                {
                    "ex_id": 3634,
                    "db_id": "baseball_1",
                    "query": "SELECT name_first ,  name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id  =  T2.player_id WHERE YEAR  =  1998",
                    "question": "What are first and last names of players participating in all star game in 1998?"
                },
                {
                    "ex_id": 5934,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
                    "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?"
                }
            ],
            "example_quality": 0.783721183131401,
            "example_similarity": 0.5825676674631782,
            "db_id": "voter_1"
        },
        {
            "index": 693,
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the dorm that does not have a TV Lounge? */\nSELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'\n\n/* Answer the following: What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'? */\nSELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n\n/* Answer the following: What are the titles of the books whose writer is not \"Elaine Lee\"? */\nSELECT Title FROM book WHERE Writer != \"Elaine Lee\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the names of the contestants whose names are not 'Jessie Alloway' */\nSELECT ",
            "response": "contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5762,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
                    "question": "What are the names of the dorm that does not have a TV Lounge?"
                },
                {
                    "ex_id": 5590,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
                    "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?"
                },
                {
                    "ex_id": 217,
                    "db_id": "book_2",
                    "query": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"",
                    "question": "What are the titles of the books whose writer is not \"Elaine Lee\"?"
                }
            ],
            "example_quality": 0.7838146371939602,
            "example_similarity": 0.582428162391164,
            "db_id": "voter_1"
        },
        {
            "index": 694,
            "question": "What are the distinct states and create time of all votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and arrival times of trains? */\nSELECT Name ,  Arrival FROM train\n\n/* Answer the following: What are the start date and end date of each apartment booking? */\nSELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n\n/* Answer the following: What is the total revenue of each manufacturer? */\nSELECT sum(revenue) ,  name FROM manufacturers GROUP BY name\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the distinct states and create time of all votes? */\nSELECT ",
            "response": "DISTINCT state , created FROM votes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5639,
                    "db_id": "railway",
                    "query": "SELECT Name ,  Arrival FROM train",
                    "question": "What are the names and arrival times of trains?"
                },
                {
                    "ex_id": 1198,
                    "db_id": "apartment_rentals",
                    "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
                    "question": "What are the start date and end date of each apartment booking?"
                },
                {
                    "ex_id": 5312,
                    "db_id": "manufactory_1",
                    "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
                    "question": "What is the total revenue of each manufacturer?"
                }
            ],
            "example_quality": 0.7834574077972791,
            "example_similarity": 0.5823395992021286,
            "db_id": "voter_1"
        },
        {
            "index": 695,
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Answer the following: What are the names of departments that have at least one employee. */\nSELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id\n\n/* Answer the following: What are the names of studios that have made two or more films? */\nSELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the contestant numbers and names of the contestants who had at least two votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4763,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "What are the names of staff who have been assigned multiple jobs?"
                },
                {
                    "ex_id": 3481,
                    "db_id": "hr_1",
                    "query": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
                    "question": "What are the names of departments that have at least one employee."
                },
                {
                    "ex_id": 4146,
                    "db_id": "film_rank",
                    "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2",
                    "question": "What are the names of studios that have made two or more films?"
                }
            ],
            "example_quality": 0.7833533124063639,
            "example_similarity": 0.5821090068609427,
            "db_id": "voter_1"
        },
        {
            "index": 696,
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount. */\nSELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1\n\n/* Answer the following: Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date. */\nSELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )\n\n/* Answer the following: What is the name of the media type that is least common across all tracks? */\nSELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3859,
                    "db_id": "insurance_policies",
                    "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1",
                    "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount."
                },
                {
                    "ex_id": 3863,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )",
                    "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date."
                },
                {
                    "ex_id": 839,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
                    "question": "What is the name of the media type that is least common across all tracks?"
                }
            ],
            "example_quality": 0.7831934677754285,
            "example_similarity": 0.5819089323436959,
            "db_id": "voter_1"
        },
        {
            "index": 697,
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the number of international and domestic passengers of the airport named London \"Heathrow\"? */\nSELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n\n/* Answer the following: What is the number of employees that have a salary between 100000 and 200000? */\nSELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000\n\n/* Answer the following: What is the number of routes whose destinations are Italian airports? */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the number of votes from state 'NY' or 'CA'? */\nSELECT ",
            "response": "count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4804,
                    "db_id": "aircraft",
                    "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
                    "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?"
                },
                {
                    "ex_id": 369,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000",
                    "question": "What is the number of employees that have a salary between 100000 and 200000?"
                },
                {
                    "ex_id": 6871,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "What is the number of routes whose destinations are Italian airports?"
                }
            ],
            "example_quality": 0.7831979603414964,
            "example_similarity": 0.5817346551243187,
            "db_id": "voter_1"
        },
        {
            "index": 698,
            "question": "How many contestants did not get voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many drivers did not race in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Answer the following: How many trips did not end in San Francisco? */\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"\n\n/* Answer the following: How many accelerators are not compatible with the browsers listed ? */\nSELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many contestants did not get voted? */\nSELECT ",
            "response": "count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2175,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not race in 2009?"
                },
                {
                    "ex_id": 167,
                    "db_id": "bike_1",
                    "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
                    "question": "How many trips did not end in San Francisco?"
                },
                {
                    "ex_id": 1838,
                    "db_id": "browser_web",
                    "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );",
                    "question": "How many accelerators are not compatible with the browsers listed ?"
                }
            ],
            "example_quality": 0.7832122000185172,
            "example_similarity": 0.5817598213767202,
            "db_id": "voter_1"
        },
        {
            "index": 699,
            "question": "What is the area code in which the most voters voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the membership level with the most people? */\nSELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: what is the capital of the state with the most inhabitants */\nSELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );\n\n/* Answer the following: What is the name of the course that has the most student enrollment? */\nSELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is the area code in which the most voters voted? */\nSELECT ",
            "response": "T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5420,
                    "db_id": "shop_membership",
                    "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the membership level with the most people?"
                },
                {
                    "ex_id": 7319,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
                    "question": "what is the capital of the state with the most inhabitants"
                },
                {
                    "ex_id": 3821,
                    "db_id": "e_learning",
                    "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the course that has the most student enrollment?"
                }
            ],
            "example_quality": 0.7832320701891278,
            "example_similarity": 0.5816206194462208,
            "db_id": "voter_1"
        },
        {
            "index": 700,
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there? */\nSELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"\n\n/* Answer the following: What are the names and dates for documents corresponding to project that has the details 'Graph Database project'? */\nSELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'\n\n/* Answer the following: Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'. */\nSELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? */\nSELECT ",
            "response": "T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5934,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
                    "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?"
                },
                {
                    "ex_id": 6411,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
                    "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?"
                },
                {
                    "ex_id": 6467,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
                    "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'."
                }
            ],
            "example_quality": 0.783285328403876,
            "example_similarity": 0.5815311805755287,
            "db_id": "voter_1"
        },
        {
            "index": 701,
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\". */\nSELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"\n\n/* Answer the following: Show the names of festivals that have nominated artworks of type \"Program Talent Show\". */\nSELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"\n\n/* Answer the following: Find the location and all games score of the school that has Clemson as its team name. */\nSELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. */\nSELECT ",
            "response": "T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 271,
                    "db_id": "musical",
                    "query": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
                    "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\"."
                },
                {
                    "ex_id": 4611,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
                    "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\"."
                },
                {
                    "ex_id": 994,
                    "db_id": "university_basketball",
                    "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
                    "question": "Find the location and all games score of the school that has Clemson as its team name."
                }
            ],
            "example_quality": 0.783082390190783,
            "example_similarity": 0.5812020440149542,
            "db_id": "voter_1"
        },
        {
            "index": 702,
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the the names of the drama workshop groups that are located in Feliciaberg city. */\nSELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"\n\n/* Answer the following: Return the names of songs for which format is mp3 and resolution is below 1000. */\nSELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000\n\n/* Answer the following: Return the names and ids of customers who have TN in their address. */\nSELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Return the names of the contestants whose names contain the substring 'Al' . */\nSELECT ",
            "response": "contestant_name from contestants where contestant_name like \"%al%\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5152,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
                    "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city."
                },
                {
                    "ex_id": 3594,
                    "db_id": "music_1",
                    "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
                    "question": "Return the names of songs for which format is mp3 and resolution is below 1000."
                },
                {
                    "ex_id": 4759,
                    "db_id": "department_store",
                    "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
                    "question": "Return the names and ids of customers who have TN in their address."
                }
            ],
            "example_quality": 0.7823338052440378,
            "example_similarity": 0.5808579477480477,
            "db_id": "voter_1"
        },
        {
            "index": 703,
            "question": "What are the names of all the countries that became independent after 1950?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all races held after 2000 in Spain? */\nSELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000\n\n/* Answer the following: What are the titles of all movies that James Cameron directed after 2000? */\nSELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000\n\n/* Answer the following: What are the names of all movies that received 3 or 4 stars? */\nSELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of all the countries that became independent after 1950? */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2195,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
                    "question": "What are the names of all races held after 2000 in Spain?"
                },
                {
                    "ex_id": 2438,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
                    "question": "What are the titles of all movies that James Cameron directed after 2000?"
                },
                {
                    "ex_id": 2532,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4",
                    "question": "What are the names of all movies that received 3 or 4 stars?"
                }
            ],
            "example_quality": 0.7823203770330133,
            "example_similarity": 0.5810201027884863,
            "db_id": "world_1"
        },
        {
            "index": 704,
            "question": "Give the names of the nations that were founded after 1950.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Answer the following: papers published in eccv 2016 by ali farhadi */\nSELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";\n\n/* Answer the following: who published papers in CVPR 2007 */\nSELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of the nations that were founded after 1950. */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                },
                {
                    "ex_id": 8064,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
                    "question": "papers published in eccv 2016 by ali farhadi"
                },
                {
                    "ex_id": 7950,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
                    "question": "who published papers in CVPR 2007"
                }
            ],
            "example_quality": 0.7819626343532357,
            "example_similarity": 0.5803854993175641,
            "db_id": "world_1"
        },
        {
            "index": 705,
            "question": "How many countries have a republic as their form of government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many universities have a location that contains NY? */\nSELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"\n\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Answer the following: How many rooms have a king bed? */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have a republic as their form of government? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1011,
                    "db_id": "university_basketball",
                    "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
                    "question": "How many universities have a location that contains NY?"
                },
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                },
                {
                    "ex_id": 2610,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "How many rooms have a king bed?"
                }
            ],
            "example_quality": 0.7821859411688962,
            "example_similarity": 0.580462854119838,
            "db_id": "world_1"
        },
        {
            "index": 706,
            "question": "How many countries have governments that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students have cat allergies? */\nSELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"\n\n/* Answer the following: How many staff have the first name Ludie? */\nSELECT count(*) FROM Staff WHERE first_name = \"Ludie\";\n\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have governments that are republics? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 504,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
                    "question": "How many students have cat allergies?"
                },
                {
                    "ex_id": 6637,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";",
                    "question": "How many staff have the first name Ludie?"
                },
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.7824944596658241,
            "example_similarity": 0.5806388469677048,
            "db_id": "world_1"
        },
        {
            "index": 707,
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total order quantities of photo products? */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Answer the following: What is the total grant amount of the organisations described as research? */\nSELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'\n\n/* Answer the following: What is the total number of customers who use banks in New York City? */\nSELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the countries in the Caribbean region? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5141,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "What are the total order quantities of photo products?"
                },
                {
                    "ex_id": 4325,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
                    "question": "What is the total grant amount of the organisations described as research?"
                },
                {
                    "ex_id": 3012,
                    "db_id": "loan_1",
                    "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
                    "question": "What is the total number of customers who use banks in New York City?"
                }
            ],
            "example_quality": 0.782802105408871,
            "example_similarity": 0.5807127246528571,
            "db_id": "world_1"
        },
        {
            "index": 708,
            "question": "How much surface area do the countires in the Carribean cover together?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the publishers who have published a book in both 1989 and 1990? */\nSELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990\n\n/* Answer the following: What are the campuses that had between 600 and 1000 faculty members in 2004? */\nSELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How much surface area do the countires in the Carribean cover together? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                },
                {
                    "ex_id": 6980,
                    "db_id": "culture_company",
                    "query": "SELECT publisher FROM book_club WHERE YEAR  =  1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR  =  1990",
                    "question": "What are the publishers who have published a book in both 1989 and 1990?"
                },
                {
                    "ex_id": 2380,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
                    "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?"
                }
            ],
            "example_quality": 0.7823928588695302,
            "example_similarity": 0.5801790888139754,
            "db_id": "world_1"
        },
        {
            "index": 709,
            "question": "Which continent is Anguilla in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which players are from Indonesia? */\nSELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"\n\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What is the address of the restaurant Subway? */\nSELECT Address FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent is Anguilla in? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1075,
                    "db_id": "match_season",
                    "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"",
                    "question": "Which players are from Indonesia?"
                },
                {
                    "ex_id": 583,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "In which country does Roberto Almeida?"
                },
                {
                    "ex_id": 2822,
                    "db_id": "restaurant_1",
                    "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the address of the restaurant Subway?"
                }
            ],
            "example_quality": 0.7826997800841007,
            "example_similarity": 0.5800606586763142,
            "db_id": "world_1"
        },
        {
            "index": 710,
            "question": "What is the continent name which Anguilla belongs to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the institution the author \"Katsuhiro Ueno\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: What is the name of the institution that \"Matthias Blume\" belongs to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"\n\n/* Answer the following: Which category does the product named \"flax\" belong to? */\nSELECT product_category_code FROM products WHERE product_name  =  \"flax\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the continent name which Anguilla belongs to? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2874,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "What is the name of the institution the author \"Katsuhiro Ueno\" belongs to?"
                },
                {
                    "ex_id": 2871,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Matthias\" AND t1.lname  =  \"Blume\"",
                    "question": "What is the name of the institution that \"Matthias Blume\" belongs to?"
                },
                {
                    "ex_id": 5539,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
                    "question": "Which category does the product named \"flax\" belong to?"
                }
            ],
            "example_quality": 0.7828716985695624,
            "example_similarity": 0.5799753987961938,
            "db_id": "world_1"
        },
        {
            "index": 711,
            "question": "Which region is the city Kabul located in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What campuses are located in the county of Los Angeles? */\nSELECT campus FROM campuses WHERE county  =  \"Los Angeles\"\n\n/* Answer the following: What is the zip code the county named \"Howard\" is located in? */\nSELECT Zip_code FROM county WHERE County_name  =  \"Howard\"\n\n/* Answer the following: What city is the headquarter of the store Blackville? */\nSELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which region is the city Kabul located in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2326,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
                    "question": "What campuses are located in the county of Los Angeles?"
                },
                {
                    "ex_id": 2746,
                    "db_id": "election",
                    "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"",
                    "question": "What is the zip code the county named \"Howard\" is located in?"
                },
                {
                    "ex_id": 4922,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
                    "question": "What city is the headquarter of the store Blackville?"
                }
            ],
            "example_quality": 0.78317708295976,
            "example_similarity": 0.579862915816171,
            "db_id": "world_1"
        },
        {
            "index": 712,
            "question": "What region is Kabul in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What campuses are located in Chico? */\nSELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\n\n/* Answer the following: What is the address of the restaurant Subway? */\nSELECT Address FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Answer the following: What is the rating of the restaurant Subway? */\nSELECT Rating FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region is Kabul in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2328,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
                    "question": "What campuses are located in Chico?"
                },
                {
                    "ex_id": 2822,
                    "db_id": "restaurant_1",
                    "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the address of the restaurant Subway?"
                },
                {
                    "ex_id": 2823,
                    "db_id": "restaurant_1",
                    "query": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the rating of the restaurant Subway?"
                }
            ],
            "example_quality": 0.7834816095286367,
            "example_similarity": 0.5798092693988263,
            "db_id": "world_1"
        },
        {
            "index": 713,
            "question": "Which language is the most popular in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most popular full name of the actors? */\nSELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most popular first name of the actors? */\nSELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most popular payment method? */\nSELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2929,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular full name of the actors?"
                },
                {
                    "ex_id": 2927,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular first name of the actors?"
                },
                {
                    "ex_id": 3879,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular payment method?"
                }
            ],
            "example_quality": 0.7832902732228875,
            "example_similarity": 0.5798267987437195,
            "db_id": "world_1"
        },
        {
            "index": 714,
            "question": "What language is predominantly spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of festivals held in year 2007? */\nSELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007\n\n/* Answer the following: what are the names of the channels that broadcast in both morning and night? */\nSELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'\n\n/* Answer the following: What are the countries that contain 3 or more cities? */\nSELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What language is predominantly spoken in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4605,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007",
                    "question": "What are the names of festivals held in year 2007?"
                },
                {
                    "ex_id": 3747,
                    "db_id": "program_share",
                    "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'",
                    "question": "what are the names of the channels that broadcast in both morning and night?"
                },
                {
                    "ex_id": 2944,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
                    "question": "What are the countries that contain 3 or more cities?"
                }
            ],
            "example_quality": 0.7828538408513047,
            "example_similarity": 0.5794356254969203,
            "db_id": "world_1"
        },
        {
            "index": 715,
            "question": "What are the population and life expectancies in Brazil?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the phones of departments in Room 268? */\nSELECT DPhone FROM DEPARTMENT WHERE Room  =  268\n\n/* Answer the following: What are the names of the airports in the city of Goroka? */\nSELECT name FROM airports WHERE city  =  'Goroka'\n\n/* Answer the following: What are the card numbers of members from Kentucky? */\nSELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population and life expectancies in Brazil? */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4646,
                    "db_id": "college_3",
                    "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
                    "question": "What are the phones of departments in Room 268?"
                },
                {
                    "ex_id": 6805,
                    "db_id": "flight_4",
                    "query": "SELECT name FROM airports WHERE city  =  'Goroka'",
                    "question": "What are the names of the airports in the city of Goroka?"
                },
                {
                    "ex_id": 5444,
                    "db_id": "shop_membership",
                    "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
                    "question": "What are the card numbers of members from Kentucky?"
                }
            ],
            "example_quality": 0.7830409916566408,
            "example_similarity": 0.5796171633762744,
            "db_id": "world_1"
        },
        {
            "index": 716,
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the color description for the product 'catnip'. */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: Show the member name and hometown who registered a branch in 2016. */\nSELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016\n\n/* Answer the following: Give the names and scores of wines made from white grapes. */\nSELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give me Brazil\u2019s population and life expectancies. */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5546,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "Give the color description for the product 'catnip'."
                },
                {
                    "ex_id": 5431,
                    "db_id": "shop_membership",
                    "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
                    "question": "Show the member name and hometown who registered a branch in 2016."
                },
                {
                    "ex_id": 6545,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
                    "question": "Give the names and scores of wines made from white grapes."
                }
            ],
            "example_quality": 0.783344007031422,
            "example_similarity": 0.5794145190273186,
            "db_id": "world_1"
        },
        {
            "index": 717,
            "question": "What are the region and population of Angola?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of the genres? */\nSELECT DISTINCT name FROM genres;\n\n/* Answer the following: What is the decor of room Recluse and defiance? */\nSELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";\n\n/* Answer the following: What are the public schools and what are their locations? */\nSELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the region and population of Angola? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 615,
                    "db_id": "store_1",
                    "query": "SELECT DISTINCT name FROM genres;",
                    "question": "What are the different names of the genres?"
                },
                {
                    "ex_id": 2595,
                    "db_id": "inn_1",
                    "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
                    "question": "What is the decor of room Recluse and defiance?"
                },
                {
                    "ex_id": 981,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
                    "question": "What are the public schools and what are their locations?"
                }
            ],
            "example_quality": 0.7834469342979652,
            "example_similarity": 0.5796263720430588,
            "db_id": "world_1"
        },
        {
            "index": 718,
            "question": "What region does Angola belong to and what is its population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Answer the following: Which category does the product named \"flax\" belong to? */\nSELECT product_category_code FROM products WHERE product_name  =  \"flax\"\n\n/* Answer the following: What city is the headquarter of the store Blackville? */\nSELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region does Angola belong to and what is its population? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2873,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "Which institution does \"Katsuhiro Ueno\" belong to?"
                },
                {
                    "ex_id": 5539,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"",
                    "question": "Which category does the product named \"flax\" belong to?"
                },
                {
                    "ex_id": 4922,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
                    "question": "What city is the headquarter of the store Blackville?"
                }
            ],
            "example_quality": 0.7836822184457131,
            "example_similarity": 0.5794010016885648,
            "db_id": "world_1"
        },
        {
            "index": 719,
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average song duration for the songs that are in mp3 format and whose resolution below 800? */\nSELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800\n\n/* Answer the following: What is the average unit price of tracks that belong to Jazz genre? */\nSELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\n\n/* Answer the following: What is the average cost of procedures that physician John Wen was trained in? */\nSELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average expected life expectancy for countries in the region of Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3561,
                    "db_id": "music_1",
                    "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
                    "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?"
                },
                {
                    "ex_id": 844,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
                    "question": "What is the average unit price of tracks that belong to Jazz genre?"
                },
                {
                    "ex_id": 3977,
                    "db_id": "hospital_1",
                    "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "What is the average cost of procedures that physician John Wen was trained in?"
                }
            ],
            "example_quality": 0.7839830776690153,
            "example_similarity": 0.5794920569715194,
            "db_id": "world_1"
        },
        {
            "index": 720,
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prominence of the mountains in country 'Morocco'? */\nSELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'\n\n/* Answer the following: What is the average height of the players from the college named 'Yale University'? */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Answer the following: What is the average cost of procedures that physician John Wen was trained in? */\nSELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How long is the people\u2019s average life expectancy in Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3716,
                    "db_id": "mountain_photos",
                    "query": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'",
                    "question": "What are the average prominence of the mountains in country 'Morocco'?"
                },
                {
                    "ex_id": 3656,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "What is the average height of the players from the college named 'Yale University'?"
                },
                {
                    "ex_id": 3977,
                    "db_id": "hospital_1",
                    "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
                    "question": "What is the average cost of procedures that physician John Wen was trained in?"
                }
            ],
            "example_quality": 0.7842831011722528,
            "example_similarity": 0.5792998496102981,
            "db_id": "world_1"
        },
        {
            "index": 721,
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the trip that has the shortest duration? */\nSELECT id FROM trip ORDER BY duration LIMIT 1\n\n/* Answer the following: What is the latitude, longitude, city of the station from which the shortest trip started? */\nSELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: Find the name of persons who are friends with Alice for the shortest years. */\nSELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the name of country that has the shortest life expectancy in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 120,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                    "question": "What is the id of the trip that has the shortest duration?"
                },
                {
                    "ex_id": 140,
                    "db_id": "bike_1",
                    "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
                    "question": "What is the latitude, longitude, city of the station from which the shortest trip started?"
                },
                {
                    "ex_id": 4473,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
                    "question": "Find the name of persons who are friends with Alice for the shortest years."
                }
            ],
            "example_quality": 0.78413398130484,
            "example_similarity": 0.5793054439011761,
            "db_id": "world_1"
        },
        {
            "index": 722,
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and checking balance of the account with the lowest savings balance. */\nSELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1\n\n/* Answer the following: Give the name of the department with the lowest budget. */\nSELECT dept_name FROM department ORDER BY budget LIMIT 1\n\n/* Answer the following: List the publication dates of publications with 3 lowest prices. */\nSELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the country in Asia with the lowest life expectancy. */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1803,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
                    "question": "Find the name and checking balance of the account with the lowest savings balance."
                },
                {
                    "ex_id": 1378,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                    "question": "Give the name of the department with the lowest budget."
                },
                {
                    "ex_id": 222,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3",
                    "question": "List the publication dates of publications with 3 lowest prices."
                }
            ],
            "example_quality": 0.7842021244516939,
            "example_similarity": 0.5794995099093103,
            "db_id": "world_1"
        },
        {
            "index": 723,
            "question": "What is the total population and maximum GNP in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total and maximum duration of trips with bike id 636? */\nSELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636\n\n/* Answer the following: What are the maximum price and score of wines produced by St. Helena appelation? */\nSELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"\n\n/* Answer the following: What is the maximum point for climbers whose country is United Kingdom? */\nSELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and maximum GNP in Asia? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 122,
                    "db_id": "bike_1",
                    "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
                    "question": "What is the total and maximum duration of trips with bike id 636?"
                },
                {
                    "ex_id": 6574,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
                    "question": "What are the maximum price and score of wines produced by St. Helena appelation?"
                },
                {
                    "ex_id": 1117,
                    "db_id": "climbing",
                    "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"",
                    "question": "What is the maximum point for climbers whose country is United Kingdom?"
                }
            ],
            "example_quality": 0.7842744699732103,
            "example_similarity": 0.5794407789648119,
            "db_id": "world_1"
        },
        {
            "index": 724,
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the state with the largest population density */\nSELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );\n\n/* Answer the following: What are the names of all the stores in the largest district by population? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n\n/* Answer the following: what is the GDP of the city with the largest population. */\nSELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Asia, and what is the largest GNP among them? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7378,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
                    "question": "how many people live in the state with the largest population density"
                },
                {
                    "ex_id": 4920,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
                    "question": "What are the names of all the stores in the largest district by population?"
                },
                {
                    "ex_id": 6305,
                    "db_id": "city_record",
                    "query": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
                    "question": "what is the GDP of the city with the largest population."
                }
            ],
            "example_quality": 0.7838242750331,
            "example_similarity": 0.5791183829302935,
            "db_id": "world_1"
        },
        {
            "index": 725,
            "question": "What is the average life expectancy in African countries that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average age of the members of the club \"Bootup Baltimore\"? */\nSELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"\n\n/* Answer the following: What is the average unit price of rock tracks? */\nSELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average life expectancy in African countries that are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                },
                {
                    "ex_id": 4315,
                    "db_id": "club_1",
                    "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"",
                    "question": "What is the average age of the members of the club \"Bootup Baltimore\"?"
                },
                {
                    "ex_id": 880,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
                    "question": "What is the average unit price of rock tracks?"
                }
            ],
            "example_quality": 0.7839582448343678,
            "example_similarity": 0.579154648036992,
            "db_id": "world_1"
        },
        {
            "index": 726,
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average latitude and longitude of stations located in San Jose city? */\nSELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"\n\n/* Answer the following: What is the average unit price of tracks that belong to Jazz genre? */\nSELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"\n\n/* Answer the following: What is the average fastest lap speed for the Monaco Grand Prix in 2008? */\nSELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the average life expectancy for countries in Africa which are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 118,
                    "db_id": "bike_1",
                    "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
                    "question": "What is the average latitude and longitude of stations located in San Jose city?"
                },
                {
                    "ex_id": 844,
                    "db_id": "chinook_1",
                    "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
                    "question": "What is the average unit price of tracks that belong to Jazz genre?"
                },
                {
                    "ex_id": 2221,
                    "db_id": "formula_1",
                    "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
                    "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?"
                }
            ],
            "example_quality": 0.7840918455728224,
            "example_similarity": 0.5790227970055641,
            "db_id": "world_1"
        },
        {
            "index": 727,
            "question": "What is the total surface area of the continents Asia and Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total order quantities of photo products? */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Answer the following: What is the total home game attendance of team Boston Red Stockings from 2000 to 2010? */\nSELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;\n\n/* Answer the following: What are all the policy types of the customer named \"Dayana Robel\"? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the continents Asia and Europe? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5141,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "What are the total order quantities of photo products?"
                },
                {
                    "ex_id": 3694,
                    "db_id": "baseball_1",
                    "query": "SELECT sum(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010;",
                    "question": "What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?"
                },
                {
                    "ex_id": 912,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"",
                    "question": "What are all the policy types of the customer named \"Dayana Robel\"?"
                }
            ],
            "example_quality": 0.784064349999961,
            "example_similarity": 0.5790412709513767,
            "db_id": "world_1"
        },
        {
            "index": 728,
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total amount of loans provided by bank branches in the state of New York. */\nSELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'\n\n/* Answer the following: Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to. */\nSELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'\n\n/* Answer the following: Compute the total order quantities of the product \"photo\". */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total surface area covered by countries in Asia or Europe. */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3081,
                    "db_id": "loan_1",
                    "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
                    "question": "Find the total amount of loans provided by bank branches in the state of New York."
                },
                {
                    "ex_id": 6488,
                    "db_id": "scientist_1",
                    "query": "SELECT sum(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name  =  'Michael Rogers' OR T3.name  =  'Carol Smith'",
                    "question": "Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to."
                },
                {
                    "ex_id": 5142,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "Compute the total order quantities of the product \"photo\"."
                }
            ],
            "example_quality": 0.7843609649038072,
            "example_similarity": 0.5788320536546095,
            "db_id": "world_1"
        },
        {
            "index": 729,
            "question": "How many people live in Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers are living in city \"Lake Geovannyton\"? */\nSELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"\n\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many staff live in state Georgia? */\nSELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6080,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
                    "question": "How many customers are living in city \"Lake Geovannyton\"?"
                },
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                },
                {
                    "ex_id": 6651,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";",
                    "question": "How many staff live in state Georgia?"
                }
            ],
            "example_quality": 0.7843824176268472,
            "example_similarity": 0.5789097185130391,
            "db_id": "world_1"
        },
        {
            "index": 730,
            "question": "What is the total population of Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the total order quantities of photo products? */\nSELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"\n\n/* Answer the following: What is the total amount of payment? */\nSELECT sum(Amount_Payment) FROM Payments\n\n/* Answer the following: What is the total share of transactions? */\nSELECT sum(share_count) FROM TRANSACTIONS\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population of Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5141,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
                    "question": "What are the total order quantities of photo products?"
                },
                {
                    "ex_id": 3883,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Payment) FROM Payments",
                    "question": "What is the total amount of payment?"
                },
                {
                    "ex_id": 5850,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT sum(share_count) FROM TRANSACTIONS",
                    "question": "What is the total share of transactions?"
                }
            ],
            "example_quality": 0.7844748415093471,
            "example_similarity": 0.5792605501794827,
            "db_id": "world_1"
        },
        {
            "index": 731,
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and total capacity for all dorms who are of gender X? */\nSELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'\n\n/* Answer the following: What is the average rating and resolution of all bangla songs? */\nSELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"\n\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average GNP and total population in all nations whose government is US territory? */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5690,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
                    "question": "What is the average and total capacity for all dorms who are of gender X?"
                },
                {
                    "ex_id": 3599,
                    "db_id": "music_1",
                    "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
                    "question": "What is the average rating and resolution of all bangla songs?"
                },
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                }
            ],
            "example_quality": 0.7844124804250512,
            "example_similarity": 0.579120709532229,
            "db_id": "world_1"
        },
        {
            "index": 732,
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Answer the following: What are the degrees conferred in \"San Francisco State University\" in 2001. */\nSELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001\n\n/* Answer the following: Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco. */\nSELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean GNP and total population of nations which are considered US territory. */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                },
                {
                    "ex_id": 2371,
                    "db_id": "csu_1",
                    "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
                    "question": "What are the degrees conferred in \"San Francisco State University\" in 2001."
                },
                {
                    "ex_id": 2335,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
                    "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco."
                }
            ],
            "example_quality": 0.7838548000913973,
            "example_similarity": 0.5787364613968882,
            "db_id": "world_1"
        },
        {
            "index": 733,
            "question": "How many unique languages are spoken in the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many unique labels are there for albums? */\nSELECT count(DISTINCT label) FROM albums\n\n/* Answer the following: How many unique classes are offered? */\nSELECT count(DISTINCT class_code) FROM CLASS\n\n/* Answer the following: How many distinct publication dates are there in our record? */\nSELECT COUNT (DISTINCT Publication_Date) FROM publication\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many unique languages are spoken in the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5193,
                    "db_id": "music_2",
                    "query": "SELECT count(DISTINCT label) FROM albums",
                    "question": "How many unique labels are there for albums?"
                },
                {
                    "ex_id": 3229,
                    "db_id": "college_1",
                    "query": "SELECT count(DISTINCT class_code) FROM CLASS",
                    "question": "How many unique classes are offered?"
                },
                {
                    "ex_id": 233,
                    "db_id": "book_2",
                    "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
                    "question": "How many distinct publication dates are there in our record?"
                }
            ],
            "example_quality": 0.7841496775810407,
            "example_similarity": 0.5785867495382262,
            "db_id": "world_1"
        },
        {
            "index": 734,
            "question": "What is the number of distinct languages used around the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many appelations are in Napa Country? */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: How many kinds of roles are there for the staff? */\nSELECT count(DISTINCT role_code) FROM Project_Staff\n\n/* Answer the following: how many papers are in sigir ? */\nSELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct languages used around the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6540,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "How many appelations are in Napa Country?"
                },
                {
                    "ex_id": 4345,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(DISTINCT role_code) FROM Project_Staff",
                    "question": "How many kinds of roles are there for the staff?"
                },
                {
                    "ex_id": 7999,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
                    "question": "how many papers are in sigir ?"
                }
            ],
            "example_quality": 0.7842166852864253,
            "example_similarity": 0.5779979776204739,
            "db_id": "world_1"
        },
        {
            "index": 735,
            "question": "How many type of governments are in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: How many addresses are in the district of California? */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many type of governments are in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                },
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                },
                {
                    "ex_id": 2937,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "How many addresses are in the district of California?"
                }
            ],
            "example_quality": 0.7843742136057635,
            "example_similarity": 0.5782116087189724,
            "db_id": "world_1"
        },
        {
            "index": 736,
            "question": "How many different forms of governments are there in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different types of transactions are there? */\nSELECT count(DISTINCT transaction_type) FROM Financial_Transactions\n\n/* Answer the following: How many different types of beds are there? */\nSELECT count(DISTINCT bedType) FROM Rooms;\n\n/* Answer the following: How many different types of rooms are there? */\nSELECT count(DISTINCT roomtype) FROM room\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many different forms of governments are there in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 737,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions",
                    "question": "How many different types of transactions are there?"
                },
                {
                    "ex_id": 2631,
                    "db_id": "inn_1",
                    "query": "SELECT count(DISTINCT bedType) FROM Rooms;",
                    "question": "How many different types of beds are there?"
                },
                {
                    "ex_id": 3939,
                    "db_id": "hospital_1",
                    "query": "SELECT count(DISTINCT roomtype) FROM room",
                    "question": "How many different types of rooms are there?"
                }
            ],
            "example_quality": 0.7843954442937993,
            "example_similarity": 0.5783317922216187,
            "db_id": "world_1"
        },
        {
            "index": 737,
            "question": "What is the total number of languages used in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of professors with a Ph.D. ? */\nSELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'\n\n/* Answer the following: What are the total number of students enrolled in ACCT-211? */\nSELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'\n\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of languages used in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3251,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
                    "question": "What is the total number of professors with a Ph.D. ?"
                },
                {
                    "ex_id": 3243,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
                    "question": "What are the total number of students enrolled in ACCT-211?"
                },
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.7846427593852142,
            "example_similarity": 0.5784707846755504,
            "db_id": "world_1"
        },
        {
            "index": 738,
            "question": "How many languages are spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many languages are spoken in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                },
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                },
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                }
            ],
            "example_quality": 0.7849345713643671,
            "example_similarity": 0.5787345751409603,
            "db_id": "world_1"
        },
        {
            "index": 739,
            "question": "How many official languages does Afghanistan have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many friends does Dan have? */\nSELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'\n\n/* Answer the following: How many friends does Dan have? */\nSELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'\n\n/* Answer the following: How many debit cards do we have? */\nSELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages does Afghanistan have? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4399,
                    "db_id": "network_2",
                    "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
                    "question": "How many friends does Dan have?"
                },
                {
                    "ex_id": 4400,
                    "db_id": "network_2",
                    "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
                    "question": "How many friends does Dan have?"
                },
                {
                    "ex_id": 708,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
                    "question": "How many debit cards do we have?"
                }
            ],
            "example_quality": 0.7852255935952678,
            "example_similarity": 0.5790114340830339,
            "db_id": "world_1"
        },
        {
            "index": 740,
            "question": "How many official languages are spoken in Afghanistan?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many films have the word 'Dummy' in their titles? */\nSELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\n\n/* Answer the following: How many reviews has Niloofar written in 2015 */\nSELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";\n\n/* Answer the following: How many papers are published by the institution \"Tokohu University\"? */\nSELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages are spoken in Afghanistan? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1959,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
                    "question": "How many films have the word 'Dummy' in their titles?"
                },
                {
                    "ex_id": 8194,
                    "db_id": "yelp",
                    "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";",
                    "question": "How many reviews has Niloofar written in 2015"
                },
                {
                    "ex_id": 2887,
                    "db_id": "icfp_1",
                    "query": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"",
                    "question": "How many papers are published by the institution \"Tokohu University\"?"
                }
            ],
            "example_quality": 0.7852660340298032,
            "example_similarity": 0.5787545117246634,
            "db_id": "world_1"
        },
        {
            "index": 741,
            "question": "What is name of the country that speaks the largest number of languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the role code with the largest number of employees? */\nSELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the nationality of the journalist with the largest number of years working? */\nSELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1\n\n/* Answer the following: What is the party that has the largest number of representatives? */\nSELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is name of the country that speaks the largest number of languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4207,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the role code with the largest number of employees?"
                },
                {
                    "ex_id": 2808,
                    "db_id": "news_report",
                    "query": "SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1",
                    "question": "What is the nationality of the journalist with the largest number of years working?"
                },
                {
                    "ex_id": 1189,
                    "db_id": "election_representative",
                    "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the party that has the largest number of representatives?"
                }
            ],
            "example_quality": 0.7852800271291354,
            "example_similarity": 0.5789507715017367,
            "db_id": "world_1"
        },
        {
            "index": 742,
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the top 3 wineries with the greatest number of wines made of white color grapes. */\nSELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the names of the top 3 departments that provide the largest amount of courses? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the nation that uses the greatest amount of languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6588,
                    "db_id": "wine_1",
                    "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes."
                },
                {
                    "ex_id": 39,
                    "db_id": "farm",
                    "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the status of the city that has hosted the greatest number of competitions."
                },
                {
                    "ex_id": 1371,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the names of the top 3 departments that provide the largest amount of courses?"
                }
            ],
            "example_quality": 0.7855194920022268,
            "example_similarity": 0.5787557405001628,
            "db_id": "world_1"
        },
        {
            "index": 743,
            "question": "Which continent has the most diverse languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nationality has the most hosts? */\nSELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which industry has the most companies? */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which song has the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent has the most diverse languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2676,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which nationality has the most hosts?"
                },
                {
                    "ex_id": 4575,
                    "db_id": "company_office",
                    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which industry has the most companies?"
                },
                {
                    "ex_id": 5219,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which song has the most vocals?"
                }
            ],
            "example_quality": 0.7858081602498684,
            "example_similarity": 0.579154454173783,
            "db_id": "world_1"
        },
        {
            "index": 744,
            "question": "Which continent speaks the most languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nationality has the most hosts? */\nSELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which industry has the most companies? */\nSELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which song has the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent speaks the most languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2676,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which nationality has the most hosts?"
                },
                {
                    "ex_id": 4575,
                    "db_id": "company_office",
                    "query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which industry has the most companies?"
                },
                {
                    "ex_id": 5219,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which song has the most vocals?"
                }
            ],
            "example_quality": 0.7860960525075971,
            "example_similarity": 0.5793840852837645,
            "db_id": "world_1"
        },
        {
            "index": 745,
            "question": "How many countries speak both English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many degrees were conferred between 1998 and 2002? */\nSELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus\n\n/* Answer the following: How many films have the word 'Dummy' in their titles? */\nSELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"\n\n/* Answer the following: How many students have a food allergy? */\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries speak both English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2358,
                    "db_id": "csu_1",
                    "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
                    "question": "how many degrees were conferred between 1998 and 2002?"
                },
                {
                    "ex_id": 1959,
                    "db_id": "cinema",
                    "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
                    "question": "How many films have the word 'Dummy' in their titles?"
                },
                {
                    "ex_id": 512,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
                    "question": "How many students have a food allergy?"
                }
            ],
            "example_quality": 0.7856149915347085,
            "example_similarity": 0.5792792242649442,
            "db_id": "world_1"
        },
        {
            "index": 746,
            "question": "What is the number of nations that use English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many appelations are in Napa Country? */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: How many females does this network has? */\nSELECT count(*) FROM Person WHERE gender  =  'female'\n\n/* Answer the following: What are the countries for appelations with at most 3 wines? */\nSELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of nations that use English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6540,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "How many appelations are in Napa Country?"
                },
                {
                    "ex_id": 4401,
                    "db_id": "network_2",
                    "query": "SELECT count(*) FROM Person WHERE gender  =  'female'",
                    "question": "How many females does this network has?"
                },
                {
                    "ex_id": 6583,
                    "db_id": "wine_1",
                    "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
                    "question": "What are the countries for appelations with at most 3 wines?"
                }
            ],
            "example_quality": 0.7851236143597929,
            "example_similarity": 0.5787487961690051,
            "db_id": "world_1"
        },
        {
            "index": 747,
            "question": "What are the names of nations speak both English and French?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Answer the following: What are the names of artists who are Male and are from UK? */\nSELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"\n\n/* Answer the following: What are the papers from pldi 2015 ? */\nSELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations speak both English and French? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                },
                {
                    "ex_id": 3590,
                    "db_id": "music_1",
                    "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
                    "question": "What are the names of artists who are Male and are from UK?"
                },
                {
                    "ex_id": 8011,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
                    "question": "What are the papers from pldi 2015 ?"
                }
            ],
            "example_quality": 0.7849160012616361,
            "example_similarity": 0.5785800040247706,
            "db_id": "world_1"
        },
        {
            "index": 748,
            "question": "Give the names of nations that speak both English and French.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Answer the following: List the number of invoices from Chicago, IL. */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Answer the following: What are the degrees conferred in \"San Francisco State University\" in 2001. */\nSELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of nations that speak both English and French. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                },
                {
                    "ex_id": 562,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "List the number of invoices from Chicago, IL."
                },
                {
                    "ex_id": 2371,
                    "db_id": "csu_1",
                    "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
                    "question": "What are the degrees conferred in \"San Francisco State University\" in 2001."
                }
            ],
            "example_quality": 0.7846850700930771,
            "example_similarity": 0.5782234380927437,
            "db_id": "world_1"
        },
        {
            "index": 749,
            "question": "What are the names of nations where both English and French are official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nations have both hosts of age above 45 and hosts of age below 35? */\nSELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35\n\n/* Answer the following: What are the countries for appelations with at most 3 wines? */\nSELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3\n\n/* Answer the following: How many invoices were billed from Chicago, IL? */\nSELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations where both English and French are official languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2678,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
                    "question": "Which nations have both hosts of age above 45 and hosts of age below 35?"
                },
                {
                    "ex_id": 6583,
                    "db_id": "wine_1",
                    "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
                    "question": "What are the countries for appelations with at most 3 wines?"
                },
                {
                    "ex_id": 563,
                    "db_id": "store_1",
                    "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";",
                    "question": "How many invoices were billed from Chicago, IL?"
                }
            ],
            "example_quality": 0.7844051167284668,
            "example_similarity": 0.5779925164903432,
            "db_id": "world_1"
        },
        {
            "index": 750,
            "question": "Give the names of countries with English and French as official languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the clubs having \"Davis Steven\" as a member. */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"\n\n/* Answer the following: Find the papers which have \"Olin Shivers\" as an author. */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"\n\n/* Answer the following: Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'. */\nSELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries with English and French as official languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4311,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
                    "question": "List the clubs having \"Davis Steven\" as a member."
                },
                {
                    "ex_id": 2891,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"",
                    "question": "Find the papers which have \"Olin Shivers\" as an author."
                },
                {
                    "ex_id": 2934,
                    "db_id": "sakila_1",
                    "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
                    "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'."
                }
            ],
            "example_quality": 0.7839599758402281,
            "example_similarity": 0.5777584419979207,
            "db_id": "world_1"
        },
        {
            "index": 751,
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of airlines based in Russia? */\nSELECT count(*) FROM airlines WHERE country  =  'Russia'\n\n/* Answer the following: What is the number of distinct publication dates? */\nSELECT COUNT (DISTINCT Publication_Date) FROM publication\n\n/* Answer the following: What is the number of movies produced in 2013 ? */\nSELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct continents where Chinese is spoken? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6811,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
                    "question": "What is the number of airlines based in Russia?"
                },
                {
                    "ex_id": 232,
                    "db_id": "book_2",
                    "query": "SELECT COUNT (DISTINCT Publication_Date) FROM publication",
                    "question": "What is the number of distinct publication dates?"
                },
                {
                    "ex_id": 8505,
                    "db_id": "imdb",
                    "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
                    "question": "What is the number of movies produced in 2013 ?"
                }
            ],
            "example_quality": 0.7841144898537564,
            "example_similarity": 0.5778292728087788,
            "db_id": "world_1"
        },
        {
            "index": 752,
            "question": "How many continents speak Chinese?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many artists are from Bangladesh? */\nSELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"\n\n/* Answer the following: How many architects are female? */\nSELECT count(*) FROM architect WHERE gender  =  'female'\n\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many continents speak Chinese? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3548,
                    "db_id": "music_1",
                    "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
                    "question": "How many artists are from Bangladesh?"
                },
                {
                    "ex_id": 6946,
                    "db_id": "architecture",
                    "query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
                    "question": "How many architects are female?"
                },
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                }
            ],
            "example_quality": 0.7842685929257593,
            "example_similarity": 0.5779315768406313,
            "db_id": "world_1"
        },
        {
            "index": 753,
            "question": "What are the regions that use English or Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the tracks that are Rock or Jazz songs? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n\n/* Answer the following: What are the names of circuits that belong to UK or Malaysia? */\nSELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"\n\n/* Answer the following: What are the names of the technicians aged either 36 or 37? */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the regions that use English or Dutch? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 635,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
                    "question": "What are the names of the tracks that are Rock or Jazz songs?"
                },
                {
                    "ex_id": 2214,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
                    "question": "What are the names of circuits that belong to UK or Malaysia?"
                },
                {
                    "ex_id": 2243,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
                    "question": "What are the names of the technicians aged either 36 or 37?"
                }
            ],
            "example_quality": 0.7843653714970968,
            "example_similarity": 0.5779503443243271,
            "db_id": "world_1"
        },
        {
            "index": 754,
            "question": "Which regions speak Dutch or English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In which country does Roberto Almeida? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What country does Roberto Almeida live? */\nSELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";\n\n/* Answer the following: What are the names of the tracks that are Rock or Jazz songs? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which regions speak Dutch or English? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 583,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "In which country does Roberto Almeida?"
                },
                {
                    "ex_id": 582,
                    "db_id": "store_1",
                    "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";",
                    "question": "What country does Roberto Almeida live?"
                },
                {
                    "ex_id": 635,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
                    "question": "What are the names of the tracks that are Rock or Jazz songs?"
                }
            ],
            "example_quality": 0.7844618933613485,
            "example_similarity": 0.5777444223626041,
            "db_id": "world_1"
        },
        {
            "index": 755,
            "question": "What are the countries where either English or Dutch is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which papers have \"Stephanie Weirich\" as an author? */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n\n/* Answer the following: What is the color description of the product with name \"catnip\"? */\nSELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"\n\n/* Answer the following: What is the address of the location \"UK Gallery\"? */\nSELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries where either English or Dutch is the official language ? */\nSELECT ",
            "response": "t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2893,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
                    "question": "Which papers have \"Stephanie Weirich\" as an author?"
                },
                {
                    "ex_id": 5545,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
                    "question": "What is the color description of the product with name \"catnip\"?"
                },
                {
                    "ex_id": 5900,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
                    "question": "What is the address of the location \"UK Gallery\"?"
                }
            ],
            "example_quality": 0.7834890961515985,
            "example_similarity": 0.577532441218297,
            "db_id": "world_1"
        },
        {
            "index": 756,
            "question": "Which countries have either English or Dutch as an official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which papers have \"Stephanie Weirich\" as an author? */\nSELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"\n\n/* Answer the following: Who has a friend that is from new york city? */\nSELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'\n\n/* Answer the following: Which contact channel has been used by the customer with name \"Tillman Ernser\"? */\nSELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have either English or Dutch as an official language? */\nSELECT ",
            "response": "* FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2893,
                    "db_id": "icfp_1",
                    "query": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"",
                    "question": "Which papers have \"Stephanie Weirich\" as an author?"
                },
                {
                    "ex_id": 4463,
                    "db_id": "network_2",
                    "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
                    "question": "Who has a friend that is from new york city?"
                },
                {
                    "ex_id": 6098,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
                    "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?"
                }
            ],
            "example_quality": 0.7830486997949818,
            "example_similarity": 0.5772946832243409,
            "db_id": "world_1"
        },
        {
            "index": 757,
            "question": "Which language is the most popular on the Asian continent?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most popular first name of the actors? */\nSELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most popular payment method? */\nSELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most popular full name of the actors? */\nSELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular on the Asian continent? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2927,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular first name of the actors?"
                },
                {
                    "ex_id": 3879,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular payment method?"
                },
                {
                    "ex_id": 2929,
                    "db_id": "sakila_1",
                    "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most popular full name of the actors?"
                }
            ],
            "example_quality": 0.7831885151042208,
            "example_similarity": 0.5772921761466294,
            "db_id": "world_1"
        },
        {
            "index": 758,
            "question": "What is the language that is used by the largest number of Asian nations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the GDP of the city with the largest population. */\nSELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1\n\n/* Answer the following: What are the names of all the stores in the largest district by population? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n\n/* Answer the following: What is the name of department where has the largest number of professors with a Ph.D. degree? */\nSELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language that is used by the largest number of Asian nations? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6305,
                    "db_id": "city_record",
                    "query": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
                    "question": "what is the GDP of the city with the largest population."
                },
                {
                    "ex_id": 4920,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
                    "question": "What are the names of all the stores in the largest district by population?"
                },
                {
                    "ex_id": 3272,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?"
                }
            ],
            "example_quality": 0.7831743967102663,
            "example_similarity": 0.5770093088797853,
            "db_id": "world_1"
        },
        {
            "index": 759,
            "question": "Which languages are spoken by only one country in republic governments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of buildings that have no company office. */\nSELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n\n/* Answer the following: List the carriers of devices that have no devices in stock. */\nSELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)\n\n/* Answer the following: Please show the employee last names that serves no more than 20 customers. */\nSELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which languages are spoken by only one country in republic governments? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4576,
                    "db_id": "company_office",
                    "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
                    "question": "List the names of buildings that have no company office."
                },
                {
                    "ex_id": 5087,
                    "db_id": "device",
                    "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
                    "question": "List the carriers of devices that have no devices in stock."
                },
                {
                    "ex_id": 872,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
                    "question": "Please show the employee last names that serves no more than 20 customers."
                }
            ],
            "example_quality": 0.7829175599479572,
            "example_similarity": 0.5765369656499675,
            "db_id": "world_1"
        },
        {
            "index": 760,
            "question": "What languages are only used by a single country with a republic government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the employees without a department number? */\nSELECT * FROM employees WHERE department_id  =  \"null\"\n\n/* Answer the following: What is the least common media type in all tracks? */\nSELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1\n\n/* Answer the following: Please show the employee last names that serves no more than 20 customers. */\nSELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What languages are only used by a single country with a republic government? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3413,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM employees WHERE department_id  =  \"null\"",
                    "question": "What are all the employees without a department number?"
                },
                {
                    "ex_id": 838,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1",
                    "question": "What is the least common media type in all tracks?"
                },
                {
                    "ex_id": 872,
                    "db_id": "chinook_1",
                    "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
                    "question": "Please show the employee last names that serves no more than 20 customers."
                }
            ],
            "example_quality": 0.782650434159584,
            "example_similarity": 0.5761361667801143,
            "db_id": "world_1"
        },
        {
            "index": 761,
            "question": "Find the city with the largest population that uses English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the year which offers the largest number of courses. */\nSELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: List the teams of the players with the top 5 largest ages. */\nSELECT Team FROM player ORDER BY Age DESC LIMIT 5\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the city with the largest population that uses English. */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1405,
                    "db_id": "college_2",
                    "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year which offers the largest number of courses."
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                },
                {
                    "ex_id": 4877,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
                    "question": "List the teams of the players with the top 5 largest ages."
                }
            ],
            "example_quality": 0.7825538505756652,
            "example_similarity": 0.5760674064082737,
            "db_id": "world_1"
        },
        {
            "index": 762,
            "question": "What is the most populace city that speaks English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the capital of the state with the most inhabitants */\nSELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );\n\n/* Answer the following: what state has the most people */\nSELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );\n\n/* Answer the following: what city has the most people */\nSELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the most populace city that speaks English? */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7319,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
                    "question": "what is the capital of the state with the most inhabitants"
                },
                {
                    "ex_id": 7068,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
                    "question": "what state has the most people"
                },
                {
                    "ex_id": 7298,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
                    "question": "what city has the most people"
                }
            ],
            "example_quality": 0.7820518114016815,
            "example_similarity": 0.5757780207772335,
            "db_id": "world_1"
        },
        {
            "index": 763,
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: In 2014, what are the id and rank of the team that has the largest average number of attendance? */\nSELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;\n\n/* Answer the following: What are the name and location of the cinema with the largest capacity? */\nSELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the name, population and expected life length of asian country with the largest area? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3642,
                    "db_id": "baseball_1",
                    "query": "SELECT T2.team_id ,  T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id  =  T2.team_id WHERE T1.year  =  2014 GROUP BY T1.team_id ORDER BY avg(T1.attendance) DESC LIMIT 1;",
                    "question": "In 2014, what are the id and rank of the team that has the largest average number of attendance?"
                },
                {
                    "ex_id": 1940,
                    "db_id": "cinema",
                    "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
                    "question": "What are the name and location of the cinema with the largest capacity?"
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                }
            ],
            "example_quality": 0.7819648316678782,
            "example_similarity": 0.5756837457222779,
            "db_id": "world_1"
        },
        {
            "index": 764,
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the capital city of the largest state in the us */\nSELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Answer the following: what is the population of the largest city in the state with the largest area */\nSELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Answer the following: What is the largest payment amount? */\nSELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, population, and life expectancy of the largest Asian country by land? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7517,
                    "db_id": "geo",
                    "query": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "what is the capital city of the largest state in the us"
                },
                {
                    "ex_id": 7375,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the population of the largest city in the state with the largest area"
                },
                {
                    "ex_id": 3001,
                    "db_id": "sakila_1",
                    "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
                    "question": "What is the largest payment amount?"
                }
            ],
            "example_quality": 0.7815357178355893,
            "example_similarity": 0.5753902791429383,
            "db_id": "world_1"
        },
        {
            "index": 765,
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for wines not produced in Sonoma county? */\nSELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')\n\n/* Answer the following: What is the average bike availablility for stations not in Palo Alto? */\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")\n\n/* Answer the following: What are names of stations that have average bike availability above 10 and are not located in San Jose city? */\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is average life expectancy in the countries where English is not the official language? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6597,
                    "db_id": "wine_1",
                    "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
                    "question": "What is the average price for wines not produced in Sonoma county?"
                },
                {
                    "ex_id": 151,
                    "db_id": "bike_1",
                    "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
                    "question": "What is the average bike availablility for stations not in Palo Alto?"
                },
                {
                    "ex_id": 172,
                    "db_id": "bike_1",
                    "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
                    "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?"
                }
            ],
            "example_quality": 0.7816201859771819,
            "example_similarity": 0.5753320751146872,
            "db_id": "world_1"
        },
        {
            "index": 766,
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection? */\nSELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'\n\n/* Answer the following: What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'? */\nSELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean life expectancy of countries in which English is not the official language. */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 1832,
                    "db_id": "browser_web",
                    "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
                    "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?"
                },
                {
                    "ex_id": 3717,
                    "db_id": "mountain_photos",
                    "query": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'",
                    "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?"
                }
            ],
            "example_quality": 0.7810120518880266,
            "example_similarity": 0.5750118884949866,
            "db_id": "world_1"
        },
        {
            "index": 767,
            "question": "What is the total number of people living in the nations that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of people who have no friends living in Austin? */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Answer the following: How many members are not living in Hartford? */\nSELECT count(*) FROM member WHERE address != 'Hartford'\n\n/* Answer the following: What is the total number of people who has no friend living in the city of Austin. */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of people living in the nations that do not use English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4482,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who have no friends living in Austin?"
                },
                {
                    "ex_id": 798,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) FROM member WHERE address != 'Hartford'",
                    "question": "How many members are not living in Hartford?"
                },
                {
                    "ex_id": 4481,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who has no friend living in the city of Austin."
                }
            ],
            "example_quality": 0.7809126383976406,
            "example_similarity": 0.5747370536523772,
            "db_id": "world_1"
        },
        {
            "index": 768,
            "question": "How many people live in countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many members are not living in Hartford? */\nSELECT count(*) FROM member WHERE address != 'Hartford'\n\n/* Answer the following: What is the total number of people who have no friends living in Austin? */\nSELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')\n\n/* Answer the following: How many drivers did not participate in the races held in 2009? */\nSELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in countries that do not speak English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 798,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) FROM member WHERE address != 'Hartford'",
                    "question": "How many members are not living in Hartford?"
                },
                {
                    "ex_id": 4482,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
                    "question": "What is the total number of people who have no friends living in Austin?"
                },
                {
                    "ex_id": 2174,
                    "db_id": "formula_1",
                    "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
                    "question": "How many drivers did not participate in the races held in 2009?"
                }
            ],
            "example_quality": 0.7808134837965524,
            "example_similarity": 0.5744499836746905,
            "db_id": "world_1"
        },
        {
            "index": 769,
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and active date of the customers whose contact channel code is email? */\nSELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'\n\n/* Answer the following: What is the attribute data type of the attribute with name \"Green\"? */\nSELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"\n\n/* Answer the following: What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"? */\nSELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language spoken in the country whose head of state is Beatrix? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6107,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
                    "question": "What are the name and active date of the customers whose contact channel code is email?"
                },
                {
                    "ex_id": 306,
                    "db_id": "product_catalog",
                    "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"",
                    "question": "What is the attribute data type of the attribute with name \"Green\"?"
                },
                {
                    "ex_id": 4225,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
                    "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?"
                }
            ],
            "example_quality": 0.7810985117760106,
            "example_similarity": 0.5743060821127465,
            "db_id": "world_1"
        },
        {
            "index": 770,
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name of the category to which the film 'HUNGER ROOF' belongs. */\nSELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'\n\n/* Answer the following: Find the first names and last names of the authors whose institution affiliation is \"Google\". */\nSELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"\n\n/* Answer the following: Give the unit of measure for the product with the name 'cumin'. */\nSELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language used in the country the name of whose head of state is Beatrix. */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2964,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
                    "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs."
                },
                {
                    "ex_id": 2878,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"",
                    "question": "Find the first names and last names of the authors whose institution affiliation is \"Google\"."
                },
                {
                    "ex_id": 5586,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
                    "question": "Give the unit of measure for the product with the name 'cumin'."
                }
            ],
            "example_quality": 0.7813209565040691,
            "example_similarity": 0.5741489746467991,
            "db_id": "world_1"
        },
        {
            "index": 771,
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history? */\nSELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year\n\n/* Answer the following: What are the names of all movies made before 1980 or had James Cameron as the director? */\nSELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980\n\n/* Answer the following: How many cities have a stadium that was opened before the year of 2006? */\nSELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3672,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
                    "question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?"
                },
                {
                    "ex_id": 2528,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
                    "question": "What are the names of all movies made before 1980 or had James Cameron as the director?"
                },
                {
                    "ex_id": 5612,
                    "db_id": "swimming",
                    "query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006",
                    "question": "How many cities have a stadium that was opened before the year of 2006?"
                }
            ],
            "example_quality": 0.7812587157476868,
            "example_similarity": 0.5738672941007462,
            "db_id": "world_1"
        },
        {
            "index": 772,
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all movies made before 1980 or had James Cameron as the director? */\nSELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980\n\n/* Answer the following: What are the names of all races that occurred after 12:00:00 or before 09:00:00? */\nSELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"\n\n/* Answer the following: What is the number of wins the team Boston Red Stockings got in the postseasons each year in history? */\nSELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: For the countries founded before 1930, what is the total number of distinct official languages? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2528,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
                    "question": "What are the names of all movies made before 1980 or had James Cameron as the director?"
                },
                {
                    "ex_id": 2207,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
                    "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?"
                },
                {
                    "ex_id": 3672,
                    "db_id": "baseball_1",
                    "query": "SELECT count(*) ,  T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' GROUP BY T1.year",
                    "question": "What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?"
                }
            ],
            "example_quality": 0.7810239246651121,
            "example_similarity": 0.573577249052195,
            "db_id": "world_1"
        },
        {
            "index": 773,
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? */\nSELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\n\n/* Answer the following: What are the names of manufacturers with revenue greater than the average of all revenues? */\nSELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\n\n/* Answer the following: Find the name of people whose age is greater than any engineer sorted by their age. */\nSELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries that have greater surface area than any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2471,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
                    "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?"
                },
                {
                    "ex_id": 5302,
                    "db_id": "manufactory_1",
                    "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
                    "question": "What are the names of manufacturers with revenue greater than the average of all revenues?"
                },
                {
                    "ex_id": 4431,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
                    "question": "Find the name of people whose age is greater than any engineer sorted by their age."
                }
            ],
            "example_quality": 0.7810926269378599,
            "example_similarity": 0.5733728822655142,
            "db_id": "world_1"
        },
        {
            "index": 774,
            "question": "Which countries have greater area than that of any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which membership card has more than 5 members? */\nSELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5\n\n/* Answer the following: What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron? */\nSELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")\n\n/* Answer the following: Which months have more than 2 happy hours? */\nSELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have greater area than that of any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 795,
                    "db_id": "coffee_shop",
                    "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
                    "question": "Which membership card has more than 5 members?"
                },
                {
                    "ex_id": 2471,
                    "db_id": "movie_1",
                    "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")",
                    "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?"
                },
                {
                    "ex_id": 807,
                    "db_id": "coffee_shop",
                    "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
                    "question": "Which months have more than 2 happy hours?"
                }
            ],
            "example_quality": 0.7808603056072754,
            "example_similarity": 0.5731940033929755,
            "db_id": "world_1"
        },
        {
            "index": 775,
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of wrestlers days held less than 100? */\nSELECT Name FROM wrestler WHERE Days_held  <  100\n\n/* Answer the following: What are the states with colleges that have enrollments less than the some other college? */\nSELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)\n\n/* Answer the following: How many rooms whose capacity is less than 50 does the Lamberton building have? */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the African countries that have a  population less than any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1871,
                    "db_id": "wrestler",
                    "query": "SELECT Name FROM wrestler WHERE Days_held  <  100",
                    "question": "What are the names of wrestlers days held less than 100?"
                },
                {
                    "ex_id": 5040,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
                    "question": "What are the states with colleges that have enrollments less than the some other college?"
                },
                {
                    "ex_id": 1357,
                    "db_id": "college_2",
                    "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
                    "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
                }
            ],
            "example_quality": 0.7805394068164144,
            "example_similarity": 0.5731955807218104,
            "db_id": "world_1"
        },
        {
            "index": 776,
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the product names with average product price smaller than 1000000? */\nSELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000\n\n/* Answer the following: What are the names of all stations with a latitude smaller than 37.5? */\nSELECT name FROM station WHERE lat  <  37.5\n\n/* Answer the following: Which delegates are from counties with population smaller than 100000? */\nSELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which African countries have a smaller population than that of any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5139,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
                    "question": "What are the product names with average product price smaller than 1000000?"
                },
                {
                    "ex_id": 113,
                    "db_id": "bike_1",
                    "query": "SELECT name FROM station WHERE lat  <  37.5",
                    "question": "What are the names of all stations with a latitude smaller than 37.5?"
                },
                {
                    "ex_id": 2761,
                    "db_id": "election",
                    "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
                    "question": "Which delegates are from counties with population smaller than 100000?"
                }
            ],
            "example_quality": 0.7800151773923435,
            "example_similarity": 0.5730129594599028,
            "db_id": "world_1"
        },
        {
            "index": 777,
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of states that has some college whose enrollment is larger than the average enrollment? */\nSELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)\n\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Answer the following: How many flights have a velocity larger than 200? */\nSELECT count(*) FROM flight WHERE velocity  >  200\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which Asian countries have a population that is larger than any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5047,
                    "db_id": "soccer_2",
                    "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
                    "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?"
                },
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                },
                {
                    "ex_id": 6367,
                    "db_id": "flight_company",
                    "query": "SELECT count(*) FROM flight WHERE velocity  >  200",
                    "question": "How many flights have a velocity larger than 200?"
                }
            ],
            "example_quality": 0.7796395812363038,
            "example_similarity": 0.5727803139013735,
            "db_id": "world_1"
        },
        {
            "index": 778,
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the countries of mountains with height bigger than 5000? */\nSELECT Country FROM mountain WHERE Height  >  5000\n\n/* Answer the following: What is the number of states that has some college whose enrollment is larger than the average enrollment? */\nSELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)\n\n/* Answer the following: What are the positions of players whose average number of points scored by that position is larger than 20? */\nSELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the Asian countries which have a population larger than that of any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1123,
                    "db_id": "climbing",
                    "query": "SELECT Country FROM mountain WHERE Height  >  5000",
                    "question": "What are the countries of mountains with height bigger than 5000?"
                },
                {
                    "ex_id": 5047,
                    "db_id": "soccer_2",
                    "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)",
                    "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?"
                },
                {
                    "ex_id": 3365,
                    "db_id": "sports_competition",
                    "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
                    "question": "What are the positions of players whose average number of points scored by that position is larger than 20?"
                }
            ],
            "example_quality": 0.7792273673761898,
            "example_similarity": 0.572637329515303,
            "db_id": "world_1"
        },
        {
            "index": 779,
            "question": "What are the country codes for countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'? */\nSELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'\n\n/* Answer the following: What are the customer ids for customers who do not have an account? */\nSELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes for countries that do not speak English? */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 971,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
                    "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?"
                },
                {
                    "ex_id": 1565,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts",
                    "question": "What are the customer ids for customers who do not have an account?"
                }
            ],
            "example_quality": 0.7792384731791456,
            "example_similarity": 0.5726224395052653,
            "db_id": "world_1"
        },
        {
            "index": 780,
            "question": "Return the country codes for countries that do not speak English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the device carriers that do not have Android as their software platform. */\nSELECT Carrier FROM device WHERE Software_Platform != 'Android'\n\n/* Answer the following: Find the first name and major of the students who are not allegry to soy. */\nSELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")\n\n/* Answer the following: Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'. */\nSELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country codes for countries that do not speak English. */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5056,
                    "db_id": "device",
                    "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                    "question": "Return the device carriers that do not have Android as their software platform."
                },
                {
                    "ex_id": 536,
                    "db_id": "allergy_1",
                    "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")",
                    "question": "Find the first name and major of the students who are not allegry to soy."
                },
                {
                    "ex_id": 970,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'",
                    "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'."
                }
            ],
            "example_quality": 0.7791512827603571,
            "example_similarity": 0.5724403024745605,
            "db_id": "world_1"
        },
        {
            "index": 781,
            "question": "What are the country codes of countries where people use languages other than English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the addresses of customers living in Germany who have had an invoice? */\nSELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"\n\n/* Answer the following: What are the distinct last names of the students who have president votes but do not have 2192 as the advisor? */\nSELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"\n\n/* Answer the following: Who were the comptrollers of the parties associated with the delegates from district 1 or district 2? */\nSELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of countries where people use languages other than English? */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 863,
                    "db_id": "chinook_1",
                    "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
                    "question": "What are the addresses of customers living in Germany who have had an invoice?"
                },
                {
                    "ex_id": 5498,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
                    "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?"
                },
                {
                    "ex_id": 2771,
                    "db_id": "election",
                    "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
                    "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?"
                }
            ],
            "example_quality": 0.7791761016025778,
            "example_similarity": 0.5722153982760741,
            "db_id": "world_1"
        },
        {
            "index": 782,
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of buildings except for those having an institution founded in 2003. */\nSELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003\n\n/* Answer the following: Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'. */\nSELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'\n\n/* Answer the following: Find the name and email of the user whose name contains the word \u2018Swift\u2019. */\nSELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the country codes for countries in which people speak langauges that are not English. */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1922,
                    "db_id": "protein_institute",
                    "query": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003",
                    "question": "Show the names of buildings except for those having an institution founded in 2003."
                },
                {
                    "ex_id": 1841,
                    "db_id": "browser_web",
                    "query": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'",
                    "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'."
                },
                {
                    "ex_id": 282,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
                    "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019."
                }
            ],
            "example_quality": 0.7788901418250241,
            "example_similarity": 0.571868738194098,
            "db_id": "world_1"
        },
        {
            "index": 783,
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the titles of films that do not have a film market estimation? */\nSELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)\n\n/* Answer the following: What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ? */\nSELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 4148,
                    "db_id": "film_rank",
                    "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                    "question": "What are the titles of films that do not have a film market estimation?"
                },
                {
                    "ex_id": 1851,
                    "db_id": "wrestler",
                    "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
                    "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?"
                }
            ],
            "example_quality": 0.7785247415520367,
            "example_similarity": 0.5718534118971634,
            "db_id": "world_1"
        },
        {
            "index": 784,
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the names of entrepreneurs do no not have the investor Rachel Elnaugh. */\nSELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"\n\n/* Answer the following: Find the product names that are colored 'white' but do not have unit of measurement \"Handful\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n\n/* Answer the following: Give the names of tracks that do not have a race in the class 'GT'. */\nSELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries that do not speak English and do not have Republics for governments. */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2277,
                    "db_id": "entrepreneur",
                    "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
                    "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh."
                },
                {
                    "ex_id": 5589,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
                    "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\"."
                },
                {
                    "ex_id": 775,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
                    "question": "Give the names of tracks that do not have a race in the class 'GT'."
                }
            ],
            "example_quality": 0.7782839492665667,
            "example_similarity": 0.5717587252080332,
            "db_id": "world_1"
        },
        {
            "index": 785,
            "question": "Which cities are in European countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment? */\nSELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"\n\n/* Answer the following: What are the appelations for wines produced after 2008 but not in the Central Coast area? */\nSELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"\n\n/* Answer the following: What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'? */\nSELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which cities are in European countries where English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4793,
                    "db_id": "department_store",
                    "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
                    "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?"
                },
                {
                    "ex_id": 6595,
                    "db_id": "wine_1",
                    "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
                    "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?"
                },
                {
                    "ex_id": 2652,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
                    "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?"
                }
            ],
            "example_quality": 0.777904250169716,
            "example_similarity": 0.5714447045711472,
            "db_id": "world_1"
        },
        {
            "index": 786,
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the census rankings of cities that do not have the status \"Village\"? */\nSELECT Census_Ranking FROM city WHERE Status !=  \"Village\"\n\n/* Answer the following: What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010? */\nSELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010\n\n/* Answer the following: What are the names of the ships that are not from the United States? */\nSELECT Name FROM ship WHERE Nationality != \"United States\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of cities in Europe for which English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 56,
                    "db_id": "farm",
                    "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
                    "question": "What are the census rankings of cities that do not have the status \"Village\"?"
                },
                {
                    "ex_id": 1368,
                    "db_id": "college_2",
                    "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
                    "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?"
                },
                {
                    "ex_id": 4006,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship WHERE Nationality != \"United States\"",
                    "question": "What are the names of the ships that are not from the United States?"
                }
            ],
            "example_quality": 0.7774966319632268,
            "example_similarity": 0.5713916638398285,
            "db_id": "world_1"
        },
        {
            "index": 787,
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is average age of male for different job title? */\nSELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job\n\n/* Answer the following: What are the valid from and valid to dates for the card with the number 4560596484842? */\nSELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"\n\n/* Answer the following: What are the names of artist who have the letter 'a' in their names? */\nSELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which unique cities are in Asian countries where Chinese is the official language ? */\nSELECT ",
            "response": "distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4425,
                    "db_id": "network_2",
                    "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
                    "question": "What is average age of male for different job title?"
                },
                {
                    "ex_id": 703,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"",
                    "question": "What are the valid from and valid to dates for the card with the number 4560596484842?"
                },
                {
                    "ex_id": 819,
                    "db_id": "chinook_1",
                    "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"",
                    "question": "What are the names of artist who have the letter 'a' in their names?"
                }
            ],
            "example_quality": 0.7765832823370862,
            "example_similarity": 0.5710204868366252,
            "db_id": "world_1"
        },
        {
            "index": 788,
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct years when the governor was named \"Eliot Spitzer\". */\nSELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"\n\n/* Answer the following: Return the distinct name of customers whose order status is Pending, in the order of customer id. */\nSELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id\n\n/* Answer the following: Show the distinct position of players from college UCLA or Duke. */\nSELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the different names of cities that are in Asia and for which Chinese is the official language. */\nSELECT ",
            "response": "DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2756,
                    "db_id": "election",
                    "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
                    "question": "Find the distinct years when the governor was named \"Eliot Spitzer\"."
                },
                {
                    "ex_id": 4734,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
                    "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id."
                },
                {
                    "ex_id": 1063,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
                    "question": "Show the distinct position of players from college UCLA or Duke."
                }
            ],
            "example_quality": 0.7767129836016176,
            "example_similarity": 0.5707521001434002,
            "db_id": "world_1"
        },
        {
            "index": 789,
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the founded year of the newest non public school. */\nSELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1\n\n/* Answer the following: What is the id and name of the staff who has been assigned for the least amount of time? */\nSELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1\n\n/* Answer the following: What is the founded year of the non public school that was founded most recently? */\nSELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, independence year, and surface area of the country with the smallest population? */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 984,
                    "db_id": "university_basketball",
                    "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
                    "question": "Find the founded year of the newest non public school."
                },
                {
                    "ex_id": 4751,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
                    "question": "What is the id and name of the staff who has been assigned for the least amount of time?"
                },
                {
                    "ex_id": 985,
                    "db_id": "university_basketball",
                    "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
                    "question": "What is the founded year of the non public school that was founded most recently?"
                }
            ],
            "example_quality": 0.7766655859536006,
            "example_similarity": 0.5704780739766093,
            "db_id": "world_1"
        },
        {
            "index": 790,
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and name of the staff who has been assigned for the shortest period. */\nSELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1\n\n/* Answer the following: Return the name of the wrestler who had the lowest number of days held. */\nSELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\n\n/* Answer the following: Which part has the least chargeable amount? List the part id and amount. */\nSELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, year of independence, and surface area of the country that has the lowest population. */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4750,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
                    "question": "Find the id and name of the staff who has been assigned for the shortest period."
                },
                {
                    "ex_id": 1850,
                    "db_id": "wrestler",
                    "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
                    "question": "Return the name of the wrestler who had the lowest number of days held."
                },
                {
                    "ex_id": 3152,
                    "db_id": "assets_maintenance",
                    "query": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
                    "question": "Which part has the least chargeable amount? List the part id and amount."
                }
            ],
            "example_quality": 0.7768779642554878,
            "example_similarity": 0.570253739665568,
            "db_id": "world_1"
        },
        {
            "index": 791,
            "question": "What are the population, name and leader of the country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the headquarter of the company with the largest sales? */\nSELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1\n\n/* Answer the following: What are the name and location of the cinema with the largest capacity? */\nSELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1\n\n/* Answer the following: Find the year and semester when offers the largest number of courses. */\nSELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population, name and leader of the country with the largest area? */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4102,
                    "db_id": "company_employee",
                    "query": "SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1",
                    "question": "What is the headquarter of the company with the largest sales?"
                },
                {
                    "ex_id": 1940,
                    "db_id": "cinema",
                    "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
                    "question": "What are the name and location of the cinema with the largest capacity?"
                },
                {
                    "ex_id": 1407,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the year and semester when offers the largest number of courses."
                }
            ],
            "example_quality": 0.777002012341132,
            "example_similarity": 0.5703252922726303,
            "db_id": "world_1"
        },
        {
            "index": 792,
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Answer the following: List the time of elimination of the wrestlers with largest days held. */\nSELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1\n\n/* Answer the following: Find the GDP of the city with the largest regional population. */\nSELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, population, and head of state for the country that has the largest area. */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                },
                {
                    "ex_id": 1861,
                    "db_id": "wrestler",
                    "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
                    "question": "List the time of elimination of the wrestlers with largest days held."
                },
                {
                    "ex_id": 6306,
                    "db_id": "city_record",
                    "query": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
                    "question": "Find the GDP of the city with the largest regional population."
                }
            ],
            "example_quality": 0.7772835754568629,
            "example_similarity": 0.5701524889814262,
            "db_id": "world_1"
        },
        {
            "index": 793,
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the apartment number and the number of rooms for each apartment. */\nSELECT apt_number ,  room_count FROM Apartments\n\n/* Answer the following: Find the number of complaints with Product Failure type for each complaint status. */\nSELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code\n\n/* Answer the following: Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1211,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number ,  room_count FROM Apartments",
                    "question": "Return the apartment number and the number of rooms for each apartment."
                },
                {
                    "ex_id": 5809,
                    "db_id": "customer_complaints",
                    "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code",
                    "question": "Find the number of complaints with Product Failure type for each complaint status."
                },
                {
                    "ex_id": 6872,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
                    "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'."
                }
            ],
            "example_quality": 0.7768332499374928,
            "example_similarity": 0.5700029742432243,
            "db_id": "world_1"
        },
        {
            "index": 794,
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the payment method codes that have been used by more than 3 parties? */\nSELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\n\n/* Answer the following: What are the names of all cities with more than one airport and how many airports do they have? */\nSELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1\n\n/* Answer the following: What are the names of projects that require more than 300 hours, and how many scientists are assigned to each? */\nSELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6336,
                    "db_id": "e_government",
                    "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
                    "question": "What are the payment method codes that have been used by more than 3 parties?"
                },
                {
                    "ex_id": 6857,
                    "db_id": "flight_4",
                    "query": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1",
                    "question": "What are the names of all cities with more than one airport and how many airports do they have?"
                },
                {
                    "ex_id": 6499,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
                    "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?"
                }
            ],
            "example_quality": 0.7768569033192942,
            "example_similarity": 0.5699519724236579,
            "db_id": "world_1"
        },
        {
            "index": 795,
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the count of universities whose campus fee is greater than the average campus fee. */\nSELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n\n/* Answer the following: Find the count of universities whose campus fee is greater than the average campus fee. */\nSELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)\n\n/* Answer the following: What are the names of manufacturers with revenue greater than the average of all revenues? */\nSELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the number of cities in each district whose population is greater than the average population of cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2341,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
                    "question": "Find the count of universities whose campus fee is greater than the average campus fee."
                },
                {
                    "ex_id": 2343,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
                    "question": "Find the count of universities whose campus fee is greater than the average campus fee."
                },
                {
                    "ex_id": 5302,
                    "db_id": "manufactory_1",
                    "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
                    "question": "What are the names of manufacturers with revenue greater than the average of all revenues?"
                }
            ],
            "example_quality": 0.776823121050968,
            "example_similarity": 0.5700128598645373,
            "db_id": "world_1"
        },
        {
            "index": 796,
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts have a savings balance above the average savings balance? */\nSELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)\n\n/* Answer the following: How many instructors are in the department with the highest budget, and what is their average salary? */\nSELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1\n\n/* Answer the following: What is the id of every song that has a resolution higher than that of a song with a rating below 8? */\nSELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many cities in each district have a population that is above the average population across all cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1785,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)",
                    "question": "How many accounts have a savings balance above the average savings balance?"
                },
                {
                    "ex_id": 1450,
                    "db_id": "college_2",
                    "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1",
                    "question": "How many instructors are in the department with the highest budget, and what is their average salary?"
                },
                {
                    "ex_id": 3617,
                    "db_id": "music_1",
                    "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
                    "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?"
                }
            ],
            "example_quality": 0.7766690747672385,
            "example_similarity": 0.5698847523913922,
            "db_id": "world_1"
        },
        {
            "index": 797,
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the id and local authority of the station whose maximum precipitation is higher than 50. */\nSELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50\n\n/* Answer the following: What is the average base price of different bed type? List bed type and average base price. */\nSELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;\n\n/* Answer the following: Show the average amount of transactions for different lots, ordered by average amount of transactions. */\nSELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3171,
                    "db_id": "station_weather",
                    "query": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
                    "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50."
                },
                {
                    "ex_id": 2597,
                    "db_id": "inn_1",
                    "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;",
                    "question": "What is the average base price of different bed type? List bed type and average base price."
                },
                {
                    "ex_id": 5873,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
                    "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions."
                }
            ],
            "example_quality": 0.7765347562604796,
            "example_similarity": 0.5697854499928343,
            "db_id": "world_1"
        },
        {
            "index": 798,
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are total salaries and department id for each department that has more than 2 employees? */\nSELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the names of manufacturers with revenue greater than the average of all revenues? */\nSELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)\n\n/* Answer the following: What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance? */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3513,
                    "db_id": "hr_1",
                    "query": "SELECT department_id ,  SUM(salary) FROM employees GROUP BY department_id HAVING count(*)  >=  2",
                    "question": "What are total salaries and department id for each department that has more than 2 employees?"
                },
                {
                    "ex_id": 5302,
                    "db_id": "manufactory_1",
                    "query": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
                    "question": "What are the names of manufacturers with revenue greater than the average of all revenues?"
                },
                {
                    "ex_id": 1794,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
                    "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?"
                }
            ],
            "example_quality": 0.7763005247167382,
            "example_similarity": 0.5696963409318986,
            "db_id": "world_1"
        },
        {
            "index": 799,
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each account type, find the average account balance of customers with credit score lower than 50. */\nSELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type\n\n/* Answer the following: Find the zip code in which the average mean visibility is lower than 10. */\nSELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10\n\n/* Answer the following: Show the maximum share count of transactions where the amount is smaller than 10000 */\nSELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3057,
                    "db_id": "loan_1",
                    "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
                    "question": "For each account type, find the average account balance of customers with credit score lower than 50."
                },
                {
                    "ex_id": 182,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
                    "question": "Find the zip code in which the average mean visibility is lower than 10."
                },
                {
                    "ex_id": 5856,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000",
                    "question": "Show the maximum share count of transactions where the amount is smaller than 10000"
                }
            ],
            "example_quality": 0.775901552054416,
            "example_similarity": 0.569534635658092,
            "db_id": "world_1"
        },
        {
            "index": 800,
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers with credit score less than the average credit score across customers? */\nSELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)\n\n/* Answer the following: What are the song names for every song whose rating is less than the minimum rating for English songs? */\nSELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')\n\n/* Answer the following: What are the distinct types of the companies that have operated any flights with velocity less than 200? */\nSELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3046,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
                    "question": "What are the names of customers with credit score less than the average credit score across customers?"
                },
                {
                    "ex_id": 3615,
                    "db_id": "music_1",
                    "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
                    "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?"
                },
                {
                    "ex_id": 6374,
                    "db_id": "flight_company",
                    "query": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200",
                    "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?"
                }
            ],
            "example_quality": 0.7753992022126222,
            "example_similarity": 0.5693727025090927,
            "db_id": "world_1"
        },
        {
            "index": 801,
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and location of the cinema with the largest capacity? */\nSELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1\n\n/* Answer the following: What is the school color of the school with the largest enrollment? */\nSELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n\n/* Answer the following: What are the top 3 artists with the largest number of songs in the language Bangla? */\nSELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names and areas of countries with the top 5 largest area? */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1940,
                    "db_id": "cinema",
                    "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
                    "question": "What are the name and location of the cinema with the largest capacity?"
                },
                {
                    "ex_id": 4892,
                    "db_id": "school_player",
                    "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                    "question": "What is the school color of the school with the largest enrollment?"
                },
                {
                    "ex_id": 3621,
                    "db_id": "music_1",
                    "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the top 3 artists with the largest number of songs in the language Bangla?"
                }
            ],
            "example_quality": 0.7754946487165414,
            "example_similarity": 0.5695929349243154,
            "db_id": "world_1"
        },
        {
            "index": 802,
            "question": "Return the names and surface areas of the 5 largest countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the teams of the players with the top 5 largest ages. */\nSELECT Team FROM player ORDER BY Age DESC LIMIT 5\n\n/* Answer the following: List the time of elimination of the wrestlers with largest days held. */\nSELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1\n\n/* Answer the following: List the official name and status of the city with the largest population. */\nSELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names and surface areas of the 5 largest countries. */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4877,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
                    "question": "List the teams of the players with the top 5 largest ages."
                },
                {
                    "ex_id": 1861,
                    "db_id": "wrestler",
                    "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
                    "question": "List the time of elimination of the wrestlers with largest days held."
                },
                {
                    "ex_id": 33,
                    "db_id": "farm",
                    "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1",
                    "question": "List the official name and status of the city with the largest population."
                }
            ],
            "example_quality": 0.775774580575997,
            "example_similarity": 0.5696983884551661,
            "db_id": "world_1"
        },
        {
            "index": 803,
            "question": "What are names of countries with the top 3 largest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the school color of the school with the largest enrollment? */\nSELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n\n/* Answer the following: What are the name and location of the cinema with the largest capacity? */\nSELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1\n\n/* Answer the following: what is the capital of the state with the largest population density */\nSELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are names of countries with the top 3 largest population? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4892,
                    "db_id": "school_player",
                    "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                    "question": "What is the school color of the school with the largest enrollment?"
                },
                {
                    "ex_id": 1940,
                    "db_id": "cinema",
                    "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
                    "question": "What are the name and location of the cinema with the largest capacity?"
                },
                {
                    "ex_id": 7317,
                    "db_id": "geo",
                    "query": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
                    "question": "what is the capital of the state with the largest population density"
                }
            ],
            "example_quality": 0.7757573080745385,
            "example_similarity": 0.5698191459622788,
            "db_id": "world_1"
        },
        {
            "index": 804,
            "question": "Return the names of the 3 most populated countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the state in the US with the most invoices. */\nSELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;\n\n/* Answer the following: Show the top 3 most common colleges of players in match seasons. */\nSELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3\n\n/* Answer the following: Return the name of the document that has the most sections. */\nSELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 most populated countries. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 566,
                    "db_id": "store_1",
                    "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;",
                    "question": "List the state in the US with the most invoices."
                },
                {
                    "ex_id": 1099,
                    "db_id": "match_season",
                    "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
                    "question": "Show the top 3 most common colleges of players in match seasons."
                },
                {
                    "ex_id": 4529,
                    "db_id": "document_management",
                    "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name of the document that has the most sections."
                }
            ],
            "example_quality": 0.7754909360531753,
            "example_similarity": 0.5697861236797006,
            "db_id": "world_1"
        },
        {
            "index": 805,
            "question": "What are the names of the nations with the 3 lowest populations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the full name and id of the customer who has the lowest total amount of payment? */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Answer the following: what is the name of the instructor who is in Statistics department and earns the lowest salary? */\nSELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1\n\n/* Answer the following: What is the name of the department with the student that has the lowest GPA? */\nSELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the nations with the 3 lowest populations? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2962,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "What is the full name and id of the customer who has the lowest total amount of payment?"
                },
                {
                    "ex_id": 1361,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
                    "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?"
                },
                {
                    "ex_id": 3301,
                    "db_id": "college_1",
                    "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
                    "question": "What is the name of the department with the student that has the lowest GPA?"
                }
            ],
            "example_quality": 0.7755455366847173,
            "example_similarity": 0.5696816488760444,
            "db_id": "world_1"
        },
        {
            "index": 806,
            "question": "Return the names of the 3 countries with the fewest people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of aircraft which fewest people have its certificate. */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the id of the department with the fewest staff assignments. */\nSELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Give the full name and staff id of the staff who has handled the fewest payments. */\nSELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 countries with the fewest people. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 432,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the name of aircraft which fewest people have its certificate."
                },
                {
                    "ex_id": 4745,
                    "db_id": "department_store",
                    "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                    "question": "Return the id of the department with the fewest staff assignments."
                },
                {
                    "ex_id": 2978,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Give the full name and staff id of the staff who has handled the fewest payments."
                }
            ],
            "example_quality": 0.775319223680024,
            "example_similarity": 0.5697176740619524,
            "db_id": "world_1"
        },
        {
            "index": 807,
            "question": "how many countries are in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many cities are in Australia? */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: How many leagues are there in England? */\nSELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"\n\n/* Answer the following: How many stations are in Mountain View? */\nSELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: how many countries are in Asia? */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2941,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "How many cities are in Australia?"
                },
                {
                    "ex_id": 1295,
                    "db_id": "soccer_1",
                    "query": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
                    "question": "How many leagues are there in England?"
                },
                {
                    "ex_id": 131,
                    "db_id": "bike_1",
                    "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"",
                    "question": "How many stations are in Mountain View?"
                }
            ],
            "example_quality": 0.7755976385205693,
            "example_similarity": 0.5701475984641887,
            "db_id": "world_1"
        },
        {
            "index": 808,
            "question": "Count the number of countries in Asia.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries in Asia. */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                },
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                }
            ],
            "example_quality": 0.7758753642154694,
            "example_similarity": 0.5705512478426938,
            "db_id": "world_1"
        },
        {
            "index": 809,
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the clubs that have players in the position of \"Right Wing\"? */\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"\n\n/* Answer the following: What are the names of the storms that affected both the regions of Afghanistan and Albania? */\nSELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'\n\n/* Answer the following: What are the names of the tourist attractions Vincent and Marcelle visit? */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3359,
                    "db_id": "sports_competition",
                    "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"",
                    "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?"
                },
                {
                    "ex_id": 2734,
                    "db_id": "storm_record",
                    "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
                    "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?"
                },
                {
                    "ex_id": 5964,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
                    "question": "What are the names of the tourist attractions Vincent and Marcelle visit?"
                }
            ],
            "example_quality": 0.7757086772894004,
            "example_similarity": 0.5707052639273972,
            "db_id": "world_1"
        },
        {
            "index": 810,
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all products with manufacturer code equal to 2. */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Answer the following: What are the ids of stations that are located in San Francisco and have average bike availability above 10. */\nSELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10\n\n/* Answer the following: What is the average price of products with manufacturer codes equal to 2? */\nSELECT avg(price) FROM products WHERE Manufacturer  =  2\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries that are in Europe and have a population equal to 80000. */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5333,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "Compute the average price of all products with manufacturer code equal to 2."
                },
                {
                    "ex_id": 142,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
                    "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10."
                },
                {
                    "ex_id": 5334,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products WHERE Manufacturer  =  2",
                    "question": "What is the average price of products with manufacturer codes equal to 2?"
                }
            ],
            "example_quality": 0.7754172869960586,
            "example_similarity": 0.5705879109480415,
            "db_id": "world_1"
        },
        {
            "index": 811,
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the purchase details of transactions with amount bigger than 10000? */\nSELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000\n\n/* Answer the following: What are the countries of mountains with height bigger than 5000? */\nSELECT Country FROM mountain WHERE Height  >  5000\n\n/* Answer the following: What are the dates of transactions with at least 100 share count or amount bigger than 100? */\nSELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5863,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000",
                    "question": "What are the purchase details of transactions with amount bigger than 10000?"
                },
                {
                    "ex_id": 1123,
                    "db_id": "climbing",
                    "query": "SELECT Country FROM mountain WHERE Height  >  5000",
                    "question": "What are the countries of mountains with height bigger than 5000?"
                },
                {
                    "ex_id": 5883,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100",
                    "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?"
                }
            ],
            "example_quality": 0.7746219941423135,
            "example_similarity": 0.5704204312856666,
            "db_id": "world_1"
        },
        {
            "index": 812,
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the host names for parties with number of hosts greater than 20. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Answer the following: display the job title of jobs which minimum salary is greater than 9000. */\nSELECT job_title FROM jobs WHERE min_salary  >  9000\n\n/* Answer the following: Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10. */\nSELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2685,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Show the host names for parties with number of hosts greater than 20."
                },
                {
                    "ex_id": 3442,
                    "db_id": "hr_1",
                    "query": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
                    "question": "display the job title of jobs which minimum salary is greater than 9000."
                },
                {
                    "ex_id": 1907,
                    "db_id": "school_finance",
                    "query": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
                    "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10."
                }
            ],
            "example_quality": 0.7738075240894446,
            "example_similarity": 0.5701957182476362,
            "db_id": "world_1"
        },
        {
            "index": 813,
            "question": "What are the cities whose population is between 160000 and 900000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of races held between 2009 and 2011? */\nSELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011\n\n/* Answer the following: What is the decor of room Recluse and defiance? */\nSELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";\n\n/* Answer the following: What are the names of the tracks that are Rock or Jazz songs? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the cities whose population is between 160000 and 900000? */\nSELECT ",
            "response": "name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2204,
                    "db_id": "formula_1",
                    "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
                    "question": "What are the names of races held between 2009 and 2011?"
                },
                {
                    "ex_id": 2595,
                    "db_id": "inn_1",
                    "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
                    "question": "What is the decor of room Recluse and defiance?"
                },
                {
                    "ex_id": 635,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"",
                    "question": "What are the names of the tracks that are Rock or Jazz songs?"
                }
            ],
            "example_quality": 0.7737577403369771,
            "example_similarity": 0.5702533036089708,
            "db_id": "world_1"
        },
        {
            "index": 814,
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the phone numbers of employees with salaries between 8000 and 12000. */\nSELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000\n\n/* Answer the following: Return the positions of players on the team Ryley Goldner. */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Answer the following: Return the decor of the room named \"Recluse and defiance\". */\nSELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of cities that have a population between 160000 and 900000 . */\nSELECT ",
            "response": "name from city where population between 160000 and 900000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3423,
                    "db_id": "hr_1",
                    "query": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
                    "question": "Return the phone numbers of employees with salaries between 8000 and 12000."
                },
                {
                    "ex_id": 1086,
                    "db_id": "match_season",
                    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
                    "question": "Return the positions of players on the team Ryley Goldner."
                },
                {
                    "ex_id": 2596,
                    "db_id": "inn_1",
                    "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";",
                    "question": "Return the decor of the room named \"Recluse and defiance\"."
                }
            ],
            "example_quality": 0.773132678327911,
            "example_similarity": 0.5703055048306296,
            "db_id": "world_1"
        },
        {
            "index": 815,
            "question": "Which language is spoken by the largest number of countries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which room has the largest number of reservations? */\nSELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: Which party has the largest number of delegates? */\nSELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which department has the largest number of employees? */\nSELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is spoken by the largest number of countries? */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2578,
                    "db_id": "inn_1",
                    "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;",
                    "question": "Which room has the largest number of reservations?"
                },
                {
                    "ex_id": 2792,
                    "db_id": "election",
                    "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which party has the largest number of delegates?"
                },
                {
                    "ex_id": 3899,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;",
                    "question": "Which department has the largest number of employees?"
                }
            ],
            "example_quality": 0.7734110431397786,
            "example_similarity": 0.5704237393850297,
            "db_id": "world_1"
        },
        {
            "index": 816,
            "question": "Give the language that is spoken in the most countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the advisor with the most students. */\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Give the state that has the most customers. */\nSELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1\n\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the language that is spoken in the most countries. */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 503,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Give the advisor with the most students."
                },
                {
                    "ex_id": 5814,
                    "db_id": "customer_complaints",
                    "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
                    "question": "Give the state that has the most customers."
                },
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.7736406672458886,
            "example_similarity": 0.5704552713786188,
            "db_id": "world_1"
        },
        {
            "index": 817,
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the state with the largest population density */\nSELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );\n\n/* Answer the following: how many rivers are in the state with the largest population */\nSELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: how many states border the state with the largest population */\nSELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language spoken by the largest percentage of people in each country? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7378,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
                    "question": "how many people live in the state with the largest population density"
                },
                {
                    "ex_id": 7557,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many rivers are in the state with the largest population"
                },
                {
                    "ex_id": 7253,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many states border the state with the largest population"
                }
            ],
            "example_quality": 0.7731239015870062,
            "example_similarity": 0.5702079834731757,
            "db_id": "world_1"
        },
        {
            "index": 818,
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the department ids, full names, and salaries for employees who make the most in their departments? */\nSELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id\n\n/* Answer the following: What are all the policy types of the customer that has the most policies listed? */\nSELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)\n\n/* Answer the following: List the software platform shared by the greatest number of devices. */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3517,
                    "db_id": "hr_1",
                    "query": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
                    "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?"
                },
                {
                    "ex_id": 914,
                    "db_id": "insurance_fnol",
                    "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are all the policy types of the customer that has the most policies listed?"
                },
                {
                    "ex_id": 5081,
                    "db_id": "device",
                    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the software platform shared by the greatest number of devices."
                }
            ],
            "example_quality": 0.7729581830490834,
            "example_similarity": 0.5699332663497658,
            "db_id": "world_1"
        },
        {
            "index": 819,
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the state with the largest population density */\nSELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );\n\n/* Answer the following: how many rivers are in the state with the largest population */\nSELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );\n\n/* Answer the following: What are the names of all the stores in the largest district by population? */\nSELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7378,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
                    "question": "how many people live in the state with the largest population density"
                },
                {
                    "ex_id": 7557,
                    "db_id": "geo",
                    "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
                    "question": "how many rivers are in the state with the largest population"
                },
                {
                    "ex_id": 4920,
                    "db_id": "store_product",
                    "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
                    "question": "What are the names of all the stores in the largest district by population?"
                }
            ],
            "example_quality": 0.7726418372428475,
            "example_similarity": 0.5696200459965932,
            "db_id": "world_1"
        },
        {
            "index": 820,
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of products with the 'hot' charactersitic. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"\n\n/* Answer the following: Count the number of financial transactions that the account with the name 337 has. */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Answer the following: Find the number of airports whose name contain the word 'International'. */\nSELECT count(*) FROM airports WHERE name LIKE '%International%'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5572,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
                    "question": "Count the number of products with the 'hot' charactersitic."
                },
                {
                    "ex_id": 1583,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
                    "question": "Count the number of financial transactions that the account with the name 337 has."
                },
                {
                    "ex_id": 6822,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
                    "question": "Find the number of airports whose name contain the word 'International'."
                }
            ],
            "example_quality": 0.7723558427604242,
            "example_similarity": 0.5694515843325504,
            "db_id": "world_1"
        },
        {
            "index": 821,
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the state with the largest population density */\nSELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );\n\n/* Answer the following: what is the full name and id of the college with the largest number of baseball players? */\nSELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;\n\n/* Answer the following: What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100? */\nSELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 7378,
                    "db_id": "geo",
                    "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
                    "question": "how many people live in the state with the largest population density"
                },
                {
                    "ex_id": 3630,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_full ,  T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id  =  T2.college_id GROUP BY T1.college_id ORDER BY count(*) DESC LIMIT 1;",
                    "question": "what is the full name and id of the college with the largest number of baseball players?"
                },
                {
                    "ex_id": 3070,
                    "db_id": "loan_1",
                    "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
                    "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?"
                }
            ],
            "example_quality": 0.7721288136124588,
            "example_similarity": 0.5692343287616826,
            "db_id": "world_1"
        },
        {
            "index": 822,
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the user whose name contains the word \u2018Swift\u2019. */\nSELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'\n\n/* Answer the following: List the camera lens names containing substring \"Digital\". */\nSELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"\n\n/* Answer the following: Find the name of physicians whose position title contains the word 'senior'. */\nSELECT name FROM physician WHERE POSITION LIKE '%senior%'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 282,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
                    "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019."
                },
                {
                    "ex_id": 3727,
                    "db_id": "mountain_photos",
                    "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
                    "question": "List the camera lens names containing substring \"Digital\"."
                },
                {
                    "ex_id": 3947,
                    "db_id": "hospital_1",
                    "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
                    "question": "Find the name of physicians whose position title contains the word 'senior'."
                }
            ],
            "example_quality": 0.7717572051611864,
            "example_similarity": 0.5689654175513451,
            "db_id": "world_1"
        },
        {
            "index": 823,
            "question": "How many conductors are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many conductors are there? */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.771983907625551,
            "example_similarity": 0.5694891533744905,
            "db_id": "orchestra"
        },
        {
            "index": 824,
            "question": "Count the number of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of farms. */\nSELECT count(*) FROM farm\n\n/* Answer the following: Count the number of actors. */\nSELECT count(*) FROM actor\n\n/* Answer the following: Count the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of conductors. */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 18,
                    "db_id": "farm",
                    "query": "SELECT count(*) FROM farm",
                    "question": "Count the number of farms."
                },
                {
                    "ex_id": 236,
                    "db_id": "musical",
                    "query": "SELECT count(*) FROM actor",
                    "question": "Count the number of actors."
                },
                {
                    "ex_id": 669,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Count the number of accounts."
                }
            ],
            "example_quality": 0.772260626184258,
            "example_similarity": 0.5700116179941817,
            "db_id": "orchestra"
        },
        {
            "index": 825,
            "question": "List the names of conductors in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of phones in ascending order of price. */\nSELECT Name FROM phone ORDER BY Price ASC\n\n/* Answer the following: List the name of ships in ascending order of tonnage. */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Answer the following: List the locations of schools in ascending order of enrollment. */\nSELECT LOCATION FROM school ORDER BY Enrollment ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of conductors in ascending order of age. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1980,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone ORDER BY Price ASC",
                    "question": "List the names of phones in ascending order of price."
                },
                {
                    "ex_id": 4001,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "List the name of ships in ascending order of tonnage."
                },
                {
                    "ex_id": 4863,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Enrollment ASC",
                    "question": "List the locations of schools in ascending order of enrollment."
                }
            ],
            "example_quality": 0.7725366739100952,
            "example_similarity": 0.5705328160329766,
            "db_id": "orchestra"
        },
        {
            "index": 826,
            "question": "What are the names of conductors, ordered by age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the course names, ordered by credits? */\nSELECT CName FROM COURSE ORDER BY Credits\n\n/* Answer the following: What are the names, address roads, and cities of the branches ordered by opening year? */\nSELECT name ,  address_road ,  city FROM branch ORDER BY open_year\n\n/* Answer the following: What are the official names of cities, ordered descending by population? */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, ordered by age? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4663,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE ORDER BY Credits",
                    "question": "What are the course names, ordered by credits?"
                },
                {
                    "ex_id": 5404,
                    "db_id": "shop_membership",
                    "query": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year",
                    "question": "What are the names, address roads, and cities of the branches ordered by opening year?"
                },
                {
                    "ex_id": 32,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "What are the official names of cities, ordered descending by population?"
                }
            ],
            "example_quality": 0.7727223751837221,
            "example_similarity": 0.5707970442082214,
            "db_id": "orchestra"
        },
        {
            "index": 827,
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of companies whose headquarters are not \"USA\"? */\nSELECT name FROM Companies WHERE Headquarters != 'USA'\n\n/* Answer the following: What are the names of representatives whose party is not \"Republican\"? */\nSELECT Name FROM Representative WHERE Party != \"Republican\"\n\n/* Answer the following: What are the enrollments of schools whose denomination is not \"Catholic\"? */\nSELECT Enrollment FROM school WHERE Denomination != \"Catholic\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors whose nationalities are not \"USA\"? */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4548,
                    "db_id": "company_office",
                    "query": "SELECT name FROM Companies WHERE Headquarters != 'USA'",
                    "question": "What are the names of companies whose headquarters are not \"USA\"?"
                },
                {
                    "ex_id": 1180,
                    "db_id": "election_representative",
                    "query": "SELECT Name FROM Representative WHERE Party != \"Republican\"",
                    "question": "What are the names of representatives whose party is not \"Republican\"?"
                },
                {
                    "ex_id": 4867,
                    "db_id": "school_player",
                    "query": "SELECT Enrollment FROM school WHERE Denomination != \"Catholic\"",
                    "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?"
                }
            ],
            "example_quality": 0.7729971969791468,
            "example_similarity": 0.5712085485212842,
            "db_id": "orchestra"
        },
        {
            "index": 828,
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the device carriers that do not have Android as their software platform. */\nSELECT Carrier FROM device WHERE Software_Platform != 'Android'\n\n/* Answer the following: Return the names and classes of ships that do not have a captain? */\nSELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)\n\n/* Answer the following: Show the nicknames of schools that are not in division 1. */\nSELECT Nickname FROM school_details WHERE Division != \"Division 1\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the names of conductors that do not have the nationality \"USA\". */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5056,
                    "db_id": "device",
                    "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'",
                    "question": "Return the device carriers that do not have Android as their software platform."
                },
                {
                    "ex_id": 6262,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
                    "question": "Return the names and classes of ships that do not have a captain?"
                },
                {
                    "ex_id": 4897,
                    "db_id": "school_player",
                    "query": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
                    "question": "Show the nicknames of schools that are not in division 1."
                }
            ],
            "example_quality": 0.7730413112455052,
            "example_similarity": 0.5712120093009374,
            "db_id": "orchestra"
        },
        {
            "index": 829,
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the characters of actors in descending order of age? */\nSELECT Character FROM actor ORDER BY age DESC\n\n/* Answer the following: What are the names of representatives in descending order of votes? */\nSELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC\n\n/* Answer the following: What are the lifespans of representatives in descending order of vote percent? */\nSELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies of orchestras in descending order of years in which they were founded? */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 243,
                    "db_id": "musical",
                    "query": "SELECT Character FROM actor ORDER BY age DESC",
                    "question": "What are the characters of actors in descending order of age?"
                },
                {
                    "ex_id": 1184,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC",
                    "question": "What are the names of representatives in descending order of votes?"
                },
                {
                    "ex_id": 1186,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC",
                    "question": "What are the lifespans of representatives in descending order of vote percent?"
                }
            ],
            "example_quality": 0.7733150852970788,
            "example_similarity": 0.5713494920221488,
            "db_id": "orchestra"
        },
        {
            "index": 830,
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the themes of farm competitions, sorted by year ascending. */\nSELECT Theme FROM farm_competition ORDER BY YEAR ASC\n\n/* Answer the following: Return the the names of the drama workshop groups that are located in Feliciaberg city. */\nSELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"\n\n/* Answer the following: Find the name of amenities Smith Hall dorm have. ordered the results by amenity names. */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 24,
                    "db_id": "farm",
                    "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC",
                    "question": "Return the themes of farm competitions, sorted by year ascending."
                },
                {
                    "ex_id": 5152,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
                    "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city."
                },
                {
                    "ex_id": 5753,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T1.dorm_name  =  'Smith Hall' ORDER BY T3.amenity_name",
                    "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names."
                }
            ],
            "example_quality": 0.7731744233347518,
            "example_similarity": 0.5711999817431027,
            "db_id": "orchestra"
        },
        {
            "index": 831,
            "question": "What is the average attendance of shows?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of the genres? */\nSELECT DISTINCT name FROM genres;\n\n/* Answer the following: What is the address of the restaurant Subway? */\nSELECT Address FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Answer the following: What is the rating of the restaurant Subway? */\nSELECT Rating FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the average attendance of shows? */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 615,
                    "db_id": "store_1",
                    "query": "SELECT DISTINCT name FROM genres;",
                    "question": "What are the different names of the genres?"
                },
                {
                    "ex_id": 2822,
                    "db_id": "restaurant_1",
                    "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the address of the restaurant Subway?"
                },
                {
                    "ex_id": 2823,
                    "db_id": "restaurant_1",
                    "query": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the rating of the restaurant Subway?"
                }
            ],
            "example_quality": 0.7728011243451346,
            "example_similarity": 0.571506511158485,
            "db_id": "orchestra"
        },
        {
            "index": 832,
            "question": "Return the average attendance across all shows.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return all the committees that have delegates from Democratic party. */\nSELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n\n/* Answer the following: Return all the distinct payment methods used by customers. */\nSELECT DISTINCT payment_method FROM customers\n\n/* Answer the following: Return the low and high estimates for all film markets. */\nSELECT Low_Estimate ,  High_Estimate FROM film_market_estimation\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the average attendance across all shows. */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2773,
                    "db_id": "election",
                    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
                    "question": "Return all the committees that have delegates from Democratic party."
                },
                {
                    "ex_id": 6071,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT DISTINCT payment_method FROM customers",
                    "question": "Return all the distinct payment methods used by customers."
                },
                {
                    "ex_id": 4120,
                    "db_id": "film_rank",
                    "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
                    "question": "Return the low and high estimates for all film markets."
                }
            ],
            "example_quality": 0.7724795977597331,
            "example_similarity": 0.5715419722039798,
            "db_id": "orchestra"
        },
        {
            "index": 833,
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What is the maximum level of managers in countries that are not \"Australia\"? */\nSELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\n\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the maximum and minimum share of performances whose type is not \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4554,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\"."
                },
                {
                    "ex_id": 5636,
                    "db_id": "railway",
                    "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
                    "question": "What is the maximum level of managers in countries that are not \"Australia\"?"
                },
                {
                    "ex_id": 4555,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry."
                }
            ],
            "example_quality": 0.7726098171873352,
            "example_similarity": 0.571667269264648,
            "db_id": "orchestra"
        },
        {
            "index": 834,
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry. */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What are the maximum and minimum sales of the companies whose industries are not \"Banking\". */\nSELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"\n\n/* Answer the following: What is the maximum level of managers in countries that are not \"Australia\"? */\nSELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the maximum and minimum shares for performances that do not have the type \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4555,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry."
                },
                {
                    "ex_id": 4554,
                    "db_id": "company_office",
                    "query": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"",
                    "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\"."
                },
                {
                    "ex_id": 5636,
                    "db_id": "railway",
                    "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
                    "question": "What is the maximum level of managers in countries that are not \"Australia\"?"
                }
            ],
            "example_quality": 0.7727397243381328,
            "example_similarity": 0.5715913292935072,
            "db_id": "orchestra"
        },
        {
            "index": 835,
            "question": "How many different nationalities do conductors have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different statuses do cities have? */\nSELECT count(DISTINCT Status) FROM city\n\n/* Answer the following: How many different levels do members have? */\nSELECT count(DISTINCT LEVEL) FROM member\n\n/* Answer the following: How many different positions of players are there? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many different nationalities do conductors have? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 29,
                    "db_id": "farm",
                    "query": "SELECT count(DISTINCT Status) FROM city",
                    "question": "How many different statuses do cities have?"
                },
                {
                    "ex_id": 5415,
                    "db_id": "shop_membership",
                    "query": "SELECT count(DISTINCT LEVEL) FROM member",
                    "question": "How many different levels do members have?"
                },
                {
                    "ex_id": 4873,
                    "db_id": "school_player",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "How many different positions of players are there?"
                }
            ],
            "example_quality": 0.7730118923329373,
            "example_similarity": 0.5719229382985268,
            "db_id": "orchestra"
        },
        {
            "index": 836,
            "question": "Count the number of different nationalities of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different ranks of captain. */\nSELECT count(DISTINCT rank) FROM captain\n\n/* Answer the following: Count the number of different film ratings. */\nSELECT count(DISTINCT rating) FROM film\n\n/* Answer the following: Count the number of different software platforms. */\nSELECT count(DISTINCT Software_Platform) FROM device\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of different nationalities of conductors. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6222,
                    "db_id": "ship_1",
                    "query": "SELECT count(DISTINCT rank) FROM captain",
                    "question": "Count the number of different ranks of captain."
                },
                {
                    "ex_id": 2984,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT rating) FROM film",
                    "question": "Count the number of different film ratings."
                },
                {
                    "ex_id": 5064,
                    "db_id": "device",
                    "query": "SELECT count(DISTINCT Software_Platform) FROM device",
                    "question": "Count the number of different software platforms."
                }
            ],
            "example_quality": 0.7732834092081372,
            "example_similarity": 0.5723463868483204,
            "db_id": "orchestra"
        },
        {
            "index": 837,
            "question": "List names of conductors in descending order of years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List official names of cities in descending order of population. */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Answer the following: List the total points of gymnasts in descending order of floor exercise points. */\nSELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC\n\n/* Answer the following: List the companies of entrepreneurs in descending order of money requested. */\nSELECT Company FROM entrepreneur ORDER BY Money_Requested DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List names of conductors in descending order of years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 31,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "List official names of cities in descending order of population."
                },
                {
                    "ex_id": 1741,
                    "db_id": "gymnast",
                    "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC",
                    "question": "List the total points of gymnasts in descending order of floor exercise points."
                },
                {
                    "ex_id": 2266,
                    "db_id": "entrepreneur",
                    "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
                    "question": "List the companies of entrepreneurs in descending order of money requested."
                }
            ],
            "example_quality": 0.7735542772974943,
            "example_similarity": 0.572705974347093,
            "db_id": "orchestra"
        },
        {
            "index": 838,
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor? */\nSELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor\n\n/* Answer the following: What are the heights of perpetrators in descending order of the number of people they injured? */\nSELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC\n\n/* Answer the following: Find the number of projects which each scientist is working on and scientist's name. */\nSELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, sorted descending by the number of years they have worked? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2288,
                    "db_id": "entrepreneur",
                    "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
                    "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?"
                },
                {
                    "ex_id": 2315,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
                    "question": "What are the heights of perpetrators in descending order of the number of people they injured?"
                },
                {
                    "ex_id": 6500,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
                    "question": "Find the number of projects which each scientist is working on and scientist's name."
                }
            ],
            "example_quality": 0.7733699018103225,
            "example_similarity": 0.5725503721245746,
            "db_id": "orchestra"
        },
        {
            "index": 839,
            "question": "List the name of the conductor with the most years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of the building that has the most company offices. */\nSELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Find the branch name of the bank that has the most number of customers. */\nSELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1\n\n/* Answer the following: Find the city with the most number of stores. */\nSELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the name of the conductor with the most years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4566,
                    "db_id": "company_office",
                    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the name of the building that has the most company offices."
                },
                {
                    "ex_id": 3047,
                    "db_id": "loan_1",
                    "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
                    "question": "Find the branch name of the bank that has the most number of customers."
                },
                {
                    "ex_id": 4925,
                    "db_id": "store_product",
                    "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the city with the most number of stores."
                }
            ],
            "example_quality": 0.7733420473385582,
            "example_similarity": 0.5726287451281553,
            "db_id": "orchestra"
        },
        {
            "index": 840,
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the transaction type that has processed the greatest total amount in transactions? */\nSELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1\n\n/* Answer the following: What is the name of organization that has the greatest number of contact individuals? */\nSELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has worked the greatest number of years? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 783,
                    "db_id": "race_track",
                    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the track that has had the greatest number of races?"
                },
                {
                    "ex_id": 744,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1",
                    "question": "What is the transaction type that has processed the greatest total amount in transactions?"
                },
                {
                    "ex_id": 6345,
                    "db_id": "e_government",
                    "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of organization that has the greatest number of contact individuals?"
                }
            ],
            "example_quality": 0.773165449663155,
            "example_similarity": 0.5726952772575015,
            "db_id": "orchestra"
        },
        {
            "index": 841,
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of journalists and the dates of the events they reported. */\nSELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID\n\n/* Answer the following: What are the names of representatives and the dates of elections they participated in. */\nSELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID\n\n/* Answer the following: Show the names of members and the decoration themes they have. */\nSELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors and the orchestras they have conducted. */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2813,
                    "db_id": "news_report",
                    "query": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID",
                    "question": "Show the names of journalists and the dates of the events they reported."
                },
                {
                    "ex_id": 1182,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
                    "question": "What are the names of representatives and the dates of elections they participated in."
                },
                {
                    "ex_id": 4496,
                    "db_id": "decoration_competition",
                    "query": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",
                    "question": "Show the names of members and the decoration themes they have."
                }
            ],
            "example_quality": 0.7734351696992274,
            "example_similarity": 0.5728305540345521,
            "db_id": "orchestra"
        },
        {
            "index": 842,
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of representatives and the dates of elections they participated in. */\nSELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID\n\n/* Answer the following: What are the details of the project that is producing both patents and papers as outcomes? */\nSELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'\n\n/* Answer the following: What are the names of cities, as well as the names of the counties they correspond to? */\nSELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1182,
                    "db_id": "election_representative",
                    "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID",
                    "question": "What are the names of representatives and the dates of elections they participated in."
                },
                {
                    "ex_id": 4324,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id WHERE T2.outcome_code  =  'Patent'",
                    "question": "What are the details of the project that is producing both patents and papers as outcomes?"
                },
                {
                    "ex_id": 2552,
                    "db_id": "county_public_safety",
                    "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID",
                    "question": "What are the names of cities, as well as the names of the counties they correspond to?"
                }
            ],
            "example_quality": 0.7734301763495024,
            "example_similarity": 0.5727182384948023,
            "db_id": "orchestra"
        },
        {
            "index": 843,
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Show the names of journalists that have reported more than one event. */\nSELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Show the names of the buildings that have more than one company offices. */\nSELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors that have conducted more than one orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6216,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                    "question": "Show the names of countries that have more than one roller coaster."
                },
                {
                    "ex_id": 2816,
                    "db_id": "news_report",
                    "query": "SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*)  >  1",
                    "question": "Show the names of journalists that have reported more than one event."
                },
                {
                    "ex_id": 4564,
                    "db_id": "company_office",
                    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
                    "question": "Show the names of the buildings that have more than one company offices."
                }
            ],
            "example_quality": 0.7736989424511045,
            "example_similarity": 0.5729840832852301,
            "db_id": "orchestra"
        },
        {
            "index": 844,
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of students who have more than one advisor? */\nSELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n\n/* Answer the following: Find the name of the students who have more than one advisor? */\nSELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n\n/* Answer the following: What are the titles of courses that are offered in more than one department? */\nSELECT title FROM course GROUP BY title HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted at more than one orchestra? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1392,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
                    "question": "What are the names of students who have more than one advisor?"
                },
                {
                    "ex_id": 1391,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
                    "question": "Find the name of the students who have more than one advisor?"
                },
                {
                    "ex_id": 1398,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
                    "question": "What are the titles of courses that are offered in more than one department?"
                }
            ],
            "example_quality": 0.7739670716662098,
            "example_similarity": 0.5731316822618342,
            "db_id": "orchestra"
        },
        {
            "index": 845,
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and city of the airport which is the destination of the most number of routes. */\nSELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the home city with the most number of drivers. */\nSELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and city of the airport which is the source for the most number of flight routes. */\nSELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the name of the conductor that has conducted the most number of orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6834,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and city of the airport which is the destination of the most number of routes."
                },
                {
                    "ex_id": 6354,
                    "db_id": "school_bus",
                    "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the home city with the most number of drivers."
                },
                {
                    "ex_id": 6838,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and city of the airport which is the source for the most number of flight routes."
                }
            ],
            "example_quality": 0.7742345662559539,
            "example_similarity": 0.5730832445473607,
            "db_id": "orchestra"
        },
        {
            "index": 846,
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer id of the customer who has the most orders? */\nSELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first and last name of the faculty who has the most students? */\nSELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the denomination of the school the most players belong to? */\nSELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has conducted the most orchestras? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6900,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id of the customer who has the most orders?"
                },
                {
                    "ex_id": 6760,
                    "db_id": "activity_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the first and last name of the faculty who has the most students?"
                },
                {
                    "ex_id": 4884,
                    "db_id": "school_player",
                    "query": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the denomination of the school the most players belong to?"
                }
            ],
            "example_quality": 0.7745014284707814,
            "example_similarity": 0.5732808740192643,
            "db_id": "orchestra"
        },
        {
            "index": 847,
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the instructors who taught C Programming course before. */\nSELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'\n\n/* Answer the following: What are the titles and authors or editors that correspond to books made after 1989? */\nSELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989\n\n/* Answer the following: Return the prices of wines produced before 2010. */\nSELECT Price FROM WINE WHERE YEAR  <  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the name of the conductor that has conducted orchestras founded after 2008. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1431,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
                    "question": "Find the name of the instructors who taught C Programming course before."
                },
                {
                    "ex_id": 6966,
                    "db_id": "culture_company",
                    "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
                    "question": "What are the titles and authors or editors that correspond to books made after 1989?"
                },
                {
                    "ex_id": 6531,
                    "db_id": "wine_1",
                    "query": "SELECT Price FROM WINE WHERE YEAR  <  2010",
                    "question": "Return the prices of wines produced before 2010."
                }
            ],
            "example_quality": 0.7747676605505089,
            "example_similarity": 0.5730585210120853,
            "db_id": "orchestra"
        },
        {
            "index": 848,
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles and authors or editors that correspond to books made after 1989? */\nSELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989\n\n/* Answer the following: What are the names of ships that were involved in a mission launched after 1928? */\nSELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928\n\n/* Answer the following: Find the cities which were once a host city after 2010? */\nSELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted orchestras founded after the year 2008? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6966,
                    "db_id": "culture_company",
                    "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
                    "question": "What are the titles and authors or editors that correspond to books made after 1989?"
                },
                {
                    "ex_id": 4022,
                    "db_id": "ship_mission",
                    "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
                    "question": "What are the names of ships that were involved in a mission launched after 1928?"
                },
                {
                    "ex_id": 6273,
                    "db_id": "city_record",
                    "query": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
                    "question": "Find the cities which were once a host city after 2010?"
                }
            ],
            "example_quality": 0.775033264724388,
            "example_similarity": 0.5728983452057379,
            "db_id": "orchestra"
        },
        {
            "index": 849,
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show different software platforms and the corresponding number of devices using each. */\nSELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform\n\n/* Answer the following: Show the different nationalities and the number of journalists of each nationality. */\nSELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality\n\n/* Answer the following: Please show different denominations and the corresponding number of schools. */\nSELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the different record companies and the corresponding number of orchestras. */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5077,
                    "db_id": "device",
                    "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
                    "question": "Please show different software platforms and the corresponding number of devices using each."
                },
                {
                    "ex_id": 2809,
                    "db_id": "news_report",
                    "query": "SELECT Nationality ,  COUNT(*) FROM journalist GROUP BY Nationality",
                    "question": "Show the different nationalities and the number of journalists of each nationality."
                },
                {
                    "ex_id": 4887,
                    "db_id": "school_player",
                    "query": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
                    "question": "Please show different denominations and the corresponding number of schools."
                }
            ],
            "example_quality": 0.7752982432111674,
            "example_similarity": 0.5730193073881754,
            "db_id": "orchestra"
        },
        {
            "index": 850,
            "question": "How many orchestras does each record company manage?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms does each block floor have? */\nSELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor\n\n/* Answer the following: How many transactions correspond to each invoice number? */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Answer the following: How many invoices correspond to each order id? */\nSELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many orchestras does each record company manage? */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3934,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor",
                    "question": "How many rooms does each block floor have?"
                },
                {
                    "ex_id": 1601,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "How many transactions correspond to each invoice number?"
                },
                {
                    "ex_id": 1609,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
                    "question": "How many invoices correspond to each order id?"
                }
            ],
            "example_quality": 0.7755625982191542,
            "example_similarity": 0.5731580012511412,
            "db_id": "orchestra"
        },
        {
            "index": 851,
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of editors in ascending order of age. */\nSELECT Name FROM editor ORDER BY Age ASC\n\n/* Answer the following: List the hosts of performances in ascending order of attendance. */\nSELECT HOST FROM performance ORDER BY Attendance ASC\n\n/* Answer the following: List the names of technicians in ascending order of age. */\nSELECT Name FROM technician ORDER BY Age ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the record formats of orchestras in ascending order of count. */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 651,
                    "db_id": "journal_committee",
                    "query": "SELECT Name FROM editor ORDER BY Age ASC",
                    "question": "List the names of editors in ascending order of age."
                },
                {
                    "ex_id": 1309,
                    "db_id": "performance_attendance",
                    "query": "SELECT HOST FROM performance ORDER BY Attendance ASC",
                    "question": "List the hosts of performances in ascending order of attendance."
                },
                {
                    "ex_id": 2236,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician ORDER BY Age ASC",
                    "question": "List the names of technicians in ascending order of age."
                }
            ],
            "example_quality": 0.7753227227470149,
            "example_similarity": 0.5733238387517694,
            "db_id": "orchestra"
        },
        {
            "index": 852,
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different software platforms for devices, ordered by frequency descending? */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC\n\n/* Answer the following: Return the different statuses of cities, ascending by frequency. */\nSELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC\n\n/* Answer the following: What are the companies of entrepreneurs, ordered descending by amount of money requested? */\nSELECT Company FROM entrepreneur ORDER BY Money_Requested DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the major record formats of orchestras, sorted by their frequency? */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5080,
                    "db_id": "device",
                    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
                    "question": "What are the different software platforms for devices, ordered by frequency descending?"
                },
                {
                    "ex_id": 46,
                    "db_id": "farm",
                    "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
                    "question": "Return the different statuses of cities, ascending by frequency."
                },
                {
                    "ex_id": 2267,
                    "db_id": "entrepreneur",
                    "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
                    "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?"
                }
            ],
            "example_quality": 0.775325604267004,
            "example_similarity": 0.5732595132585379,
            "db_id": "orchestra"
        },
        {
            "index": 853,
            "question": "List the record company shared by the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and hours of project that has the most number of scientists. */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the name and city of the airport which is the source for the most number of flight routes. */\nSELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the home city with the most number of drivers. */\nSELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the record company shared by the most number of orchestras. */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6484,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and hours of project that has the most number of scientists."
                },
                {
                    "ex_id": 6838,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and city of the airport which is the source for the most number of flight routes."
                },
                {
                    "ex_id": 6354,
                    "db_id": "school_bus",
                    "query": "SELECT home_city FROM driver GROUP BY home_city ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the home city with the most number of drivers."
                }
            ],
            "example_quality": 0.7755889974624706,
            "example_similarity": 0.573246171856328,
            "db_id": "orchestra"
        },
        {
            "index": 854,
            "question": "What is the record company used by the greatest number of orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of member in charge of greatest number of events? */\nSELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the record company used by the greatest number of orchestras? */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1603,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
                },
                {
                    "ex_id": 783,
                    "db_id": "race_track",
                    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the track that has had the greatest number of races?"
                },
                {
                    "ex_id": 2078,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of member in charge of greatest number of events?"
                }
            ],
            "example_quality": 0.7758517738120462,
            "example_similarity": 0.5732475057413666,
            "db_id": "orchestra"
        },
        {
            "index": 855,
            "question": "List the names of orchestras that have no performance.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of buildings that have no company office. */\nSELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n\n/* Answer the following: List the carriers of devices that have no devices in stock. */\nSELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)\n\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of orchestras that have no performance. */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4576,
                    "db_id": "company_office",
                    "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
                    "question": "List the names of buildings that have no company office."
                },
                {
                    "ex_id": 5087,
                    "db_id": "device",
                    "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)",
                    "question": "List the carriers of devices that have no devices in stock."
                },
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                }
            ],
            "example_quality": 0.7761139354801023,
            "example_similarity": 0.5735262540522859,
            "db_id": "orchestra"
        },
        {
            "index": 856,
            "question": "What are the orchestras that do not have any performances?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of counties that do not contain any cities? */\nSELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\n\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Answer the following: What are the names of documents that do not have any images? */\nSELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the orchestras that do not have any performances? */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2566,
                    "db_id": "county_public_safety",
                    "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
                    "question": "What are the names of counties that do not contain any cities?"
                },
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                },
                {
                    "ex_id": 4527,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id",
                    "question": "What are the names of documents that do not have any images?"
                }
            ],
            "example_quality": 0.776193760841042,
            "example_similarity": 0.5737933937113344,
            "db_id": "orchestra"
        },
        {
            "index": 857,
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25. */\nSELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n\n/* Answer the following: Find the distinct names of wines produced before the year of 2000 or after the year of 2010. */\nSELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010\n\n/* Answer the following: Give the distinct names of wines made before 2000 or after 2010. */\nSELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the record companies shared by orchestras founded before 2003 and after 2003. */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6934,
                    "db_id": "tracking_orders",
                    "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
                    "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25."
                },
                {
                    "ex_id": 6568,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
                    "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010."
                },
                {
                    "ex_id": 6569,
                    "db_id": "wine_1",
                    "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
                    "question": "Give the distinct names of wines made before 2000 or after 2010."
                }
            ],
            "example_quality": 0.7758009564988242,
            "example_similarity": 0.5736205067765695,
            "db_id": "orchestra"
        },
        {
            "index": 858,
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the denominations used by both schools founded before 1890 and schools founded  after 1900? */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Answer the following: What are the invoice numbers created before 1989-09-03 or after 2007-12-25? */\nSELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n\n/* Answer the following: What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25? */\nSELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4896,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
                },
                {
                    "ex_id": 6935,
                    "db_id": "tracking_orders",
                    "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
                    "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?"
                },
                {
                    "ex_id": 6937,
                    "db_id": "tracking_orders",
                    "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
                    "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?"
                }
            ],
            "example_quality": 0.775631068006444,
            "example_similarity": 0.5735332892614312,
            "db_id": "orchestra"
        },
        {
            "index": 859,
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of companies whose industry is \"Banking\" or \"Conglomerate\", */\nSELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"\n\n/* Answer the following: Find the number of clubs where \"Tracy Kim\" is a member. */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"\n\n/* Answer the following: Find the number of members of club \"Pen and Paper Gaming\". */\nSELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Find the number of orchestras whose record format is \"CD\" or \"DVD\". */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4580,
                    "db_id": "company_office",
                    "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
                    "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\","
                },
                {
                    "ex_id": 4269,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
                    "question": "Find the number of clubs where \"Tracy Kim\" is a member."
                },
                {
                    "ex_id": 4265,
                    "db_id": "club_1",
                    "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
                    "question": "Find the number of members of club \"Pen and Paper Gaming\"."
                }
            ],
            "example_quality": 0.7758922658318148,
            "example_similarity": 0.573647496639358,
            "db_id": "orchestra"
        },
        {
            "index": 860,
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of financial transactions that the account with the name 337 has. */\nSELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"\n\n/* Answer the following: Count the number of addressed in the California district. */\nSELECT count(*) FROM address WHERE district  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of orchestras that have CD or DVD as their record format. */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 1583,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"",
                    "question": "Count the number of financial transactions that the account with the name 337 has."
                },
                {
                    "ex_id": 2938,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM address WHERE district  =  'California'",
                    "question": "Count the number of addressed in the California district."
                }
            ],
            "example_quality": 0.7761528562203824,
            "example_similarity": 0.5735504601065581,
            "db_id": "orchestra"
        },
        {
            "index": 861,
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the company that produced more than one phone model. */\nSELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;\n\n/* Answer the following: List the clubs that have at least a member with advisor \"1121\". */\nSELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121\n\n/* Answer the following: Find the name of physicians who are in charge of more than one patient. */\nSELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the years in which orchestras that have given more than one performance are founded. */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1035,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
                    "question": "List the name of the company that produced more than one phone model."
                },
                {
                    "ex_id": 4313,
                    "db_id": "club_1",
                    "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121",
                    "question": "List the clubs that have at least a member with advisor \"1121\"."
                },
                {
                    "ex_id": 3931,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
                    "question": "Find the name of physicians who are in charge of more than one patient."
                }
            ],
            "example_quality": 0.7761466779127321,
            "example_similarity": 0.5733692508968788,
            "db_id": "orchestra"
        },
        {
            "index": 862,
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the carriers of devices that are in stock in more than a single shop? */\nSELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1\n\n/* Answer the following: What are the names of shops that have more than a single kind of device in stock? */\nSELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1\n\n/* Answer the following: What are the official names of cities that have hosted more than one competition? */\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are years of founding for orchestras that have had more than a single performance? */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5090,
                    "db_id": "device",
                    "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1",
                    "question": "What are the carriers of devices that are in stock in more than a single shop?"
                },
                {
                    "ex_id": 5072,
                    "db_id": "device",
                    "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1",
                    "question": "What are the names of shops that have more than a single kind of device in stock?"
                },
                {
                    "ex_id": 38,
                    "db_id": "farm",
                    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
                    "question": "What are the official names of cities that have hosted more than one competition?"
                }
            ],
            "example_quality": 0.7764063685416036,
            "example_similarity": 0.5733802154411793,
            "db_id": "orchestra"
        },
        {
            "index": 863,
            "question": "How many high schoolers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customer cards are there? */\nSELECT count(*) FROM Customers_cards\n\n/* Answer the following: How many body builders are there? */\nSELECT count(*) FROM body_builder\n\n/* Answer the following: How many CSU campuses are there? */\nSELECT count(*) FROM campuses\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there? */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 699,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(*) FROM Customers_cards",
                    "question": "How many customer cards are there?"
                },
                {
                    "ex_id": 1151,
                    "db_id": "body_builder",
                    "query": "SELECT count(*) FROM body_builder",
                    "question": "How many body builders are there?"
                },
                {
                    "ex_id": 2393,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM campuses",
                    "question": "How many CSU campuses are there?"
                }
            ],
            "example_quality": 0.776665457338195,
            "example_similarity": 0.5738745604986055,
            "db_id": "network_1"
        },
        {
            "index": 864,
            "question": "Count the number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of party events. */\nSELECT count(*) FROM party_events\n\n/* Answer the following: Count the number of book clubs. */\nSELECT count(*) FROM book_club\n\n/* Answer the following: Count the number of documents with expenses. */\nSELECT count(*) FROM Documents_with_expenses\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers. */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2071,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM party_events",
                    "question": "Count the number of party events."
                },
                {
                    "ex_id": 6964,
                    "db_id": "culture_company",
                    "query": "SELECT count(*) FROM book_club",
                    "question": "Count the number of book clubs."
                },
                {
                    "ex_id": 6447,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT count(*) FROM Documents_with_expenses",
                    "question": "Count the number of documents with expenses."
                }
            ],
            "example_quality": 0.7769239463922017,
            "example_similarity": 0.5743195359301272,
            "db_id": "network_1"
        },
        {
            "index": 865,
            "question": "Show the names and grades of each high schooler.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the years and official names of the cities of each competition. */\nSELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID\n\n/* Answer the following: Show the name and date for each race and its track name. */\nSELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id\n\n/* Answer the following: show the train name and station name for each train. */\nSELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names and grades of each high schooler. */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 36,
                    "db_id": "farm",
                    "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID",
                    "question": "Give the years and official names of the cities of each competition."
                },
                {
                    "ex_id": 784,
                    "db_id": "race_track",
                    "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
                    "question": "Show the name and date for each race and its track name."
                },
                {
                    "ex_id": 6614,
                    "db_id": "train_station",
                    "query": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
                    "question": "show the train name and station name for each train."
                }
            ],
            "example_quality": 0.7771818377836558,
            "example_similarity": 0.5744400583493656,
            "db_id": "network_1"
        },
        {
            "index": 866,
            "question": "What are the names and grades for each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the team and starting year for each technician? */\nSELECT Team ,  Starting_Year FROM technician\n\n/* Answer the following: What are the numbers of races for each constructor id? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Answer the following: What are the dates of ceremony and results for each music festival? */\nSELECT Date_of_ceremony ,  RESULT FROM music_festival\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names and grades for each high schooler? */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2239,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  Starting_Year FROM technician",
                    "question": "What is the team and starting year for each technician?"
                },
                {
                    "ex_id": 2190,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "What are the numbers of races for each constructor id?"
                },
                {
                    "ex_id": 6155,
                    "db_id": "music_4",
                    "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
                    "question": "What are the dates of ceremony and results for each music festival?"
                }
            ],
            "example_quality": 0.777182525936074,
            "example_similarity": 0.5747439460852288,
            "db_id": "network_1"
        },
        {
            "index": 867,
            "question": "Show all the grades of the high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all date and share count of transactions. */\nSELECT date_of_transaction ,  share_count FROM TRANSACTIONS\n\n/* Answer the following: Show all calendar dates and day Numbers. */\nSELECT calendar_date ,  day_Number FROM Ref_calendar\n\n/* Answer the following: Show all account ids and account details. */\nSELECT account_id ,  account_details FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show all the grades of the high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5849,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS",
                    "question": "Show all date and share count of transactions."
                },
                {
                    "ex_id": 4163,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar",
                    "question": "Show all calendar dates and day Numbers."
                },
                {
                    "ex_id": 6388,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT account_id ,  account_details FROM Accounts",
                    "question": "Show all account ids and account details."
                }
            ],
            "example_quality": 0.7774395241760554,
            "example_similarity": 0.574745115208265,
            "db_id": "network_1"
        },
        {
            "index": 868,
            "question": "What is the grade of each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the order date of each booking? */\nSELECT Order_Date FROM BOOKINGS\n\n/* Answer the following: What are the numbers of races for each constructor id? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Answer the following: What are the names and capitals of each country? */\nSELECT Country_name ,  Capital FROM country\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the grade of each high schooler? */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5094,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Order_Date FROM BOOKINGS",
                    "question": "What is the order date of each booking?"
                },
                {
                    "ex_id": 2190,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "What are the numbers of races for each constructor id?"
                },
                {
                    "ex_id": 1056,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  Capital FROM country",
                    "question": "What are the names and capitals of each country?"
                }
            ],
            "example_quality": 0.777439913869145,
            "example_similarity": 0.5750022980225179,
            "db_id": "network_1"
        },
        {
            "index": 869,
            "question": "What grade is Kyle in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What campuses are located in Chico? */\nSELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"\n\n/* Answer the following: What is the address of the restaurant Subway? */\nSELECT Address FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Answer the following: What is the rating of the restaurant Subway? */\nSELECT Rating FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What grade is Kyle in? */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2328,
                    "db_id": "csu_1",
                    "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
                    "question": "What campuses are located in Chico?"
                },
                {
                    "ex_id": 2822,
                    "db_id": "restaurant_1",
                    "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the address of the restaurant Subway?"
                },
                {
                    "ex_id": 2823,
                    "db_id": "restaurant_1",
                    "query": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the rating of the restaurant Subway?"
                }
            ],
            "example_quality": 0.7776960244400666,
            "example_similarity": 0.5749639371118668,
            "db_id": "network_1"
        },
        {
            "index": 870,
            "question": "Return the grade for the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the types of film market estimations in 1995. */\nSELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995\n\n/* Answer the following: Return the positions of players on the team Ryley Goldner. */\nSELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"\n\n/* Answer the following: Return the famous titles of the artist called \"Triumfall\". */\nSELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade for the high schooler named Kyle. */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4122,
                    "db_id": "film_rank",
                    "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995",
                    "question": "Return the types of film market estimations in 1995."
                },
                {
                    "ex_id": 1086,
                    "db_id": "match_season",
                    "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"",
                    "question": "Return the positions of players on the team Ryley Goldner."
                },
                {
                    "ex_id": 6151,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
                    "question": "Return the famous titles of the artist called \"Triumfall\"."
                }
            ],
            "example_quality": 0.777951546251055,
            "example_similarity": 0.5750647813366789,
            "db_id": "network_1"
        },
        {
            "index": 871,
            "question": "Show the names of all high schoolers in grade 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the movie titles and book titles for all companies in China. */\nSELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'\n\n/* Answer the following: Show the first name and last name for all the instructors. */\nSELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"\n\n/* Answer the following: Show all company names with a movie directed in year 1999. */\nSELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all high schoolers in grade 10. */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6997,
                    "db_id": "culture_company",
                    "query": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
                    "question": "Show the movie titles and book titles for all companies in China."
                },
                {
                    "ex_id": 6734,
                    "db_id": "activity_1",
                    "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
                    "question": "Show the first name and last name for all the instructors."
                },
                {
                    "ex_id": 6999,
                    "db_id": "culture_company",
                    "query": "SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id WHERE T1.year  =  1999",
                    "question": "Show all company names with a movie directed in year 1999."
                }
            ],
            "example_quality": 0.778206481329986,
            "example_similarity": 0.5751699499765527,
            "db_id": "network_1"
        },
        {
            "index": 872,
            "question": "What are the names of all high schoolers in grade 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students in Smith Hall? */\nSELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'\n\n/* Answer the following: What is the name of all tracks in the Rock genre? */\nSELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";\n\n/* Answer the following: What is the name of all tracks in the album named Balls to the Wall? */\nSELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of all high schoolers in grade 10? */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5744,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
                    "question": "What are the first names of all students in Smith Hall?"
                },
                {
                    "ex_id": 623,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";",
                    "question": "What is the name of all tracks in the Rock genre?"
                },
                {
                    "ex_id": 627,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";",
                    "question": "What is the name of all tracks in the album named Balls to the Wall?"
                }
            ],
            "example_quality": 0.7784608316954333,
            "example_similarity": 0.5754130060499033,
            "db_id": "network_1"
        },
        {
            "index": 873,
            "question": "Show the ID of the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the delegate from district 1 in election. */\nSELECT Delegate FROM election WHERE District  =  1\n\n/* Answer the following: Show the lieutenant governor and comptroller from the democratic party. */\nSELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"\n\n/* Answer the following: Show the price ranges of hotels with 5 star ratings. */\nSELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ID of the high schooler named Kyle. */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2747,
                    "db_id": "election",
                    "query": "SELECT Delegate FROM election WHERE District  =  1",
                    "question": "Show the delegate from district 1 in election."
                },
                {
                    "ex_id": 2753,
                    "db_id": "election",
                    "query": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
                    "question": "Show the lieutenant governor and comptroller from the democratic party."
                },
                {
                    "ex_id": 5896,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
                    "question": "Show the price ranges of hotels with 5 star ratings."
                }
            ],
            "example_quality": 0.7787145993567214,
            "example_similarity": 0.5755493536311113,
            "db_id": "network_1"
        },
        {
            "index": 874,
            "question": "What is Kyle's id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is Nancy Edwards's address? */\nSELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";\n\n/* Answer the following: What is the address of the restaurant Subway? */\nSELECT Address FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Answer the following: What is the rating of the restaurant Subway? */\nSELECT Rating FROM Restaurant WHERE ResName = \"Subway\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is Kyle's id? */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 593,
                    "db_id": "store_1",
                    "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";",
                    "question": "What is Nancy Edwards's address?"
                },
                {
                    "ex_id": 2822,
                    "db_id": "restaurant_1",
                    "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the address of the restaurant Subway?"
                },
                {
                    "ex_id": 2823,
                    "db_id": "restaurant_1",
                    "query": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";",
                    "question": "What is the rating of the restaurant Subway?"
                }
            ],
            "example_quality": 0.7789677863139791,
            "example_similarity": 0.57559912281351,
            "db_id": "network_1"
        },
        {
            "index": 875,
            "question": "How many high schoolers are there in grade 9 or 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many international and domestic passengers are there in the airport London Heathrow? */\nSELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"\n\n/* Answer the following: How many campuses are there in Los Angeles county? */\nSELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"\n\n/* Answer the following: How many companies are in either \"Banking\" industry or \"Conglomerate\" industry? */\nSELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there in grade 9 or 10? */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4805,
                    "db_id": "aircraft",
                    "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
                    "question": "How many international and domestic passengers are there in the airport London Heathrow?"
                },
                {
                    "ex_id": 2365,
                    "db_id": "csu_1",
                    "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
                    "question": "How many campuses are there in Los Angeles county?"
                },
                {
                    "ex_id": 4581,
                    "db_id": "company_office",
                    "query": "SELECT count(*) FROM Companies WHERE Industry  =  \"Banking\" OR Industry  =  \"Conglomerate\"",
                    "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?"
                }
            ],
            "example_quality": 0.7790934104312076,
            "example_similarity": 0.5757846192408453,
            "db_id": "network_1"
        },
        {
            "index": 876,
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: Count the number of characteristics of the product named 'laurel'. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"\n\n/* Answer the following: Count the number of wines produced at Robert Biale winery. */\nSELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers in grades 9 or 10. */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                },
                {
                    "ex_id": 5566,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
                    "question": "Count the number of characteristics of the product named 'laurel'."
                },
                {
                    "ex_id": 6539,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"",
                    "question": "Count the number of wines produced at Robert Biale winery."
                }
            ],
            "example_quality": 0.7793455869033181,
            "example_similarity": 0.5758713784817643,
            "db_id": "network_1"
        },
        {
            "index": 877,
            "question": "Show the number of high schoolers for each grade.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of customers for each gender. */\nSELECT gender ,  count(*) FROM Customers GROUP BY gender\n\n/* Answer the following: Find the number of medications prescribed for each brand. */\nSELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand\n\n/* Answer the following: Find the number of phones for each accreditation type. */\nSELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the number of high schoolers for each grade. */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1576,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender",
                    "question": "Show the number of customers for each gender."
                },
                {
                    "ex_id": 3945,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
                    "question": "Find the number of medications prescribed for each brand."
                },
                {
                    "ex_id": 1043,
                    "db_id": "phone_1",
                    "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
                    "question": "Find the number of phones for each accreditation type."
                }
            ],
            "example_quality": 0.7795971882865527,
            "example_similarity": 0.5761787709184493,
            "db_id": "network_1"
        },
        {
            "index": 878,
            "question": "How many high schoolers are in each grade?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students and instructors are in each department? */\nSELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name\n\n/* Answer the following: How many students are in each department? */\nSELECT count(*) ,  dept_name FROM student GROUP BY dept_name\n\n/* Answer the following: How many members are in each party? */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are in each grade? */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1456,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
                    "question": "How many students and instructors are in each department?"
                },
                {
                    "ex_id": 1412,
                    "db_id": "college_2",
                    "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
                    "question": "How many students are in each department?"
                },
                {
                    "ex_id": 2059,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "How many members are in each party?"
                }
            ],
            "example_quality": 0.7797083452275204,
            "example_similarity": 0.5765391511253675,
            "db_id": "network_1"
        },
        {
            "index": 879,
            "question": "Which grade has the most high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which month has the most happy hours? */\nSELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which college has the most authors with submissions? */\nSELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Which nationality has the most hosts? */\nSELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grade has the most high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 806,
                    "db_id": "coffee_shop",
                    "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which month has the most happy hours?"
                },
                {
                    "ex_id": 5830,
                    "db_id": "workshop_paper",
                    "query": "SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which college has the most authors with submissions?"
                },
                {
                    "ex_id": 2676,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which nationality has the most hosts?"
                }
            ],
            "example_quality": 0.779958961444554,
            "example_similarity": 0.5769313663075869,
            "db_id": "network_1"
        },
        {
            "index": 880,
            "question": "Return the grade that has the greatest number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the status of the city that has hosted the greatest number of competitions. */\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: List the software platform shared by the greatest number of devices. */\nSELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products. */\nSELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade that has the greatest number of high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 39,
                    "db_id": "farm",
                    "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the status of the city that has hosted the greatest number of competitions."
                },
                {
                    "ex_id": 5081,
                    "db_id": "device",
                    "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the software platform shared by the greatest number of devices."
                },
                {
                    "ex_id": 4775,
                    "db_id": "department_store",
                    "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
                    "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products."
                }
            ],
            "example_quality": 0.7800138749295973,
            "example_similarity": 0.5769281422582585,
            "db_id": "network_1"
        },
        {
            "index": 881,
            "question": "Show me all grades that have at least 4 students.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the buildings that have at least 10 professors. */\nSELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10\n\n/* Answer the following: Show all role codes with at least 3 employees. */\nSELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3\n\n/* Answer the following: Show all game names played by at least 1000 hours. */\nSELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show me all grades that have at least 4 students. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6740,
                    "db_id": "activity_1",
                    "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
                    "question": "Show all the buildings that have at least 10 professors."
                },
                {
                    "ex_id": 4209,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3",
                    "question": "Show all role codes with at least 3 employees."
                },
                {
                    "ex_id": 6046,
                    "db_id": "game_1",
                    "query": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid HAVING sum(hours_played)  >=  1000",
                    "question": "Show all game names played by at least 1000 hours."
                }
            ],
            "example_quality": 0.7801658329477124,
            "example_similarity": 0.5770376246999428,
            "db_id": "network_1"
        },
        {
            "index": 882,
            "question": "Which grades have 4 or more high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which locations have 2 or more cinemas with capacity over 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Answer the following: What are the names of regions with two or more storms? */\nSELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n\n/* Answer the following: Which committees have delegates from the Democratic party? */\nSELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grades have 4 or more high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1945,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Which locations have 2 or more cinemas with capacity over 300?"
                },
                {
                    "ex_id": 2730,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
                    "question": "What are the names of regions with two or more storms?"
                },
                {
                    "ex_id": 2774,
                    "db_id": "election",
                    "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"",
                    "question": "Which committees have delegates from the Democratic party?"
                }
            ],
            "example_quality": 0.7801158842834985,
            "example_similarity": 0.5770962984574122,
            "db_id": "network_1"
        },
        {
            "index": 883,
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the invoice number and the number of transactions for each invoice. */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Answer the following: Show the order ids and the number of invoices for each order. */\nSELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\n\n/* Answer the following: display the department name and number of employees in each of the department. */\nSELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the student IDs and numbers of friends corresponding to each. */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1600,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "Show the invoice number and the number of transactions for each invoice."
                },
                {
                    "ex_id": 1608,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
                    "question": "Show the order ids and the number of invoices for each order."
                },
                {
                    "ex_id": 3464,
                    "db_id": "hr_1",
                    "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
                    "question": "display the department name and number of employees in each of the department."
                }
            ],
            "example_quality": 0.780364903667096,
            "example_similarity": 0.5770352020244459,
            "db_id": "network_1"
        },
        {
            "index": 884,
            "question": "How many friends does each student have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many followers does each user have? */\nSELECT count(*) FROM follows\n\n/* Answer the following: How many students does each advisor have? */\nSELECT advisor ,  count(*) FROM Student GROUP BY advisor\n\n/* Answer the following: How many students does each advisor have? */\nSELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does each student have? */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 278,
                    "db_id": "twitter_1",
                    "query": "SELECT count(*) FROM follows",
                    "question": "How many followers does each user have?"
                },
                {
                    "ex_id": 501,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor",
                    "question": "How many students does each advisor have?"
                },
                {
                    "ex_id": 5502,
                    "db_id": "voter_2",
                    "query": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
                    "question": "How many students does each advisor have?"
                }
            ],
            "example_quality": 0.7804562455307205,
            "example_similarity": 0.5775136689904816,
            "db_id": "network_1"
        },
        {
            "index": 885,
            "question": "Show the names of high school students and their corresponding number of friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the grade number and classroom number of each class in the list? */\nSELECT DISTINCT classroom ,  grade FROM list\n\n/* Answer the following: Find the number of students taught by the teacher KAWA GORDON. */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"\n\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high school students and their corresponding number of friends. */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4038,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT classroom ,  grade FROM list",
                    "question": "What are the grade number and classroom number of each class in the list?"
                },
                {
                    "ex_id": 4070,
                    "db_id": "student_1",
                    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
                    "question": "Find the number of students taught by the teacher KAWA GORDON."
                },
                {
                    "ex_id": 1002,
                    "db_id": "university_basketball",
                    "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
                    "question": "Find the total student enrollment for different affiliation type schools."
                }
            ],
            "example_quality": 0.7802407510044073,
            "example_similarity": 0.5772138806152807,
            "db_id": "network_1"
        },
        {
            "index": 886,
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers with accounts, and how many checking accounts do each of them have? */\nSELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of the technicians  and how many machines are they assigned to repair? */\nSELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\n\n/* Answer the following: What are the allergy types and how many allergies correspond to each one? */\nSELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of the high schoolers and how many friends does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1806,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?"
                },
                {
                    "ex_id": 2259,
                    "db_id": "machine_repair",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
                    "question": "What are the names of the technicians  and how many machines are they assigned to repair?"
                },
                {
                    "ex_id": 455,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype",
                    "question": "What are the allergy types and how many allergies correspond to each one?"
                }
            ],
            "example_quality": 0.780488786274154,
            "example_similarity": 0.5772641700671012,
            "db_id": "network_1"
        },
        {
            "index": 887,
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of member in charge of greatest number of events? */\nSELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1603,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
                },
                {
                    "ex_id": 783,
                    "db_id": "race_track",
                    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the track that has had the greatest number of races?"
                },
                {
                    "ex_id": 2078,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of member in charge of greatest number of events?"
                }
            ],
            "example_quality": 0.7807362622760996,
            "example_similarity": 0.5773782478668578,
            "db_id": "network_1"
        },
        {
            "index": 888,
            "question": "Return the name of the high school student with the most friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which teacher teaches the most students? Give me the first name and last name of the teacher. */\nSELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Find the total student enrollment for different affiliation type schools. */\nSELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation\n\n/* Answer the following: Find the states where have some college students in tryout and their decisions are yes. */\nSELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the name of the high school student with the most friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4094,
                    "db_id": "student_1",
                    "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher."
                },
                {
                    "ex_id": 1002,
                    "db_id": "university_basketball",
                    "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation",
                    "question": "Find the total student enrollment for different affiliation type schools."
                },
                {
                    "ex_id": 4997,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "Find the states where have some college students in tryout and their decisions are yes."
                }
            ],
            "example_quality": 0.7805452429617246,
            "example_similarity": 0.5770953793123904,
            "db_id": "network_1"
        },
        {
            "index": 889,
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location codes with at least 3 documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3\n\n/* Answer the following: Show the region name with at least two storms. */\nSELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n\n/* Answer the following: Find the name of the swimmer who has at least 2 records. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have at least 3 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4231,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
                    "question": "Show the location codes with at least 3 documents."
                },
                {
                    "ex_id": 2729,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
                    "question": "Show the region name with at least two storms."
                },
                {
                    "ex_id": 5625,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
                    "question": "Find the name of the swimmer who has at least 2 records."
                }
            ],
            "example_quality": 0.7807920987064245,
            "example_similarity": 0.5771626564581637,
            "db_id": "network_1"
        },
        {
            "index": 890,
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of students who have taken Statistics courses? */\nSELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\n\n/* Answer the following: What are the names of regions with two or more storms? */\nSELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have 3 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                },
                {
                    "ex_id": 1462,
                    "db_id": "college_2",
                    "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
                    "question": "What are the names of students who have taken Statistics courses?"
                },
                {
                    "ex_id": 2730,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
                    "question": "What are the names of regions with two or more storms?"
                }
            ],
            "example_quality": 0.7807887118289768,
            "example_similarity": 0.5774344373150058,
            "db_id": "network_1"
        },
        {
            "index": 891,
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the first name and last name for all the instructors. */\nSELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"\n\n/* Answer the following: Show the country name and capital of all countries. */\nSELECT Country_name ,  Capital FROM country\n\n/* Answer the following: Show the county name and population of all counties. */\nSELECT County_name ,  Population FROM county\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all of the high schooler Kyle's friends. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6734,
                    "db_id": "activity_1",
                    "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
                    "question": "Show the first name and last name for all the instructors."
                },
                {
                    "ex_id": 1055,
                    "db_id": "match_season",
                    "query": "SELECT Country_name ,  Capital FROM country",
                    "question": "Show the country name and capital of all countries."
                },
                {
                    "ex_id": 2737,
                    "db_id": "election",
                    "query": "SELECT County_name ,  Population FROM county",
                    "question": "Show the county name and population of all counties."
                }
            ],
            "example_quality": 0.7807853325539473,
            "example_similarity": 0.5775167708879336,
            "db_id": "network_1"
        },
        {
            "index": 892,
            "question": "Return the names of friends of the high school student Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and college of students whose decisions are yes in the tryout. */\nSELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'\n\n/* Answer the following: Find the states where have some college students in tryout and their decisions are yes. */\nSELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'\n\n/* Answer the following: Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers. */\nSELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the names of friends of the high school student Kyle. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4999,
                    "db_id": "soccer_2",
                    "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
                    "question": "Find the name and college of students whose decisions are yes in the tryout."
                },
                {
                    "ex_id": 4997,
                    "db_id": "soccer_2",
                    "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
                    "question": "Find the states where have some college students in tryout and their decisions are yes."
                },
                {
                    "ex_id": 4064,
                    "db_id": "student_1",
                    "query": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
                    "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers."
                }
            ],
            "example_quality": 0.7809777043250539,
            "example_similarity": 0.577297465955226,
            "db_id": "network_1"
        },
        {
            "index": 893,
            "question": "How many friends does the high school student Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many teachers does the student named CHRISSY NABOZNY have? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"\n\n/* Answer the following: How many teachers does the student named MADLOCK RAY have? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"\n\n/* Answer the following: How many students are taught by teacher TARRING LEIA? */\nSELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does the high school student Kyle have? */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4073,
                    "db_id": "student_1",
                    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
                    "question": "How many teachers does the student named CHRISSY NABOZNY have?"
                },
                {
                    "ex_id": 4075,
                    "db_id": "student_1",
                    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
                    "question": "How many teachers does the student named MADLOCK RAY have?"
                },
                {
                    "ex_id": 4072,
                    "db_id": "student_1",
                    "query": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
                    "question": "How many students are taught by teacher TARRING LEIA?"
                }
            ],
            "example_quality": 0.7812229700536932,
            "example_similarity": 0.5773171460547967,
            "db_id": "network_1"
        },
        {
            "index": 894,
            "question": "Count the number of friends Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of characteristics the product 'sesame' has. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"\n\n/* Answer the following: Count the number of cities in Australia. */\nSELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'\n\n/* Answer the following: Count the number of appelations in Napa County. */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of friends Kyle has. */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5556,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
                    "question": "Count the number of characteristics the product 'sesame' has."
                },
                {
                    "ex_id": 2942,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
                    "question": "Count the number of cities in Australia."
                },
                {
                    "ex_id": 6541,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "Count the number of appelations in Napa County."
                }
            ],
            "example_quality": 0.7814676870894274,
            "example_similarity": 0.5774709465791368,
            "db_id": "network_1"
        },
        {
            "index": 895,
            "question": "Show ids of all students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all track names that have had no races. */\nSELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)\n\n/* Answer the following: Find the titles of all movies that have no ratings. */\nSELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)\n\n/* Answer the following: Show all member names who are not in charge of any event. */\nSELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show ids of all students who do not have any friends. */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 776,
                    "db_id": "race_track",
                    "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)",
                    "question": "Show all track names that have had no races."
                },
                {
                    "ex_id": 2459,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)",
                    "question": "Find the titles of all movies that have no ratings."
                },
                {
                    "ex_id": 2074,
                    "db_id": "party_people",
                    "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id",
                    "question": "Show all member names who are not in charge of any event."
                }
            ],
            "example_quality": 0.7813642470914379,
            "example_similarity": 0.5774107679920216,
            "db_id": "network_1"
        },
        {
            "index": 896,
            "question": "What are the ids of high school students who do not have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER? */\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n\n/* Answer the following: What are the names of the schools with some players in the mid position but no goalies? */\nSELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'\n\n/* Answer the following: Find the last names of the students in third grade that are not taught by COVIN JEROME. */\nSELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of high school students who do not have friends? */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4078,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
                    "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?"
                },
                {
                    "ex_id": 5034,
                    "db_id": "soccer_2",
                    "query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
                    "question": "What are the names of the schools with some players in the mid position but no goalies?"
                },
                {
                    "ex_id": 4079,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
                    "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME."
                }
            ],
            "example_quality": 0.7811580036198739,
            "example_similarity": 0.5771780426805225,
            "db_id": "network_1"
        },
        {
            "index": 897,
            "question": "Show names of all high school students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of enrollment of schools that do not have any goalie player? */\nSELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")\n\n/* Answer the following: Show all artist names who didn't have an exhibition in 2004. */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names. */\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show names of all high school students who do not have any friends. */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5045,
                    "db_id": "soccer_2",
                    "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
                    "question": "What is the total number of enrollment of schools that do not have any goalie player?"
                },
                {
                    "ex_id": 1682,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
                    "question": "Show all artist names who didn't have an exhibition in 2004."
                },
                {
                    "ex_id": 4077,
                    "db_id": "student_1",
                    "query": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
                    "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names."
                }
            ],
            "example_quality": 0.7809787263809959,
            "example_similarity": 0.5769597551499434,
            "db_id": "network_1"
        },
        {
            "index": 898,
            "question": "What are the names of students who have no friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: What are the names of the people who have no friends who are students? */\nSELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n\n/* Answer the following: What are the famous titles of artists who do not have any volumes? */\nSELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have no friends? */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 270,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
                    "question": "What are the names of musicals who have no actors?"
                },
                {
                    "ex_id": 4450,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
                    "question": "What are the names of the people who have no friends who are students?"
                },
                {
                    "ex_id": 6191,
                    "db_id": "music_4",
                    "query": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
                    "question": "What are the famous titles of artists who do not have any volumes?"
                }
            ],
            "example_quality": 0.7808086864053855,
            "example_similarity": 0.5772081295874155,
            "db_id": "network_1"
        },
        {
            "index": 899,
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of scientists who are assigned to some project. */\nSELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn\n\n/* Answer the following: What are the login names used both by some course authors and some students? */\nSELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students\n\n/* Answer the following: What are the personal names used both by some course authors and some students? */\nSELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ids of high schoolers who have friends and are also liked by someone else. */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6504,
                    "db_id": "scientist_1",
                    "query": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
                    "question": "Find the name of scientists who are assigned to some project."
                },
                {
                    "ex_id": 3848,
                    "db_id": "e_learning",
                    "query": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
                    "question": "What are the login names used both by some course authors and some students?"
                },
                {
                    "ex_id": 3850,
                    "db_id": "e_learning",
                    "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
                    "question": "What are the personal names used both by some course authors and some students?"
                }
            ],
            "example_quality": 0.7808465130220811,
            "example_similarity": 0.5770084106654201,
            "db_id": "network_1"
        },
        {
            "index": 900,
            "question": "What are the ids of students who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the salaries and manager ids for employees who have managers? */\nSELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\n\n/* Answer the following: What are the names of wrestlers and the elimination moves? */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: What are the lengths and heights of roller coasters? */\nSELECT LENGTH ,  Height FROM roller_coaster\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of students who both have friends and are liked? */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3435,
                    "db_id": "hr_1",
                    "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
                    "question": "What are the salaries and manager ids for employees who have managers?"
                },
                {
                    "ex_id": 1857,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "What are the names of wrestlers and the elimination moves?"
                },
                {
                    "ex_id": 6206,
                    "db_id": "roller_coaster",
                    "query": "SELECT LENGTH ,  Height FROM roller_coaster",
                    "question": "What are the lengths and heights of roller coasters?"
                }
            ],
            "example_quality": 0.7804933090775709,
            "example_similarity": 0.5771333836835519,
            "db_id": "network_1"
        },
        {
            "index": 901,
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all instructors who have taught a course, as well as the corresponding course id? */\nSELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID\n\n/* Answer the following: What are the names and ages of every person who is a friend of both Dan and Alice? */\nSELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'\n\n/* Answer the following: Find the distinct last names of all the students who have president votes and whose advisor is 8741. */\nSELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show name of all students who have some friends and also are liked by someone else. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1470,
                    "db_id": "college_2",
                    "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID",
                    "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?"
                },
                {
                    "ex_id": 4442,
                    "db_id": "network_2",
                    "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
                    "question": "What are the names and ages of every person who is a friend of both Dan and Alice?"
                },
                {
                    "ex_id": 5499,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
                    "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741."
                }
            ],
            "example_quality": 0.780303734494451,
            "example_similarity": 0.5768556457430656,
            "db_id": "network_1"
        },
        {
            "index": 902,
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the salaries and manager ids for employees who have managers? */\nSELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"\n\n/* Answer the following: What are the low and high estimates of film markets? */\nSELECT Low_Estimate ,  High_Estimate FROM film_market_estimation\n\n/* Answer the following: What are the states, account types, and credit scores for customers who have 0 loans? */\nSELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who both have friends and are liked? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3435,
                    "db_id": "hr_1",
                    "query": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
                    "question": "What are the salaries and manager ids for employees who have managers?"
                },
                {
                    "ex_id": 4119,
                    "db_id": "film_rank",
                    "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
                    "question": "What are the low and high estimates of film markets?"
                },
                {
                    "ex_id": 3026,
                    "db_id": "loan_1",
                    "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
                    "question": "What are the states, account types, and credit scores for customers who have 0 loans?"
                }
            ],
            "example_quality": 0.7799724459656121,
            "example_similarity": 0.5769754517177635,
            "db_id": "network_1"
        },
        {
            "index": 903,
            "question": "Count the number of likes for each student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of voting records for each election cycle. */\nSELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle\n\n/* Answer the following: Count the number of accounts corresponding to each customer id. */\nSELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id\n\n/* Answer the following: Count the number of financial transactions that correspond to each account id. */\nSELECT count(*) ,  account_id FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of likes for each student id. */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5508,
                    "db_id": "voter_2",
                    "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
                    "question": "Count the number of voting records for each election cycle."
                },
                {
                    "ex_id": 1567,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id",
                    "question": "Count the number of accounts corresponding to each customer id."
                },
                {
                    "ex_id": 1581,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) ,  account_id FROM Financial_transactions",
                    "question": "Count the number of financial transactions that correspond to each account id."
                }
            ],
            "example_quality": 0.7801238238401426,
            "example_similarity": 0.5771862386121137,
            "db_id": "network_1"
        },
        {
            "index": 904,
            "question": "How many likes correspond to each student id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many transactions correspond to each invoice number? */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Answer the following: How many invoices correspond to each order id? */\nSELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\n\n/* Answer the following: How many counties correspond to each police force? */\nSELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes correspond to each student id? */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1601,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "How many transactions correspond to each invoice number?"
                },
                {
                    "ex_id": 1609,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
                    "question": "How many invoices correspond to each order id?"
                },
                {
                    "ex_id": 2562,
                    "db_id": "county_public_safety",
                    "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force",
                    "question": "How many counties correspond to each police force?"
                }
            ],
            "example_quality": 0.7803670496987265,
            "example_similarity": 0.5776539529499322,
            "db_id": "network_1"
        },
        {
            "index": 905,
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the race class and number of races in each class. */\nSELECT CLASS ,  count(*) FROM race GROUP BY CLASS\n\n/* Answer the following: Show the invoice number and the number of transactions for each invoice. */\nSELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number\n\n/* Answer the following: Show the order ids and the number of invoices for each order. */\nSELECT order_id ,  count(*) FROM Invoices GROUP BY order_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have likes, and numbers of likes for each. */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 768,
                    "db_id": "race_track",
                    "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS",
                    "question": "Show the race class and number of races in each class."
                },
                {
                    "ex_id": 1600,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number",
                    "question": "Show the invoice number and the number of transactions for each invoice."
                },
                {
                    "ex_id": 1608,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id",
                    "question": "Show the order ids and the number of invoices for each order."
                }
            ],
            "example_quality": 0.7806097380416008,
            "example_similarity": 0.5776359966580228,
            "db_id": "network_1"
        },
        {
            "index": 906,
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers with accounts, and how many checking accounts do each of them have? */\nSELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Answer the following: What are the names of the technicians  and how many machines are they assigned to repair? */\nSELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name\n\n/* Answer the following: What are the different budget type codes, and how many documents are there for each? */\nSELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have likes, and how many likes does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1806,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?"
                },
                {
                    "ex_id": 2259,
                    "db_id": "machine_repair",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
                    "question": "What are the names of the technicians  and how many machines are they assigned to repair?"
                },
                {
                    "ex_id": 6455,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
                    "question": "What are the different budget type codes, and how many documents are there for each?"
                }
            ],
            "example_quality": 0.7808518906486189,
            "example_similarity": 0.5776462842132999,
            "db_id": "network_1"
        },
        {
            "index": 907,
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of the track that has had the greatest number of races? */\nSELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the name of member in charge of greatest number of events? */\nSELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1603,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
                },
                {
                    "ex_id": 783,
                    "db_id": "race_track",
                    "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the track that has had the greatest number of races?"
                },
                {
                    "ex_id": 2078,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of member in charge of greatest number of events?"
                }
            ],
            "example_quality": 0.7810935092917846,
            "example_similarity": 0.5777574252212799,
            "db_id": "network_1"
        },
        {
            "index": 908,
            "question": "Give the name of the student with the most likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the advisor with the most students. */\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the denomination of the school that has the most players. */\nSELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Give the state that has the most customers. */\nSELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Give the name of the student with the most likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 503,
                    "db_id": "allergy_1",
                    "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1",
                    "question": "Give the advisor with the most students."
                },
                {
                    "ex_id": 4883,
                    "db_id": "school_player",
                    "query": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the denomination of the school that has the most players."
                },
                {
                    "ex_id": 5814,
                    "db_id": "customer_complaints",
                    "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1",
                    "question": "Give the state that has the most customers."
                }
            ],
            "example_quality": 0.7812914066534957,
            "example_similarity": 0.5778217861364516,
            "db_id": "network_1"
        },
        {
            "index": 909,
            "question": "Show the names of students who have at least 2 likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the swimmer who has at least 2 records. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2\n\n/* Answer the following: Show the location codes with at least 3 documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3\n\n/* Answer the following: Show the region name with at least two storms. */\nSELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have at least 2 likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5625,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
                    "question": "Find the name of the swimmer who has at least 2 records."
                },
                {
                    "ex_id": 4231,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
                    "question": "Show the location codes with at least 3 documents."
                },
                {
                    "ex_id": 2729,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
                    "question": "Show the region name with at least two storms."
                }
            ],
            "example_quality": 0.7815320101665282,
            "example_similarity": 0.5779383305782825,
            "db_id": "network_1"
        },
        {
            "index": 910,
            "question": "What are the names of students who have 2 or more likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of musicals who have at 3 or more actors? */\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3\n\n/* Answer the following: What are the names of regions with two or more storms? */\nSELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2\n\n/* Answer the following: What are the names of students who have taken Statistics courses? */\nSELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have 2 or more likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 260,
                    "db_id": "musical",
                    "query": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
                    "question": "What are the names of musicals who have at 3 or more actors?"
                },
                {
                    "ex_id": 2730,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
                    "question": "What are the names of regions with two or more storms?"
                },
                {
                    "ex_id": 1462,
                    "db_id": "college_2",
                    "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
                    "question": "What are the names of students who have taken Statistics courses?"
                }
            ],
            "example_quality": 0.7815278846364307,
            "example_similarity": 0.5782189844274639,
            "db_id": "network_1"
        },
        {
            "index": 911,
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of playlist which has number of tracks greater than 100. */\nSELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;\n\n/* Answer the following: List title of albums have the number of tracks greater than 10. */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;\n\n/* Answer the following: Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described */\nSELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 638,
                    "db_id": "store_1",
                    "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;",
                    "question": "List the name of playlist which has number of tracks greater than 100."
                },
                {
                    "ex_id": 628,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
                    "question": "List title of albums have the number of tracks greater than 10."
                },
                {
                    "ex_id": 4335,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'",
                    "question": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described"
                }
            ],
            "example_quality": 0.7813668264991445,
            "example_similarity": 0.5780530553474726,
            "db_id": "network_1"
        },
        {
            "index": 912,
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which locations have 2 or more cinemas with capacity over 300? */\nSELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2\n\n/* Answer the following: What are the names of mountains that have a height of over 5000 or a prominence of over 1000? */\nSELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000\n\n/* Answer the following: What are the response received dates for the documents described as 'Regular' or granted with more than 100? */\nSELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1945,
                    "db_id": "cinema",
                    "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
                    "question": "Which locations have 2 or more cinemas with capacity over 300?"
                },
                {
                    "ex_id": 1150,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000",
                    "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?"
                },
                {
                    "ex_id": 4337,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
                    "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?"
                }
            ],
            "example_quality": 0.7811496845110241,
            "example_similarity": 0.5779758986606021,
            "db_id": "network_1"
        },
        {
            "index": 913,
            "question": "How many likes does Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many friends does Dan have? */\nSELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'\n\n/* Answer the following: How many friends does Dan have? */\nSELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'\n\n/* Answer the following: How many airlines does Russia has? */\nSELECT count(*) FROM airlines WHERE country  =  'Russia'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes does Kyle have? */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4399,
                    "db_id": "network_2",
                    "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
                    "question": "How many friends does Dan have?"
                },
                {
                    "ex_id": 4400,
                    "db_id": "network_2",
                    "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
                    "question": "How many friends does Dan have?"
                },
                {
                    "ex_id": 6810,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'",
                    "question": "How many airlines does Russia has?"
                }
            ],
            "example_quality": 0.781389389128208,
            "example_similarity": 0.5783468633572133,
            "db_id": "network_1"
        },
        {
            "index": 914,
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of characteristics that the product \"flax\" has. */\nSELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"\n\n/* Answer the following: Find the number of routes with destination airports in Italy. */\nSELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'\n\n/* Answer the following: Find the number of rooms with a king bed. */\nSELECT count(*) FROM Rooms WHERE bedType  =  \"King\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the number of likes that the high schooler named Kyle has. */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5567,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
                    "question": "Find the number of characteristics that the product \"flax\" has."
                },
                {
                    "ex_id": 6870,
                    "db_id": "flight_4",
                    "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
                    "question": "Find the number of routes with destination airports in Italy."
                },
                {
                    "ex_id": 2609,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";",
                    "question": "Find the number of rooms with a king bed."
                }
            ],
            "example_quality": 0.7816285692276301,
            "example_similarity": 0.5782839382696597,
            "db_id": "network_1"
        },
        {
            "index": 915,
            "question": "Find the average grade of all students who have some friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average age of all students living in the each city. */\nSELECT avg(age) ,  city_code FROM student GROUP BY city_code\n\n/* Answer the following: Find the average elevation of all airports for each country. */\nSELECT avg(elevation) ,  country FROM airports GROUP BY country\n\n/* Answer the following: Find the average hours of all projects. */\nSELECT avg(hours) FROM projects\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the average grade of all students who have some friends. */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5687,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  city_code FROM student GROUP BY city_code",
                    "question": "Find the average age of all students living in the each city."
                },
                {
                    "ex_id": 6864,
                    "db_id": "flight_4",
                    "query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
                    "question": "Find the average elevation of all airports for each country."
                },
                {
                    "ex_id": 6478,
                    "db_id": "scientist_1",
                    "query": "SELECT avg(hours) FROM projects",
                    "question": "Find the average hours of all projects."
                }
            ],
            "example_quality": 0.7812788361541766,
            "example_similarity": 0.5783339098524338,
            "db_id": "network_1"
        },
        {
            "index": 916,
            "question": "What is the average grade of students who have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average speed of roller coasters? */\nSELECT avg(Speed) FROM roller_coaster\n\n/* Answer the following: What is the average access count of documents? */\nSELECT avg(access_count) FROM documents\n\n/* Answer the following: What is the average enrollment of schools? */\nSELECT avg(Enrollment) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the average grade of students who have friends? */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6210,
                    "db_id": "roller_coaster",
                    "query": "SELECT avg(Speed) FROM roller_coaster",
                    "question": "What is the average speed of roller coasters?"
                },
                {
                    "ex_id": 4508,
                    "db_id": "document_management",
                    "query": "SELECT avg(access_count) FROM documents",
                    "question": "What is the average access count of documents?"
                },
                {
                    "ex_id": 4869,
                    "db_id": "school_player",
                    "query": "SELECT avg(Enrollment) FROM school",
                    "question": "What is the average enrollment of schools?"
                }
            ],
            "example_quality": 0.7809035317478947,
            "example_similarity": 0.5785626706363055,
            "db_id": "network_1"
        },
        {
            "index": 917,
            "question": "Find the minimum grade of students who have no friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the swimmers who have no record. */\nSELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)\n\n/* Answer the following: Find the name of the person who has no student friends. */\nSELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n\n/* Answer the following: List the names of buildings that have no company office. */\nSELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the minimum grade of students who have no friends. */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5627,
                    "db_id": "swimming",
                    "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
                    "question": "Find the names of the swimmers who have no record."
                },
                {
                    "ex_id": 4449,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
                    "question": "Find the name of the person who has no student friends."
                },
                {
                    "ex_id": 4576,
                    "db_id": "company_office",
                    "query": "SELECT name FROM buildings WHERE id NOT IN (SELECT building_id FROM Office_locations)",
                    "question": "List the names of buildings that have no company office."
                }
            ],
            "example_quality": 0.7808526061876769,
            "example_similarity": 0.5786760588717508,
            "db_id": "network_1"
        },
        {
            "index": 918,
            "question": "What is the lowest grade of students who do not have any friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the least common faculty rank? */\nSELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What are the names of musicals who have no actors? */\nSELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)\n\n/* Answer the following: what is the least populous state */\nSELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the lowest grade of students who do not have any friends? */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4679,
                    "db_id": "college_3",
                    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the least common faculty rank?"
                },
                {
                    "ex_id": 270,
                    "db_id": "musical",
                    "query": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
                    "question": "What are the names of musicals who have no actors?"
                },
                {
                    "ex_id": 7032,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
                    "question": "what is the least populous state"
                }
            ],
            "example_quality": 0.7807397902568617,
            "example_similarity": 0.5784768837894649,
            "db_id": "network_1"
        },
        {
            "index": 919,
            "question": "Which states have both owners and professionals living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the membership card held by both members living in Hartford and ones living in Waterbury address? */\nSELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'\n\n/* Answer the following: What cities do students live in? */\nSELECT DISTINCT city_code FROM Student\n\n/* Answer the following: What are the amenities in the dorm that a student who has the last name of Smith lives in? */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which states have both owners and professionals living there? */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 797,
                    "db_id": "coffee_shop",
                    "query": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
                    "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?"
                },
                {
                    "ex_id": 469,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT city_code FROM Student",
                    "question": "What cities do students live in?"
                },
                {
                    "ex_id": 5768,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
                    "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?"
                }
            ],
            "example_quality": 0.7804677874717828,
            "example_similarity": 0.5780963553291623,
            "db_id": "dog_kennels"
        },
        {
            "index": 920,
            "question": "Find the states where both owners and professionals live.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of amenities of the dorm where the student with last name Smith is living in. */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Answer the following: Which city does staff with first name as Janessa and last name as Sawayn live? */\nSELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the states where both owners and professionals live. */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5767,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
                    "question": "Find the name of amenities of the dorm where the student with last name Smith is living in."
                },
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                },
                {
                    "ex_id": 6643,
                    "db_id": "driving_school",
                    "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";",
                    "question": "Which city does staff with first name as Janessa and last name as Sawayn live?"
                }
            ],
            "example_quality": 0.7801629311810526,
            "example_similarity": 0.5778104411549515,
            "db_id": "dog_kennels"
        },
        {
            "index": 921,
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average credit score for customers who have taken a loan? */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: What is the average weight of all players? */\nSELECT avg(weight) FROM Player\n\n/* Answer the following: What is the average age of all gymnasts? */\nSELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of the dogs who have gone through any treatments? */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3084,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "What is the average credit score for customers who have taken a loan?"
                },
                {
                    "ex_id": 1296,
                    "db_id": "soccer_1",
                    "query": "SELECT avg(weight) FROM Player",
                    "question": "What is the average weight of all players?"
                },
                {
                    "ex_id": 1757,
                    "db_id": "gymnast",
                    "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
                    "question": "What is the average age of all gymnasts?"
                }
            ],
            "example_quality": 0.7799944589430711,
            "example_similarity": 0.5777354807734852,
            "db_id": "dog_kennels"
        },
        {
            "index": 922,
            "question": "Find the average age of the dogs who went through treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average credit score of the customers who have some loan. */\nSELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)\n\n/* Answer the following: Find the average height of the players who belong to the college called 'Yale University'. */\nSELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';\n\n/* Answer the following: Find the average age of the students who have allergies with food and animal types. */\nSELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the average age of the dogs who went through treatments. */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3083,
                    "db_id": "loan_1",
                    "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
                    "question": "Find the average credit score of the customers who have some loan."
                },
                {
                    "ex_id": 3657,
                    "db_id": "baseball_1",
                    "query": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';",
                    "question": "Find the average height of the players who belong to the college called 'Yale University'."
                },
                {
                    "ex_id": 526,
                    "db_id": "allergy_1",
                    "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
                    "question": "Find the average age of the students who have allergies with food and animal types."
                }
            ],
            "example_quality": 0.7799447541792137,
            "example_similarity": 0.5777315096165444,
            "db_id": "dog_kennels"
        },
        {
            "index": 923,
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"? */\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"\n\n/* Answer the following: Return the full name and phone of the customer who has card number 4560596484842. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                },
                {
                    "ex_id": 87,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
                    "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?"
                },
                {
                    "ex_id": 705,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"",
                    "question": "Return the full name and phone of the customer who has card number 4560596484842."
                }
            ],
            "example_quality": 0.7794092932166298,
            "example_similarity": 0.5773619297338152,
            "db_id": "dog_kennels"
        },
        {
            "index": 924,
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: Give the full name and phone of the customer who has the account name 162. */\nSELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"\n\n/* Answer the following: List the id of students who registered some courses and the number of their registered courses? */\nSELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                },
                {
                    "ex_id": 675,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"",
                    "question": "Give the full name and phone of the customer who has the account name 162."
                },
                {
                    "ex_id": 80,
                    "db_id": "student_assessment",
                    "query": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
                    "question": "List the id of students who registered some courses and the number of their registered courses?"
                }
            ],
            "example_quality": 0.7789522949091906,
            "example_similarity": 0.5771030776289755,
            "db_id": "dog_kennels"
        },
        {
            "index": 925,
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the cities that do not have any branches with more than 100 members? */\nSELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100\n\n/* Answer the following: What are the names of the pilots that have not won any matches in Australia? */\nSELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')\n\n/* Answer the following: What are the official names of cities that have not hosted a farm competition? */\nSELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5436,
                    "db_id": "shop_membership",
                    "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
                    "question": "What are the cities that do not have any branches with more than 100 members?"
                },
                {
                    "ex_id": 4843,
                    "db_id": "aircraft",
                    "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')",
                    "question": "What are the names of the pilots that have not won any matches in Australia?"
                },
                {
                    "ex_id": 50,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)",
                    "question": "What are the official names of cities that have not hosted a farm competition?"
                }
            ],
            "example_quality": 0.7783962536406517,
            "example_similarity": 0.576915740707345,
            "db_id": "dog_kennels"
        },
        {
            "index": 926,
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top? */\nSELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2\n\n/* Answer the following: How many rooms whose capacity is less than 50 does the Lamberton building have? */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Answer the following: What are all the different start station names for a trip that lasted less than 100? */\nSELECT DISTINCT start_station_name FROM trip WHERE duration  <  100\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6193,
                    "db_id": "music_4",
                    "query": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
                    "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?"
                },
                {
                    "ex_id": 1357,
                    "db_id": "college_2",
                    "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
                    "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
                },
                {
                    "ex_id": 195,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
                    "question": "What are all the different start station names for a trip that lasted less than 100?"
                }
            ],
            "example_quality": 0.7777203709401316,
            "example_similarity": 0.5766686658323454,
            "db_id": "dog_kennels"
        },
        {
            "index": 927,
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the titles of films that do not have a film market estimation? */\nSELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)\n\n/* Answer the following: What are the names of tourist attraction that Alison visited but Rosalind did not visit? */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"\n\n/* Answer the following: Which organizations are not a parent organization of others? List the organization id. */\nSELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which first names are used for professionals or owners but are not used as dog names? */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4148,
                    "db_id": "film_rank",
                    "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)",
                    "question": "What are the titles of films that do not have a film market estimation?"
                },
                {
                    "ex_id": 5966,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
                    "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?"
                },
                {
                    "ex_id": 4855,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
                    "question": "Which organizations are not a parent organization of others? List the organization id."
                }
            ],
            "example_quality": 0.7775301085311286,
            "example_similarity": 0.5764634929781052,
            "db_id": "dog_kennels"
        },
        {
            "index": 928,
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the title of course that is provided by Statistics but not Psychology departments. */\nSELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'\n\n/* Answer the following: Find the product names that are colored 'white' but do not have unit of measurement \"Handful\". */\nSELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n\n/* Answer the following: Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit. */\nSELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names that are used for professionals or owners but are not used as dog names. */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1365,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
                    "question": "Find the title of course that is provided by Statistics but not Psychology departments."
                },
                {
                    "ex_id": 5589,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
                    "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\"."
                },
                {
                    "ex_id": 5967,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
                    "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit."
                }
            ],
            "example_quality": 0.7773058782896558,
            "example_similarity": 0.5763466813102018,
            "db_id": "dog_kennels"
        },
        {
            "index": 929,
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer had at least 2 policies but did not file any claims? List the customer details and id. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: What are the ids of the students who are not involved in any activity */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in\n\n/* Answer the following: List the project details of the projects which did not hire any staff for a researcher role. */\nSELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3853,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
                    "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id."
                },
                {
                    "ex_id": 6789,
                    "db_id": "activity_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                    "question": "What are the ids of the students who are not involved in any activity"
                },
                {
                    "ex_id": 4339,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT project_details FROM Projects WHERE project_id NOT IN ( SELECT project_id FROM Project_Staff WHERE role_code  =  'researcher' )",
                    "question": "List the project details of the projects which did not hire any staff for a researcher role."
                }
            ],
            "example_quality": 0.7771667878020174,
            "example_similarity": 0.5762043683389686,
            "db_id": "dog_kennels"
        },
        {
            "index": 930,
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the the customer details and id for the customers who had two or more policies but did not file any claims. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id\n\n/* Answer the following: Show the ids of the employees who don't authorize destruction for any document. */\nSELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed\n\n/* Answer the following: Find the name of students who didn't take any course from Biology department. */\nSELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3854,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id",
                    "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims."
                },
                {
                    "ex_id": 4241,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
                    "question": "Show the ids of the employees who don't authorize destruction for any document."
                },
                {
                    "ex_id": 1453,
                    "db_id": "college_2",
                    "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
                    "question": "Find the name of students who didn't take any course from Biology department."
                }
            ],
            "example_quality": 0.7770279964337071,
            "example_similarity": 0.5760779535167101,
            "db_id": "dog_kennels"
        },
        {
            "index": 931,
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and hours for the project which has the most scientists assigned to it? */\nSELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What are the first and last name of the faculty who has the most students? */\nSELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which activity has the most faculty members participating in? Find the activity name. */\nSELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner owns the most dogs? List the owner id, first name and last name. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6485,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.name ,  T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T2.project ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name and hours for the project which has the most scientists assigned to it?"
                },
                {
                    "ex_id": 6760,
                    "db_id": "activity_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
                    "question": "What are the first and last name of the faculty who has the most students?"
                },
                {
                    "ex_id": 6787,
                    "db_id": "activity_1",
                    "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which activity has the most faculty members participating in? Find the activity name."
                }
            ],
            "example_quality": 0.7772674937522532,
            "example_similarity": 0.5759919747761247,
            "db_id": "dog_kennels"
        },
        {
            "index": 932,
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name and max speed of the storm that affected the most regions. */\nSELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Show the name of the building that has the most company offices. */\nSELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Return the name and country corresponding to the artist who has had the most exhibitions. */\nSELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the owner id, first name and last name of the owner who has the most dogs. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2718,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name and max speed of the storm that affected the most regions."
                },
                {
                    "ex_id": 4566,
                    "db_id": "company_office",
                    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the name of the building that has the most company offices."
                },
                {
                    "ex_id": 1671,
                    "db_id": "theme_gallery",
                    "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name and country corresponding to the artist who has had the most exhibitions."
                }
            ],
            "example_quality": 0.7775064771280555,
            "example_similarity": 0.5760229986281957,
            "db_id": "dog_kennels"
        },
        {
            "index": 933,
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which student are enrolled in at least two courses? Give me the student ID and personal name. */\nSELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: Show the ids and names of festivals that have at least two nominations for artworks. */\nSELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2\n\n/* Answer the following: Find the the customer details and id for the customers who had more than one policy. */\nSELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3840,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
                    "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name."
                },
                {
                    "ex_id": 4612,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
                    "question": "Show the ids and names of festivals that have at least two nominations for artworks."
                },
                {
                    "ex_id": 3876,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1",
                    "question": "Find the the customer details and id for the customers who had more than one policy."
                }
            ],
            "example_quality": 0.7776973121531652,
            "example_similarity": 0.575864748970905,
            "db_id": "dog_kennels"
        },
        {
            "index": 934,
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the employee ids for employees who have held two or more jobs? */\nSELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n\n/* Answer the following: Which student are enrolled in at least two courses? Give me the student ID and personal name. */\nSELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2\n\n/* Answer the following: What are the product ids and color descriptions for products with two or more characteristics? */\nSELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the id, role, and first name of the professionals who have performed two or more treatments? */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3461,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
                    "question": "What are the employee ids for employees who have held two or more jobs?"
                },
                {
                    "ex_id": 3840,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
                    "question": "Which student are enrolled in at least two courses? Give me the student ID and personal name."
                },
                {
                    "ex_id": 5550,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
                    "question": "What are the product ids and color descriptions for products with two or more characteristics?"
                }
            ],
            "example_quality": 0.7779353235962562,
            "example_similarity": 0.5757621876377115,
            "db_id": "dog_kennels"
        },
        {
            "index": 935,
            "question": "What is the name of the breed with the most dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the department with the most credits? */\nSELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1\n\n/* Answer the following: What is the location of the party with the most hosts? */\nSELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\n\n/* Answer the following: What is the name of the airline with the most routes? */\nSELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the name of the breed with the most dogs? */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1374,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
                    "question": "What is the name of the department with the most credits?"
                },
                {
                    "ex_id": 2671,
                    "db_id": "party_host",
                    "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
                    "question": "What is the location of the party with the most hosts?"
                },
                {
                    "ex_id": 6881,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the airline with the most routes?"
                }
            ],
            "example_quality": 0.7780391360843885,
            "example_similarity": 0.5762159179183128,
            "db_id": "dog_kennels"
        },
        {
            "index": 936,
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which customer have the most policies? Give me the customer details. */\nSELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Which paper has the most authors? Give me the paper title. */\nSELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)\n\n/* Answer the following: Which party had the most hosts? Give me the party location. */\nSELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which breed do the most dogs have? Give me the breed name. */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1541,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which customer have the most policies? Give me the customer details."
                },
                {
                    "ex_id": 2914,
                    "db_id": "icfp_1",
                    "query": "SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid  =  t2.paperid WHERE t1.authorder  =  (SELECT max(authorder) FROM authorship)",
                    "question": "Which paper has the most authors? Give me the paper title."
                },
                {
                    "ex_id": 2672,
                    "db_id": "party_host",
                    "query": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
                    "question": "Which party had the most hosts? Give me the party location."
                }
            ],
            "example_quality": 0.7779259547950625,
            "example_similarity": 0.57650079102188,
            "db_id": "dog_kennels"
        },
        {
            "index": 937,
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How much in total does customer with first name as Carole and last name as Bernhard paid? */\nSELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"\n\n/* Answer the following: Show the names of customers having an order with shipping method FedEx and order status Paid. */\nSELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'\n\n/* Answer the following: Tell me the first and last name of the student who has the most activities. */\nSELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6691,
                    "db_id": "driving_school",
                    "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"",
                    "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?"
                },
                {
                    "ex_id": 4635,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
                    "question": "Show the names of customers having an order with shipping method FedEx and order status Paid."
                },
                {
                    "ex_id": 6793,
                    "db_id": "activity_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Tell me the first and last name of the student who has the most activities."
                }
            ],
            "example_quality": 0.777694445962463,
            "example_similarity": 0.5762888008086222,
            "db_id": "dog_kennels"
        },
        {
            "index": 938,
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Tell me the first and last name of the student who has the most activities. */\nSELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the name and country corresponding to the artist who has had the most exhibitions. */\nSELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: Return the song in the volume that has spent the most weeks on top? */\nSELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6793,
                    "db_id": "activity_1",
                    "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Tell me the first and last name of the student who has the most activities."
                },
                {
                    "ex_id": 1671,
                    "db_id": "theme_gallery",
                    "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the name and country corresponding to the artist who has had the most exhibitions."
                },
                {
                    "ex_id": 6189,
                    "db_id": "music_4",
                    "query": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
                    "question": "Return the song in the volume that has spent the most weeks on top?"
                }
            ],
            "example_quality": 0.7777981832268953,
            "example_similarity": 0.5761630487111006,
            "db_id": "dog_kennels"
        },
        {
            "index": 939,
            "question": "What is the description of the treatment type that costs the least money in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the payment method of the customer that has purchased the least quantity of items? */\nSELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1\n\n/* Answer the following: What is the name of the 3 employees who get paid the least? */\nSELECT name FROM Employee ORDER BY salary ASC LIMIT 3\n\n/* Answer the following: What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department? */\nSELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the description of the treatment type that costs the least money in total? */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6112,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
                    "question": "What is the payment method of the customer that has purchased the least quantity of items?"
                },
                {
                    "ex_id": 377,
                    "db_id": "flight_1",
                    "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3",
                    "question": "What is the name of the 3 employees who get paid the least?"
                },
                {
                    "ex_id": 1460,
                    "db_id": "college_2",
                    "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
                    "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?"
                }
            ],
            "example_quality": 0.7776946234530175,
            "example_similarity": 0.576084606982616,
            "db_id": "dog_kennels"
        },
        {
            "index": 940,
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the item with the lowest average rating. */\nSELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1\n\n/* Answer the following: Give the name of the department with the lowest budget. */\nSELECT dept_name FROM department ORDER BY budget LIMIT 1\n\n/* Answer the following: What is the zip code in which the average mean sea level pressure is the lowest? */\nSELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the description of the treatment type whose total cost is the lowest. */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1705,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
                    "question": "Find the name of the item with the lowest average rating."
                },
                {
                    "ex_id": 1378,
                    "db_id": "college_2",
                    "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1",
                    "question": "Give the name of the department with the lowest budget."
                },
                {
                    "ex_id": 148,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
                    "question": "What is the zip code in which the average mean sea level pressure is the lowest?"
                }
            ],
            "example_quality": 0.7777981398110463,
            "example_similarity": 0.5759888904976463,
            "db_id": "dog_kennels"
        },
        {
            "index": 941,
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of banks that have loaned money to customers with credit scores below 100? */\nSELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100\n\n/* Answer the following: How much salary did the top 3 well-paid players get in 2001? */\nSELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;\n\n/* Answer the following: What is the total amount of grant money for research? */\nSELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3080,
                    "db_id": "loan_1",
                    "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
                    "question": "What are the names of banks that have loaned money to customers with credit scores below 100?"
                },
                {
                    "ex_id": 3683,
                    "db_id": "baseball_1",
                    "query": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
                    "question": "How much salary did the top 3 well-paid players get in 2001?"
                },
                {
                    "ex_id": 4326,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT sum(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type  =  T3.organisation_type WHERE T3.organisation_type_description  =  'Research'",
                    "question": "What is the total amount of grant money for research?"
                }
            ],
            "example_quality": 0.7774427274624964,
            "example_similarity": 0.5757285145859405,
            "db_id": "dog_kennels"
        },
        {
            "index": 942,
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first and last names of people who payed more than the rooms' base prices. */\nSELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0\n\n/* Answer the following: How much salary did the top 3 well-paid players get in 2001? */\nSELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;\n\n/* Answer the following: What are the first and last names of people who payed more than the rooms' base prices? */\nSELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2605,
                    "db_id": "inn_1",
                    "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
                    "question": "Find the first and last names of people who payed more than the rooms' base prices."
                },
                {
                    "ex_id": 3683,
                    "db_id": "baseball_1",
                    "query": "SELECT salary FROM salary WHERE YEAR  =  2001 ORDER BY salary DESC LIMIT 3;",
                    "question": "How much salary did the top 3 well-paid players get in 2001?"
                },
                {
                    "ex_id": 2606,
                    "db_id": "inn_1",
                    "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
                    "question": "What are the first and last names of people who payed more than the rooms' base prices?"
                }
            ],
            "example_quality": 0.7770822877271139,
            "example_similarity": 0.5754870939673341,
            "db_id": "dog_kennels"
        },
        {
            "index": 943,
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"? */\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"\n\n/* Answer the following: What are the phones and emails of workshop groups in which services are performed? */\nSELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID\n\n/* Answer the following: Find the phone number of performer \"Ashley\". */\nSELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 87,
                    "db_id": "student_assessment",
                    "query": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
                    "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?"
                },
                {
                    "ex_id": 5133,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
                    "question": "What are the phones and emails of workshop groups in which services are performed?"
                },
                {
                    "ex_id": 5116,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"",
                    "question": "Find the phone number of performer \"Ashley\"."
                }
            ],
            "example_quality": 0.7765948837289517,
            "example_similarity": 0.5751720594172013,
            "db_id": "dog_kennels"
        },
        {
            "index": 944,
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the address and phone number of the buildings managed by \"Brenden\"? */\nSELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"\n\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Answer the following: What are the phone numbers of customers using the policy with the code \"Life Insurance\"? */\nSELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id and cell phone of the professionals who operate two or more types of treatments. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1204,
                    "db_id": "apartment_rentals",
                    "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
                    "question": "What are the address and phone number of the buildings managed by \"Brenden\"?"
                },
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                },
                {
                    "ex_id": 895,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"",
                    "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?"
                }
            ],
            "example_quality": 0.7761253270018377,
            "example_similarity": 0.5748839991419341,
            "db_id": "dog_kennels"
        },
        {
            "index": 945,
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of teams from universities that have a below average enrollment? */\nSELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)\n\n/* Answer the following: What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances? */\nSELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance\n\n/* Answer the following: Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department. */\nSELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the first name and last name of the professionals who have done treatment with cost below average? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1013,
                    "db_id": "university_basketball",
                    "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
                    "question": "What are the names of teams from universities that have a below average enrollment?"
                },
                {
                    "ex_id": 1824,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
                    "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?"
                },
                {
                    "ex_id": 1459,
                    "db_id": "college_2",
                    "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
                    "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department."
                }
            ],
            "example_quality": 0.7760702281099963,
            "example_similarity": 0.5747664702822605,
            "db_id": "dog_kennels"
        },
        {
            "index": 946,
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers with credit score less than the average credit score across customers? */\nSELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)\n\n/* Answer the following: What are the names of customers with checking balances lower than the average checking balance? */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: Find the names of the candidates whose support percentage is lower than their oppose rate. */\nSELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3046,
                    "db_id": "loan_1",
                    "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
                    "question": "What are the names of customers with credit score less than the average credit score across customers?"
                },
                {
                    "ex_id": 1810,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "What are the names of customers with checking balances lower than the average checking balance?"
                },
                {
                    "ex_id": 2423,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
                    "question": "Find the names of the candidates whose support percentage is lower than their oppose rate."
                }
            ],
            "example_quality": 0.7760374879526027,
            "example_similarity": 0.5745123548692196,
            "db_id": "dog_kennels"
        },
        {
            "index": 947,
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the studios of each film and the number of films produced by that studio. */\nSELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n\n/* Answer the following: List the name for storms and the number of affected regions for each storm. */\nSELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id\n\n/* Answer the following: show the train name and station name for each train. */\nSELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the date of each treatment, together with the first name of the professional who operated it. */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4141,
                    "db_id": "film_rank",
                    "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
                    "question": "List the studios of each film and the number of films produced by that studio."
                },
                {
                    "ex_id": 2715,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
                    "question": "List the name for storms and the number of affected regions for each storm."
                },
                {
                    "ex_id": 6614,
                    "db_id": "train_station",
                    "query": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
                    "question": "show the train name and station name for each train."
                }
            ],
            "example_quality": 0.7758046664822784,
            "example_similarity": 0.5743870071669376,
            "db_id": "dog_kennels"
        },
        {
            "index": 948,
            "question": "What are the date and the operating professional's first name of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the apartment number and the room count of each apartment? */\nSELECT apt_number ,  room_count FROM Apartments\n\n/* Answer the following: What are the dates of ceremony and results for each music festival? */\nSELECT Date_of_ceremony ,  RESULT FROM music_festival\n\n/* Answer the following: What are the numbers of races for each constructor id? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the date and the operating professional's first name of each treatment? */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1212,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number ,  room_count FROM Apartments",
                    "question": "What are the apartment number and the room count of each apartment?"
                },
                {
                    "ex_id": 6155,
                    "db_id": "music_4",
                    "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
                    "question": "What are the dates of ceremony and results for each music festival?"
                },
                {
                    "ex_id": 2190,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "What are the numbers of races for each constructor id?"
                }
            ],
            "example_quality": 0.7758067478233075,
            "example_similarity": 0.5745331268816687,
            "db_id": "dog_kennels"
        },
        {
            "index": 949,
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name for storms and the number of affected regions for each storm. */\nSELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id\n\n/* Answer the following: List the studios of each film and the number of films produced by that studio. */\nSELECT Studio ,  COUNT(*) FROM film GROUP BY Studio\n\n/* Answer the following: List the name, origin and owner of each program. */\nSELECT name ,  origin ,  OWNER FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the cost of each treatment and the corresponding treatment type description. */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2715,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
                    "question": "List the name for storms and the number of affected regions for each storm."
                },
                {
                    "ex_id": 4141,
                    "db_id": "film_rank",
                    "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio",
                    "question": "List the studios of each film and the number of films produced by that studio."
                },
                {
                    "ex_id": 3739,
                    "db_id": "program_share",
                    "query": "SELECT name ,  origin ,  OWNER FROM program",
                    "question": "List the name, origin and owner of each program."
                }
            ],
            "example_quality": 0.7755746601602224,
            "example_similarity": 0.5746165521470239,
            "db_id": "dog_kennels"
        },
        {
            "index": 950,
            "question": "What are the cost and treatment type description of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the apartment number and the room count of each apartment? */\nSELECT apt_number ,  room_count FROM Apartments\n\n/* Answer the following: What are the name, origin and owner of each program? */\nSELECT name ,  origin ,  OWNER FROM program\n\n/* Answer the following: What is the team and starting year for each technician? */\nSELECT Team ,  Starting_Year FROM technician\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the cost and treatment type description of each treatment? */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1212,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number ,  room_count FROM Apartments",
                    "question": "What are the apartment number and the room count of each apartment?"
                },
                {
                    "ex_id": 3740,
                    "db_id": "program_share",
                    "query": "SELECT name ,  origin ,  OWNER FROM program",
                    "question": "What are the name, origin and owner of each program?"
                },
                {
                    "ex_id": 2239,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  Starting_Year FROM technician",
                    "question": "What is the team and starting year for each technician?"
                }
            ],
            "example_quality": 0.7758108973600537,
            "example_similarity": 0.5748580392542684,
            "db_id": "dog_kennels"
        },
        {
            "index": 951,
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name. */\nSELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name\n\n/* Answer the following: Show each school name, its budgeted amount, and invested amount in year 2002 or after. */\nSELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002\n\n/* Answer the following: Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles. */\nSELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each owner's first name, last name, and the size of his for her dog. */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6514,
                    "db_id": "scientist_1",
                    "query": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
                    "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name."
                },
                {
                    "ex_id": 1903,
                    "db_id": "school_finance",
                    "query": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
                    "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after."
                },
                {
                    "ex_id": 1463,
                    "db_id": "college_2",
                    "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
                    "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles."
                }
            ],
            "example_quality": 0.7755091917780651,
            "example_similarity": 0.574719352602021,
            "db_id": "dog_kennels"
        },
        {
            "index": 952,
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the dates of ceremony and results for each music festival? */\nSELECT Date_of_ceremony ,  RESULT FROM music_festival\n\n/* Answer the following: What are the planned delivery date and actual delivery date for each booking? */\nSELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS\n\n/* Answer the following: What are the department names, cities, and state provinces for each department? */\nSELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name, last name, and the size of their dog? */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6155,
                    "db_id": "music_4",
                    "query": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
                    "question": "What are the dates of ceremony and results for each music festival?"
                },
                {
                    "ex_id": 5096,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
                    "question": "What are the planned delivery date and actual delivery date for each booking?"
                },
                {
                    "ex_id": 3523,
                    "db_id": "hr_1",
                    "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
                    "question": "What are the department names, cities, and state provinces for each department?"
                }
            ],
            "example_quality": 0.7757450014505671,
            "example_similarity": 0.5748343643391153,
            "db_id": "dog_kennels"
        },
        {
            "index": 953,
            "question": "List pairs of the owner's first name and the dogs's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the wheels and locations of the railways. */\nSELECT Wheels ,  LOCATION FROM railway\n\n/* Answer the following: List the companies and the investors of entrepreneurs. */\nSELECT Company ,  Investor FROM entrepreneur\n\n/* Answer the following: List the dates and vote percents of elections. */\nSELECT Date ,  Vote_Percent FROM election\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List pairs of the owner's first name and the dogs's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5635,
                    "db_id": "railway",
                    "query": "SELECT Wheels ,  LOCATION FROM railway",
                    "question": "List the wheels and locations of the railways."
                },
                {
                    "ex_id": 2268,
                    "db_id": "entrepreneur",
                    "query": "SELECT Company ,  Investor FROM entrepreneur",
                    "question": "List the companies and the investors of entrepreneurs."
                },
                {
                    "ex_id": 1177,
                    "db_id": "election_representative",
                    "query": "SELECT Date ,  Vote_Percent FROM election",
                    "question": "List the dates and vote percents of elections."
                }
            ],
            "example_quality": 0.7758404071853164,
            "example_similarity": 0.5749057418611698,
            "db_id": "dog_kennels"
        },
        {
            "index": 954,
            "question": "What are each owner's first name and their dogs's name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the apartment number and the room count of each apartment? */\nSELECT apt_number ,  room_count FROM Apartments\n\n/* Answer the following: What are the name and primarily affiliated department name of each physician? */\nSELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1\n\n/* Answer the following: What are the name, origin and owner of each program? */\nSELECT name ,  origin ,  OWNER FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name and their dogs's name? */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1212,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_number ,  room_count FROM Apartments",
                    "question": "What are the apartment number and the room count of each apartment?"
                },
                {
                    "ex_id": 3916,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
                    "question": "What are the name and primarily affiliated department name of each physician?"
                },
                {
                    "ex_id": 3740,
                    "db_id": "program_share",
                    "query": "SELECT name ,  origin ,  OWNER FROM program",
                    "question": "What are the name, origin and owner of each program?"
                }
            ],
            "example_quality": 0.7759589066420287,
            "example_similarity": 0.5749364136901064,
            "db_id": "dog_kennels"
        },
        {
            "index": 955,
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the latitude, longitude, and city of the station from which the trip with smallest duration started? */\nSELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1\n\n/* Answer the following: What is the name of the wrestler with the fewest days held? */\nSELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\n\n/* Answer the following: Find the rank of the faculty that the fewest faculties belong to. */\nSELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the names of the dogs of the rarest breed and the treatment dates of them. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 141,
                    "db_id": "bike_1",
                    "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
                    "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?"
                },
                {
                    "ex_id": 1849,
                    "db_id": "wrestler",
                    "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
                    "question": "What is the name of the wrestler with the fewest days held?"
                },
                {
                    "ex_id": 4678,
                    "db_id": "college_3",
                    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
                    "question": "Find the rank of the faculty that the fewest faculties belong to."
                }
            ],
            "example_quality": 0.7756490020277439,
            "example_similarity": 0.5747304349444206,
            "db_id": "dog_kennels"
        },
        {
            "index": 956,
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the wrestler with the fewest days held? */\nSELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1\n\n/* Answer the following: Find the rank of the faculty that the fewest faculties belong to. */\nSELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\n\n/* Answer the following: What is the name of the department with the fewest members? */\nSELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are of the rarest breed? Show their names and treatment dates. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1849,
                    "db_id": "wrestler",
                    "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
                    "question": "What is the name of the wrestler with the fewest days held?"
                },
                {
                    "ex_id": 4678,
                    "db_id": "college_3",
                    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
                    "question": "Find the rank of the faculty that the fewest faculties belong to."
                },
                {
                    "ex_id": 4677,
                    "db_id": "college_3",
                    "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the name of the department with the fewest members?"
                }
            ],
            "example_quality": 0.7754234277578405,
            "example_similarity": 0.5744198150101458,
            "db_id": "dog_kennels"
        },
        {
            "index": 957,
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name and age of every student who lives in a dorm with a TV Lounge? */\nSELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n\n/* Answer the following: What are the amenities in the dorm that a student who has the last name of Smith lives in? */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n\n/* Answer the following: What is the membership card held by both members living in Hartford and ones living in Waterbury address? */\nSELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5766,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                    "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?"
                },
                {
                    "ex_id": 5768,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
                    "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?"
                },
                {
                    "ex_id": 797,
                    "db_id": "coffee_shop",
                    "query": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
                    "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?"
                }
            ],
            "example_quality": 0.77525284892756,
            "example_similarity": 0.5742450487026968,
            "db_id": "dog_kennels"
        },
        {
            "index": 958,
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the rooms of faculties with rank professor who live in building NEB. */\nSELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"\n\n/* Answer the following: Find the name of amenities of the dorm where the student with last name Smith is living in. */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names of owners living in Virginia and the names of dogs they own. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4656,
                    "db_id": "college_3",
                    "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
                    "question": "Find the rooms of faculties with rank professor who live in building NEB."
                },
                {
                    "ex_id": 5767,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
                    "question": "Find the name of amenities of the dorm where the student with last name Smith is living in."
                },
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                }
            ],
            "example_quality": 0.7754874492940239,
            "example_similarity": 0.5742415062414741,
            "db_id": "dog_kennels"
        },
        {
            "index": 959,
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of ships that were involved in a mission launched after 1928? */\nSELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928\n\n/* Answer the following: What are the titles and authors or editors that correspond to books made after 1989? */\nSELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989\n\n/* Answer the following: What are the names of races that were held after 2017 and the circuits were in the country of Spain? */\nSELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4022,
                    "db_id": "ship_mission",
                    "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
                    "question": "What are the names of ships that were involved in a mission launched after 1928?"
                },
                {
                    "ex_id": 6966,
                    "db_id": "culture_company",
                    "query": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
                    "question": "What are the titles and authors or editors that correspond to books made after 1989?"
                },
                {
                    "ex_id": 2192,
                    "db_id": "formula_1",
                    "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
                    "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?"
                }
            ],
            "example_quality": 0.7752746663139766,
            "example_similarity": 0.5740697463908822,
            "db_id": "dog_kennels"
        },
        {
            "index": 960,
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the starting date and ending data in location for the document named \"Robin CV\". */\nSELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"\n\n/* Answer the following: Find the customer name and date of the orders that have the status \"Delivered\". */\nSELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"\n\n/* Answer the following: Show names of ships involved in a mission launched after 1928. */\nSELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the arriving date and the departing date of the dogs that received a treatment. */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4226,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
                    "question": "Find the starting date and ending data in location for the document named \"Robin CV\"."
                },
                {
                    "ex_id": 6122,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
                    "question": "Find the customer name and date of the orders that have the status \"Delivered\"."
                },
                {
                    "ex_id": 4021,
                    "db_id": "ship_mission",
                    "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928",
                    "question": "Show names of ships involved in a mission launched after 1928."
                }
            ],
            "example_quality": 0.7750623266318043,
            "example_similarity": 0.5739057848495027,
            "db_id": "dog_kennels"
        },
        {
            "index": 961,
            "question": "List the last name of the owner owning the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Provide the last name of the youngest student. */\nSELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n\n/* Answer the following: Find the name of the ship that is steered by the youngest captain. */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Answer the following: What is the name of the ship that is commanded by the youngest captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the last name of the owner owning the youngest dog. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 487,
                    "db_id": "allergy_1",
                    "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
                    "question": "Provide the last name of the youngest student."
                },
                {
                    "ex_id": 6263,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "Find the name of the ship that is steered by the youngest captain."
                },
                {
                    "ex_id": 6264,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "What is the name of the ship that is commanded by the youngest captain?"
                }
            ],
            "example_quality": 0.7747699804511872,
            "example_similarity": 0.5738517202144423,
            "db_id": "dog_kennels"
        },
        {
            "index": 962,
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the ship that is commanded by the youngest captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1\n\n/* Answer the following: What is the last name of the youngest student? */\nSELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)\n\n/* Answer the following: What is the total point count of the youngest gymnast? */\nSELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Who owns the youngest dog? Give me his or her last name. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6264,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1",
                    "question": "What is the name of the ship that is commanded by the youngest captain?"
                },
                {
                    "ex_id": 486,
                    "db_id": "allergy_1",
                    "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)",
                    "question": "What is the last name of the youngest student?"
                },
                {
                    "ex_id": 1755,
                    "db_id": "gymnast",
                    "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1",
                    "question": "What is the total point count of the youngest gymnast?"
                }
            ],
            "example_quality": 0.7744782420588875,
            "example_similarity": 0.573570513427052,
            "db_id": "dog_kennels"
        },
        {
            "index": 963,
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the rooms of faculties with rank professor who live in building NEB. */\nSELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"\n\n/* Answer the following: List the states which have between 2 to 4 staffs living there. */\nSELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;\n\n/* Answer the following: What is the first name and age of every student who lives in a dorm with a TV Lounge? */\nSELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4656,
                    "db_id": "college_3",
                    "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
                    "question": "Find the rooms of faculties with rank professor who live in building NEB."
                },
                {
                    "ex_id": 6657,
                    "db_id": "driving_school",
                    "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;",
                    "question": "List the states which have between 2 to 4 staffs living there."
                },
                {
                    "ex_id": 5766,
                    "db_id": "dorm_1",
                    "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid NOT IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')",
                    "question": "What is the first name and age of every student who lives in a dorm with a TV Lounge?"
                }
            ],
            "example_quality": 0.7742517563963336,
            "example_similarity": 0.573364253837549,
            "db_id": "dog_kennels"
        },
        {
            "index": 964,
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which city does the student whose last name is \"Kim\" live in? */\nSELECT city_code FROM Student WHERE LName  =  \"Kim\"\n\n/* Answer the following: What are the rooms for members of the faculty who are professors and who live in building NEB? */\nSELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"\n\n/* Answer the following: What are the names of the students who took classes in 2009 or 2010? */\nSELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 478,
                    "db_id": "allergy_1",
                    "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"",
                    "question": "Which city does the student whose last name is \"Kim\" live in?"
                },
                {
                    "ex_id": 4657,
                    "db_id": "college_3",
                    "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
                    "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?"
                },
                {
                    "ex_id": 1370,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
                    "question": "What are the names of the students who took classes in 2009 or 2010?"
                }
            ],
            "example_quality": 0.7744365377199692,
            "example_similarity": 0.5732561330373743,
            "db_id": "dog_kennels"
        },
        {
            "index": 965,
            "question": "What are the arriving date and the departing date of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the start date and end date of each apartment booking? */\nSELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n\n/* Answer the following: What are the apartment number, start date, and end date of each apartment booking? */\nSELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id\n\n/* Answer the following: What are each document's location code, and starting date and ending data in that location? */\nSELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of all the dogs? */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1198,
                    "db_id": "apartment_rentals",
                    "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
                    "question": "What are the start date and end date of each apartment booking?"
                },
                {
                    "ex_id": 1222,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id",
                    "question": "What are the apartment number, start date, and end date of each apartment booking?"
                },
                {
                    "ex_id": 4224,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
                    "question": "What are each document's location code, and starting date and ending data in that location?"
                }
            ],
            "example_quality": 0.7746702822404666,
            "example_similarity": 0.5730912473183111,
            "db_id": "dog_kennels"
        },
        {
            "index": 966,
            "question": "List the arrival date and the departure date for all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location code, the starting date and ending data in that location for all the documents. */\nSELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations\n\n/* Answer the following: Show the start dates and end dates of all the apartment bookings. */\nSELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings\n\n/* Answer the following: List all the salary values players received in 2010 and 2001. */\nSELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the arrival date and the departure date for all the dogs. */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4223,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
                    "question": "Show the location code, the starting date and ending data in that location for all the documents."
                },
                {
                    "ex_id": 1197,
                    "db_id": "apartment_rentals",
                    "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings",
                    "question": "Show the start dates and end dates of all the apartment bookings."
                },
                {
                    "ex_id": 3685,
                    "db_id": "baseball_1",
                    "query": "SELECT salary FROM salary WHERE YEAR  =  2010 UNION SELECT salary FROM salary WHERE YEAR  =  2001",
                    "question": "List all the salary values players received in 2010 and 2001."
                }
            ],
            "example_quality": 0.7746646512746181,
            "example_similarity": 0.5729705794067615,
            "db_id": "dog_kennels"
        },
        {
            "index": 967,
            "question": "How many dogs went through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many storms occured in each region? */\nSELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id\n\n/* Answer the following: How many regions were affected by each storm? */\nSELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id\n\n/* Answer the following: How many students have advisors? */\nSELECT count(DISTINCT s_id) FROM advisor\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs went through any treatments? */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2714,
                    "db_id": "storm_record",
                    "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
                    "question": "How many storms occured in each region?"
                },
                {
                    "ex_id": 2716,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
                    "question": "How many regions were affected by each storm?"
                },
                {
                    "ex_id": 1337,
                    "db_id": "college_2",
                    "query": "SELECT count(DISTINCT s_id) FROM advisor",
                    "question": "How many students have advisors?"
                }
            ],
            "example_quality": 0.774579483788613,
            "example_similarity": 0.5728698748009523,
            "db_id": "dog_kennels"
        },
        {
            "index": 968,
            "question": "Count the number of dogs that went through a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of schools that have had basketball matches. */\nSELECT count(DISTINCT school_id) FROM basketball_match\n\n/* Answer the following: Count the number of customers who have an account. */\nSELECT count(DISTINCT customer_id) FROM Accounts\n\n/* Answer the following: Count the number of captains that have each rank. */\nSELECT count(*) ,  rank FROM captain GROUP BY rank\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs that went through a treatment. */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 987,
                    "db_id": "university_basketball",
                    "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
                    "question": "Count the number of schools that have had basketball matches."
                },
                {
                    "ex_id": 1551,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
                    "question": "Count the number of customers who have an account."
                },
                {
                    "ex_id": 6224,
                    "db_id": "ship_1",
                    "query": "SELECT count(*) ,  rank FROM captain GROUP BY rank",
                    "question": "Count the number of captains that have each rank."
                }
            ],
            "example_quality": 0.7746534242456019,
            "example_similarity": 0.5728589256144543,
            "db_id": "dog_kennels"
        },
        {
            "index": 969,
            "question": "How many professionals have performed any treatment to dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers use each payment method? */\nSELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code\n\n/* Answer the following: How many regions were affected by each storm? */\nSELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id\n\n/* Answer the following: How many customers have an account? */\nSELECT count(DISTINCT customer_id) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals have performed any treatment to dogs? */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4721,
                    "db_id": "department_store",
                    "query": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code",
                    "question": "How many customers use each payment method?"
                },
                {
                    "ex_id": 2716,
                    "db_id": "storm_record",
                    "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id",
                    "question": "How many regions were affected by each storm?"
                },
                {
                    "ex_id": 690,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT customer_id) FROM Accounts",
                    "question": "How many customers have an account?"
                }
            ],
            "example_quality": 0.7745684441300829,
            "example_similarity": 0.5727861413798997,
            "db_id": "dog_kennels"
        },
        {
            "index": 970,
            "question": "Find the number of professionals who have ever treated dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of artists who have had volumes. */\nSELECT COUNT(DISTINCT Artist_ID) FROM volume\n\n/* Answer the following: Count the number of schools that have had basketball matches. */\nSELECT count(DISTINCT school_id) FROM basketball_match\n\n/* Answer the following: Find the number of people who is under 40 for each gender. */\nSELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have ever treated dogs. */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6199,
                    "db_id": "music_4",
                    "query": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
                    "question": "Count the number of artists who have had volumes."
                },
                {
                    "ex_id": 987,
                    "db_id": "university_basketball",
                    "query": "SELECT count(DISTINCT school_id) FROM basketball_match",
                    "question": "Count the number of schools that have had basketball matches."
                },
                {
                    "ex_id": 4429,
                    "db_id": "network_2",
                    "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
                    "question": "Find the number of people who is under 40 for each gender."
                }
            ],
            "example_quality": 0.7746175717363635,
            "example_similarity": 0.5727393004376014,
            "db_id": "dog_kennels"
        },
        {
            "index": 971,
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Answer the following: Find the names of the swimmers who have both \"win\" and \"loss\" results in the record. */\nSELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'\n\n/* Answer the following: Find names and times of trains that run through stations for the local authority Chiltern. */\nSELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                },
                {
                    "ex_id": 5628,
                    "db_id": "swimming",
                    "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
                    "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record."
                },
                {
                    "ex_id": 3168,
                    "db_id": "station_weather",
                    "query": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
                    "question": "Find names and times of trains that run through stations for the local authority Chiltern."
                }
            ],
            "example_quality": 0.7745063967568891,
            "example_similarity": 0.5724857648613754,
            "db_id": "dog_kennels"
        },
        {
            "index": 972,
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Answer the following: Find the first name of students living in city PHL whose age is between 20 and 25. */\nSELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25\n\n/* Answer the following: Find the name of amenities of the dorm where the student with last name Smith is living in. */\nSELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                },
                {
                    "ex_id": 5677,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
                    "question": "Find the first name of students living in city PHL whose age is between 20 and 25."
                },
                {
                    "ex_id": 5767,
                    "db_id": "dorm_1",
                    "query": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
                    "question": "Find the name of amenities of the dorm where the student with last name Smith is living in."
                }
            ],
            "example_quality": 0.7744422144681691,
            "example_similarity": 0.5724052783476942,
            "db_id": "dog_kennels"
        },
        {
            "index": 973,
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the order id, customer id for orders in Cancelled status, ordered by their order dates. */\nSELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date\n\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Answer the following: Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental. */\nSELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4784,
                    "db_id": "department_store",
                    "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
                    "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates."
                },
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                },
                {
                    "ex_id": 2998,
                    "db_id": "sakila_1",
                    "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
                    "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental."
                }
            ],
            "example_quality": 0.7743496155163453,
            "example_similarity": 0.5722240061447511,
            "db_id": "dog_kennels"
        },
        {
            "index": 974,
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find out the first name and last name of staff lived in city Damianfort. */\nSELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";\n\n/* Answer the following: Find the first name of students living in city PHL whose age is between 20 and 25. */\nSELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25\n\n/* Answer the following: List first name and last name of customers lived in city Lockmanfurt. */\nSELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6653,
                    "db_id": "driving_school",
                    "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";",
                    "question": "Find out the first name and last name of staff lived in city Damianfort."
                },
                {
                    "ex_id": 5677,
                    "db_id": "dorm_1",
                    "query": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
                    "question": "Find the first name of students living in city PHL whose age is between 20 and 25."
                },
                {
                    "ex_id": 6683,
                    "db_id": "driving_school",
                    "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";",
                    "question": "List first name and last name of customers lived in city Lockmanfurt."
                }
            ],
            "example_quality": 0.7742857259851387,
            "example_similarity": 0.5721059435517527,
            "db_id": "dog_kennels"
        },
        {
            "index": 975,
            "question": "How many dogs have an age below the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms whose capacity is less than 50 does the Lamberton building have? */\nSELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50\n\n/* Answer the following: What is the number of players who have points less than 30 for each position? */\nSELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION\n\n/* Answer the following: How many states have smaller colleges than average? */\nSELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have an age below the average? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1357,
                    "db_id": "college_2",
                    "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
                    "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?"
                },
                {
                    "ex_id": 3383,
                    "db_id": "sports_competition",
                    "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
                    "question": "What is the number of players who have points less than 30 for each position?"
                },
                {
                    "ex_id": 5050,
                    "db_id": "soccer_2",
                    "query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
                    "question": "How many states have smaller colleges than average?"
                }
            ],
            "example_quality": 0.7741492565945647,
            "example_similarity": 0.5719329519721501,
            "db_id": "dog_kennels"
        },
        {
            "index": 976,
            "question": "Count the number of dogs of an age below the average.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the number of players whose points are lower than 30 in each position. */\nSELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION\n\n/* Answer the following: Find the name of accounts whose checking balance is below the average checking balance. */\nSELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)\n\n/* Answer the following: Find the name of the item with the lowest average rating. */\nSELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs of an age below the average. */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3382,
                    "db_id": "sports_competition",
                    "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION",
                    "question": "find the number of players whose points are lower than 30 in each position."
                },
                {
                    "ex_id": 1809,
                    "db_id": "small_bank_1",
                    "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
                    "question": "Find the name of accounts whose checking balance is below the average checking balance."
                },
                {
                    "ex_id": 1705,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id ORDER BY avg(T2.rating) LIMIT 1",
                    "question": "Find the name of the item with the lowest average rating."
                }
            ],
            "example_quality": 0.7739326621066984,
            "example_similarity": 0.5717289672615146,
            "db_id": "dog_kennels"
        },
        {
            "index": 977,
            "question": "How much does the most recent treatment cost?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most recent movie? */\nSELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)\n\n/* Answer the following: What is the name and date of the most recent race? */\nSELECT name ,  date FROM races ORDER BY date DESC LIMIT 1\n\n/* Answer the following: Which patient is undergoing the most recent treatment? */\nSELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most recent treatment cost? */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2465,
                    "db_id": "movie_1",
                    "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
                    "question": "What is the name of the most recent movie?"
                },
                {
                    "ex_id": 2156,
                    "db_id": "formula_1",
                    "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
                    "question": "What is the name and date of the most recent race?"
                },
                {
                    "ex_id": 3950,
                    "db_id": "hospital_1",
                    "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
                    "question": "Which patient is undergoing the most recent treatment?"
                }
            ],
            "example_quality": 0.7738631922438057,
            "example_similarity": 0.5716083093153371,
            "db_id": "dog_kennels"
        },
        {
            "index": 978,
            "question": "Show me the cost of the most recently performed treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of the program that was launched most recently. */\nSELECT name FROM program ORDER BY launch DESC LIMIT 1\n\n/* Answer the following: Find the total amount claimed in the most recently created document. */\nSELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)\n\n/* Answer the following: What is the name, location and seating for the most recently opened track? */\nSELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Show me the cost of the most recently performed treatment. */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3741,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                    "question": "find the name of the program that was launched most recently."
                },
                {
                    "ex_id": 1518,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)",
                    "question": "Find the total amount claimed in the most recently created document."
                },
                {
                    "ex_id": 754,
                    "db_id": "race_track",
                    "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1",
                    "question": "What is the name, location and seating for the most recently opened track?"
                }
            ],
            "example_quality": 0.7738869532428156,
            "example_similarity": 0.5715129660267727,
            "db_id": "dog_kennels"
        },
        {
            "index": 979,
            "question": "How many dogs have not gone through any treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms have not had any reservation yet? */\nSELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)\n\n/* Answer the following: How many tourists did not make any visit? */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have not gone through any treatment? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2638,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
                    "question": "How many rooms have not had any reservation yet?"
                },
                {
                    "ex_id": 5968,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "How many tourists did not make any visit?"
                },
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.7740990007691063,
            "example_similarity": 0.571602422556971,
            "db_id": "dog_kennels"
        },
        {
            "index": 980,
            "question": "Tell me the number of dogs that have not received any treatment .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of items that did not receive any review. */\nSELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n\n/* Answer the following: Find the number of users who did not write any review. */\nSELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n\n/* Answer the following: List the number of customers that did not have any payment history. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the number of dogs that have not received any treatment . */\nSELECT ",
            "response": "count(*) from dogs where dog_id not in ( select dog_id from treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1698,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                    "question": "Find the number of items that did not receive any review."
                },
                {
                    "ex_id": 1718,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
                    "question": "Find the number of users who did not write any review."
                },
                {
                    "ex_id": 6693,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
                    "question": "List the number of customers that did not have any payment history."
                }
            ],
            "example_quality": 0.7737265435327,
            "example_similarity": 0.5715831303690878,
            "db_id": "dog_kennels"
        },
        {
            "index": 981,
            "question": "How many owners temporarily do not have any dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many enzymes do not have any interactions? */\nSELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );\n\n/* Answer the following: How many apartments do not have any facility? */\nSELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)\n\n/* Answer the following: How many tourists did not make any visit? */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many owners temporarily do not have any dogs? */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 962,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );",
                    "question": "How many enzymes do not have any interactions?"
                },
                {
                    "ex_id": 1269,
                    "db_id": "apartment_rentals",
                    "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)",
                    "question": "How many apartments do not have any facility?"
                },
                {
                    "ex_id": 5968,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "How many tourists did not make any visit?"
                }
            ],
            "example_quality": 0.7739571994516269,
            "example_similarity": 0.5718103080592767,
            "db_id": "dog_kennels"
        },
        {
            "index": 982,
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors that are not used in any products. */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Answer the following: Find the number of users who did not write any review. */\nSELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n\n/* Answer the following: Find the number of items that did not receive any review. */\nSELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of owners who do not own any dogs at this moment. */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5602,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                    "question": "Count the number of colors that are not used in any products."
                },
                {
                    "ex_id": 1718,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
                    "question": "Find the number of users who did not write any review."
                },
                {
                    "ex_id": 1698,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                    "question": "Find the number of items that did not receive any review."
                }
            ],
            "example_quality": 0.7741873856028981,
            "example_similarity": 0.5717331880219175,
            "db_id": "dog_kennels"
        },
        {
            "index": 983,
            "question": "How many professionals did not operate any treatment on dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Answer the following: How many tourists did not make any visit? */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Answer the following: How many scientists do not have any projects assigned to them? */\nSELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals did not operate any treatment on dogs? */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                },
                {
                    "ex_id": 5968,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "How many tourists did not make any visit?"
                },
                {
                    "ex_id": 6511,
                    "db_id": "scientist_1",
                    "query": "SELECT count(*) FROM scientists WHERE ssn NOT IN (SELECT scientist FROM AssignedTo)",
                    "question": "How many scientists do not have any projects assigned to them?"
                }
            ],
            "example_quality": 0.7744171034201892,
            "example_similarity": 0.5717280338801521,
            "db_id": "dog_kennels"
        },
        {
            "index": 984,
            "question": "Find the number of professionals who have not treated any dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of items that did not receive any review. */\nSELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n\n/* Answer the following: Find the number of users who did not write any review. */\nSELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n\n/* Answer the following: List the number of customers that did not have any payment history. */\nSELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have not treated any dogs. */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1698,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                    "question": "Find the number of items that did not receive any review."
                },
                {
                    "ex_id": 1718,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
                    "question": "Find the number of users who did not write any review."
                },
                {
                    "ex_id": 6693,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );",
                    "question": "List the number of customers that did not have any payment history."
                }
            ],
            "example_quality": 0.7746463543313475,
            "example_similarity": 0.5717827769738667,
            "db_id": "dog_kennels"
        },
        {
            "index": 985,
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. */\nSELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\n\n/* Answer the following: Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names. */\nSELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'\n\n/* Answer the following: Show the names of festivals that have nominated artworks of type \"Program Talent Show\". */\nSELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4631,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
                    "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome."
                },
                {
                    "ex_id": 3990,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
                    "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names."
                },
                {
                    "ex_id": 4611,
                    "db_id": "entertainment_awards",
                    "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
                    "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\"."
                }
            ],
            "example_quality": 0.7746929192716335,
            "example_similarity": 0.5715612575772543,
            "db_id": "dog_kennels"
        },
        {
            "index": 986,
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome. */\nSELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'\n\n/* Answer the following: display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50. */\nSELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50\n\n/* Answer the following: In which year did the least people enter hall of fame? */\nSELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4631,
                    "db_id": "customers_campaigns_ecommerce",
                    "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
                    "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome."
                },
                {
                    "ex_id": 3446,
                    "db_id": "hr_1",
                    "query": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
                    "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50."
                },
                {
                    "ex_id": 3686,
                    "db_id": "baseball_1",
                    "query": "SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY count(*) ASC LIMIT 1;",
                    "question": "In which year did the least people enter hall of fame?"
                }
            ],
            "example_quality": 0.7743317216214582,
            "example_similarity": 0.5713350591341898,
            "db_id": "dog_kennels"
        },
        {
            "index": 987,
            "question": "What is the average age of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average weight of all players? */\nSELECT avg(weight) FROM Player\n\n/* Answer the following: What is the average age of all gymnasts? */\nSELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID\n\n/* Answer the following: What is the average age of all artists? */\nSELECT avg(Age) FROM artist\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of all the dogs? */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1296,
                    "db_id": "soccer_1",
                    "query": "SELECT avg(weight) FROM Player",
                    "question": "What is the average weight of all players?"
                },
                {
                    "ex_id": 1757,
                    "db_id": "gymnast",
                    "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID",
                    "question": "What is the average age of all gymnasts?"
                },
                {
                    "ex_id": 6148,
                    "db_id": "music_4",
                    "query": "SELECT avg(Age) FROM artist",
                    "question": "What is the average age of all artists?"
                }
            ],
            "example_quality": 0.7745603622277184,
            "example_similarity": 0.5716680529952494,
            "db_id": "dog_kennels"
        },
        {
            "index": 988,
            "question": "Compute the average age of all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all the products. */\nSELECT avg(price) FROM products\n\n/* Answer the following: Find the average elevation of all airports for each country. */\nSELECT avg(elevation) ,  country FROM airports GROUP BY country\n\n/* Answer the following: Find the average hours of all projects. */\nSELECT avg(hours) FROM projects\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Compute the average age of all the dogs. */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5331,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "Compute the average price of all the products."
                },
                {
                    "ex_id": 6864,
                    "db_id": "flight_4",
                    "query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
                    "question": "Find the average elevation of all airports for each country."
                },
                {
                    "ex_id": 6478,
                    "db_id": "scientist_1",
                    "query": "SELECT avg(hours) FROM projects",
                    "question": "Find the average hours of all projects."
                }
            ],
            "example_quality": 0.7746479642002725,
            "example_similarity": 0.5718446580490536,
            "db_id": "dog_kennels"
        },
        {
            "index": 989,
            "question": "What is the age of the oldest dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the duration of the oldest actor? */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: What is the name of the oldest manager? */\nSELECT Name FROM manager ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: What is the starting year of the oldest technicians? */\nSELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the age of the oldest dog? */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 245,
                    "db_id": "musical",
                    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                    "question": "What is the duration of the oldest actor?"
                },
                {
                    "ex_id": 5640,
                    "db_id": "railway",
                    "query": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1",
                    "question": "What is the name of the oldest manager?"
                },
                {
                    "ex_id": 2244,
                    "db_id": "machine_repair",
                    "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
                    "question": "What is the starting year of the oldest technicians?"
                }
            ],
            "example_quality": 0.774144333070198,
            "example_similarity": 0.5722438714045821,
            "db_id": "dog_kennels"
        },
        {
            "index": 990,
            "question": "Tell me the age of the oldest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the student id of the oldest student. */\nSELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)\n\n/* Answer the following: Show the name and the nationality of the oldest host. */\nSELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1\n\n/* Answer the following: What is the starting year of the oldest technicians? */\nSELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the age of the oldest dog. */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 488,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
                    "question": "Show the student id of the oldest student."
                },
                {
                    "ex_id": 2687,
                    "db_id": "party_host",
                    "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1",
                    "question": "Show the name and the nationality of the oldest host."
                },
                {
                    "ex_id": 2244,
                    "db_id": "machine_repair",
                    "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
                    "question": "What is the starting year of the oldest technicians?"
                }
            ],
            "example_quality": 0.7737168757019065,
            "example_similarity": 0.5722168114793801,
            "db_id": "dog_kennels"
        },
        {
            "index": 991,
            "question": "How much does each charge type costs? List both charge type and amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total amount of grants given by each organisations? Also list the organisation id. */\nSELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id\n\n/* Answer the following: How many bookings did each customer make? List the customer id, first name, and the count. */\nSELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Answer the following: How many assets does each third party company supply? List the count and the company id. */\nSELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does each charge type costs? List both charge type and amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4347,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id",
                    "question": "What is the total amount of grants given by each organisations? Also list the organisation id."
                },
                {
                    "ex_id": 1962,
                    "db_id": "products_for_hire",
                    "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "How many bookings did each customer make? List the customer id, first name, and the count."
                },
                {
                    "ex_id": 3129,
                    "db_id": "assets_maintenance",
                    "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
                    "question": "How many assets does each third party company supply? List the count and the company id."
                }
            ],
            "example_quality": 0.7732724927126345,
            "example_similarity": 0.5721119044730981,
            "db_id": "dog_kennels"
        },
        {
            "index": 992,
            "question": "List each charge type and its amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total revenue for each manufacturer. */\nSELECT sum(revenue) ,  name FROM manufacturers GROUP BY name\n\n/* Answer the following: Find the total amount of loans offered by each bank branch. */\nSELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname\n\n/* Answer the following: List each birth place along with the number of people from there. */\nSELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each charge type and its amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5311,
                    "db_id": "manufactory_1",
                    "query": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
                    "question": "Find the total revenue for each manufacturer."
                },
                {
                    "ex_id": 3061,
                    "db_id": "loan_1",
                    "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
                    "question": "Find the total amount of loans offered by each bank branch."
                },
                {
                    "ex_id": 1164,
                    "db_id": "body_builder",
                    "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place",
                    "question": "List each birth place along with the number of people from there."
                }
            ],
            "example_quality": 0.7728290056568086,
            "example_similarity": 0.5718361980281766,
            "db_id": "dog_kennels"
        },
        {
            "index": 993,
            "question": "How much does the most expensive charge type costs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the carrier of the most expensive phone? */\nSELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: Find the physician who was trained in the most expensive procedure? */\nSELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1\n\n/* Answer the following: For each manufacturer name, what are the names and prices of their most expensive product? */\nSELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most expensive charge type costs? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1984,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
                    "question": "What is the carrier of the most expensive phone?"
                },
                {
                    "ex_id": 3975,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
                    "question": "Find the physician who was trained in the most expensive procedure?"
                },
                {
                    "ex_id": 5350,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "For each manufacturer name, what are the names and prices of their most expensive product?"
                }
            ],
            "example_quality": 0.7724251444948127,
            "example_similarity": 0.5716783361621658,
            "db_id": "dog_kennels"
        },
        {
            "index": 994,
            "question": "What is the charge amount of the most expensive charge type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the carrier of the most expensive phone? */\nSELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1\n\n/* Answer the following: Find the physician who was trained in the most expensive procedure? */\nSELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1\n\n/* Answer the following: For each manufacturer name, what are the names and prices of their most expensive product? */\nSELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the charge amount of the most expensive charge type? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1984,
                    "db_id": "phone_market",
                    "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
                    "question": "What is the carrier of the most expensive phone?"
                },
                {
                    "ex_id": 3975,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
                    "question": "Find the physician who was trained in the most expensive procedure?"
                },
                {
                    "ex_id": 5350,
                    "db_id": "manufactory_1",
                    "query": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "For each manufacturer name, what are the names and prices of their most expensive product?"
                }
            ],
            "example_quality": 0.7720220959307283,
            "example_similarity": 0.5717603663815892,
            "db_id": "dog_kennels"
        },
        {
            "index": 995,
            "question": "List the email, cell phone and home phone of all the professionals.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name, phone, and payment method code for all customers in descending order of customer number. */\nSELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\n\n/* Answer the following: Show the addresses and phones of all the buildings managed by \"Brenden\". */\nSELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"\n\n/* Answer the following: Return the cell phone number and email address for all students. */\nSELECT cell_mobile_number ,  email_address FROM STUDENTS\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the email, cell phone and home phone of all the professionals. */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5661,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
                    "question": "Show the name, phone, and payment method code for all customers in descending order of customer number."
                },
                {
                    "ex_id": 1203,
                    "db_id": "apartment_rentals",
                    "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"",
                    "question": "Show the addresses and phones of all the buildings managed by \"Brenden\"."
                },
                {
                    "ex_id": 3094,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT cell_mobile_number ,  email_address FROM STUDENTS",
                    "question": "Return the cell phone number and email address for all students."
                }
            ],
            "example_quality": 0.7719720458063981,
            "example_similarity": 0.5716734443018464,
            "db_id": "dog_kennels"
        },
        {
            "index": 996,
            "question": "What are the email, cell phone and home phone of each professional?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct names and phone numbers for suppliers who have red jeans? */\nSELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"\n\n/* Answer the following: Show the name, phone, and payment method code for all customers in descending order of customer number. */\nSELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC\n\n/* Answer the following: What are the phone numbers of all customers and suppliers. */\nSELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the email, cell phone and home phone of each professional? */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4781,
                    "db_id": "department_store",
                    "query": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"",
                    "question": "What are the distinct names and phone numbers for suppliers who have red jeans?"
                },
                {
                    "ex_id": 5661,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC",
                    "question": "Show the name, phone, and payment method code for all customers in descending order of customer number."
                },
                {
                    "ex_id": 4766,
                    "db_id": "department_store",
                    "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers",
                    "question": "What are the phone numbers of all customers and suppliers."
                }
            ],
            "example_quality": 0.7717042937576878,
            "example_similarity": 0.57154701678145,
            "db_id": "dog_kennels"
        },
        {
            "index": 997,
            "question": "What are all the possible breed type and size type combinations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions of all the project outcomes? */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Answer the following: What are the names and players of all the clubs? */\nSELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID\n\n/* Answer the following: What are the names of all the reviewers and movie names? */\nSELECT name FROM Reviewer UNION SELECT title FROM Movie\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are all the possible breed type and size type combinations? */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4395,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
                    "question": "What are the descriptions of all the project outcomes?"
                },
                {
                    "ex_id": 3357,
                    "db_id": "sports_competition",
                    "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
                    "question": "What are the names and players of all the clubs?"
                },
                {
                    "ex_id": 2484,
                    "db_id": "movie_1",
                    "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
                    "question": "What are the names of all the reviewers and movie names?"
                }
            ],
            "example_quality": 0.7715989400695323,
            "example_similarity": 0.5714752544777575,
            "db_id": "dog_kennels"
        },
        {
            "index": 998,
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the distinct majors of students who have treasurer votes. */\nSELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote\n\n/* Answer the following: Find the distinct last names of the students who have class president votes. */\nSELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE\n\n/* Answer the following: Find the distinct first names of the students who have class senator votes. */\nSELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the distinct breed type and size type combinations for dogs. */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5481,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
                    "question": "Find the distinct majors of students who have treasurer votes."
                },
                {
                    "ex_id": 5473,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
                    "question": "Find the distinct last names of the students who have class president votes."
                },
                {
                    "ex_id": 5475,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
                    "question": "Find the distinct first names of the students who have class senator votes."
                }
            ],
            "example_quality": 0.7718277988470178,
            "example_similarity": 0.571294865814374,
            "db_id": "dog_kennels"
        },
        {
            "index": 999,
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the description of the outcomes for all projects. */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Answer the following: List the asset id, details, make and model for every asset. */\nSELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets\n\n/* Answer the following: List the names of all courses ordered by their titles and credits. */\nSELECT title FROM course ORDER BY title ,  credits\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the first name of all the professionals along with the description of the treatment they have done. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4396,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
                    "question": "List the description of the outcomes for all projects."
                },
                {
                    "ex_id": 3142,
                    "db_id": "assets_maintenance",
                    "query": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
                    "question": "List the asset id, details, make and model for every asset."
                },
                {
                    "ex_id": 1375,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course ORDER BY title ,  credits",
                    "question": "List the names of all courses ordered by their titles and credits."
                }
            ],
            "example_quality": 0.7717103991029721,
            "example_similarity": 0.5710778628022303,
            "db_id": "dog_kennels"
        },
        {
            "index": 1000,
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each sex, what is the name and sex of the candidate with the oppose rate for their sex? */\nSELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex\n\n/* Answer the following: What are the department names, cities, and state provinces for each department? */\nSELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id\n\n/* Answer the following: What are the numbers of races for each constructor id? */\nSELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each professional's first name and description of the treatment they have performed? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2418,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
                    "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?"
                },
                {
                    "ex_id": 3523,
                    "db_id": "hr_1",
                    "query": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
                    "question": "What are the department names, cities, and state provinces for each department?"
                },
                {
                    "ex_id": 2190,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
                    "question": "What are the numbers of races for each constructor id?"
                }
            ],
            "example_quality": 0.771410483575664,
            "example_similarity": 0.5709850503196543,
            "db_id": "dog_kennels"
        },
        {
            "index": 1001,
            "question": "How many singers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many allergies are there? */\nSELECT count(DISTINCT allergy) FROM Allergy_type\n\n/* Answer the following: How many gymnasts are there? */\nSELECT count(*) FROM gymnast\n\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are there? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 440,
                    "db_id": "allergy_1",
                    "query": "SELECT count(DISTINCT allergy) FROM Allergy_type",
                    "question": "How many allergies are there?"
                },
                {
                    "ex_id": 1737,
                    "db_id": "gymnast",
                    "query": "SELECT count(*) FROM gymnast",
                    "question": "How many gymnasts are there?"
                },
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.7715972196893081,
            "example_similarity": 0.5714136366829713,
            "db_id": "singer"
        },
        {
            "index": 1002,
            "question": "What is the count of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total count of enzymes? */\nSELECT count(*) FROM enzyme\n\n/* Answer the following: What is the count of distinct employees with certificates? */\nSELECT count(DISTINCT eid) FROM Certificate\n\n/* Answer the following: What is the count of different game types? */\nSELECT count(DISTINCT gtype) FROM Video_games\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the count of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 935,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT count(*) FROM enzyme",
                    "question": "What is the total count of enzymes?"
                },
                {
                    "ex_id": 421,
                    "db_id": "flight_1",
                    "query": "SELECT count(DISTINCT eid) FROM Certificate",
                    "question": "What is the count of distinct employees with certificates?"
                },
                {
                    "ex_id": 5973,
                    "db_id": "game_1",
                    "query": "SELECT count(DISTINCT gtype) FROM Video_games",
                    "question": "What is the count of different game types?"
                }
            ],
            "example_quality": 0.771741999576511,
            "example_similarity": 0.5716260574639855,
            "db_id": "singer"
        },
        {
            "index": 1003,
            "question": "List the name of singers in ascending order of net worth.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of journalists in ascending order of years working. */\nSELECT Name FROM journalist ORDER BY Years_working ASC\n\n/* Answer the following: List the names of phones in ascending order of price. */\nSELECT Name FROM phone ORDER BY Price ASC\n\n/* Answer the following: List the name of ships in ascending order of tonnage. */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers in ascending order of net worth. */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2804,
                    "db_id": "news_report",
                    "query": "SELECT Name FROM journalist ORDER BY Years_working ASC",
                    "question": "List the names of journalists in ascending order of years working."
                },
                {
                    "ex_id": 1980,
                    "db_id": "phone_market",
                    "query": "SELECT Name FROM phone ORDER BY Price ASC",
                    "question": "List the names of phones in ascending order of price."
                },
                {
                    "ex_id": 4001,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "List the name of ships in ascending order of tonnage."
                }
            ],
            "example_quality": 0.7719695748511107,
            "example_similarity": 0.5719977607411345,
            "db_id": "singer"
        },
        {
            "index": 1004,
            "question": "What are the names of singers ordered by ascending net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names of the ships ordered by ascending tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage ASC\n\n/* Answer the following: What are the course names, ordered by credits? */\nSELECT CName FROM COURSE ORDER BY Credits\n\n/* Answer the following: What are the official names of cities, ordered descending by population? */\nSELECT Official_Name FROM city ORDER BY Population DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of singers ordered by ascending net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4002,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage ASC",
                    "question": "what are the names of the ships ordered by ascending tonnage?"
                },
                {
                    "ex_id": 4663,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE ORDER BY Credits",
                    "question": "What are the course names, ordered by credits?"
                },
                {
                    "ex_id": 32,
                    "db_id": "farm",
                    "query": "SELECT Official_Name FROM city ORDER BY Population DESC",
                    "question": "What are the official names of cities, ordered descending by population?"
                }
            ],
            "example_quality": 0.7721229178302689,
            "example_similarity": 0.5721996805757801,
            "db_id": "singer"
        },
        {
            "index": 1005,
            "question": "What are the birth year and citizenship of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lengths and heights of roller coasters? */\nSELECT LENGTH ,  Height FROM roller_coaster\n\n/* Answer the following: What are the team and starting year of technicians? */\nSELECT Team ,  Starting_Year FROM technician\n\n/* Answer the following: What are the names of wrestlers and the elimination moves? */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth year and citizenship of singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6206,
                    "db_id": "roller_coaster",
                    "query": "SELECT LENGTH ,  Height FROM roller_coaster",
                    "question": "What are the lengths and heights of roller coasters?"
                },
                {
                    "ex_id": 2238,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  Starting_Year FROM technician",
                    "question": "What are the team and starting year of technicians?"
                },
                {
                    "ex_id": 1857,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "What are the names of wrestlers and the elimination moves?"
                }
            ],
            "example_quality": 0.7723496611956119,
            "example_similarity": 0.572595200266448,
            "db_id": "singer"
        },
        {
            "index": 1006,
            "question": "What are the birth years and citizenships of the singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lengths and heights of roller coasters? */\nSELECT LENGTH ,  Height FROM roller_coaster\n\n/* Answer the following: What are the names of wrestlers and the elimination moves? */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: What are the team and starting year of technicians? */\nSELECT Team ,  Starting_Year FROM technician\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth years and citizenships of the singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6206,
                    "db_id": "roller_coaster",
                    "query": "SELECT LENGTH ,  Height FROM roller_coaster",
                    "question": "What are the lengths and heights of roller coasters?"
                },
                {
                    "ex_id": 1857,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "What are the names of wrestlers and the elimination moves?"
                },
                {
                    "ex_id": 2238,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  Starting_Year FROM technician",
                    "question": "What are the team and starting year of technicians?"
                }
            ],
            "example_quality": 0.7725759537789165,
            "example_similarity": 0.5729598113391392,
            "db_id": "singer"
        },
        {
            "index": 1007,
            "question": "List the name of singers whose citizenship is not \"France\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of technicians whose team is not \"NYY\". */\nSELECT Name FROM technician WHERE Team != \"NYY\"\n\n/* Answer the following: List the names of countries whose language is not \"German\". */\nSELECT Name FROM country WHERE Languages != \"German\"\n\n/* Answer the following: List the name of actors whose age is not 20. */\nSELECT Name FROM actor WHERE Age != 20\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers whose citizenship is not \"France\". */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2240,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Team != \"NYY\"",
                    "question": "List the name of technicians whose team is not \"NYY\"."
                },
                {
                    "ex_id": 6207,
                    "db_id": "roller_coaster",
                    "query": "SELECT Name FROM country WHERE Languages != \"German\"",
                    "question": "List the names of countries whose language is not \"German\"."
                },
                {
                    "ex_id": 241,
                    "db_id": "musical",
                    "query": "SELECT Name FROM actor WHERE Age != 20",
                    "question": "List the name of actors whose age is not 20."
                }
            ],
            "example_quality": 0.7728017969231281,
            "example_similarity": 0.573332957453716,
            "db_id": "singer"
        },
        {
            "index": 1008,
            "question": "What are the names of the singers who are not French citizens?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of climbers who are not from the country of Switzerland? */\nSELECT Name FROM climber WHERE Country != \"Switzerland\"\n\n/* Answer the following: What are the names of artists who did not have an exhibition in 2004? */\nSELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004\n\n/* Answer the following: What are the names of instructors who didn't teach? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who are not French citizens? */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1116,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"",
                    "question": "What are the names of climbers who are not from the country of Switzerland?"
                },
                {
                    "ex_id": 1683,
                    "db_id": "theme_gallery",
                    "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
                    "question": "What are the names of artists who did not have an exhibition in 2004?"
                },
                {
                    "ex_id": 1442,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
                    "question": "What are the names of instructors who didn't teach?"
                }
            ],
            "example_quality": 0.7726879148408717,
            "example_similarity": 0.5733001347558637,
            "db_id": "singer"
        },
        {
            "index": 1009,
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which authors with submissions are from college \"Florida\" or \"Temple\"? */\nSELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"\n\n/* Answer the following: Find the name of captains whose rank are either Midshipman or Lieutenant. */\nSELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\n\n/* Answer the following: What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"? */\nSELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name of singers whose birth year is either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5822,
                    "db_id": "workshop_paper",
                    "query": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"",
                    "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?"
                },
                {
                    "ex_id": 6235,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'",
                    "question": "Find the name of captains whose rank are either Midshipman or Lieutenant."
                },
                {
                    "ex_id": 4218,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
                    "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?"
                }
            ],
            "example_quality": 0.7729131993653109,
            "example_similarity": 0.5732037541276729,
            "db_id": "singer"
        },
        {
            "index": 1010,
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the technicians aged either 36 or 37? */\nSELECT Name FROM technician WHERE Age  =  36 OR Age  =  37\n\n/* Answer the following: What are the names of captains that have either the rank Midshipman or Lieutenant? */\nSELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'\n\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers whose birth years are either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2243,
                    "db_id": "machine_repair",
                    "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37",
                    "question": "What are the names of the technicians aged either 36 or 37?"
                },
                {
                    "ex_id": 6236,
                    "db_id": "ship_1",
                    "query": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'",
                    "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?"
                },
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.7731380377817808,
            "example_similarity": 0.5733156090727716,
            "db_id": "singer"
        },
        {
            "index": 1011,
            "question": "What is the name of the singer with the largest net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the school color of the school with the largest enrollment? */\nSELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1\n\n/* Answer the following: What is the name of the ship with the largest tonnage? */\nSELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1\n\n/* Answer the following: What are the name and location of the cinema with the largest capacity? */\nSELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer with the largest net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4892,
                    "db_id": "school_player",
                    "query": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
                    "question": "What is the school color of the school with the largest enrollment?"
                },
                {
                    "ex_id": 4009,
                    "db_id": "ship_mission",
                    "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1",
                    "question": "What is the name of the ship with the largest tonnage?"
                },
                {
                    "ex_id": 1940,
                    "db_id": "cinema",
                    "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
                    "question": "What are the name and location of the cinema with the largest capacity?"
                }
            ],
            "example_quality": 0.7733624314140441,
            "example_similarity": 0.5736463476470738,
            "db_id": "singer"
        },
        {
            "index": 1012,
            "question": "What is the name of the singer who is worth the most?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the aircraft that has won an award the most? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the customer id of the customer who has the most orders? */\nSELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the country that has the most perpetrators? */\nSELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer who is worth the most? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4825,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the name of the aircraft that has won an award the most?"
                },
                {
                    "ex_id": 6900,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id of the customer who has the most orders?"
                },
                {
                    "ex_id": 2317,
                    "db_id": "perpetrator",
                    "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the country that has the most perpetrators?"
                }
            ],
            "example_quality": 0.7731668132262802,
            "example_similarity": 0.5736646117597047,
            "db_id": "singer"
        },
        {
            "index": 1013,
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different types of ships and the number of ships of each type. */\nSELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n\n/* Answer the following: Show different teams of technicians and the number of technicians in each team. */\nSELECT Team ,  COUNT(*) FROM technician GROUP BY Team\n\n/* Answer the following: Show different teams in eliminations and the number of eliminations from each team. */\nSELECT Team ,  COUNT(*) FROM elimination GROUP BY Team\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenship of singers and the number of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4011,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
                    "question": "Show different types of ships and the number of ships of each type."
                },
                {
                    "ex_id": 2246,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
                    "question": "Show different teams of technicians and the number of technicians in each team."
                },
                {
                    "ex_id": 1865,
                    "db_id": "wrestler",
                    "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team",
                    "question": "Show different teams in eliminations and the number of eliminations from each team."
                }
            ],
            "example_quality": 0.7733907354244773,
            "example_similarity": 0.573959337929954,
            "db_id": "singer"
        },
        {
            "index": 1014,
            "question": "For each citizenship, how many singers are from that country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many appelations are in Napa Country? */\nSELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"\n\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Answer the following: How many professors who are from either Accounting or Biology department? */\nSELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, how many singers are from that country? */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6540,
                    "db_id": "wine_1",
                    "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
                    "question": "How many appelations are in Napa Country?"
                },
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                },
                {
                    "ex_id": 3290,
                    "db_id": "college_1",
                    "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
                    "question": "How many professors who are from either Accounting or Biology department?"
                }
            ],
            "example_quality": 0.773234910848501,
            "example_similarity": 0.573808400464653,
            "db_id": "singer"
        },
        {
            "index": 1015,
            "question": "Please show the most common citizenship of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the most common age of editors. */\nSELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common occupation of players. */\nSELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: Please show the most common reigns of wrestlers. */\nSELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Please show the most common citizenship of singers. */\nSELECT ",
            "response": "Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 657,
                    "db_id": "journal_committee",
                    "query": "SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common age of editors."
                },
                {
                    "ex_id": 1727,
                    "db_id": "riding_club",
                    "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common occupation of players."
                },
                {
                    "ex_id": 1873,
                    "db_id": "wrestler",
                    "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common reigns of wrestlers."
                }
            ],
            "example_quality": 0.7734583247294384,
            "example_similarity": 0.5742282936661656,
            "db_id": "singer"
        },
        {
            "index": 1016,
            "question": "What is the most common singer citizenship ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common participant type? */\nSELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common competition type? */\nSELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Answer the following: What is the most common hometown of gymnasts? */\nSELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the most common singer citizenship ? */\nSELECT ",
            "response": "citizenship from singer group by citizenship order by count(*) desc limit 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 2147,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common participant type?"
                },
                {
                    "ex_id": 3369,
                    "db_id": "sports_competition",
                    "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common competition type?"
                },
                {
                    "ex_id": 1763,
                    "db_id": "gymnast",
                    "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What is the most common hometown of gymnasts?"
                }
            ],
            "example_quality": 0.7730719999816263,
            "example_similarity": 0.5746109065296467,
            "db_id": "singer"
        },
        {
            "index": 1017,
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000? */\nSELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000\n\n/* Answer the following: Show the maximum and minimum share count of different transaction types. */\nSELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code\n\n/* Answer the following: Show different types of ships and the average tonnage of ships of each type. */\nSELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenships and the maximum net worth of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3445,
                    "db_id": "hr_1",
                    "query": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
                    "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?"
                },
                {
                    "ex_id": 5868,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code",
                    "question": "Show the maximum and minimum share count of different transaction types."
                },
                {
                    "ex_id": 4017,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE",
                    "question": "Show different types of ships and the average tonnage of ships of each type."
                }
            ],
            "example_quality": 0.7729298018605132,
            "example_similarity": 0.5746705593037353,
            "db_id": "singer"
        },
        {
            "index": 1018,
            "question": "For each citizenship, what is the maximum net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum price and score of wines for each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What are the maximum price and score of wines in each year? */\nSELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR\n\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, what is the maximum net worth? */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6577,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines for each year?"
                },
                {
                    "ex_id": 6576,
                    "db_id": "wine_1",
                    "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
                    "question": "What are the maximum price and score of wines in each year?"
                },
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.7728238125460515,
            "example_similarity": 0.5746425468153759,
            "db_id": "singer"
        },
        {
            "index": 1019,
            "question": "Show titles of songs and names of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show locations and nicknames of schools. */\nSELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID\n\n/* Answer the following: Show the reign and days held of wrestlers. */\nSELECT Reign ,  Days_held FROM wrestler\n\n/* Answer the following: Show the title and publication dates of books. */\nSELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show titles of songs and names of singers. */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4885,
                    "db_id": "school_player",
                    "query": "SELECT T1.Location ,  T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID  =  T2.School_ID",
                    "question": "Show locations and nicknames of schools."
                },
                {
                    "ex_id": 1869,
                    "db_id": "wrestler",
                    "query": "SELECT Reign ,  Days_held FROM wrestler",
                    "question": "Show the reign and days held of wrestlers."
                },
                {
                    "ex_id": 223,
                    "db_id": "book_2",
                    "query": "SELECT T1.Title ,  T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID  =  T2.Book_ID",
                    "question": "Show the title and publication dates of books."
                }
            ],
            "example_quality": 0.7730467528674,
            "example_similarity": 0.5748564330232044,
            "db_id": "singer"
        },
        {
            "index": 1020,
            "question": "What are the song titles and singer names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the lengths and heights of roller coasters? */\nSELECT LENGTH ,  Height FROM roller_coaster\n\n/* Answer the following: What are the team and starting year of technicians? */\nSELECT Team ,  Starting_Year FROM technician\n\n/* Answer the following: What are the names of wrestlers and the elimination moves? */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the song titles and singer names? */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6206,
                    "db_id": "roller_coaster",
                    "query": "SELECT LENGTH ,  Height FROM roller_coaster",
                    "question": "What are the lengths and heights of roller coasters?"
                },
                {
                    "ex_id": 2238,
                    "db_id": "machine_repair",
                    "query": "SELECT Team ,  Starting_Year FROM technician",
                    "question": "What are the team and starting year of technicians?"
                },
                {
                    "ex_id": 1857,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "What are the names of wrestlers and the elimination moves?"
                }
            ],
            "example_quality": 0.7732692560508633,
            "example_similarity": 0.5751484632582083,
            "db_id": "singer"
        },
        {
            "index": 1021,
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the buildings which have rooms with capacity more than 50. */\nSELECT DISTINCT building FROM classroom WHERE capacity  >  50\n\n/* Answer the following: Show the facility codes of apartments with more than 4 bedrooms. */\nSELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4\n\n/* Answer the following: Find the payment method code used by more than 3 parties. */\nSELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show distinct names of singers that have songs with sales more than 300000. */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1323,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
                    "question": "Find the buildings which have rooms with capacity more than 50."
                },
                {
                    "ex_id": 1239,
                    "db_id": "apartment_rentals",
                    "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4",
                    "question": "Show the facility codes of apartments with more than 4 bedrooms."
                },
                {
                    "ex_id": 6335,
                    "db_id": "e_government",
                    "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3",
                    "question": "Find the payment method code used by more than 3 parties."
                }
            ],
            "example_quality": 0.7732202306146864,
            "example_similarity": 0.5751425031382963,
            "db_id": "singer"
        },
        {
            "index": 1022,
            "question": "what are the different names of the singers that have sales more than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different cities that have more than 100 memberships? */\nSELECT DISTINCT city FROM branch WHERE membership_amount  >=  100\n\n/* Answer the following: What are the different ids and names of the stations that have had more than 12 bikes available? */\nSELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12\n\n/* Answer the following: What are the names of the albums that have more than 10 tracks? */\nSELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: what are the different names of the singers that have sales more than 300000? */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5408,
                    "db_id": "shop_membership",
                    "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
                    "question": "What are the different cities that have more than 100 memberships?"
                },
                {
                    "ex_id": 205,
                    "db_id": "bike_1",
                    "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
                    "question": "What are the different ids and names of the stations that have had more than 12 bikes available?"
                },
                {
                    "ex_id": 629,
                    "db_id": "store_1",
                    "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;",
                    "question": "What are the names of the albums that have more than 10 tracks?"
                }
            ],
            "example_quality": 0.7732178950987554,
            "example_similarity": 0.5754025747325979,
            "db_id": "singer"
        },
        {
            "index": 1023,
            "question": "Show the names of singers that have more than one song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of countries that have more than one roller coaster. */\nSELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1\n\n/* Answer the following: Show the names of the buildings that have more than one company offices. */\nSELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1\n\n/* Answer the following: Show the locations that have more than one railways. */\nSELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers that have more than one song. */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6216,
                    "db_id": "roller_coaster",
                    "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                    "question": "Show the names of countries that have more than one roller coaster."
                },
                {
                    "ex_id": 4564,
                    "db_id": "company_office",
                    "query": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
                    "question": "Show the names of the buildings that have more than one company offices."
                },
                {
                    "ex_id": 5648,
                    "db_id": "railway",
                    "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1",
                    "question": "Show the locations that have more than one railways."
                }
            ],
            "example_quality": 0.7733961332810201,
            "example_similarity": 0.5756917064984355,
            "db_id": "singer"
        },
        {
            "index": 1024,
            "question": "What are the names of the singers that have more than one songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of ships that have more than one captain? */\nSELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1\n\n/* Answer the following: What are the names of students who have more than one advisor? */\nSELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1\n\n/* Answer the following: What are the official names of cities that have hosted more than one competition? */\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers that have more than one songs? */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 6260,
                    "db_id": "ship_1",
                    "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1",
                    "question": "What are the names of ships that have more than one captain?"
                },
                {
                    "ex_id": 1392,
                    "db_id": "college_2",
                    "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1",
                    "question": "What are the names of students who have more than one advisor?"
                },
                {
                    "ex_id": 38,
                    "db_id": "farm",
                    "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1",
                    "question": "What are the official names of cities that have hosted more than one competition?"
                }
            ],
            "example_quality": 0.7736174261196128,
            "example_similarity": 0.5759566792552961,
            "db_id": "singer"
        },
        {
            "index": 1025,
            "question": "Show the names of singers and the total sales of their songs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the authors of submissions and the acceptance results of their submissions. */\nSELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID\n\n/* Answer the following: Give the names of wrestlers and their elimination moves. */\nSELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID\n\n/* Answer the following: Show the names of members and the decoration themes they have. */\nSELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers and the total sales of their songs. */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5833,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
                    "question": "Show the authors of submissions and the acceptance results of their submissions."
                },
                {
                    "ex_id": 1858,
                    "db_id": "wrestler",
                    "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
                    "question": "Give the names of wrestlers and their elimination moves."
                },
                {
                    "ex_id": 4496,
                    "db_id": "decoration_competition",
                    "query": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID",
                    "question": "Show the names of members and the decoration themes they have."
                }
            ],
            "example_quality": 0.773187880663236,
            "example_similarity": 0.5760993773459956,
            "db_id": "singer"
        },
        {
            "index": 1026,
            "question": "For each singer name, what is the total sales for their songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total rating of channel for each channel owner? */\nSELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER\n\n/* Answer the following: What are total transaction amounts for each transaction type? */\nSELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type\n\n/* Answer the following: What are the names of customers with accounts, and what are the total savings balances for each? */\nSELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each singer name, what is the total sales for their songs? */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3766,
                    "db_id": "program_share",
                    "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER",
                    "question": "What is the total rating of channel for each channel owner?"
                },
                {
                    "ex_id": 1589,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
                    "question": "What are total transaction amounts for each transaction type?"
                },
                {
                    "ex_id": 1808,
                    "db_id": "small_bank_1",
                    "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "What are the names of customers with accounts, and what are the total savings balances for each?"
                }
            ],
            "example_quality": 0.7734089451070341,
            "example_similarity": 0.5761335018428426,
            "db_id": "singer"
        },
        {
            "index": 1027,
            "question": "List the name of singers that do not have any song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of mountains that do not have any climber. */\nSELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)\n\n/* Answer the following: List the names of counties that do not have any cities. */\nSELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)\n\n/* Answer the following: List the names of clubs that do not have any players. */\nSELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers that do not have any song. */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 1143,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
                    "question": "List the names of mountains that do not have any climber."
                },
                {
                    "ex_id": 2565,
                    "db_id": "county_public_safety",
                    "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)",
                    "question": "List the names of counties that do not have any cities."
                },
                {
                    "ex_id": 3372,
                    "db_id": "sports_competition",
                    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                    "question": "List the names of clubs that do not have any players."
                }
            ],
            "example_quality": 0.773629579045586,
            "example_similarity": 0.5765462248206004,
            "db_id": "singer"
        },
        {
            "index": 1028,
            "question": "What is the sname of every sing that does not have any song?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the dorms that don't have any amenities? */\nSELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)\n\n/* Answer the following: What are the names of all clubs that do not have any players? */\nSELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n\n/* Answer the following: What are the names of the different artists from Bangladesh who never received a rating higher than a 7? */\nSELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the sname of every sing that does not have any song? */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5694,
                    "db_id": "dorm_1",
                    "query": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)",
                    "question": "What are the names of all the dorms that don't have any amenities?"
                },
                {
                    "ex_id": 3373,
                    "db_id": "sports_competition",
                    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                    "question": "What are the names of all clubs that do not have any players?"
                },
                {
                    "ex_id": 3629,
                    "db_id": "music_1",
                    "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
                    "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?"
                }
            ],
            "example_quality": 0.7736961896332442,
            "example_similarity": 0.5763184076059831,
            "db_id": "singer"
        },
        {
            "index": 1029,
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the denomination shared by schools founded before 1890 and schools founded after 1900 */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Answer the following: Show the names and locations of institutions that are founded after 1990 and have the type \"Private\". */\nSELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'\n\n/* Answer the following: Show the police force shared by counties with location on the east and west. */\nSELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4895,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900"
                },
                {
                    "ex_id": 1917,
                    "db_id": "protein_institute",
                    "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'",
                    "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\"."
                },
                {
                    "ex_id": 2567,
                    "db_id": "county_public_safety",
                    "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"",
                    "question": "Show the police force shared by counties with location on the east and west."
                }
            ],
            "example_quality": 0.7737416868449831,
            "example_similarity": 0.5764177221485385,
            "db_id": "singer"
        },
        {
            "index": 1030,
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the denominations used by both schools founded before 1890 and schools founded  after 1900? */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Answer the following: What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"? */\nSELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"\n\n/* Answer the following: Show the denomination shared by schools founded before 1890 and schools founded after 1900 */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4896,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
                },
                {
                    "ex_id": 2263,
                    "db_id": "machine_repair",
                    "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
                    "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?"
                },
                {
                    "ex_id": 4895,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900"
                }
            ],
            "example_quality": 0.7739613551101822,
            "example_similarity": 0.576392797710283,
            "db_id": "singer"
        },
        {
            "index": 1031,
            "question": "How many available features are there in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many available hotels are there in total? */\nSELECT count(*) FROM HOTELS\n\n/* Answer the following: How many apartment bookings are there in total? */\nSELECT count(*) FROM Apartment_Bookings\n\n/* Answer the following: How many assessment notes are there in total? */\nSELECT count(*) FROM ASSESSMENT_NOTES\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: How many available features are there in total? */\nSELECT ",
            "response": "count(*) FROM Other_Available_Features",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5886,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM HOTELS",
                    "question": "How many available hotels are there in total?"
                },
                {
                    "ex_id": 1195,
                    "db_id": "apartment_rentals",
                    "query": "SELECT count(*) FROM Apartment_Bookings",
                    "question": "How many apartment bookings are there in total?"
                },
                {
                    "ex_id": 3087,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT count(*) FROM ASSESSMENT_NOTES",
                    "question": "How many assessment notes are there in total?"
                }
            ],
            "example_quality": 0.7741805972487756,
            "example_similarity": 0.5766743436549546,
            "db_id": "real_estate_properties"
        },
        {
            "index": 1032,
            "question": "What is the feature type name of feature AirCon?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the school code of the accounting department? */\nSELECT school_code FROM department WHERE dept_name  =  \"Accounting\"\n\n/* Answer the following: What is the course title of the prerequisite of course Mobile Computing? */\nSELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')\n\n/* Answer the following: What is the role of the employee named Koby? */\nSELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What is the feature type name of feature AirCon? */\nSELECT ",
            "response": "T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 3185,
                    "db_id": "college_1",
                    "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
                    "question": "What is the school code of the accounting department?"
                },
                {
                    "ex_id": 1437,
                    "db_id": "college_2",
                    "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
                    "question": "What is the course title of the prerequisite of course Mobile Computing?"
                },
                {
                    "ex_id": 2108,
                    "db_id": "cre_Doc_Control_Systems",
                    "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";",
                    "question": "What is the role of the employee named Koby?"
                }
            ],
            "example_quality": 0.7742056160498914,
            "example_similarity": 0.5768925514632975,
            "db_id": "real_estate_properties"
        },
        {
            "index": 1033,
            "question": "Show the property type descriptions of properties belonging to that code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the description of transaction type with code \"PUR\". */\nSELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"\n\n/* Answer the following: Find the code of the document type \"Paper\". */\nSELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"\n\n/* Answer the following: Return the description of the budget type that has the code ORG. */\nSELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: Show the property type descriptions of properties belonging to that code. */\nSELECT ",
            "response": "T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 5854,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"",
                    "question": "Show the description of transaction type with code \"PUR\"."
                },
                {
                    "ex_id": 4172,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
                    "question": "Find the code of the document type \"Paper\"."
                },
                {
                    "ex_id": 6445,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"",
                    "question": "Return the description of the budget type that has the code ORG."
                }
            ],
            "example_quality": 0.774061176924964,
            "example_similarity": 0.5767884567814338,
            "db_id": "real_estate_properties"
        },
        {
            "index": 1034,
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the response received dates for the documents described as 'Regular' or granted with more than 100? */\nSELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100\n\n/* Answer the following: What are the cities that have a branch that opened in 2001 and a branch with more than 100 members? */\nSELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100\n\n/* Answer the following: What are the names of customers who have a loan of more than 3000 in amount? */\nSELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What are the names of properties that are either houses or apartments with more than 1 room? */\nSELECT ",
            "response": "property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
            "n_examples": 3,
            "examples": [
                {
                    "ex_id": 4337,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100",
                    "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?"
                },
                {
                    "ex_id": 5434,
                    "db_id": "shop_membership",
                    "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
                    "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?"
                },
                {
                    "ex_id": 3076,
                    "db_id": "loan_1",
                    "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
                    "question": "What are the names of customers who have a loan of more than 3000 in amount?"
                }
            ],
            "example_quality": 0.7737589305851318,
            "example_similarity": 0.5767212013849445,
            "db_id": "real_estate_properties"
        }
    ]
}