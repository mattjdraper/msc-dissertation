{
    "accuracy": 0.7611218568665378,
    "args": {
        "data_type": "spider",
        "split": "test",
        "tokenizer": "gpt-3.5-turbo",
        "max_seq_length": 4096,
        "prompt_repr": "SQL",
        "k-shot": 1,
        "example_type": "QA",
        "selector_type": "EUCDISQUESTIONMASK",
        "embedding_model": "text-embedding-3-large"
    },
    "questions": [
        {
            "index": 1,
            "question": "How many singers do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers do we have? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.4444444444444444,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 2,
            "question": "What is the total number of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of regions. */\nSELECT count(*) FROM region\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the total number of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2041,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region",
                    "question": "Count the number of regions."
                }
            ],
            "example_quality": 1.0,
            "example_similarity": 0.4222222222222222,
            "db_id": "concert_singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 3,
            "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all people names in the order of their date of birth from old to young. */\nSELECT name FROM people ORDER BY date_of_birth\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2407,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people ORDER BY date_of_birth",
                    "question": "List all people names in the order of their date of birth from old to young."
                }
            ],
            "example_quality": 0.9259259259259259,
            "example_similarity": 0.4096866096866097,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
            "correct": 1
        },
        {
            "index": 4,
            "question": "What are the names, countries, and ages for every singer in descending order of age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the themes of parties ordered by the number of hosts in ascending manner? */\nSELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */\nSELECT ",
            "response": "name , country , age FROM singer ORDER BY age DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2664,
                    "db_id": "party_host",
                    "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
                    "question": "What are the themes of parties ordered by the number of hosts in ascending manner?"
                }
            ],
            "example_quality": 0.8888888888888888,
            "example_similarity": 0.39726495726495725,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 5,
            "question": "What is the average, minimum, and maximum age of all singers from France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the minimum, mean, and maximum age across all students? */\nSELECT min(age) ,  avg(age) ,  max(age) FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age of all singers from France? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 485,
                    "db_id": "allergy_1",
                    "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
                    "question": "What is the minimum, mean, and maximum age across all students?"
                }
            ],
            "example_quality": 0.8900584795321637,
            "example_similarity": 0.4511452991452991,
            "db_id": "concert_singer",
            "pred": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
            "correct": 1
        },
        {
            "index": 6,
            "question": "What is the average, minimum, and maximum age for all French singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and locations of all circuits in France or Belgium? */\nSELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average, minimum, and maximum age for all French singers? */\nSELECT ",
            "response": "avg(age) , min(age) , max(age) FROM singer WHERE country = 'France'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2217,
                    "db_id": "formula_1",
                    "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
                    "question": "What are the ids and locations of all circuits in France or Belgium?"
                }
            ],
            "example_quality": 0.7943469785575048,
            "example_similarity": 0.4394464794464794,
            "db_id": "concert_singer",
            "pred": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = \"France\"",
            "correct": 1
        },
        {
            "index": 7,
            "question": "Show the name and the release year of the song by the youngest singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and the release year of the song by the youngest singer. */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4413,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "Who is the youngest male?"
                }
            ],
            "example_quality": 0.7198298777246145,
            "example_similarity": 0.400477934763649,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
            "correct": 0
        },
        {
            "index": 8,
            "question": "What are the names and release years for all the songs of the youngest singer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and release years for all the songs of the youngest singer? */\nSELECT ",
            "response": "song_name , song_release_year FROM singer ORDER BY age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4414,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "What is the name of the youngest male?"
                }
            ],
            "example_quality": 0.6639420520999468,
            "example_similarity": 0.4092417223299576,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
            "correct": 0
        },
        {
            "index": 9,
            "question": "What are all distinct countries where singers above age 20 are from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct location names? */\nSELECT DISTINCT Location_Name FROM LOCATIONS\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all distinct countries where singers above age 20 are from? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5891,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT DISTINCT Location_Name FROM LOCATIONS",
                    "question": "What are the distinct location names?"
                }
            ],
            "example_quality": 0.6695357923428099,
            "example_similarity": 0.4113894674678988,
            "db_id": "concert_singer",
            "pred": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
            "correct": 1
        },
        {
            "index": 10,
            "question": "What are  the different countries with singers above age 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are  the different countries with singers above age 20? */\nSELECT ",
            "response": "DISTINCT country FROM singer WHERE age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6740107845371004,
            "example_similarity": 0.41191718738777555,
            "db_id": "concert_singer",
            "pred": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
            "correct": 1
        },
        {
            "index": 11,
            "question": "Show all countries and the number of singers in each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes and the number of cards in each type. */\nSELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show all countries and the number of singers in each country. */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 720,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
                    "question": "Show all card type codes and the number of cards in each type."
                }
            ],
            "example_quality": 0.7036461677610003,
            "example_similarity": 0.4523922482746011,
            "db_id": "concert_singer",
            "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
            "correct": 1
        },
        {
            "index": 12,
            "question": "How many singers are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are from each country? */\nSELECT ",
            "response": "country , count(*) FROM singer GROUP BY country",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.7283423204475836,
            "example_similarity": 0.4601474397062632,
            "db_id": "concert_singer",
            "pred": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
            "correct": 1
        },
        {
            "index": 13,
            "question": "List all song names by singers above the average age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all song names by singers above the average age. */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.692558903085219,
            "example_similarity": 0.4555207135750122,
            "db_id": "concert_singer",
            "pred": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
            "correct": 1
        },
        {
            "index": 14,
            "question": "What are all the song names by singers who are older than average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are all the song names by singers who are older than average? */\nSELECT ",
            "response": "song_name FROM singer WHERE age > (SELECT avg(age) FROM singer)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                }
            ],
            "example_quality": 0.7103173007640058,
            "example_similarity": 0.4544120911767971,
            "db_id": "concert_singer",
            "pred": "SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)",
            "correct": 1
        },
        {
            "index": 15,
            "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show location and name for all stadiums with a capacity between 5000 and 10000. */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6962961473797388,
            "example_similarity": 0.44764736352971646,
            "db_id": "concert_singer",
            "pred": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
            "correct": 1
        },
        {
            "index": 16,
            "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the station station and end station for the trips with the three smallest ids? */\nSELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the locations and names of all stations with capacity between 5000 and 10000? */\nSELECT ",
            "response": "LOCATION , name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 117,
                    "db_id": "bike_1",
                    "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
                    "question": "What is the station station and end station for the trips with the three smallest ids?"
                }
            ],
            "example_quality": 0.6795633524542193,
            "example_similarity": 0.44684331635258745,
            "db_id": "concert_singer",
            "pred": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000",
            "correct": 1
        },
        {
            "index": 17,
            "question": "What is the maximum capacity and the average of all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common maximum page size? */\nSELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the maximum capacity and the average of all stadiums ? */\nSELECT ",
            "response": "max(capacity), average from stadium",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4938,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common maximum page size?"
                }
            ],
            "example_quality": 0.6457809880683674,
            "example_similarity": 0.4440878271553764,
            "db_id": "concert_singer",
            "pred": "SELECT MAX(Capacity) AS max_capacity, AVG(Capacity) AS avg_capacity FROM stadium",
            "correct": 0
        },
        {
            "index": 18,
            "question": "What is the average and maximum capacities for all stadiums ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common maximum page size? */\nSELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the average and maximum capacities for all stadiums ? */\nSELECT ",
            "response": "avg(capacity) , max(capacity) from stadium",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4938,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common maximum page size?"
                }
            ],
            "example_quality": 0.6151952718000189,
            "example_similarity": 0.4432258050118238,
            "db_id": "concert_singer",
            "pred": "SELECT AVG(Capacity) AS average_capacity, MAX(Capacity) AS max_capacity FROM stadium",
            "correct": 1
        },
        {
            "index": 19,
            "question": "What is the name and capacity for the stadium with highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the average and maximum attendances of all events? */\nSELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2818,
                    "db_id": "news_report",
                    "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
                    "question": "what are the average and maximum attendances of all events?"
                }
            ],
            "example_quality": 0.5982964494452192,
            "example_similarity": 0.4330560258006752,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Capacity FROM stadium s WHERE s.Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Average DESC LIMIT 1)",
            "correct": 1
        },
        {
            "index": 20,
            "question": "What is the name and capacity for the stadium with the highest average attendance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the average and maximum attendances of all events? */\nSELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity for the stadium with the highest average attendance? */\nSELECT ",
            "response": "name , capacity FROM stadium ORDER BY average DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2818,
                    "db_id": "news_report",
                    "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
                    "question": "what are the average and maximum attendances of all events?"
                }
            ],
            "example_quality": 0.5830875093258994,
            "example_similarity": 0.4233079864154033,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Capacity FROM stadium s WHERE s.Stadium_ID = (SELECT Stadium_ID FROM (SELECT Stadium_ID, AVG(Average) as avg_attendance FROM stadium GROUP BY Stadium_ID ORDER BY avg_attendance DESC LIMIT 1))",
            "correct": 1
        },
        {
            "index": 21,
            "question": "How many concerts are there in year 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts are there in year 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.5886547707865708,
            "example_similarity": 0.4059515837009443,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
            "correct": 1
        },
        {
            "index": 22,
            "question": "How many concerts occurred in 2014 or 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct locations have the things with service detail 'Unsatisfied' been located in? */\nSELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: How many concerts occurred in 2014 or 2015? */\nSELECT ",
            "response": "count(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4853,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
                    "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?"
                }
            ],
            "example_quality": 0.6028068266599086,
            "example_similarity": 0.4042456504705186,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
            "correct": 1
        },
        {
            "index": 23,
            "question": "Show the stadium name and the number of concerts in each stadium.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and the number of concerts in each stadium. */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1548,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Show the number of accounts."
                }
            ],
            "example_quality": 0.601960153037014,
            "example_similarity": 0.4067366422560813,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name as Stadium_Name, COUNT(c.concert_ID) as Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;",
            "correct": 0
        },
        {
            "index": 24,
            "question": "For each stadium, how many concerts play there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players are there? */\nSELECT count(*) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: For each stadium, how many concerts play there? */\nSELECT ",
            "response": "T2.name , count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1720,
                    "db_id": "riding_club",
                    "query": "SELECT count(*) FROM player",
                    "question": "How many players are there?"
                }
            ],
            "example_quality": 0.6011840355493606,
            "example_similarity": 0.4087286761014719,
            "db_id": "concert_singer",
            "pred": "SELECT s.\"Name\", COUNT(c.\"concert_ID\") AS \"Number of Concerts\" FROM stadium s LEFT JOIN concert c ON s.\"Stadium_ID\" = c.\"Stadium_ID\" GROUP BY s.\"Name\"",
            "correct": 0
        },
        {
            "index": 25,
            "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the customer id and number of accounts with most accounts. */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. */\nSELECT ",
            "response": "T2.name , T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 680,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the customer id and number of accounts with most accounts."
                }
            ],
            "example_quality": 0.6080457650364771,
            "example_similarity": 0.42061482317506005,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 26,
            "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and capacity of the stadium with the most concerts after 2013 ? */\nSELECT ",
            "response": "t2.name , t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year > 2013 group by t2.stadium_id order by count(*) desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.5917237536653724,
            "example_similarity": 0.41051020446994635,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 27,
            "question": "Which year has most number of concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Which year has most number of concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6068450961222105,
            "example_similarity": 0.40670213421892276,
            "db_id": "concert_singer",
            "pred": "SELECT Year, COUNT(*) AS Num_Concerts FROM concert GROUP BY Year ORDER BY Num_Concerts DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 28,
            "question": "What is the year that had the most concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and ID of the product bought the most. */\nSELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the year that had the most concerts? */\nSELECT ",
            "response": "YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6133,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
                    "question": "What are the name and ID of the product bought the most."
                }
            ],
            "example_quality": 0.6166846620170056,
            "example_similarity": 0.4020976929174533,
            "db_id": "concert_singer",
            "pred": "SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 29,
            "question": "Show the stadium names without any concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show station names without any trains. */\nSELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the stadium names without any concert. */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6619,
                    "db_id": "train_station",
                    "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)",
                    "question": "Show station names without any trains."
                }
            ],
            "example_quality": 0.6299024322922812,
            "example_similarity": 0.418404669023748,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
            "correct": 1
        },
        {
            "index": 30,
            "question": "What are the names of the stadiums without any concerts?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the stadiums without any concerts? */\nSELECT ",
            "response": "name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                }
            ],
            "example_quality": 0.6422390178825385,
            "example_similarity": 0.4244578467229564,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
            "correct": 1
        },
        {
            "index": 31,
            "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show countries where a singer above age 40 and a singer below 30 are from. */\nSELECT ",
            "response": "country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6404969622772194,
            "example_similarity": 0.41925462246533984,
            "db_id": "concert_singer",
            "pred": "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30",
            "correct": 1
        },
        {
            "index": 32,
            "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show names for all stadiums except for stadiums having a concert in year 2014. */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6413147655393896,
            "example_similarity": 0.41718232727800386,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
            "correct": 1
        },
        {
            "index": 33,
            "question": "What are the names of all stadiums that did not have a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of hosts who did not host any party in our record? */\nSELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of all stadiums that did not have a concert in 2014? */\nSELECT ",
            "response": "name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2690,
                    "db_id": "party_host",
                    "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
                    "question": "What are the names of hosts who did not host any party in our record?"
                }
            ],
            "example_quality": 0.6420830049674889,
            "example_similarity": 0.422722256754428,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
            "correct": 1
        },
        {
            "index": 34,
            "question": "Show the name and theme for all concerts and the number of singers in each concert.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes and the number of cards in each type. */\nSELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name and theme for all concerts and the number of singers in each concert. */\nSELECT ",
            "response": "T2.concert_name , T2.theme , count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 720,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
                    "question": "Show all card type codes and the number of cards in each type."
                }
            ],
            "example_quality": 0.6526099754096216,
            "example_similarity": 0.428865100596016,
            "db_id": "concert_singer",
            "pred": "SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_Name, c.Theme",
            "correct": 1
        },
        {
            "index": 35,
            "question": "What are the names , themes , and number of singers for every concert ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names , themes , and number of singers for every concert ? */\nSELECT ",
            "response": "t2.concert_name , t2.theme , count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id group by t2.concert_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.6384282618264896,
            "example_similarity": 0.42575466915041554,
            "db_id": "concert_singer",
            "pred": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme",
            "correct": 1
        },
        {
            "index": 36,
            "question": "List singer names and number of concerts for each singer.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different parties of people along with the number of people in each party. */\nSELECT Party ,  COUNT(*) FROM people GROUP BY Party\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List singer names and number of concerts for each singer. */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1499,
                    "db_id": "debate",
                    "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party",
                    "question": "Show different parties of people along with the number of people in each party."
                }
            ],
            "example_quality": 0.6484719212201981,
            "example_similarity": 0.42627382957524973,
            "db_id": "concert_singer",
            "pred": "SELECT s.\"Name\", COUNT(c.\"concert_ID\") AS \"Number of Concerts\" FROM singer s JOIN singer_in_concert sic ON s.\"Singer_ID\" = sic.\"Singer_ID\" JOIN concert c ON sic.\"concert_ID\" = c.\"concert_ID\" GROUP BY s.\"Name\"",
            "correct": 1
        },
        {
            "index": 37,
            "question": "What are the names of the singers and number of concerts for each person?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the code of each role and the number of employees in each role? */\nSELECT role_code ,  count(*) FROM Employees GROUP BY role_code\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers and number of concerts for each person? */\nSELECT ",
            "response": "T2.name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4206,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code",
                    "question": "What is the code of each role and the number of employees in each role?"
                }
            ],
            "example_quality": 0.6579726801061387,
            "example_similarity": 0.4318226165426327,
            "db_id": "concert_singer",
            "pred": "SELECT Name, COUNT(concert_ID) FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY Name",
            "correct": 1
        },
        {
            "index": 38,
            "question": "List all singer names in concerts in year 2014.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: List all singer names in concerts in year 2014. */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6582014692261527,
            "example_similarity": 0.42653173796964844,
            "db_id": "concert_singer",
            "pred": "SELECT s.\"Name\" FROM singer s JOIN singer_in_concert sic ON s.\"Singer_ID\" = sic.\"Singer_ID\" JOIN concert c ON sic.\"concert_ID\" = c.\"concert_ID\" WHERE c.\"Year\" = '2014';",
            "correct": 1
        },
        {
            "index": 39,
            "question": "What are the names of the singers who performed in a concert in 2014?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"? */\nSELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who performed in a concert in 2014? */\nSELECT ",
            "response": "T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5264,
                    "db_id": "music_2",
                    "query": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
                    "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?"
                }
            ],
            "example_quality": 0.6669655341177898,
            "example_similarity": 0.4264431529723991,
            "db_id": "concert_singer",
            "pred": "SELECT Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = \"2014\"",
            "correct": 1
        },
        {
            "index": 40,
            "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators whose country is not \"China\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: what is the name and nation of the singer who have a song having 'Hey' in its name? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2311,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
                    "question": "What are the names of perpetrators whose country is not \"China\"?"
                }
            ],
            "example_quality": 0.6690413957648451,
            "example_similarity": 0.4244359203019353,
            "db_id": "concert_singer",
            "pred": "SELECT T1.Name, T1.Country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Song_Name LIKE '%Hey%'",
            "correct": 0
        },
        {
            "index": 41,
            "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the names of programs whose origin is not in Beijing. */\nSELECT name FROM program WHERE origin != 'Beijing'\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? */\nSELECT ",
            "response": "name , country FROM singer WHERE song_name LIKE '%Hey%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3761,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program WHERE origin != 'Beijing'",
                    "question": "find the names of programs whose origin is not in Beijing."
                }
            ],
            "example_quality": 0.6710159958681415,
            "example_similarity": 0.4208121678303153,
            "db_id": "concert_singer",
            "pred": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
            "correct": 1
        },
        {
            "index": 42,
            "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by dan klein in his emnlp papers */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8106,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
                    "question": "keyphrases used by dan klein in his emnlp papers"
                }
            ],
            "example_quality": 0.6652435061706007,
            "example_similarity": 0.41249351077313096,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' AND c.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );",
            "correct": 1
        },
        {
            "index": 43,
            "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by dan klein in his emnlp papers */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? */\nSELECT ",
            "response": "T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8106,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
                    "question": "keyphrases used by dan klein in his emnlp papers"
                }
            ],
            "example_quality": 0.6597395043659687,
            "example_similarity": 0.4046232913150133,
            "db_id": "concert_singer",
            "pred": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' AND s.Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = '2015' GROUP BY Stadium_ID HAVING COUNT(DISTINCT Year) = 2);",
            "correct": 0
        },
        {
            "index": 44,
            "question": "Find the number of concerts happened in the stadium with the highest capacity .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: Find the number of concerts happened in the stadium with the highest capacity . */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6467217093062678,
            "example_similarity": 0.402529580148763,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium));",
            "correct": 1
        },
        {
            "index": 45,
            "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count. */\nSELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"stadium\" (\n\"Stadium_ID\" int,\n\"Location\" text,\n\"Name\" text,\n\"Capacity\" int,\n\"Highest\" int,\n\"Lowest\" int,\n\"Average\" int,\nPRIMARY KEY (\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Country\" text,\n\"Song_Name\" text,\n\"Song_release_year\" text,\n\"Age\" int,\n\"Is_male\" bool,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"concert\" (\n\"concert_ID\" int,\n\"concert_Name\" text,\n\"Theme\" text,\n\"Stadium_ID\" text,\n\"Year\" text,\nPRIMARY KEY (\"concert_ID\"),\nFOREIGN KEY (\"Stadium_ID\") REFERENCES \"stadium\"(\"Stadium_ID\")\n)\n\nCREATE TABLE \"singer_in_concert\" (\n\"concert_ID\" int,\n\"Singer_ID\" text,\nPRIMARY KEY (\"concert_ID\",\"Singer_ID\"),\nFOREIGN KEY (\"concert_ID\") REFERENCES \"concert\"(\"concert_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES \"singer\"(\"Singer_ID\")\n)\n\n/* Answer the following: What are the number of concerts that occurred in the stadium with the largest capacity ? */\nSELECT ",
            "response": "count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3868,
                    "db_id": "insurance_policies",
                    "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count."
                }
            ],
            "example_quality": 0.6365167824327952,
            "example_similarity": 0.399319245392769,
            "db_id": "concert_singer",
            "pred": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
            "correct": 1
        },
        {
            "index": 46,
            "question": "Find the number of pets whose weight is heavier than 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of people of each sex who have a weight higher than 85. */\nSELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets whose weight is heavier than 10. */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2426,
                    "db_id": "candidate_poll",
                    "query": "SELECT count(*) ,  sex FROM people WHERE weight  >  85 GROUP BY sex",
                    "question": "Count the number of people of each sex who have a weight higher than 85."
                }
            ],
            "example_quality": 0.6366546163550637,
            "example_similarity": 0.39933404440596965,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Pets WHERE weight > 10",
            "correct": 1
        },
        {
            "index": 47,
            "question": "How many pets have a greater weight than 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of people whose age is greater than all engineers. */\nSELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets have a greater weight than 10? */\nSELECT ",
            "response": "count(*) FROM pets WHERE weight > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4433,
                    "db_id": "network_2",
                    "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
                    "question": "Find the number of people whose age is greater than all engineers."
                }
            ],
            "example_quality": 0.6322273144873267,
            "example_similarity": 0.396747740860689,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Pets WHERE weight > 10",
            "correct": 1
        },
        {
            "index": 48,
            "question": "Find the weight of the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the weight of the youngest dog. */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                }
            ],
            "example_quality": 0.6361013666476287,
            "example_similarity": 0.404685866629795,
            "db_id": "pets_1",
            "pred": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 49,
            "question": "How much does the youngest dog weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the weight of the shortest person? */\nSELECT Weight FROM people ORDER BY Height ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How much does the youngest dog weigh? */\nSELECT ",
            "response": "weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2278,
                    "db_id": "entrepreneur",
                    "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
                    "question": "What is the weight of the shortest person?"
                }
            ],
            "example_quality": 0.6435278693691057,
            "example_similarity": 0.4008001492350179,
            "db_id": "pets_1",
            "pred": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 50,
            "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each product type, return the maximum and minimum price. */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4746,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "For each product type, return the maximum and minimum price."
                }
            ],
            "example_quality": 0.644774959040547,
            "example_similarity": 0.40005687352304475,
            "db_id": "pets_1",
            "pred": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 51,
            "question": "List the maximum weight and type for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show each apartment type code, and the maximum and minimum number of rooms for each type. */\nSELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: List the maximum weight and type for each type of pet. */\nSELECT ",
            "response": "max(weight) , petType FROM pets GROUP BY petType",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1265,
                    "db_id": "apartment_rentals",
                    "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code",
                    "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type."
                }
            ],
            "example_quality": 0.645973143234677,
            "example_similarity": 0.40201654266965176,
            "db_id": "pets_1",
            "pred": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 52,
            "question": "Find number of pets owned by students who are older than 20.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of people whose age is greater than all engineers. */\nSELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find number of pets owned by students who are older than 20. */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4433,
                    "db_id": "network_2",
                    "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
                    "question": "Find the number of people whose age is greater than all engineers."
                }
            ],
            "example_quality": 0.6417923410296146,
            "example_similarity": 0.4028324638576285,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20)",
            "correct": 1
        },
        {
            "index": 53,
            "question": "How many pets are owned by students that have an age greater than 20?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers have an active value of 1? */\nSELECT count(*) FROM customer WHERE active = '1'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many pets are owned by students that have an age greater than 20? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2947,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM customer WHERE active = '1'",
                    "question": "How many customers have an active value of 1?"
                }
            ],
            "example_quality": 0.6485509761045275,
            "example_similarity": 0.404110874639449,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20",
            "correct": 1
        },
        {
            "index": 54,
            "question": "Find the number of dog pets that are raised by female students (with sex F).",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of female students (with F sex) living in Smith Hall */\nSELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of dog pets that are raised by female students (with sex F). */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5749,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
                    "question": "Find the number of female students (with F sex) living in Smith Hall"
                }
            ],
            "example_quality": 0.655059291361851,
            "example_similarity": 0.40866437696094066,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'",
            "correct": 1
        },
        {
            "index": 55,
            "question": "How many dog pets are raised by female students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many female dependents are there? */\nSELECT count(*) FROM dependent WHERE sex  =  'F'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many dog pets are raised by female students? */\nSELECT ",
            "response": "count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2134,
                    "db_id": "company_1",
                    "query": "SELECT count(*) FROM dependent WHERE sex  =  'F'",
                    "question": "how many female dependents are there?"
                }
            ],
            "example_quality": 0.6613309406098175,
            "example_similarity": 0.4111514709335517,
            "db_id": "pets_1",
            "pred": "SELECT count(*) FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID JOIN Student s ON hp.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F'",
            "correct": 1
        },
        {
            "index": 56,
            "question": "Find the number of distinct type of pets.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of distinct product types. */\nSELECT count(DISTINCT product_type_code) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of distinct type of pets. */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4715,
                    "db_id": "department_store",
                    "query": "SELECT count(DISTINCT product_type_code) FROM products",
                    "question": "Count the number of distinct product types."
                }
            ],
            "example_quality": 0.6673786023846421,
            "example_similarity": 0.4135497401214266,
            "db_id": "pets_1",
            "pred": "SELECT count(DISTINCT PetType) FROM Pets",
            "correct": 1
        },
        {
            "index": 57,
            "question": "How many different types of pet are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many document types are there? */\nSELECT count(*) FROM Ref_document_types\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: How many different types of pet are there? */\nSELECT ",
            "response": "count(DISTINCT pettype) FROM pets",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4166,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM Ref_document_types",
                    "question": "How many document types are there?"
                }
            ],
            "example_quality": 0.6710210830445607,
            "example_similarity": 0.4168207973122788,
            "db_id": "pets_1",
            "pred": "SELECT COUNT(DISTINCT PetType) FROM Pets",
            "correct": 1
        },
        {
            "index": 58,
            "question": "Find the first name of students who have cat or dog pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have cat or dog pet. */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6766931333368958,
            "example_similarity": 0.4104963008068947,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'));",
            "correct": 0
        },
        {
            "index": 59,
            "question": "What are the first names of every student who has a cat or dog as a pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all people who do not have friends? */\nSELECT name FROM person EXCEPT SELECT name FROM PersonFriend\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the first names of every student who has a cat or dog as a pet? */\nSELECT ",
            "response": "DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4478,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                    "question": "What are the names of all people who do not have friends?"
                }
            ],
            "example_quality": 0.6729279184421256,
            "example_similarity": 0.41047248060831865,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))",
            "correct": 0
        },
        {
            "index": 60,
            "question": "Find the first name of students who have both cat and dog pets .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the program owners that have some programs in both morning and night time. */\nSELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name of students who have both cat and dog pets . */\nSELECT ",
            "response": "t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t3.petid = t2.petid where t3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3755,
                    "db_id": "program_share",
                    "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
                    "question": "find the program owners that have some programs in both morning and night time."
                }
            ],
            "example_quality": 0.6633556456230197,
            "example_similarity": 0.415395978480533,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = \"Cat\" ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = \"Dog\" ) )",
            "correct": 1
        },
        {
            "index": 61,
            "question": "What are the students' first names who have both cats and dogs as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the students' first names who have both cats and dogs as pets? */\nSELECT ",
            "response": "T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6595067240320102,
            "example_similarity": 0.4092989667164188,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) );",
            "correct": 1
        },
        {
            "index": 62,
            "question": "Find the major and age of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display all the information of those employees who did not have any job in the past. */\nSELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the major and age of students who do not have a cat pet. */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3514,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                    "question": "display all the information of those employees who did not have any job in the past."
                }
            ],
            "example_quality": 0.6629824220314938,
            "example_similarity": 0.4080737145650787,
            "db_id": "pets_1",
            "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 63,
            "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the person whose age is below 30? */\nSELECT name FROM Person WHERE age  <  30\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What major is every student who does not own a cat as a pet, and also how old are they? */\nSELECT ",
            "response": "major , age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4417,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE age  <  30",
                    "question": "Who is the person whose age is below 30?"
                }
            ],
            "example_quality": 0.6584112724754384,
            "example_similarity": 0.4052593576794303,
            "db_id": "pets_1",
            "pred": "SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 64,
            "question": "Find the id of students who do not have a cat pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all employees that don't have certificates? */\nSELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of students who do not have a cat pet. */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 423,
                    "db_id": "flight_1",
                    "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate",
                    "question": "What are the ids of all employees that don't have certificates?"
                }
            ],
            "example_quality": 0.6609076872521005,
            "example_similarity": 0.40361468021568914,
            "db_id": "pets_1",
            "pred": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 1
        },
        {
            "index": 65,
            "question": "What are the ids of the students who do not own cats as pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and first names of customers who do not hold a credit card? */\nSELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the ids of the students who do not own cats as pets? */\nSELECT ",
            "response": "stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 729,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
                    "question": "What are the ids and first names of customers who do not hold a credit card?"
                }
            ],
            "example_quality": 0.6661244920636066,
            "example_similarity": 0.4066359928277555,
            "db_id": "pets_1",
            "pred": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))",
            "correct": 0
        },
        {
            "index": 66,
            "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the person who has exactly one friend. */\nSELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a dog but do not have a cat as a pet. */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4451,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
                    "question": "Find the person who has exactly one friend."
                }
            ],
            "example_quality": 0.662525203222816,
            "example_similarity": 0.4041112050576379,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 0
        },
        {
            "index": 67,
            "question": "What is the first name of every student who has a dog but does not have a cat?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all people who do not have friends? */\nSELECT name FROM person EXCEPT SELECT name FROM PersonFriend\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name of every student who has a dog but does not have a cat? */\nSELECT ",
            "response": "T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4478,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                    "question": "What are the names of all people who do not have friends?"
                }
            ],
            "example_quality": 0.6596604723582086,
            "example_similarity": 0.4048639550499934,
            "db_id": "pets_1",
            "pred": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
            "correct": 0
        },
        {
            "index": 68,
            "question": "Find the type and weight of the youngest pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the type and weight of the youngest pet. */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                }
            ],
            "example_quality": 0.6619916686203206,
            "example_similarity": 0.4082683621281352,
            "db_id": "pets_1",
            "pred": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
            "correct": 1
        },
        {
            "index": 69,
            "question": "What type of pet is the youngest animal, and how much does it weigh?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What type of pet is the youngest animal, and how much does it weigh? */\nSELECT ",
            "response": "pettype , weight FROM pets ORDER BY pet_age LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4414,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "What is the name of the youngest male?"
                }
            ],
            "example_quality": 0.6563501556363633,
            "example_similarity": 0.40798750019713165,
            "db_id": "pets_1",
            "pred": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets)",
            "correct": 1
        },
        {
            "index": 70,
            "question": "Find the id and weight of all pets whose age is older than 1.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the oldest log id and its corresponding problem id. */\nSELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id and weight of all pets whose age is older than 1. */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5356,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
                    "question": "Find the oldest log id and its corresponding problem id."
                }
            ],
            "example_quality": 0.6534672313350646,
            "example_similarity": 0.40850831368637897,
            "db_id": "pets_1",
            "pred": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
            "correct": 1
        },
        {
            "index": 71,
            "question": "What is the id and weight of every pet who is older than 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What student id corresponds to the oldest student? */\nSELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id and weight of every pet who is older than 1? */\nSELECT ",
            "response": "petid , weight FROM pets WHERE pet_age > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 489,
                    "db_id": "allergy_1",
                    "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
                    "question": "What student id corresponds to the oldest student?"
                }
            ],
            "example_quality": 0.6495451576542891,
            "example_similarity": 0.4074495111461952,
            "db_id": "pets_1",
            "pred": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
            "correct": 1
        },
        {
            "index": 72,
            "question": "Find the average and maximum age for each type of pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the maximum and average capacity among rooms in each building. */\nSELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average and maximum age for each type of pet. */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1395,
                    "db_id": "college_2",
                    "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
                    "question": "Find the maximum and average capacity among rooms in each building."
                }
            ],
            "example_quality": 0.6544125860202017,
            "example_similarity": 0.41012382349138704,
            "db_id": "pets_1",
            "pred": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 73,
            "question": "What is the average and maximum age for each pet type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and average height of the mountains? */\nSELECT max(height) ,  avg(height) FROM mountain\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average and maximum age for each pet type? */\nSELECT ",
            "response": "avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3715,
                    "db_id": "mountain_photos",
                    "query": "SELECT max(height) ,  avg(height) FROM mountain",
                    "question": "What are the maximum and average height of the mountains?"
                }
            ],
            "example_quality": 0.655117651320489,
            "example_similarity": 0.41181162499607127,
            "db_id": "pets_1",
            "pred": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 74,
            "question": "Find the average weight for each pet type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average prices of all products from each manufacture, and list each company's name. */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average weight for each pet type. */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5313,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the average prices of all products from each manufacture, and list each company's name."
                }
            ],
            "example_quality": 0.6597782235999419,
            "example_similarity": 0.41193650346340743,
            "db_id": "pets_1",
            "pred": "SELECT PetType, avg(weight) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 75,
            "question": "What is the average weight for each type of pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for each type of product? */\nSELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average weight for each type of pet? */\nSELECT ",
            "response": "avg(weight) , pettype FROM pets GROUP BY pettype",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4726,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code",
                    "question": "What is the average price for each type of product?"
                }
            ],
            "example_quality": 0.6643145139519426,
            "example_similarity": 0.4175551278616731,
            "db_id": "pets_1",
            "pred": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
            "correct": 1
        },
        {
            "index": 76,
            "question": "Find the first name and age of students who have a pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the person who has exactly one friend. */\nSELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and age of students who have a pet. */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4451,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
                    "question": "Find the person who has exactly one friend."
                }
            ],
            "example_quality": 0.6590823054350311,
            "example_similarity": 0.41699519196875634,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
            "correct": 0
        },
        {
            "index": 77,
            "question": "What are the different first names and ages of the students who do have pets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct ages of the heads who are acting? */\nSELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What are the different first names and ages of the students who do have pets? */\nSELECT ",
            "response": "DISTINCT T1.fname , T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 13,
                    "db_id": "department_management",
                    "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
                    "question": "What are the distinct ages of the heads who are acting?"
                }
            ],
            "example_quality": 0.6597992328227024,
            "example_similarity": 0.4177314129889844,
            "db_id": "pets_1",
            "pred": "SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)",
            "correct": 0
        },
        {
            "index": 78,
            "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and attribute ID of the attribute definitions with attribute value 0. */\nSELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the id of the pet owned by student whose last name is \u2018Smith\u2019. */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 334,
                    "db_id": "product_catalog",
                    "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
                    "question": "Find the name and attribute ID of the attribute definitions with attribute value 0."
                }
            ],
            "example_quality": 0.6641607811198471,
            "example_similarity": 0.418203387880734,
            "db_id": "pets_1",
            "pred": "SELECT t2.PetID FROM Student AS t1 JOIN Has_Pet AS t2 ON t1.StuID = t2.StuID WHERE t1.LName = 'Smith'",
            "correct": 1
        },
        {
            "index": 79,
            "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the account with the most transactions? */\nSELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the id of the pet owned by the student whose last name is 'Smith'? */\nSELECT ",
            "response": "T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1593,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the account with the most transactions?"
                }
            ],
            "example_quality": 0.6594766908152773,
            "example_similarity": 0.4189374016568067,
            "db_id": "pets_1",
            "pred": "SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith'",
            "correct": 1
        },
        {
            "index": 80,
            "question": "Find the number of pets for each student who has any pet and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each customer who has at least two orders, find the customer name and number of orders made. */\nSELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the number of pets for each student who has any pet and student id. */\nSELECT ",
            "response": "count(*) , T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6938,
                    "db_id": "tracking_orders",
                    "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
                    "question": "For each customer who has at least two orders, find the customer name and number of orders made."
                }
            ],
            "example_quality": 0.6591279690221916,
            "example_similarity": 0.42262925556466807,
            "db_id": "pets_1",
            "pred": "SELECT T1.StuID, COUNT(T2.PetID) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
            "correct": 1
        },
        {
            "index": 81,
            "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which department has more than 1 head at a time? List the id, name and the number of heads. */\nSELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: For students who have pets , how many pets does each student have ? list their ids instead of names . */\nSELECT ",
            "response": "count(*) , t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 15,
                    "db_id": "department_management",
                    "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1",
                    "question": "Which department has more than 1 head at a time? List the id, name and the number of heads."
                }
            ],
            "example_quality": 0.6527052643291879,
            "example_similarity": 0.421152725286466,
            "db_id": "pets_1",
            "pred": "SELECT Student.StuID, COUNT(Has_Pet.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID",
            "correct": 1
        },
        {
            "index": 82,
            "question": "Find the first name and gender of student who have more than one pet.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the first name and gender of student who have more than one pet. */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.6490137367154173,
            "example_similarity": 0.4199365770686868,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
            "correct": 1
        },
        {
            "index": 83,
            "question": "What is the first name and gender of the all the students who have more than one pet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the first name and gender of the all the students who have more than one pet? */\nSELECT ",
            "response": "T1.fname , T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.6454111615742677,
            "example_similarity": 0.41779787424164533,
            "db_id": "pets_1",
            "pred": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
            "correct": 1
        },
        {
            "index": 84,
            "question": "Find the last name of the student who has a cat that is age 3.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the person who has exactly one friend. */\nSELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the last name of the student who has a cat that is age 3. */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4451,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
                    "question": "Find the person who has exactly one friend."
                }
            ],
            "example_quality": 0.6416959493333042,
            "example_similarity": 0.4174537196541125,
            "db_id": "pets_1",
            "pred": "SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3",
            "correct": 1
        },
        {
            "index": 85,
            "question": "What is the last name of the student who has a cat that is 3 years old?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the last name of the student who has a cat that is 3 years old? */\nSELECT ",
            "response": "T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                }
            ],
            "example_quality": 0.6382988343584487,
            "example_similarity": 0.41700497406791803,
            "db_id": "pets_1",
            "pred": "SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3;",
            "correct": 1
        },
        {
            "index": 86,
            "question": "Find the average age of students who do not have any pet .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of followers for the users who do not have any tweet. */\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: Find the average age of students who do not have any pet . */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 299,
                    "db_id": "twitter_1",
                    "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
                    "question": "Find the average number of followers for the users who do not have any tweet."
                }
            ],
            "example_quality": 0.6339101219265759,
            "example_similarity": 0.42160375343922135,
            "db_id": "pets_1",
            "pred": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
            "correct": 1
        },
        {
            "index": 87,
            "question": "What is the average age for all students who do not own any pets ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the average quantity of stocks. */\nSELECT avg(Quantity) FROM stock\n\n/* Given the following database schema: */\nCREATE TABLE Student (\n       StuID    \tINTEGER PRIMARY KEY,\n       LName\t\tVARCHAR(12),\n       Fname\t\tVARCHAR(12),\n       Age\t\tINTEGER,\n       Sex\t\tVARCHAR(1),\n       Major\t\tINTEGER,\n       Advisor\t\tINTEGER,\n       city_code\tVARCHAR(3)\n)\n\nCREATE TABLE Has_Pet (\n       StuID\t\tINTEGER,\n       PetID\t\tINTEGER,\n       FOREIGN KEY(PetID) REFERENCES Pets(PetID),\n       FOREIGN KEY(StuID) REFERENCES Student(StuID)\n)\n\nCREATE TABLE Pets (\n       PetID\t\tINTEGER PRIMARY KEY,\n       PetType\t\tVARCHAR(20),\n       pet_age INTEGER,\n       weight REAL\n)\n\n/* Answer the following: What is the average age for all students who do not own any pets ? */\nSELECT ",
            "response": "avg(age) from student where stuid not in (select stuid from has_pet)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5060,
                    "db_id": "device",
                    "query": "SELECT avg(Quantity) FROM stock",
                    "question": "Give the average quantity of stocks."
                }
            ],
            "example_quality": 0.6279760637299892,
            "example_similarity": 0.4193120117010949,
            "db_id": "pets_1",
            "pred": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
            "correct": 1
        },
        {
            "index": 88,
            "question": "How many continents are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many continents are there? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6322036084603302,
            "example_similarity": 0.4259107388408552,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM continents",
            "correct": 1
        },
        {
            "index": 89,
            "question": "What is the number of continents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of continents? */\nSELECT ",
            "response": "count(*) FROM CONTINENTS;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6349316578034726,
            "example_similarity": 0.4256196069437669,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM continents;",
            "correct": 1
        },
        {
            "index": 90,
            "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries does each continent have? List the continent id, continent name and the number of countries. */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.6389879727167673,
            "example_similarity": 0.4271127224221695,
            "db_id": "car_1",
            "pred": "SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent",
            "correct": 1
        },
        {
            "index": 91,
            "question": "For each continent, list its id, name, and how many countries it has?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each phone, show its names and total number of stocks. */\nSELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For each continent, list its id, name, and how many countries it has? */\nSELECT ",
            "response": "T1.ContId , T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1991,
                    "db_id": "phone_market",
                    "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
                    "question": "For each phone, show its names and total number of stocks."
                }
            ],
            "example_quality": 0.6412645207765154,
            "example_similarity": 0.425763657627277,
            "db_id": "car_1",
            "pred": "SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent",
            "correct": 1
        },
        {
            "index": 92,
            "question": "How many countries are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries are listed? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6406348339564809,
            "example_similarity": 0.4265705743921979,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM countries",
            "correct": 1
        },
        {
            "index": 93,
            "question": "How many countries exist?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many devices are there? */\nSELECT count(*) FROM device\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries exist? */\nSELECT ",
            "response": "count(*) FROM COUNTRIES;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5051,
                    "db_id": "device",
                    "query": "SELECT count(*) FROM device",
                    "question": "How many devices are there?"
                }
            ],
            "example_quality": 0.6444989755268413,
            "example_similarity": 0.4281281872635568,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM countries",
            "correct": 1
        },
        {
            "index": 94,
            "question": "How many models does each car maker produce? List maker full name, id and the number.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many models does each car maker produce? List maker full name, id and the number. */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.648280901319109,
            "example_similarity": 0.42647498604508566,
            "db_id": "car_1",
            "pred": "SELECT T2.FullName, T2.Id, COUNT(T3.Model) FROM car_makers AS T2 JOIN model_list AS T3 ON T2.Id = T3.Maker GROUP BY T2.FullName, T2.Id",
            "correct": 1
        },
        {
            "index": 95,
            "question": "What is the full name of each car maker, along with its id and how many models it produces?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the full name of each car maker, along with its id and how many models it produces? */\nSELECT ",
            "response": "T1.FullName , T1.Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.651983207621013,
            "example_similarity": 0.4246173546130321,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.FullName, COUNT(T2.Model) AS NumModels FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName",
            "correct": 1
        },
        {
            "index": 96,
            "question": "Which model of the car has the minimum horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the rank for which there are the fewest captains. */\nSELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model of the car has the minimum horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6232,
                    "db_id": "ship_1",
                    "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the rank for which there are the fewest captains."
                }
            ],
            "example_quality": 0.6507064217573137,
            "example_similarity": 0.4234494655024797,
            "db_id": "car_1",
            "pred": "SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 97,
            "question": "What is the model of the car with the smallest amount of horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the product that has the smallest capacity. */\nSELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model of the car with the smallest amount of horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 326,
                    "db_id": "product_catalog",
                    "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
                    "question": "Find the name of the product that has the smallest capacity."
                }
            ],
            "example_quality": 0.6543073864814651,
            "example_similarity": 0.42288216227700653,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model ORDER BY CAST(cars_data.Horsepower AS INTEGER) ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 98,
            "question": "Find the model of the car whose weight is below the average weight.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of people whose height is lower than the average. */\nSELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the model of the car whose weight is below the average weight. */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2431,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
                    "question": "find the name of people whose height is lower than the average."
                }
            ],
            "example_quality": 0.6578348621296134,
            "example_similarity": 0.42558234429458813,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 99,
            "question": "What is the model for the car with a weight smaller than the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name and country for all people whose age is smaller than the average. */\nSELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the model for the car with a weight smaller than the average? */\nSELECT ",
            "response": "T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM CARS_DATA)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1640,
                    "db_id": "wedding",
                    "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)",
                    "question": "Show the name and country for all people whose age is smaller than the average."
                }
            ],
            "example_quality": 0.6612910756434557,
            "example_similarity": 0.4260935375460617,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 100,
            "question": "Find the name of the makers that produced some cars in the year of 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the name of the makers that produced some cars in the year of 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6575948315536878,
            "example_similarity": 0.4240548243928233,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT c.Maker FROM car_makers c JOIN model_list m ON c.Id = m.Maker JOIN car_names n ON m.ModelId = n.MakeId JOIN cars_data d ON n.MakeId = d.Id WHERE d.Year = 1970;",
            "correct": 0
        },
        {
            "index": 101,
            "question": "What is the name of the different car makers who produced a car in 1970?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the different car makers who produced a car in 1970? */\nSELECT ",
            "response": "DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6595705545793232,
            "example_similarity": 0.4237305622485982,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM cars_data WHERE Year = 1970))",
            "correct": 0
        },
        {
            "index": 102,
            "question": "Find the make and production time of the cars that were produced in the earliest year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each product that has problems, find the number of problems reported after 1986-11-13 and the product id? */\nSELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Find the make and production time of the cars that were produced in the earliest year? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5379,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
                    "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?"
                }
            ],
            "example_quality": 0.6580061373775652,
            "example_similarity": 0.4232074231125372,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 103,
            "question": "What is the maker of the carr produced in the earliest year and what year was it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Of all the claims, what was the earliest date when any claim was made? */\nSELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maker of the carr produced in the earliest year and what year was it? */\nSELECT ",
            "response": "T2.Make , T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT min(YEAR) FROM CARS_DATA);",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3871,
                    "db_id": "insurance_policies",
                    "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1",
                    "question": "Of all the claims, what was the earliest date when any claim was made?"
                }
            ],
            "example_quality": 0.6545303496360354,
            "example_similarity": 0.4231439206227714,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Year ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 104,
            "question": "Which distinct car models are the produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by dan klein in his emnlp papers */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinct car models are the produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8106,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
                    "question": "keyphrases used by dan klein in his emnlp papers"
                }
            ],
            "example_quality": 0.6578521731972273,
            "example_similarity": 0.4196094171125097,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980;",
            "correct": 0
        },
        {
            "index": 105,
            "question": "What are the different models for the cards produced after 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card type codes? */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models for the cards produced after 1980? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 731,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "What are the different card type codes?"
                }
            ],
            "example_quality": 0.6583896354933081,
            "example_similarity": 0.4207413420777386,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;",
            "correct": 0
        },
        {
            "index": 106,
            "question": "How many car makers are there in each continents? List the continent name and the count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tasks does each project have? List the task count and the project detail. */\nSELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in each continents? List the continent name and the count. */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4391,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(*) ,  T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id",
                    "question": "How many tasks does each project have? List the task count and the project detail."
                }
            ],
            "example_quality": 0.6616123747811071,
            "example_similarity": 0.42306139230970957,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT car_makers.Id), continents.Continent FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent;",
            "correct": 1
        },
        {
            "index": 107,
            "question": "What is the name of each continent and how many car makers are there in each one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of each continent and how many car makers are there in each one? */\nSELECT ",
            "response": "T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.6647748759513771,
            "example_similarity": 0.4227020838265851,
            "db_id": "car_1",
            "pred": "SELECT T1.Continent, COUNT(T2.Id) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "correct": 0
        },
        {
            "index": 108,
            "question": "Which of the countries has the most car makers? List the country name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many problems does the product with the most problems have? List the number of the problems and product name. */\nSELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which of the countries has the most car makers? List the country name. */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5367,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many problems does the product with the most problems have? List the number of the problems and product name."
                }
            ],
            "example_quality": 0.6656742267472417,
            "example_similarity": 0.423803607741771,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 109,
            "question": "What is the name of the country with the most car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and ID of the product bought the most. */\nSELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the name of the country with the most car makers? */\nSELECT ",
            "response": "T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6133,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
                    "question": "What are the name and ID of the product bought the most."
                }
            ],
            "example_quality": 0.6676621048612713,
            "example_similarity": 0.42399297321610746,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(car_makers.Id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 110,
            "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each product with some problems, list the count of problems and the product id. */\nSELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced by each maker ? Only list the count and the maker full name . */\nSELECT ",
            "response": "count(*) , t2.fullname from model_list as t1 join car_makers as t2 on t1.maker = t2.id group by t2.id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5378,
                    "db_id": "tracking_software_problems",
                    "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
                    "question": "For each product with some problems, list the count of problems and the product id."
                }
            ],
            "example_quality": 0.6631598474816547,
            "example_similarity": 0.4245021280050519,
            "db_id": "car_1",
            "pred": "SELECT COUNT(model_list.ModelId) AS model_count, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName",
            "correct": 1
        },
        {
            "index": 111,
            "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? */\nSELECT ",
            "response": "Count(*) , T2.FullName , T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6661944434502884,
            "example_similarity": 0.4222310619248572,
            "db_id": "car_1",
            "pred": "SELECT COUNT(model_list.ModelId) AS NumberOfModels, car_makers.Id, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName",
            "correct": 1
        },
        {
            "index": 112,
            "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the accelerate of the car make amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6624784216337682,
            "example_similarity": 0.41994923696719494,
            "db_id": "car_1",
            "pred": "SELECT c.Accelerate FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = \"amc\" AND ml.Model = \"hornet sportabout (sw)\";",
            "correct": 0
        },
        {
            "index": 113,
            "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for products? */\nSELECT avg(Product_Price) FROM Products\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How much does the car accelerate that makes amc hornet sportabout (sw)? */\nSELECT ",
            "response": "T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4588,
                    "db_id": "solvency_ii",
                    "query": "SELECT avg(Product_Price) FROM Products",
                    "question": "What is the average price for products?"
                }
            ],
            "example_quality": 0.6605489174108539,
            "example_similarity": 0.41756030566660024,
            "db_id": "car_1",
            "pred": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
            "correct": 0
        },
        {
            "index": 114,
            "question": "How many car makers are there in france?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car makers are there in france? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6608949795388289,
            "example_similarity": 0.4144822912894079,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France');",
            "correct": 0
        },
        {
            "index": 115,
            "question": "What is the number of makers of care in France?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents have document type code CV or BK? */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of makers of care in France? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4174,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
                    "question": "How many documents have document type code CV or BK?"
                }
            ],
            "example_quality": 0.6638437188471868,
            "example_similarity": 0.41225109516377917,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"France\"",
            "correct": 0
        },
        {
            "index": 116,
            "question": "How many car models are produced in the usa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors that are not used in any products. */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models are produced in the usa? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5602,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                    "question": "Count the number of colors that are not used in any products."
                }
            ],
            "example_quality": 0.6626848226907963,
            "example_similarity": 0.4110918424276929,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = 'USA')",
            "correct": 0
        },
        {
            "index": 117,
            "question": "What is the count of the car models produced in the United States?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many addresses are there in country USA? */\nSELECT count(*) FROM addresses WHERE country  =  'USA'\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the count of the car models produced in the United States? */\nSELECT ",
            "response": "count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5654,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM addresses WHERE country  =  'USA'",
                    "question": "How many addresses are there in country USA?"
                }
            ],
            "example_quality": 0.6655678583942938,
            "example_similarity": 0.4093776071572808,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'",
            "correct": 0
        },
        {
            "index": 118,
            "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many vehicles exist? */\nSELECT count(*) FROM Vehicles;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6626,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Vehicles;",
                    "question": "How many vehicles exist?"
                }
            ],
            "example_quality": 0.665012198577393,
            "example_similarity": 0.40675576302882926,
            "db_id": "car_1",
            "pred": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
            "correct": 1
        },
        {
            "index": 119,
            "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many vehicle in total? */\nSELECT count(*) FROM Vehicles;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average miles per gallon of all the cards with 4 cylinders? */\nSELECT ",
            "response": "avg(mpg) FROM CARS_DATA WHERE Cylinders = 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6625,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Vehicles;",
                    "question": "How many vehicle in total?"
                }
            ],
            "example_quality": 0.6644658775809442,
            "example_similarity": 0.40422221172518147,
            "db_id": "car_1",
            "pred": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
            "correct": 1
        },
        {
            "index": 120,
            "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which state is the smallest */\nSELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the smallest weight of the car produced with 8 cylinders on 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7389,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
                    "question": "which state is the smallest"
                }
            ],
            "example_quality": 0.6601191381249125,
            "example_similarity": 0.40293702662747155,
            "db_id": "car_1",
            "pred": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;",
            "correct": 1
        },
        {
            "index": 121,
            "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the minimum weight of the car with 8 cylinders produced in 1974 ? */\nSELECT ",
            "response": "min(weight) from cars_data where cylinders = 8 and year = 1974",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.655333699636947,
            "example_similarity": 0.4015515480408566,
            "db_id": "car_1",
            "pred": "SELECT MIN(Weight) FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.ModelId JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE cd.Cylinders = 8 AND cd.Year = 1974;",
            "correct": 0
        },
        {
            "index": 122,
            "question": "What are all the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are all the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6565194889841851,
            "example_similarity": 0.4044076828929807,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
            "correct": 0
        },
        {
            "index": 123,
            "question": "What are the makers and models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the makers and models? */\nSELECT ",
            "response": "Maker , Model FROM MODEL_LIST;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6576859972038258,
            "example_similarity": 0.40620111636539546,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker;",
            "correct": 0
        },
        {
            "index": 124,
            "question": "What are the countries having at least one car maker? List name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that have both one of the three most common types and one of three most common structures? */\nSELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the countries having at least one car maker? List name and id. */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4515,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?"
                }
            ],
            "example_quality": 0.6548462355776301,
            "example_similarity": 0.4049414299430939,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName",
            "correct": 1
        },
        {
            "index": 125,
            "question": "What are the names and ids of all countries with at least one car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all countries with at least one car maker? */\nSELECT ",
            "response": "T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) >= 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6565407990263423,
            "example_similarity": 0.40309320285137523,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName",
            "correct": 1
        },
        {
            "index": 126,
            "question": "What is the number of the cars with horsepower more than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of the cars with horsepower more than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6555629619970328,
            "example_similarity": 0.40230950938499094,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150",
            "correct": 1
        },
        {
            "index": 127,
            "question": "What is the number of cars with a horsepower greater than 150?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a horsepower greater than 150? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE horsepower > 150;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.655912859934064,
            "example_similarity": 0.40111022190951856,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;",
            "correct": 1
        },
        {
            "index": 128,
            "question": "What is the average weight of cars each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and total transaction amount? */\nSELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight of cars each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 738,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
                    "question": "What is the average and total transaction amount?"
                }
            ],
            "example_quality": 0.6554760407158293,
            "example_similarity": 0.4025338399675172,
            "db_id": "car_1",
            "pred": "SELECT Year, avg(Weight) FROM cars_data GROUP BY Year",
            "correct": 1
        },
        {
            "index": 129,
            "question": "What is the average weight and year for each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average, minimum, maximum, and total transaction amount? */\nSELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average weight and year for each year? */\nSELECT ",
            "response": "avg(Weight) , YEAR FROM CARS_DATA GROUP BY YEAR;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1584,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
                    "question": "What is the average, minimum, maximum, and total transaction amount?"
                }
            ],
            "example_quality": 0.6536248052580838,
            "example_similarity": 0.4030613934196613,
            "db_id": "car_1",
            "pred": "SELECT avg(Weight), avg(Year) FROM cars_data",
            "correct": 0
        },
        {
            "index": 130,
            "question": "Which countries in europe have at least 3 car manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which countries in europe have at least 3 car manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6535742977063247,
            "example_similarity": 0.4013183872259354,
            "db_id": "car_1",
            "pred": "SELECT T2.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3",
            "correct": 0
        },
        {
            "index": 131,
            "question": "What are the names of all European countries with at least 3 manufacturers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of all European countries with at least 3 manufacturers? */\nSELECT ",
            "response": "T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING count(*) >= 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6535245612622261,
            "example_similarity": 0.3998619591997029,
            "db_id": "car_1",
            "pred": "SELECT T2.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3",
            "correct": 0
        },
        {
            "index": 132,
            "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum level of managers in countries that are not \"Australia\"? */\nSELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum horsepower and the make of the car models with 3 cylinders? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5636,
                    "db_id": "railway",
                    "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"",
                    "question": "What is the maximum level of managers in countries that are not \"Australia\"?"
                }
            ],
            "example_quality": 0.6516039206466032,
            "example_similarity": 0.40027622810383734,
            "db_id": "car_1",
            "pred": "SELECT max(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3",
            "correct": 0
        },
        {
            "index": 133,
            "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the largest payment amount? */\nSELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? */\nSELECT ",
            "response": "T2.horsepower , T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3001,
                    "db_id": "sakila_1",
                    "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
                    "question": "What is the largest payment amount?"
                }
            ],
            "example_quality": 0.6529703072081576,
            "example_similarity": 0.40003671550630154,
            "db_id": "car_1",
            "pred": "SELECT MAX(Horsepower), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3",
            "correct": 1
        },
        {
            "index": 134,
            "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id and name of the aircraft that can cover the maximum distance? */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 357,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "What is the id and name of the aircraft that can cover the maximum distance?"
                }
            ],
            "example_quality": 0.6555600810349624,
            "example_similarity": 0.3989170385249112,
            "db_id": "car_1",
            "pred": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 135,
            "question": "What is the car model with the highest mpg ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the product with the highest price? */\nSELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the car model with the highest mpg ? */\nSELECT ",
            "response": "t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.mpg desc limit 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4589,
                    "db_id": "solvency_ii",
                    "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1",
                    "question": "What is the name of the product with the highest price?"
                }
            ],
            "example_quality": 0.6524134821441052,
            "example_similarity": 0.400194901731605,
            "db_id": "car_1",
            "pred": "SELECT Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 136,
            "question": "What is the average horsepower of the cars before 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower of the cars before 1980? */\nSELECT ",
            "response": "avg(horsepower) FROM CARS_DATA WHERE YEAR < 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6504758013113462,
            "example_similarity": 0.3980692856241014,
            "db_id": "car_1",
            "pred": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
            "correct": 1
        },
        {
            "index": 137,
            "question": "What is the average horsepower for all cars produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price across all products? */\nSELECT avg(price) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average horsepower for all cars produced before 1980 ? */\nSELECT ",
            "response": "avg(horsepower) from cars_data where year < 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5332,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "What is the average price across all products?"
                }
            ],
            "example_quality": 0.6467010387713606,
            "example_similarity": 0.3996555289070249,
            "db_id": "car_1",
            "pred": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980",
            "correct": 1
        },
        {
            "index": 138,
            "question": "What is the average edispl of the cars of model volvo?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl of the cars of model volvo? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6448328347867051,
            "example_similarity": 0.3975222508562112,
            "db_id": "car_1",
            "pred": "SELECT AVG(c.edispl) FROM cars_data AS c JOIN car_names AS cn ON c.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.ModelId JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo'",
            "correct": 0
        },
        {
            "index": 139,
            "question": "What is the average edispl for all volvos?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the average edispl for all volvos? */\nSELECT ",
            "response": "avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6429915114349222,
            "example_similarity": 0.39556165912343266,
            "db_id": "car_1",
            "pred": "SELECT AVG(c.edispl) FROM cars_data AS c JOIN car_names AS cn ON c.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.ModelId JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo'",
            "correct": 0
        },
        {
            "index": 140,
            "question": "What is the maximum accelerate for different number of cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common maximum page size? */\nSELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for different number of cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4938,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common maximum page size?"
                }
            ],
            "example_quality": 0.6423669688929268,
            "example_similarity": 0.39579744319091836,
            "db_id": "car_1",
            "pred": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
            "correct": 1
        },
        {
            "index": 141,
            "question": "What is the maximum accelerate for all the different cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common maximum page size? */\nSELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum accelerate for all the different cylinders? */\nSELECT ",
            "response": "max(Accelerate) , Cylinders FROM CARS_DATA GROUP BY Cylinders;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4938,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common maximum page size?"
                }
            ],
            "example_quality": 0.6417512851103921,
            "example_similarity": 0.3960298828035461,
            "db_id": "car_1",
            "pred": "SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
            "correct": 1
        },
        {
            "index": 142,
            "question": "Which model has the most version(make) of cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the order which has the most items? */\nSELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which model has the most version(make) of cars? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6930,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the order which has the most items?"
                }
            ],
            "example_quality": 0.6442741633842627,
            "example_similarity": 0.39597959411400624,
            "db_id": "car_1",
            "pred": "SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id GROUP BY T1.Model ORDER BY COUNT(DISTINCT T3.Id) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 143,
            "question": "What model has the most different versions?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different software platforms. */\nSELECT count(DISTINCT Software_Platform) FROM device\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What model has the most different versions? */\nSELECT ",
            "response": "Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5064,
                    "db_id": "device",
                    "query": "SELECT count(DISTINCT Software_Platform) FROM device",
                    "question": "Count the number of different software platforms."
                }
            ],
            "example_quality": 0.6420997519853051,
            "example_similarity": 0.394824276887819,
            "db_id": "car_1",
            "pred": "SELECT Model, COUNT(DISTINCT Make) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 144,
            "question": "How many cars have more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are never booked with amount higher than 200? */\nSELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1975,
                    "db_id": "products_for_hire",
                    "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
                    "question": "How many products are never booked with amount higher than 200?"
                }
            ],
            "example_quality": 0.6409301996140623,
            "example_similarity": 0.3955546638538759,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;",
            "correct": 1
        },
        {
            "index": 145,
            "question": "What is the number of cars with more than 4 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with more than 4 cylinders? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE Cylinders > 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6413375775477584,
            "example_similarity": 0.3946657811146538,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;",
            "correct": 1
        },
        {
            "index": 146,
            "question": "how many cars were produced in 1980?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: how many cars were produced in 1980? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.6405709623913072,
            "example_similarity": 0.39632124587663314,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980",
            "correct": 1
        },
        {
            "index": 147,
            "question": "In 1980, how many cars were made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In 1980, how many cars were made? */\nSELECT ",
            "response": "count(*) FROM CARS_DATA WHERE YEAR = 1980;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.639814777373039,
            "example_similarity": 0.3975934369477671,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980",
            "correct": 1
        },
        {
            "index": 148,
            "question": "How many car models were produced by the maker with full name American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many car models were produced by the maker with full name American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6396497087109551,
            "example_similarity": 0.39659618399541735,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'",
            "correct": 1
        },
        {
            "index": 149,
            "question": "What is the number of car models created by the car maker American Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many perpetrators are there? */\nSELECT count(*) FROM perpetrator\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of car models created by the car maker American Motor Company? */\nSELECT ",
            "response": "count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2304,
                    "db_id": "perpetrator",
                    "query": "SELECT count(*) FROM perpetrator",
                    "question": "How many perpetrators are there?"
                }
            ],
            "example_quality": 0.6405767427315379,
            "example_similarity": 0.3946056055793407,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')",
            "correct": 0
        },
        {
            "index": 150,
            "question": "Which makers designed more than 3 car models? List full name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the company that produced more than one phone model. */\nSELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which makers designed more than 3 car models? List full name and the id. */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1035,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
                    "question": "List the name of the company that produced more than one phone model."
                }
            ],
            "example_quality": 0.6429728977799942,
            "example_similarity": 0.39439914396638753,
            "db_id": "car_1",
            "pred": "SELECT car_makers.FullName, car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.ModelId) > 3;",
            "correct": 1
        },
        {
            "index": 151,
            "question": "What are the names and ids of all makers with more than 3 models?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names and ids of all makers with more than 3 models? */\nSELECT ",
            "response": "T1.FullName , T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.645337315675491,
            "example_similarity": 0.3937739840725704,
            "db_id": "car_1",
            "pred": "SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.ModelId) > 3",
            "correct": 0
        },
        {
            "index": 152,
            "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct names of the products that cost more than the average? */\nSELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5110,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)",
                    "question": "What are the distinct names of the products that cost more than the average?"
                }
            ],
            "example_quality": 0.643800653768957,
            "example_similarity": 0.3925931401923937,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = 'General Motors') OR Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = 'United States' AND Continent IN (SELECT ContId FROM continents WHERE Continent = 'North America'))) AND Model IN (SELECT Model FROM cars_data WHERE Weight > 3500)",
            "correct": 0
        },
        {
            "index": 153,
            "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by dan klein in his emnlp papers */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models created by either the car maker General Motors or weighed more than 3500? */\nSELECT ",
            "response": "DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8106,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
                    "question": "keyphrases used by dan klein in his emnlp papers"
                }
            ],
            "example_quality": 0.6461287540711207,
            "example_similarity": 0.3905299371644897,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Maker = \"General Motors\" OR cars_data.Weight > 3500;",
            "correct": 0
        },
        {
            "index": 154,
            "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are never booked with amount higher than 200? */\nSELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: In which years cars were produced weighing no less than 3000 and no more than 4000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1975,
                    "db_id": "products_for_hire",
                    "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )",
                    "question": "How many products are never booked with amount higher than 200?"
                }
            ],
            "example_quality": 0.6426546135324194,
            "example_similarity": 0.3896879866973007,
            "db_id": "car_1",
            "pred": "SELECT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000",
            "correct": 1
        },
        {
            "index": 155,
            "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all products that are not the most frequently-used maximum page size? */\nSELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ? */\nSELECT ",
            "response": "distinct year from cars_data where weight between 3000 and 4000;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4940,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the names of all products that are not the most frequently-used maximum page size?"
                }
            ],
            "example_quality": 0.6390949649993657,
            "example_similarity": 0.38839444606821616,
            "db_id": "car_1",
            "pred": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000",
            "correct": 0
        },
        {
            "index": 156,
            "question": "What is the horsepower of the car with the largest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most prominent max page size among all the products. */\nSELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the largest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4937,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the most prominent max page size among all the products."
                }
            ],
            "example_quality": 0.6390046126596262,
            "example_similarity": 0.3875916476622458,
            "db_id": "car_1",
            "pred": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)",
            "correct": 1
        },
        {
            "index": 157,
            "question": "What is the horsepower of the car with the greatest accelerate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the horsepower of the car with the greatest accelerate? */\nSELECT ",
            "response": "T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1603,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
                }
            ],
            "example_quality": 0.6389154113051062,
            "example_similarity": 0.38914570689604305,
            "db_id": "car_1",
            "pred": "SELECT C.Horsepower FROM cars_data AS C ORDER BY C.Accelerate DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 158,
            "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average access count of documents that have the least common structure? */\nSELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For model volvo, how many cylinders does the car with the least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4537,
                    "db_id": "document_management",
                    "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the average access count of documents that have the least common structure?"
                }
            ],
            "example_quality": 0.6383526555373523,
            "example_similarity": 0.38888419031414745,
            "db_id": "car_1",
            "pred": "SELECT MIN(Cylinders) FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'volvo' ORDER BY Accelerate ASC LIMIT 1)",
            "correct": 0
        },
        {
            "index": 159,
            "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the structure of the document with the least number of accesses? */\nSELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For a volvo model, how many cylinders does the version with least accelerate have? */\nSELECT ",
            "response": "T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4510,
                    "db_id": "document_management",
                    "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the structure of the document with the least number of accesses?"
                }
            ],
            "example_quality": 0.6378319190594794,
            "example_similarity": 0.3880107048404735,
            "db_id": "car_1",
            "pred": "SELECT MIN(c.Cylinders) FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo' ORDER BY cd.Accelerate ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 160,
            "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of branches that have more than the average number of memberships? */\nSELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars have a larger accelerate than the car with the largest horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5402,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
                    "question": "What is the number of branches that have more than the average number of memberships?"
                }
            ],
            "example_quality": 0.6378454695653577,
            "example_similarity": 0.38740855460188717,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 161,
            "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of branches that have more than the average number of memberships? */\nSELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of cars with a greater accelerate than the one with the most horsepower? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Accelerate > ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5402,
                    "db_id": "shop_membership",
                    "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)",
                    "question": "What is the number of branches that have more than the average number of memberships?"
                }
            ],
            "example_quality": 0.6378588517419704,
            "example_similarity": 0.3875902820060163,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data)",
            "correct": 0
        },
        {
            "index": 162,
            "question": "How many countries has more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many countries has more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6343196991326512,
            "example_similarity": 0.3855835518701767,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT CountryId) FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 2 );",
            "correct": 0
        },
        {
            "index": 163,
            "question": "What is the number of countries with more than 2 car makers ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of countries with more than 2 car makers ? */\nSELECT ",
            "response": "count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6308239717087224,
            "example_similarity": 0.3847517509384578,
            "db_id": "car_1",
            "pred": "SELECT COUNT(DISTINCT CountryId) FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 2 );",
            "correct": 0
        },
        {
            "index": 164,
            "question": "How many cars has over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: How many cars has over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.631245776759279,
            "example_similarity": 0.38284124374632433,
            "db_id": "car_1",
            "pred": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
            "correct": 1
        },
        {
            "index": 165,
            "question": "What is the number of carsw ith over 6 cylinders?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many vehicle in total? */\nSELECT count(*) FROM Vehicles;\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the number of carsw ith over 6 cylinders? */\nSELECT ",
            "response": "COUNT(*) FROM CARS_DATA WHERE Cylinders > 6;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6625,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Vehicles;",
                    "question": "How many vehicle in total?"
                }
            ],
            "example_quality": 0.6321338494927243,
            "example_similarity": 0.38132907459230625,
            "db_id": "car_1",
            "pred": "SELECT count(*) FROM cars_data WHERE Cylinders > 6;",
            "correct": 1
        },
        {
            "index": 166,
            "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the institution type with the largest number of institutions. */\nSELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For the cars with 4 cylinders, which model has the largest horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1919,
                    "db_id": "protein_institute",
                    "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the institution type with the largest number of institutions."
                }
            ],
            "example_quality": 0.6322237589748732,
            "example_similarity": 0.38137461564228564,
            "db_id": "car_1",
            "pred": "SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON car_makers.Id = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders = 4 ORDER BY CAST(cars_data.Horsepower AS INTEGER) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 167,
            "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: For all of the 4 cylinder cars, which model has the most horsepower? */\nSELECT ",
            "response": "T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6323125916967567,
            "example_similarity": 0.3810869432931302,
            "db_id": "car_1",
            "pred": "SELECT Model FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 168,
            "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the products that are not using the most frequently-used max page size. */\nSELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. */\nSELECT ",
            "response": "T2.MakeId , T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4939,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
                    "question": "Find the name of the products that are not using the most frequently-used max page size."
                }
            ],
            "example_quality": 0.6317376017801942,
            "example_similarity": 0.38026644507854757,
            "db_id": "car_1",
            "pred": "SELECT MakeId, Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3",
            "correct": 1
        },
        {
            "index": 169,
            "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ? */\nSELECT ",
            "response": "t2.makeid , t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower > (select min(horsepower) from cars_data) and t1.cylinders < 4;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6283939867795225,
            "example_similarity": 0.3797566888772474,
            "db_id": "car_1",
            "pred": "SELECT MakeId, Make FROM car_names WHERE MakeId IN ( SELECT MakeId FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders < 4 )",
            "correct": 0
        },
        {
            "index": 170,
            "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id and name of the aircraft that can cover the maximum distance? */\nSELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 357,
                    "db_id": "flight_1",
                    "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
                    "question": "What is the id and name of the aircraft that can cover the maximum distance?"
                }
            ],
            "example_quality": 0.6251877476416038,
            "example_similarity": 0.3799738063936558,
            "db_id": "car_1",
            "pred": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 AND Year < 1980",
            "correct": 1
        },
        {
            "index": 171,
            "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all products that are not the most frequently-used maximum page size? */\nSELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ? */\nSELECT ",
            "response": "max(mpg) from cars_data where cylinders = 8 or year < 1980",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4940,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
                    "question": "What are the names of all products that are not the most frequently-used maximum page size?"
                }
            ],
            "example_quality": 0.6219933594590273,
            "example_similarity": 0.3795666193830859,
            "db_id": "car_1",
            "pred": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
            "correct": 1
        },
        {
            "index": 172,
            "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6241910724854284,
            "example_similarity": 0.37763669164027175,
            "db_id": "car_1",
            "pred": "SELECT m.Model FROM model_list AS m JOIN car_makers AS cm ON m.Maker = cm.Id JOIN car_names AS cn ON m.ModelId = cn.MakeId JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Weight < 3500 AND cm.Maker != \"Ford Motor Company\";",
            "correct": 0
        },
        {
            "index": 173,
            "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'? */\nSELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? */\nSELECT ",
            "response": "DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName != 'Ford Motor Company';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5590,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
                    "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?"
                }
            ],
            "example_quality": 0.6255376145932748,
            "example_similarity": 0.3778020864862818,
            "db_id": "car_1",
            "pred": "SELECT t4.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model JOIN car_makers AS t4 ON t3.Maker = t4.Id WHERE t1.Weight < 3500 AND t4.Maker != \"Ford\"",
            "correct": 0
        },
        {
            "index": 174,
            "question": "What are the name of the countries where there is not a single car maker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the name of the countries where there is not a single car maker? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                }
            ],
            "example_quality": 0.6250077049308613,
            "example_similarity": 0.3782170170237169,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
            "correct": 1
        },
        {
            "index": 175,
            "question": "What are the names of the countries with no car makers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the names of the countries with no car makers? */\nSELECT ",
            "response": "CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                }
            ],
            "example_quality": 0.6244838513788755,
            "example_similarity": 0.37874485255669066,
            "db_id": "car_1",
            "pred": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
            "correct": 1
        },
        {
            "index": 176,
            "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker . */\nSELECT ",
            "response": "t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id , t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join car_names as t3 on t2.model = t3.model group by t1.id having count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2686,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Which parties have more than 20 hosts? Give me the host names for these parties."
                }
            ],
            "example_quality": 0.6210956988942484,
            "example_similarity": 0.3788656204398912,
            "db_id": "car_1",
            "pred": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(DISTINCT T1.Id) > 3",
            "correct": 0
        },
        {
            "index": 177,
            "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? */\nSELECT ",
            "response": "T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) >= 2 INTERSECT SELECT T1.Id , T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING count(*) > 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6184979284066009,
            "example_similarity": 0.37691346062572983,
            "db_id": "car_1",
            "pred": "SELECT c.Id, c.Maker FROM car_makers c JOIN model_list m ON c.Id = m.Maker JOIN car_names n ON m.ModelId = n.MakeId GROUP BY c.Id, c.Maker HAVING COUNT(DISTINCT m.ModelId) >= 2 AND COUNT(n.Make) > 3;",
            "correct": 0
        },
        {
            "index": 178,
            "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? */\nSELECT ",
            "response": "T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING count(*) > 3 UNION SELECT T1.countryId , T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6165553966331215,
            "example_similarity": 0.3749771943554512,
            "db_id": "car_1",
            "pred": "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN ( SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(DISTINCT cm.Id) > 3 ) OR c.CountryId IN ( SELECT m.Maker FROM model_list m WHERE m.Model = 'fiat' );",
            "correct": 0
        },
        {
            "index": 179,
            "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"continents\" ( \n\t\"ContId\" INTEGER PRIMARY KEY, \n\t\"Continent\" TEXT \n)\n\nCREATE TABLE \"countries\" (\n\t\"CountryId\" INTEGER PRIMARY KEY, \n\t\"CountryName\" TEXT, \n\t\"Continent\" INTEGER,\n\tFOREIGN KEY (Continent) REFERENCES continents(ContId)\n)\n\nCREATE TABLE \"car_makers\" ( \n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"Maker\" TEXT, \n\t\"FullName\" TEXT, \n\t\"Country\" TEXT,\n\tFOREIGN KEY (Country) REFERENCES countries(CountryId)\n)\n\nCREATE TABLE \"model_list\" ( \n\t\"ModelId\" INTEGER PRIMARY KEY, \n\t\"Maker\" INTEGER, \n\t\"Model\" TEXT UNIQUE,\n\tFOREIGN KEY (Maker) REFERENCES car_makers (Id)\n\n)\n\nCREATE TABLE \"car_names\" ( \n\t\"MakeId\" INTEGER PRIMARY KEY, \n\t\"Model\" TEXT, \n\t\"Make\" TEXT,\n\tFOREIGN KEY (Model) REFERENCES model_list (Model)\n)\n\nCREATE TABLE \"cars_data\" (\n\t\"Id\" INTEGER PRIMARY KEY, \n\t\"MPG\" TEXT, \n\t\"Cylinders\" INTEGER, \n\t\"Edispl\" REAL, \n\t\"Horsepower\" TEXT, \n\t\"Weight\" INTEGER, \n\t\"Accelerate\" REAL, \n\t\"Year\" INTEGER,\n\tFOREIGN KEY (Id) REFERENCES car_names (MakeId)\n)\n\n/* Answer the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ? */\nSELECT ",
            "response": "t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t1.countryid having count(*) > 3 union select t1.countryid , t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country join model_list as t3 on t2.id = t3.maker where t3.model = 'fiat';",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6135765024247429,
            "example_similarity": 0.3746700591914543,
            "db_id": "car_1",
            "pred": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IN ( SELECT Maker FROM model_list WHERE Model = 'Fiat' ) OR countries.CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 )",
            "correct": 0
        },
        {
            "index": 180,
            "question": "Which country does Airline \"JetBlue Airways\" belong to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which country does Airline \"JetBlue Airways\" belong to? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6115566329668277,
            "example_similarity": 0.37377903505308907,
            "db_id": "flight_2",
            "pred": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\";",
            "correct": 1
        },
        {
            "index": 181,
            "question": "What country is Jetblue Airways affiliated with?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type description of the organization whose detail is listed as 'quo'? */\nSELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What country is Jetblue Airways affiliated with? */\nSELECT ",
            "response": "Country FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4372,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'",
                    "question": "What is the type description of the organization whose detail is listed as 'quo'?"
                }
            ],
            "example_quality": 0.6137027289172872,
            "example_similarity": 0.37276631215487416,
            "db_id": "flight_2",
            "pred": "SELECT A.Country FROM airlines AS A WHERE A.Airline = 'Jetblue Airways'",
            "correct": 0
        },
        {
            "index": 182,
            "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of Airline \"JetBlue Airways\"? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6117043622748846,
            "example_similarity": 0.37189553963910954,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\";",
            "correct": 1
        },
        {
            "index": 183,
            "question": "Which abbreviation corresponds to Jetblue Airways?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which abbreviation corresponds to Jetblue Airways? */\nSELECT ",
            "response": "Abbreviation FROM AIRLINES WHERE Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6101832091112694,
            "example_similarity": 0.3716848172002802,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
            "correct": 0
        },
        {
            "index": 184,
            "question": "List all airline names and their abbreviations in \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List all airline names and their abbreviations in \"USA\". */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6104901844240704,
            "example_similarity": 0.370751747541583,
            "db_id": "flight_2",
            "pred": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';",
            "correct": 1
        },
        {
            "index": 185,
            "question": "What are the airline names and abbreviations for airlines in the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the airline names and abbreviations for airlines in the USA? */\nSELECT ",
            "response": "Airline , Abbreviation FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6102790405700408,
            "example_similarity": 0.3706781859718601,
            "db_id": "flight_2",
            "pred": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
            "correct": 1
        },
        {
            "index": 186,
            "question": "List the airport code and name in the city of Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: List the airport code and name in the city of Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.609302117924887,
            "example_similarity": 0.3704774071942336,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
            "correct": 1
        },
        {
            "index": 187,
            "question": "Give the airport code and airport name corresonding to the city Anthony.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airport code and airport name corresonding to the city Anthony. */\nSELECT ",
            "response": "AirportCode , AirportName FROM AIRPORTS WHERE city = \"Anthony\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6096088802176237,
            "example_similarity": 0.36949891838570825,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';",
            "correct": 1
        },
        {
            "index": 188,
            "question": "How many airlines do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines do we have? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6116854287271045,
            "example_similarity": 0.3698975648009144,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(DISTINCT Airline) FROM flights",
            "correct": 0
        },
        {
            "index": 189,
            "question": "What is the total number of airlines?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of regions. */\nSELECT count(*) FROM region\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the total number of airlines? */\nSELECT ",
            "response": "count(*) FROM AIRLINES",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2041,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region",
                    "question": "Count the number of regions."
                }
            ],
            "example_quality": 0.6137400031782838,
            "example_similarity": 0.37005683694482483,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines",
            "correct": 1
        },
        {
            "index": 190,
            "question": "How many airports do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airports do we have? */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.615772950529977,
            "example_similarity": 0.37044835066850706,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airports",
            "correct": 1
        },
        {
            "index": 191,
            "question": "Return the number of  airports.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of  airports. */\nSELECT ",
            "response": "count(*) FROM AIRPORTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6171301602130662,
            "example_similarity": 0.37299648944585967,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airports;",
            "correct": 1
        },
        {
            "index": 192,
            "question": "How many flights do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights do we have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6191242739619565,
            "example_similarity": 0.3733686142114773,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights",
            "correct": 1
        },
        {
            "index": 193,
            "question": "Return the number of flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6204500549258841,
            "example_similarity": 0.37587521650645855,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights;",
            "correct": 1
        },
        {
            "index": 194,
            "question": "Which airline has abbreviation 'UAL'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has abbreviation 'UAL'? */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6185405185602868,
            "example_similarity": 0.3753435260746071,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';",
            "correct": 1
        },
        {
            "index": 195,
            "question": "Give the airline with abbreviation 'UAL'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the airline with abbreviation 'UAL'. */\nSELECT ",
            "response": "Airline FROM AIRLINES WHERE Abbreviation = \"UAL\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6197641202966077,
            "example_similarity": 0.37410244816311333,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';",
            "correct": 1
        },
        {
            "index": 196,
            "question": "How many airlines are from USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents have document type code CV or BK? */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many airlines are from USA? */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4174,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
                    "question": "How many documents have document type code CV or BK?"
                }
            ],
            "example_quality": 0.6217040992746862,
            "example_similarity": 0.37415608559399227,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines WHERE Country = \"USA\"",
            "correct": 1
        },
        {
            "index": 197,
            "question": "Return the number of airlines in the USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of airlines in the USA. */\nSELECT ",
            "response": "count(*) FROM AIRLINES WHERE Country = \"USA\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6221015403951192,
            "example_similarity": 0.37530250140315985,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';",
            "correct": 1
        },
        {
            "index": 198,
            "question": "Which city and country is the Alton airport at?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city and country is the Alton airport at? */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.62044505608534,
            "example_similarity": 0.3745953883538866,
            "db_id": "flight_2",
            "pred": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
            "correct": 1
        },
        {
            "index": 199,
            "question": "Give the city and country for the Alton airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the city and country for the Alton airport. */\nSELECT ",
            "response": "City , Country FROM AIRPORTS WHERE AirportName = \"Alton\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6216344922715586,
            "example_similarity": 0.3733411401712038,
            "db_id": "flight_2",
            "pred": "SELECT City, Country FROM airports WHERE AirportName = \"Alton\";",
            "correct": 1
        },
        {
            "index": 200,
            "question": "What is the airport name for airport 'AKO'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport name for airport 'AKO'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6228120340959151,
            "example_similarity": 0.3714744344703477,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
            "correct": 1
        },
        {
            "index": 201,
            "question": "Return the name of the airport with code 'AKO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the name and description of the location with code x. */\nSELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the name of the airport with code 'AKO'. */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE AirportCode = \"AKO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4186,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
                    "question": "Give me the name and description of the location with code x."
                }
            ],
            "example_quality": 0.624688591140214,
            "example_similarity": 0.37167488358185025,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
            "correct": 1
        },
        {
            "index": 202,
            "question": "What are airport names at City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airport names at City 'Aberdeen'? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6258393548332964,
            "example_similarity": 0.36983490891065296,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen';",
            "correct": 1
        },
        {
            "index": 203,
            "question": "What are the names of airports in Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of projects that have not been assigned? */\nSELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are the names of airports in Aberdeen? */\nSELECT ",
            "response": "AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6507,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
                    "question": "What are the names of projects that have not been assigned?"
                }
            ],
            "example_quality": 0.6248675916497404,
            "example_similarity": 0.3704761162559207,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 204,
            "question": "How many flights depart from 'APG'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from 'APG'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 405,
                    "db_id": "flight_1",
                    "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
                    "question": "For each origin, how many flights came from there?"
                }
            ],
            "example_quality": 0.6248211064719702,
            "example_similarity": 0.37076089719864386,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 205,
            "question": "Count the number of flights departing from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights departing from 'APG'. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6251878327818631,
            "example_similarity": 0.37082848006409136,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
            "correct": 1
        },
        {
            "index": 206,
            "question": "How many flights have destination ATO?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights have destination ATO? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6255509986421453,
            "example_similarity": 0.3694017548061252,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
            "correct": 1
        },
        {
            "index": 207,
            "question": "Count the number of flights into ATO.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of flights into ATO. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS WHERE DestAirport = \"ATO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6262863937104333,
            "example_similarity": 0.3712403936717961,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'",
            "correct": 1
        },
        {
            "index": 208,
            "question": "How many flights depart from City Aberdeen?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City Aberdeen? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 405,
                    "db_id": "flight_1",
                    "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
                    "question": "For each origin, how many flights came from there?"
                }
            ],
            "example_quality": 0.626233981314636,
            "example_similarity": 0.3716745189980782,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 209,
            "question": "Return the number of flights departing from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights departing from Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6265869287724609,
            "example_similarity": 0.3727669854143554,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';",
            "correct": 1
        },
        {
            "index": 210,
            "question": "How many flights arriving in Aberdeen city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each origin, how many flights came from there? */\nSELECT origin ,  count(*) FROM Flight GROUP BY origin\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights arriving in Aberdeen city? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 405,
                    "db_id": "flight_1",
                    "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin",
                    "question": "For each origin, how many flights came from there?"
                }
            ],
            "example_quality": 0.6265335844229949,
            "example_similarity": 0.3726925848035387,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 211,
            "question": "Return the number of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of flights arriving in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6268817664873408,
            "example_similarity": 0.373769871131484,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ';",
            "correct": 1
        },
        {
            "index": 212,
            "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many flights do we have? */\nSELECT count(*) FROM Flight\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 382,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Flight",
                    "question": "How many flights do we have?"
                }
            ],
            "example_quality": 0.6275935401255034,
            "example_similarity": 0.3732481165258489,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley')",
            "correct": 1
        },
        {
            "index": 213,
            "question": "How many flights fly from Aberdeen to Ashley?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the number of flights? */\nSELECT count(*) FROM Flight\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights fly from Aberdeen to Ashley? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 383,
                    "db_id": "flight_1",
                    "query": "SELECT count(*) FROM Flight",
                    "question": "What is the number of flights?"
                }
            ],
            "example_quality": 0.6282986304431197,
            "example_similarity": 0.3721664687621461,
            "db_id": "flight_2",
            "pred": "SELECT count(*) FROM flights WHERE SourceAirport = 'ABZ' AND DestAirport = 'ASY'",
            "correct": 1
        },
        {
            "index": 214,
            "question": "How many flights does airline 'JetBlue Airways' have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights does airline 'JetBlue Airways' have? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6286336835718901,
            "example_similarity": 0.3707022494193873,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');",
            "correct": 1
        },
        {
            "index": 215,
            "question": "Give the number of Jetblue Airways flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the number of Jetblue Airways flights. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6289656199273697,
            "example_similarity": 0.37130363430580876,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways');",
            "correct": 0
        },
        {
            "index": 216,
            "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of rooms for different block code? */\nSELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights go to Airport 'ASY'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3935,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
                    "question": "Find the number of rooms for different block code?"
                }
            ],
            "example_quality": 0.6289027449063384,
            "example_similarity": 0.3705105619247633,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
            "correct": 1
        },
        {
            "index": 217,
            "question": "Count the number of United Airlines flights arriving in ASY Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights arriving in ASY Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6292303820265858,
            "example_similarity": 0.37077812352221334,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
            "correct": 1
        },
        {
            "index": 218,
            "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the origins from which more than 1 train starts. */\nSELECT origin FROM train GROUP BY origin HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many 'United Airlines' flights depart from Airport 'AHD'? */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3173,
                    "db_id": "station_weather",
                    "query": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
                    "question": "Find the origins from which more than 1 train starts."
                }
            ],
            "example_quality": 0.6287904873078092,
            "example_similarity": 0.3699510504348463,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD'",
            "correct": 1
        },
        {
            "index": 219,
            "question": "Return the number of United Airlines flights leaving from AHD Airport.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Return the number of United Airlines flights leaving from AHD Airport. */\nSELECT ",
            "response": "count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.629115644900011,
            "example_similarity": 0.3703692577914838,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD';",
            "correct": 1
        },
        {
            "index": 220,
            "question": "How many United Airlines flights go to City 'Aberdeen'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which contact channel codes were used less than 5 times? */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many United Airlines flights go to City 'Aberdeen'? */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6097,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "Which contact channel codes were used less than 5 times?"
                }
            ],
            "example_quality": 0.6286802707565261,
            "example_similarity": 0.3702900392400252,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights AS F JOIN airlines AS A ON F.Airline = A.uid JOIN airports AS S ON F.SourceAirport = S.AirportCode JOIN airports AS D ON F.DestAirport = D.AirportCode WHERE A.Airline = 'United Airlines' AND D.City = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 221,
            "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Count the number of United Airlines flights that arrive in Aberdeen. */\nSELECT ",
            "response": "count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6290029844635101,
            "example_similarity": 0.37055375593383244,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 222,
            "question": "Which city has most number of arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and city of the airport which is the destination of the most number of routes. */\nSELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of arriving flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6834,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and city of the airport which is the destination of the most number of routes."
                }
            ],
            "example_quality": 0.630674142191152,
            "example_similarity": 0.3701130960995687,
            "db_id": "flight_2",
            "pred": "SELECT T1.City, COUNT(*) AS NumArrivingFlights FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY NumArrivingFlights DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 223,
            "question": "Which city has the most frequent destination airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the payment method that is used most frequently. */\nSELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has the most frequent destination airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2855,
                    "db_id": "customer_deliveries",
                    "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the payment method that is used most frequently."
                }
            ],
            "example_quality": 0.632330311957111,
            "example_similarity": 0.36964921076578877,
            "db_id": "flight_2",
            "pred": "SELECT City, DestAirport, COUNT(*) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY Frequency DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 224,
            "question": "Which city has most number of departing flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and city of the airport which is the destination of the most number of routes. */\nSELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city has most number of departing flights? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6834,
                    "db_id": "flight_4",
                    "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name and city of the airport which is the destination of the most number of routes."
                }
            ],
            "example_quality": 0.6339716944930168,
            "example_similarity": 0.3692165235424026,
            "db_id": "flight_2",
            "pred": "SELECT T1.City, COUNT(*) AS DepartingFlights FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY DepartingFlights DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 225,
            "question": "Which city is the most frequent source airport?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which city is the most frequent source airport? */\nSELECT ",
            "response": "T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6355984869619368,
            "example_similarity": 0.36905704269702894,
            "db_id": "flight_2",
            "pred": "SELECT SourceAirport, COUNT(SourceAirport) AS Frequency FROM flights GROUP BY SourceAirport ORDER BY Frequency DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 226,
            "question": "What is the code of airport that has the highest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the card type code with most number of cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has the highest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 722,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the card type code with most number of cards?"
                }
            ],
            "example_quality": 0.6372108830373264,
            "example_similarity": 0.36939061527113254,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 227,
            "question": "What is the airport code of the airport with the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the airport code of the airport with the most flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6388090729798933,
            "example_similarity": 0.3690590162922237,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 228,
            "question": "What is the code of airport that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the transaction type code that occurs the fewest times. */\nSELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the code of airport that has fewest number of flights? */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5876,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
                    "question": "Show the transaction type code that occurs the fewest times."
                }
            ],
            "example_quality": 0.6403932437124376,
            "example_similarity": 0.3685945376889106,
            "db_id": "flight_2",
            "pred": "SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.AirportCode ORDER BY COUNT(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 229,
            "question": "Give the code of the airport with the least flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and code of the location with the smallest number of documents? */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the code of the airport with the least flights. */\nSELECT ",
            "response": "T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4234,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "What are the name and code of the location with the smallest number of documents?"
                }
            ],
            "example_quality": 0.6419635788927326,
            "example_similarity": 0.36882361233471866,
            "db_id": "flight_2",
            "pred": "SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 230,
            "question": "Which airline has most number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airline has most number of flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6435202589845034,
            "example_similarity": 0.3685578240536646,
            "db_id": "flight_2",
            "pred": "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 231,
            "question": "What airline serves the most flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the policy type the most customers choose. */\nSELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What airline serves the most flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3888,
                    "db_id": "insurance_policies",
                    "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the policy type the most customers choose."
                }
            ],
            "example_quality": 0.6450634613265618,
            "example_similarity": 0.3684053370808494,
            "db_id": "flight_2",
            "pred": "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 232,
            "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the rank of the faculty that the fewest faculties belong to. */\nSELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the abbreviation and country of the airline that has fewest number of flights? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4678,
                    "db_id": "college_3",
                    "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1",
                    "question": "Find the rank of the faculty that the fewest faculties belong to."
                }
            ],
            "example_quality": 0.6465933602001542,
            "example_similarity": 0.3688591253284592,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )",
            "correct": 0
        },
        {
            "index": 233,
            "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the numbers of the shortest flights? */\nSELECT flno FROM Flight ORDER BY distance ASC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? */\nSELECT ",
            "response": "T1.Abbreviation , T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 401,
                    "db_id": "flight_1",
                    "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
                    "question": "What are the numbers of the shortest flights?"
                }
            ],
            "example_quality": 0.6465006848344883,
            "example_similarity": 0.3685022805232481,
            "db_id": "flight_2",
            "pred": "SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )",
            "correct": 0
        },
        {
            "index": 234,
            "question": "What are airlines that have some flight departing from airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show origin and destination for flights with price higher than 300. */\nSELECT origin ,  destination FROM Flight WHERE price  >  300\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have some flight departing from airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 396,
                    "db_id": "flight_1",
                    "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
                    "question": "Show origin and destination for flights with price higher than 300."
                }
            ],
            "example_quality": 0.6480113656685289,
            "example_similarity": 0.3677044852296368,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights WHERE SourceAirport = 'AHD'",
            "correct": 1
        },
        {
            "index": 235,
            "question": "Which airlines have a flight with source airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with source airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6463177002827054,
            "example_similarity": 0.36712178201916695,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights WHERE SourceAirport = 'AHD'",
            "correct": 1
        },
        {
            "index": 236,
            "question": "What are airlines that have flights arriving at airport 'AHD'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are airlines that have flights arriving at airport 'AHD'? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6446383879933719,
            "example_similarity": 0.366360672773323,
            "db_id": "flight_2",
            "pred": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';",
            "correct": 1
        },
        {
            "index": 237,
            "question": "Which airlines have a flight with destination airport AHD?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have a flight with destination airport AHD? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = \"AHD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6429732471157628,
            "example_similarity": 0.3657885569842762,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'",
            "correct": 0
        },
        {
            "index": 238,
            "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6420723991386856,
            "example_similarity": 0.3642516302742582,
            "db_id": "flight_2",
            "pred": "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN airports ap1 ON f1.SourceAirport = ap1.AirportCode JOIN flights f2 ON a.uid = f2.Airline JOIN airports ap2 ON f2.SourceAirport = ap2.AirportCode WHERE ap1.AirportCode = 'APG' AND ap2.AirportCode = 'CVO';",
            "correct": 1
        },
        {
            "index": 239,
            "question": "Which airlines have departing flights from both APG and CVO airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the origins from which more than 1 train starts. */\nSELECT origin FROM train GROUP BY origin HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departing flights from both APG and CVO airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3173,
                    "db_id": "station_weather",
                    "query": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
                    "question": "Find the origins from which more than 1 train starts."
                }
            ],
            "example_quality": 0.6408503388912435,
            "example_similarity": 0.3638898149918462,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(DISTINCT SourceAirport) = 2;",
            "correct": 1
        },
        {
            "index": 240,
            "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a back vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5253,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
                    "question": "Find all the songs that do not have a back vocal."
                }
            ],
            "example_quality": 0.6414539386696728,
            "example_similarity": 0.36388875894453165,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines WHERE uid IN ( SELECT Airline FROM flights WHERE SourceAirport = 'CVO' ) AND uid NOT IN ( SELECT Airline FROM flights WHERE SourceAirport = 'APG' )",
            "correct": 1
        },
        {
            "index": 241,
            "question": "Which airlines have departures from CVO but not from APG airports?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which destination has least number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have departures from CVO but not from APG airports? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 410,
                    "db_id": "flight_1",
                    "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
                    "question": "Which destination has least number of flights?"
                }
            ],
            "example_quality": 0.640373019343045,
            "example_similarity": 0.3634161914800315,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN ( SELECT Airline FROM flights WHERE SourceAirport = 'APG' )",
            "correct": 1
        },
        {
            "index": 242,
            "question": "Find all airlines that have at least 10 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have at least 10 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6418590812465861,
            "example_similarity": 0.3639805873830066,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10",
            "correct": 0
        },
        {
            "index": 243,
            "question": "Which airlines have at least 10 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what papers have fewer than 5 citations by ACL papers ? */\nSELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have at least 10 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8003,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
                    "question": "what papers have fewer than 5 citations by ACL papers ?"
                }
            ],
            "example_quality": 0.642033367028764,
            "example_similarity": 0.36395244857543396,
            "db_id": "flight_2",
            "pred": "SELECT Airline, COUNT(*) AS num_flights FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) >= 10;",
            "correct": 0
        },
        {
            "index": 244,
            "question": "Find all airlines that have fewer than 200 flights.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the document type code with fewer than 3 documents. */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find all airlines that have fewer than 200 flights. */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6422,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "Show the document type code with fewer than 3 documents."
                }
            ],
            "example_quality": 0.6435004433934002,
            "example_similarity": 0.36410018444192804,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200",
            "correct": 0
        },
        {
            "index": 245,
            "question": "Which airlines have less than 200 flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what papers have fewer than 5 citations by ACL papers ? */\nSELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airlines have less than 200 flights? */\nSELECT ",
            "response": "T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(*) < 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8003,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
                    "question": "what papers have fewer than 5 citations by ACL papers ?"
                }
            ],
            "example_quality": 0.6440485141459895,
            "example_similarity": 0.36449789169538327,
            "db_id": "flight_2",
            "pred": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline HAVING COUNT(*) < 200;",
            "correct": 0
        },
        {
            "index": 246,
            "question": "What are flight numbers of Airline \"United Airlines\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of Airline \"United Airlines\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6449147513126434,
            "example_similarity": 0.3630161929486541,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"United Airlines\");",
            "correct": 1
        },
        {
            "index": 247,
            "question": "Which flight numbers correspond to United Airlines flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which flight numbers correspond to United Airlines flights? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = \"United Airlines\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6436532880819579,
            "example_similarity": 0.36303807497166185,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
            "correct": 1
        },
        {
            "index": 248,
            "question": "What are flight numbers of flights departing from Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the flight number, origin, and destination for all flights in alphabetical order by departure cities? */\nSELECT flno ,  origin ,  destination FROM Flight ORDER BY origin\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 385,
                    "db_id": "flight_1",
                    "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
                    "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?"
                }
            ],
            "example_quality": 0.6432980552895129,
            "example_similarity": 0.3626598197065776,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 249,
            "question": "Give the flight numbers of flights leaving from APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show origins of all flights with destination Honolulu. */\nSELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE SourceAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 388,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
                    "question": "Show origins of all flights with destination Honolulu."
                }
            ],
            "example_quality": 0.644730593220077,
            "example_similarity": 0.3630569226858222,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 250,
            "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at Airport \"APG\"? */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6431516708471967,
            "example_similarity": 0.3623546949950789,
            "db_id": "flight_2",
            "pred": "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportName = \"APG\";",
            "correct": 1
        },
        {
            "index": 251,
            "question": "Give the flight numbers of flights landing at APG.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'? */\nSELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights landing at APG. */\nSELECT ",
            "response": "FlightNo FROM FLIGHTS WHERE DestAirport = \"APG\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6377,
                    "db_id": "flight_company",
                    "query": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
                    "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?"
                }
            ],
            "example_quality": 0.644004225374271,
            "example_similarity": 0.36151469681388393,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
            "correct": 1
        },
        {
            "index": 252,
            "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the flight number, origin, and destination for all flights in alphabetical order by departure cities? */\nSELECT flno ,  origin ,  destination FROM Flight ORDER BY origin\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights departing from City \"Aberdeen \"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 385,
                    "db_id": "flight_1",
                    "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
                    "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?"
                }
            ],
            "example_quality": 0.643653238589276,
            "example_similarity": 0.3611484907520462,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')",
            "correct": 1
        },
        {
            "index": 253,
            "question": "Give the flight numbers of flights leaving from Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show origins of all flights with destination Honolulu. */\nSELECT origin FROM Flight WHERE destination  =  \"Honolulu\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights leaving from Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 388,
                    "db_id": "flight_1",
                    "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"",
                    "question": "Show origins of all flights with destination Honolulu."
                }
            ],
            "example_quality": 0.6450617238122434,
            "example_similarity": 0.36154528905554983,
            "db_id": "flight_2",
            "pred": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
            "correct": 1
        },
        {
            "index": 254,
            "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: What are flight numbers of flights arriving at City \"Aberdeen\"? */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6435063626948724,
            "example_similarity": 0.3608600713821028,
            "db_id": "flight_2",
            "pred": "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = \"Aberdeen\";",
            "correct": 1
        },
        {
            "index": 255,
            "question": "Give the flight numbers of flights arriving in Aberdeen.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Give the flight numbers of flights arriving in Aberdeen. */\nSELECT ",
            "response": "T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = \"Aberdeen\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6419632004882257,
            "example_similarity": 0.3603499112228366,
            "db_id": "flight_2",
            "pred": "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = \"Aberdeen\";",
            "correct": 1
        },
        {
            "index": 256,
            "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the number of flights landing in the city of Aberdeen or Abilene. */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6421899067363188,
            "example_similarity": 0.36016299750712244,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene');",
            "correct": 1
        },
        {
            "index": 257,
            "question": "How many flights land in Aberdeen or Abilene?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: How many flights land in Aberdeen or Abilene? */\nSELECT ",
            "response": "count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.642025743675088,
            "example_similarity": 0.35876158506546046,
            "db_id": "flight_2",
            "pred": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABZ' OR DestAirport = 'ABI';",
            "correct": 1
        },
        {
            "index": 258,
            "question": "Find the name of airports which do not have any flight in and out.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of songs that does not have a back vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Find the name of airports which do not have any flight in and out. */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5265,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
                    "question": "Find the name of songs that does not have a back vocal."
                }
            ],
            "example_quality": 0.6413829713204964,
            "example_similarity": 0.35920702159825446,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
            "correct": 1
        },
        {
            "index": 259,
            "question": "Which airports do not have departing or arriving flights?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which destination has least number of flights? */\nSELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE 'airlines' (\n\tuid INTEGER PRIMARY KEY, \n\tAirline TEXT, \n\tAbbreviation TEXT, \n\tCountry TEXT\n)\n\nCREATE TABLE 'airports' (\n\tCity TEXT, \n\tAirportCode TEXT PRIMARY KEY, \n\tAirportName TEXT, \n\tCountry TEXT, \n\tCountryAbbrev TEXT\n)\n\nCREATE TABLE 'flights' (\n\tAirline INTEGER, \n\tFlightNo INTEGER, \n\tSourceAirport TEXT, \n\tDestAirport TEXT, \n\tPRIMARY KEY(Airline, FlightNo),\n\tFOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n\tFOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n)\n\n/* Answer the following: Which airports do not have departing or arriving flights? */\nSELECT ",
            "response": "AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 410,
                    "db_id": "flight_1",
                    "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
                    "question": "Which destination has least number of flights?"
                }
            ],
            "example_quality": 0.6404509907362473,
            "example_similarity": 0.35892326586125073,
            "db_id": "flight_2",
            "pred": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
            "correct": 1
        },
        {
            "index": 260,
            "question": "How many employees are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many employees are there? */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6418338715411079,
            "example_similarity": 0.3613889456079382,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) FROM employee",
            "correct": 1
        },
        {
            "index": 261,
            "question": "Count the number of employees",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees */\nSELECT ",
            "response": "count(*) FROM employee",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6432061555581918,
            "example_similarity": 0.3621936951321552,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) FROM employee",
            "correct": 1
        },
        {
            "index": 262,
            "question": "Sort employee names by their age in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort employee names by their age in ascending order. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6445679641247636,
            "example_similarity": 0.362083541079488,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee ORDER BY Age;",
            "correct": 1
        },
        {
            "index": 263,
            "question": "List the names of employees and sort in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: List the names of employees and sort in ascending order of age. */\nSELECT ",
            "response": "name FROM employee ORDER BY age",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6459194167326543,
            "example_similarity": 0.36273468097398925,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 264,
            "question": "What is the number of employees from each city?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the number of employees from each city? */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6446382534408348,
            "example_similarity": 0.36262331223292615,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City",
            "correct": 1
        },
        {
            "index": 265,
            "question": "Count the number of employees for each city.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of employees for each city. */\nSELECT ",
            "response": "count(*) , city FROM employee GROUP BY city",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6442375865918564,
            "example_similarity": 0.36331324141489457,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City, COUNT(Employee_ID) AS NumEmployees FROM employee GROUP BY City;",
            "correct": 1
        },
        {
            "index": 266,
            "question": "Which cities do more than one employee under age 30 come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What document types have more than 2 corresponding documents? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which cities do more than one employee under age 30 come from? */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4542,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                    "question": "What document types have more than 2 corresponding documents?"
                }
            ],
            "example_quality": 0.6451051144618118,
            "example_similarity": 0.36359213900356036,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 267,
            "question": "Find the cities that have more than one employee under age 30.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the cities that have more than one employee under age 30. */\nSELECT ",
            "response": "city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6459661439956627,
            "example_similarity": 0.36490559808701417,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 268,
            "question": "Find the number of shops in each location.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of shops in each location. */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.6472871658464251,
            "example_similarity": 0.36625771424069214,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT count(*) , Location FROM shop GROUP BY Location",
            "correct": 1
        },
        {
            "index": 269,
            "question": "How many shops are there in each location?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many shops are there in each location? */\nSELECT ",
            "response": "count(*) , LOCATION FROM shop GROUP BY LOCATION",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.6485983659733902,
            "example_similarity": 0.3672618254753499,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
            "correct": 1
        },
        {
            "index": 270,
            "question": "Find the manager name and district of the shop whose number of products is the largest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and ID of the product whose total order quantity is the largest. */\nSELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the manager name and district of the shop whose number of products is the largest. */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6132,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
                    "question": "Find the name and ID of the product whose total order quantity is the largest."
                }
            ],
            "example_quality": 0.6481569341168438,
            "example_similarity": 0.3683090038995153,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT t2.Manager_name, t2.District FROM shop AS t2 WHERE t2.Number_products = (SELECT MAX(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 271,
            "question": "What are the manager name and district of the shop that sells the largest number of products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the top three products that were purchased in the largest amount? */\nSELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the manager name and district of the shop that sells the largest number of products? */\nSELECT ",
            "response": "manager_name , district FROM shop ORDER BY number_products DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4710,
                    "db_id": "department_store",
                    "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                    "question": "What are the ids of the top three products that were purchased in the largest amount?"
                }
            ],
            "example_quality": 0.6494552480130916,
            "example_similarity": 0.3686411969970571,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 272,
            "question": "find the minimum and maximum number of products of all stores.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each product type, return the maximum and minimum price. */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the minimum and maximum number of products of all stores. */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4746,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "For each product type, return the maximum and minimum price."
                }
            ],
            "example_quality": 0.6496627006047389,
            "example_similarity": 0.3685113886747639,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT MIN(Number_products), MAX(Number_products) FROM shop",
            "correct": 1
        },
        {
            "index": 273,
            "question": "What are the minimum and maximum number of products across all the shops?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum product prices for each product type? */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the minimum and maximum number of products across all the shops? */\nSELECT ",
            "response": "min(Number_products) , max(Number_products) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4747,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "What are the maximum and minimum product prices for each product type?"
                }
            ],
            "example_quality": 0.64986863339718,
            "example_similarity": 0.3689930319396915,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT MIN(Number_products), MAX(Number_products) FROM shop",
            "correct": 1
        },
        {
            "index": 274,
            "question": "Return the name, location and district of all shops in descending order of number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all product names in ascending order of price. */\nSELECT Product_Name FROM Products ORDER BY Product_Price ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Return the name, location and district of all shops in descending order of number of products. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5113,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC",
                    "question": "List all product names in ascending order of price."
                }
            ],
            "example_quality": 0.6503354550919996,
            "example_similarity": 0.36886288705426684,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
            "correct": 1
        },
        {
            "index": 275,
            "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all information about customer master index, and sort them by details in descending order. */\nSELECT * FROM customer_master_index ORDER BY cmi_details DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. */\nSELECT ",
            "response": "name , LOCATION , district FROM shop ORDER BY number_products DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2655,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT * FROM customer_master_index ORDER BY cmi_details DESC",
                    "question": "List all information about customer master index, and sort them by details in descending order."
                }
            ],
            "example_quality": 0.6516069625280287,
            "example_similarity": 0.36908000902342014,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
            "correct": 1
        },
        {
            "index": 276,
            "question": "Find the names of stores whose number products is more than the average number of products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the product type whose average price is higher than the average price of all products. */\nSELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of stores whose number products is more than the average number of products. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4748,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
                    "question": "Find the product type whose average price is higher than the average price of all products."
                }
            ],
            "example_quality": 0.651609016696563,
            "example_similarity": 0.36971904719889526,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 277,
            "question": "Which shops' number products is above the average? Give me the shop names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products have a price higher than the average? */\nSELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops' number products is above the average? Give me the shop names. */\nSELECT ",
            "response": "name FROM shop WHERE number_products > (SELECT avg(number_products) FROM shop)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5664,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
                    "question": "How many products have a price higher than the average?"
                }
            ],
            "example_quality": 0.6522967287776508,
            "example_similarity": 0.3692048005565626,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop)",
            "correct": 1
        },
        {
            "index": 278,
            "question": "find the name of employee who was awarded the most times in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each aircraft that has won an award, what is its name and how many time has it won? */\nSELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: find the name of employee who was awarded the most times in the evaluation. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4827,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
                    "question": "For each aircraft that has won an award, what is its name and how many time has it won?"
                }
            ],
            "example_quality": 0.6519487389459168,
            "example_similarity": 0.3682037368527946,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 279,
            "question": "Which employee received the most awards in evaluations? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each aircraft that has won an award, what is its name and how many time has it won? */\nSELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the most awards in evaluations? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4827,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft",
                    "question": "For each aircraft that has won an award, what is its name and how many time has it won?"
                }
            ],
            "example_quality": 0.6516032436649477,
            "example_similarity": 0.36746211171203425,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 280,
            "question": "Find the name of the employee who got the highest one time bonus.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the user who gave the highest rating. */\nSELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the employee who got the highest one time bonus. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1712,
                    "db_id": "epinions_1",
                    "query": "SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id  =  T2.u_id ORDER BY T2.rating DESC LIMIT 1",
                    "question": "Find the name of the user who gave the highest rating."
                }
            ],
            "example_quality": 0.6528475177947157,
            "example_similarity": 0.368768794646396,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 281,
            "question": "Which employee received the biggest bonus? Give me the employee name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the largest state */\nSELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which employee received the biggest bonus? Give me the employee name. */\nSELECT ",
            "response": "t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7183,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "give me the largest state"
                }
            ],
            "example_quality": 0.6515918326780087,
            "example_similarity": 0.3684732269989508,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);",
            "correct": 1
        },
        {
            "index": 282,
            "question": "Find the names of employees who never won any award in the evaluation.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the players' first name and last name who won award both in 1960 and in 1961. */\nSELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the names of employees who never won any award in the evaluation. */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3662,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
                    "question": "Find the players' first name and last name who won award both in 1960 and in 1961."
                }
            ],
            "example_quality": 0.6513671641015534,
            "example_similarity": 0.36830133612306803,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "correct": 1
        },
        {
            "index": 283,
            "question": "What are the names of the employees who never received any evaluation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is all the information about employees who have never had a job in the past? */\nSELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What are the names of the employees who never received any evaluation? */\nSELECT ",
            "response": "name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3515,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                    "question": "What is all the information about employees who have never had a job in the past?"
                }
            ],
            "example_quality": 0.6525990822496044,
            "example_similarity": 0.3682848521213482,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
            "correct": 1
        },
        {
            "index": 284,
            "question": "What is the name of the shop that is hiring the largest number of employees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the largest state */\nSELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is the name of the shop that is hiring the largest number of employees? */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7183,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "give me the largest state"
                }
            ],
            "example_quality": 0.6516790303678315,
            "example_similarity": 0.3675749289331275,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY COUNT(Employee_ID) DESC LIMIT 1);",
            "correct": 1
        },
        {
            "index": 285,
            "question": "Which shop has the most employees? Give me the shop name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the keyword, which have been contained by the most number of papers in PVLDB . */\nSELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shop has the most employees? Give me the shop name. */\nSELECT ",
            "response": "t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8396,
                    "db_id": "academic",
                    "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
                    "question": "return me the keyword, which have been contained by the most number of papers in PVLDB ."
                }
            ],
            "example_quality": 0.6523471925881474,
            "example_similarity": 0.36730858415324513,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT s.Name AS Shop_Name FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 286,
            "question": "Find the name of the shops that do not hire any employee.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a back vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the name of the shops that do not hire any employee. */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5253,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
                    "question": "Find all the songs that do not have a back vocal."
                }
            ],
            "example_quality": 0.6522515730336435,
            "example_similarity": 0.36766970181457687,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT DISTINCT Shop_ID FROM hiring)",
            "correct": 1
        },
        {
            "index": 287,
            "question": "Which shops run with no employees? Find the shop names",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of the program that was launched most recently. */\nSELECT name FROM program ORDER BY launch DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which shops run with no employees? Find the shop names */\nSELECT ",
            "response": "name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3741,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                    "question": "find the name of the program that was launched most recently."
                }
            ],
            "example_quality": 0.6511403596548968,
            "example_similarity": 0.36735648953570305,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
            "correct": 1
        },
        {
            "index": 288,
            "question": "Find the number of employees hired in each shop; show the shop name as well.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all distinct positions of matches. */\nSELECT DISTINCT POSITION FROM match_season\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the number of employees hired in each shop; show the shop name as well. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1059,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season",
                    "question": "Show all distinct positions of matches."
                }
            ],
            "example_quality": 0.6499478316966933,
            "example_similarity": 0.36699468885931813,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Num_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name",
            "correct": 1
        },
        {
            "index": 289,
            "question": "For each shop, return the number of employees working there and the name of the shop.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the ID for those employees who did two or more jobs in the past. */\nSELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: For each shop, return the number of employees working there and the name of the shop. */\nSELECT ",
            "response": "count(*) , t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3460,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
                    "question": "display the ID for those employees who did two or more jobs in the past."
                }
            ],
            "example_quality": 0.6502363628442249,
            "example_similarity": 0.3664662841030081,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS num_employees FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name",
            "correct": 0
        },
        {
            "index": 290,
            "question": "What is total bonus given in all evaluations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is total amount claimed summed across all the claims? */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is total bonus given in all evaluations? */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3898,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "What is total amount claimed summed across all the claims?"
                }
            ],
            "example_quality": 0.6514424443516587,
            "example_similarity": 0.367059371187003,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT sum(Bonus) FROM Evaluation",
            "correct": 1
        },
        {
            "index": 291,
            "question": "Find the total amount of bonus given in all the evaluations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the total claimed amount of all the claims. */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the total amount of bonus given in all the evaluations. */\nSELECT ",
            "response": "sum(bonus) FROM evaluation",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3897,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "Find the total claimed amount of all the claims."
                }
            ],
            "example_quality": 0.65264023663911,
            "example_similarity": 0.36817706301216,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT sum(Bonus) FROM Evaluation",
            "correct": 1
        },
        {
            "index": 292,
            "question": "Give me all the information about hiring.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is all the information about all people? */\nSELECT * FROM people\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Give me all the information about hiring. */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2434,
                    "db_id": "candidate_poll",
                    "query": "SELECT * FROM people",
                    "question": "What is all the information about all people?"
                }
            ],
            "example_quality": 0.653829824869798,
            "example_similarity": 0.3683431232986481,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT * FROM hiring",
            "correct": 1
        },
        {
            "index": 293,
            "question": "What is all the information about hiring?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is all the information about all people? */\nSELECT * FROM people\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: What is all the information about hiring? */\nSELECT ",
            "response": "* FROM hiring",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2434,
                    "db_id": "candidate_poll",
                    "query": "SELECT * FROM people",
                    "question": "What is all the information about all people?"
                }
            ],
            "example_quality": 0.6550112930443038,
            "example_similarity": 0.3701197300071472,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT * FROM hiring",
            "correct": 1
        },
        {
            "index": 294,
            "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each type of store, how many of them are there? */\nSELECT TYPE ,  count(*) FROM store GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4916,
                    "db_id": "store_product",
                    "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE",
                    "question": "For each type of store, how many of them are there?"
                }
            ],
            "example_quality": 0.6538574773321947,
            "example_similarity": 0.3692252508477449,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT District FROM shop WHERE Number_products < 3000 AND District IN ( SELECT District FROM shop WHERE Number_products > 10000 )",
            "correct": 1
        },
        {
            "index": 295,
            "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000. */\nSELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. */\nSELECT ",
            "response": "district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4593,
                    "db_id": "solvency_ii",
                    "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000",
                    "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000."
                }
            ],
            "example_quality": 0.6550308418158144,
            "example_similarity": 0.36910358333074683,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
            "correct": 1
        },
        {
            "index": 296,
            "question": "How many different store locations are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each type of store, how many of them are there? */\nSELECT TYPE ,  count(*) FROM store GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: How many different store locations are there? */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4916,
                    "db_id": "store_product",
                    "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE",
                    "question": "For each type of store, how many of them are there?"
                }
            ],
            "example_quality": 0.6546370266017797,
            "example_similarity": 0.3692079631167916,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT COUNT(DISTINCT Location) FROM shop",
            "correct": 1
        },
        {
            "index": 297,
            "question": "Count the number of distinct store locations.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of stores. */\nSELECT count(*) FROM store\n\n/* Given the following database schema: */\nCREATE TABLE \"employee\" (\n\"Employee_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"City\" text,\nPRIMARY KEY (\"Employee_ID\")\n)\n\nCREATE TABLE \"shop\" (\n\"Shop_ID\" int,\n\"Name\" text,\n\"Location\" text,\n\"District\" text,\n\"Number_products\" int,\n\"Manager_name\" text,\nPRIMARY KEY (\"Shop_ID\")\n)\n\nCREATE TABLE \"hiring\" (\n\"Shop_ID\" int,\n\"Employee_ID\" int,\n\"Start_from\" text,\n\"Is_full_time\" bool,\nPRIMARY KEY (\"Employee_ID\"),\nFOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\nCREATE TABLE \"evaluation\" (\n\"Employee_ID\" text,\n\"Year_awarded\" text,\n\"Bonus\" real,\nPRIMARY KEY (\"Employee_ID\",\"Year_awarded\"),\nFOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)\n)\n\n/* Answer the following: Count the number of distinct store locations. */\nSELECT ",
            "response": "count(DISTINCT LOCATION) FROM shop",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2982,
                    "db_id": "sakila_1",
                    "query": "SELECT count(*) FROM store",
                    "question": "Count the number of stores."
                }
            ],
            "example_quality": 0.6553789894751744,
            "example_similarity": 0.3698353960879659,
            "db_id": "employee_hire_evaluation",
            "pred": "SELECT COUNT(DISTINCT Location) FROM shop",
            "correct": 1
        },
        {
            "index": 298,
            "question": "How many documents do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents do we have? */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6565354358192174,
            "example_similarity": 0.370085762022048,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents",
            "correct": 1
        },
        {
            "index": 299,
            "question": "Count the number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents. */\nSELECT ",
            "response": "count(*) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.65768414673621,
            "example_similarity": 0.37219249860391407,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Documents",
            "correct": 1
        },
        {
            "index": 300,
            "question": "List document IDs, document names, and document descriptions for all documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids, customer ids, card type codes, card numbers for all cards. */\nSELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List document IDs, document names, and document descriptions for all documents. */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 700,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
                    "question": "Show ids, customer ids, card type codes, card numbers for all cards."
                }
            ],
            "example_quality": 0.6588251995804226,
            "example_similarity": 0.37317407916412326,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
            "correct": 1
        },
        {
            "index": 301,
            "question": "What are the ids, names, and descriptions for all documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, names, and descriptions for all documents? */\nSELECT ",
            "response": "document_id , document_name , document_description FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.659958670678162,
            "example_similarity": 0.3738030689343421,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
            "correct": 1
        },
        {
            "index": 302,
            "question": "What is the document name and template id for document with description with the letter 'w' in it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of the document whose description starts with the word 'Initial'? */\nSELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document name and template id for document with description with the letter 'w' in it? */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4366,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
                    "question": "What is the type of the document whose description starts with the word 'Initial'?"
                }
            ],
            "example_quality": 0.6610846353447907,
            "example_similarity": 0.3739143415782927,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
            "correct": 1
        },
        {
            "index": 303,
            "question": "Return the names and template ids for documents that contain the letter w in their description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the names and template ids for documents that contain the letter w in their description. */\nSELECT ",
            "response": "document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6605530028849069,
            "example_similarity": 0.3733751071697487,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Document_Description LIKE '%w%';",
            "correct": 1
        },
        {
            "index": 304,
            "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and description for location code x? */\nSELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id, template id and description for document named \"Robbin CV\"? */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4185,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
                    "question": "What are the name and description for location code x?"
                }
            ],
            "example_quality": 0.6616696048491013,
            "example_similarity": 0.37362716273826924,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = \"Robbin CV\"",
            "correct": 1
        },
        {
            "index": 305,
            "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me the name and description of the location with code x. */\nSELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the document id, template id, and description for the document with the name Robbin CV. */\nSELECT ",
            "response": "document_id , template_id , Document_Description FROM Documents WHERE document_name = \"Robbin CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4186,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
                    "question": "Give me the name and description of the location with code x."
                }
            ],
            "example_quality": 0.6627788848332026,
            "example_similarity": 0.3733584398003296,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Documents.Document_ID, Templates.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = \"Robbin CV\"",
            "correct": 1
        },
        {
            "index": 306,
            "question": "How many different templates do all document use?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many different positions are there? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many different templates do all document use? */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3378,
                    "db_id": "sports_competition",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "how many different positions are there?"
                }
            ],
            "example_quality": 0.6638809146213294,
            "example_similarity": 0.3736237568419803,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(DISTINCT Template_ID) FROM Documents",
            "correct": 1
        },
        {
            "index": 307,
            "question": "Count the number of different templates used for documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of different templates used for documents. */\nSELECT ",
            "response": "count(DISTINCT template_id) FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6649757650623023,
            "example_similarity": 0.3744795870684352,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(DISTINCT Template_ID) FROM Documents",
            "correct": 1
        },
        {
            "index": 308,
            "question": "How many documents are using the template with type code 'PPT'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents have document type code CV or BK? */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many documents are using the template with type code 'PPT'? */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4174,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
                    "question": "How many documents have document type code CV or BK?"
                }
            ],
            "example_quality": 0.6660635060848272,
            "example_similarity": 0.37428903475225267,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')",
            "correct": 1
        },
        {
            "index": 309,
            "question": "Count the number of documents that use the PPT template type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors that are not used in any products. */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of documents that use the PPT template type. */\nSELECT ",
            "response": "count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5602,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                    "question": "Count the number of colors that are not used in any products."
                }
            ],
            "example_quality": 0.6656212674395878,
            "example_similarity": 0.3746006826504464,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')",
            "correct": 1
        },
        {
            "index": 310,
            "question": "Show all template ids and number of documents using each template.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template ids and number of documents using each template. */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6652110747654651,
            "example_similarity": 0.37425250840533747,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_ID, COUNT(Documents.Template_ID) AS Num_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;",
            "correct": 0
        },
        {
            "index": 311,
            "question": "What are all different template ids used for documents, and how many times were each of them used?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which contact channel codes were used less than 5 times? */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are all different template ids used for documents, and how many times were each of them used? */\nSELECT ",
            "response": "template_id , count(*) FROM Documents GROUP BY template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6097,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "Which contact channel codes were used less than 5 times?"
                }
            ],
            "example_quality": 0.6654301173975162,
            "example_similarity": 0.373820828314002,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID",
            "correct": 1
        },
        {
            "index": 312,
            "question": "What is the id and type code for the template used by the most documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different card type codes? */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the id and type code for the template used by the most documents? */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 731,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "What are the different card type codes?"
                }
            ],
            "example_quality": 0.6640514763726749,
            "example_similarity": 0.37346613942433154,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 313,
            "question": "Return the id and type code of the template that is used for the greatest number of documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the code of the card type that is most common. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and type code of the template that is used for the greatest number of documents. */\nSELECT ",
            "response": "T1.template_id , T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 723,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the card type that is most common."
                }
            ],
            "example_quality": 0.6651247943395354,
            "example_similarity": 0.3737943321935525,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 314,
            "question": "Show ids for all templates that are used by more than one document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are project ids of projects that have 2 or more corresponding documents? */\nSELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates that are used by more than one document. */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6417,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
                    "question": "What are project ids of projects that have 2 or more corresponding documents?"
                }
            ],
            "example_quality": 0.6657666474361186,
            "example_similarity": 0.37347246257741784,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 315,
            "question": "What are the template ids of any templates used in more than a single document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of types of documents of which there are for or more? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids of any templates used in more than a single document? */\nSELECT ",
            "response": "template_id FROM Documents GROUP BY template_id HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4505,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "What are the codes of types of documents of which there are for or more?"
                }
            ],
            "example_quality": 0.6668277056982261,
            "example_similarity": 0.37317572460098164,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1",
            "correct": 1
        },
        {
            "index": 316,
            "question": "Show ids for all templates not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the students who are not involved in any activity */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show ids for all templates not used by any document. */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6789,
                    "db_id": "activity_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
                    "question": "What are the ids of the students who are not involved in any activity"
                }
            ],
            "example_quality": 0.6678820484017127,
            "example_similarity": 0.37278592800414306,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
            "correct": 1
        },
        {
            "index": 317,
            "question": "What are the ids for templates that are not used in any documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids for templates that are not used in any documents? */\nSELECT ",
            "response": "template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6689297391007609,
            "example_similarity": 0.37274559384640127,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
            "correct": 1
        },
        {
            "index": 318,
            "question": "How many templates do we have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates do we have? */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6699708405501297,
            "example_similarity": 0.3729710619300429,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Templates",
            "correct": 1
        },
        {
            "index": 319,
            "question": "Count the number of templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates. */\nSELECT ",
            "response": "count(*) FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6710054147176842,
            "example_similarity": 0.3749366698863751,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates",
            "correct": 1
        },
        {
            "index": 320,
            "question": "Show template ids, version numbers, and template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of types of documents of which there are for or more? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show template ids, version numbers, and template type codes for all templates. */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4505,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "What are the codes of types of documents of which there are for or more?"
                }
            ],
            "example_quality": 0.6698013799395486,
            "example_similarity": 0.37398051003435945,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 321,
            "question": "What are the ids, version numbers, and type codes for each template?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the the participant ids, type code and details? */\nSELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids, version numbers, and type codes for each template? */\nSELECT ",
            "response": "template_id , version_number , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2142,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT Participant_ID ,  Participant_Type_Code ,  Participant_Details FROM  Participants",
                    "question": "What are all the the participant ids, type code and details?"
                }
            ],
            "example_quality": 0.6708300360768085,
            "example_similarity": 0.37429111346268334,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 322,
            "question": "Show all distinct template type codes for all templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all distinct positions of matches. */\nSELECT DISTINCT POSITION FROM match_season\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all distinct template type codes for all templates. */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1059,
                    "db_id": "match_season",
                    "query": "SELECT DISTINCT POSITION FROM match_season",
                    "question": "Show all distinct positions of matches."
                }
            ],
            "example_quality": 0.671852303045514,
            "example_similarity": 0.3744227145595901,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 323,
            "question": "What are the different template type codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes? */\nSELECT ",
            "response": "DISTINCT template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.672868240187788,
            "example_similarity": 0.3749834973490513,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
            "correct": 0
        },
        {
            "index": 324,
            "question": "What are the ids of templates with template type code PP or PPT?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of templates with template type code PP or PPT? */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6728490995287721,
            "example_similarity": 0.37496324289004673,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
            "correct": 1
        },
        {
            "index": 325,
            "question": "Return the ids of templates that have the code PP or PPT.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find names and ids of all documents with document type code BK. */\nSELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids of templates that have the code PP or PPT. */\nSELECT ",
            "response": "template_id FROM Templates WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6406,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
                    "question": "Find names and ids of all documents with document type code BK."
                }
            ],
            "example_quality": 0.6738557176840683,
            "example_similarity": 0.37473258675807736,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = \"PP\" OR Template_Type_Code = \"PPT\"",
            "correct": 1
        },
        {
            "index": 326,
            "question": "How many templates have template type code CV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many templates have template type code CV? */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6739359148690865,
            "example_similarity": 0.3737875992731344,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';",
            "correct": 1
        },
        {
            "index": 327,
            "question": "Count the number of templates of the type CV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of templates of the type CV. */\nSELECT ",
            "response": "count(*) FROM Templates WHERE template_type_code = \"CV\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6742534740828745,
            "example_similarity": 0.3744793803151126,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV'",
            "correct": 1
        },
        {
            "index": 328,
            "question": "What is the version number and template type code for the template with version number later than 5?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the version number and template type code for the template with version number later than 5? */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6748110636653745,
            "example_similarity": 0.3734549356753151,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t2.Version_Number, t2.Template_Type_Code FROM Templates AS t2 WHERE t2.Version_Number > 5;",
            "correct": 1
        },
        {
            "index": 329,
            "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the account details with the greatest value, as well as those that include the character 5. */\nSELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the version numbers and template type codes of templates with a version number greater than 5. */\nSELECT ",
            "response": "version_number , template_type_code FROM Templates WHERE version_number > 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6469,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
                    "question": "Return the account details with the greatest value, as well as those that include the character 5."
                }
            ],
            "example_quality": 0.6738997838366044,
            "example_similarity": 0.37302903414843974,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
            "correct": 1
        },
        {
            "index": 330,
            "question": "Show all template type codes and number of templates for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the phone numbers. */\nSELECT customer_phone FROM available_policies\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and number of templates for each. */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 892,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies",
                    "question": "Find all the phone numbers."
                }
            ],
            "example_quality": 0.6728677642896247,
            "example_similarity": 0.3722774310146566,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) AS Number_of_Templates FROM Templates GROUP BY Template_Type_Code;",
            "correct": 1
        },
        {
            "index": 331,
            "question": "What are the different template type codes, and how many templates correspond to each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of types of documents of which there are for or more? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many templates correspond to each? */\nSELECT ",
            "response": "template_type_code , count(*) FROM Templates GROUP BY template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4505,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "What are the codes of types of documents of which there are for or more?"
                }
            ],
            "example_quality": 0.6730504397248022,
            "example_similarity": 0.3717121976435706,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
            "correct": 1
        },
        {
            "index": 332,
            "question": "Which template type code has most number of templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code has most number of templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6740352275569563,
            "example_similarity": 0.37139579544183293,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 333,
            "question": "Return the type code of the template type that the most templates belong to.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the code of the card type that is most common. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type that the most templates belong to. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 723,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the card type that is most common."
                }
            ],
            "example_quality": 0.675014100747476,
            "example_similarity": 0.37204696510752605,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 334,
            "question": "Show all template type codes with less than three templates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes with less than three templates. */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6759871124218847,
            "example_similarity": 0.3717496007590822,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
            "correct": 1
        },
        {
            "index": 335,
            "question": "What are the codes of template types that have fewer than 3 templates?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that have fewer than 3 templates? */\nSELECT ",
            "response": "template_type_code FROM Templates GROUP BY template_type_code HAVING count(*) < 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6769543150713716,
            "example_similarity": 0.3720613645663401,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
            "correct": 1
        },
        {
            "index": 336,
            "question": "What the smallest version number and its template type code?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the largest and smallest customer codes? */\nSELECT max(customer_code) ,  min(customer_code) FROM Customers\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What the smallest version number and its template type code? */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4776,
                    "db_id": "department_store",
                    "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
                    "question": "What is the largest and smallest customer codes?"
                }
            ],
            "example_quality": 0.677171712943183,
            "example_similarity": 0.3725566031791234,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT min(Version_Number), Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 337,
            "question": "Return the lowest version number, along with its corresponding template type code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the id and product type of the product with the lowest price. */\nSELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the lowest version number, along with its corresponding template type code. */\nSELECT ",
            "response": "min(Version_Number) , template_type_code FROM Templates",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4713,
                    "db_id": "department_store",
                    "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
                    "question": "Give the id and product type of the product with the lowest price."
                }
            ],
            "example_quality": 0.6762220724215203,
            "example_similarity": 0.3726380375910548,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates",
            "correct": 1
        },
        {
            "index": 338,
            "question": "What is the template type code of the template used by document with the name \"Data base\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code of the template used by document with the name \"Data base\"? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6757007053433501,
            "example_similarity": 0.3723945007361853,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates WHERE Template_ID = (SELECT Template_ID FROM Documents WHERE Document_Name = \"Data base\")",
            "correct": 1
        },
        {
            "index": 339,
            "question": "Return the template type code of the template that is used by a document named Data base.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type code of the template that is used by a document named Data base. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = \"Data base\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6748874289264082,
            "example_similarity": 0.3720334550112998,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';",
            "correct": 1
        },
        {
            "index": 340,
            "question": "Show all document names using templates with template type code BK.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Luke Zettlemoyer . */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document names using templates with template type code BK. */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7687,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keyphrases used by Luke Zettlemoyer ."
                }
            ],
            "example_quality": 0.6754234743035153,
            "example_similarity": 0.37111224934777176,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT d.Document_Name FROM Documents AS d JOIN Templates AS t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types AS r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Code = \"BK\";",
            "correct": 1
        },
        {
            "index": 341,
            "question": "What are the names of documents that use templates with the code BK?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the names of documents that use templates with the code BK? */\nSELECT ",
            "response": "T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = \"BK\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6744202774091747,
            "example_similarity": 0.3708792710994401,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'",
            "correct": 1
        },
        {
            "index": 342,
            "question": "Show all template type codes and the number of documents using each type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes and the number of cards in each type. */\nSELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and the number of documents using each type. */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 720,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
                    "question": "Show all card type codes and the number of cards in each type."
                }
            ],
            "example_quality": 0.6753722649021303,
            "example_similarity": 0.37198781124242414,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code",
            "correct": 1
        },
        {
            "index": 343,
            "question": "What are the different template type codes, and how many documents use each type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of types of documents of which there are for or more? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the different template type codes, and how many documents use each type? */\nSELECT ",
            "response": "T1.template_type_code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4505,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "What are the codes of types of documents of which there are for or more?"
                }
            ],
            "example_quality": 0.6755412476089268,
            "example_similarity": 0.37144319717228647,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, COUNT(*) AS Document_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code",
            "correct": 1
        },
        {
            "index": 344,
            "question": "Which template type code is used by most number of documents?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the type code of the most frequently used policy. */\nSELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Which template type code is used by most number of documents? */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1513,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the type code of the most frequently used policy."
                }
            ],
            "example_quality": 0.6764844416565752,
            "example_similarity": 0.3709754155403597,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 345,
            "question": "Return the code of the template type that is most commonly used in documents.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the code of the card type that is most common. */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the code of the template type that is most commonly used in documents. */\nSELECT ",
            "response": "T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 723,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the code of the card type that is most common."
                }
            ],
            "example_quality": 0.6774221679126431,
            "example_similarity": 0.37189287810401084,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 346,
            "question": "Show all template type codes that are not used by any document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors that are not used in any products. */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes that are not used by any document. */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5602,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                    "question": "Count the number of colors that are not used in any products."
                }
            ],
            "example_quality": 0.6767488218910588,
            "example_similarity": 0.3721025647119311,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))",
            "correct": 1
        },
        {
            "index": 347,
            "question": "What are the codes of template types that are not used for any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which contact channel codes were used less than 5 times? */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the codes of template types that are not used for any document? */\nSELECT ",
            "response": "template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6097,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "Which contact channel codes were used less than 5 times?"
                }
            ],
            "example_quality": 0.675815658647772,
            "example_similarity": 0.3717163764507879,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents))",
            "correct": 1
        },
        {
            "index": 348,
            "question": "Show all template type codes and descriptions.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all template type codes and descriptions. */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.67674722284706,
            "example_similarity": 0.3714319250033066,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
            "correct": 1
        },
        {
            "index": 349,
            "question": "What are the type codes and descriptions for all template types?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the type codes and descriptions of each budget type? */\nSELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the type codes and descriptions for all template types? */\nSELECT ",
            "response": "template_type_code , template_type_description FROM Ref_template_types",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6443,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
                    "question": "What are the type codes and descriptions of each budget type?"
                }
            ],
            "example_quality": 0.6776734485695614,
            "example_similarity": 0.372414314084345,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
            "correct": 1
        },
        {
            "index": 350,
            "question": "What is the template type descriptions for template type code \"AD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Luke Zettlemoyer . */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type descriptions for template type code \"AD\". */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7687,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keyphrases used by Luke Zettlemoyer ."
                }
            ],
            "example_quality": 0.6781862183083422,
            "example_similarity": 0.3715006491268108,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\";",
            "correct": 1
        },
        {
            "index": 351,
            "question": "Return the template type description of the template type with the code AD.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the template type description of the template type with the code AD. */\nSELECT ",
            "response": "template_type_description FROM Ref_template_types WHERE template_type_code = \"AD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6772037314565615,
            "example_similarity": 0.37099012788231184,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'",
            "correct": 1
        },
        {
            "index": 352,
            "question": "What is the template type code for template type description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Luke Zettlemoyer . */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the template type code for template type description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7687,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keyphrases used by Luke Zettlemoyer ."
                }
            ],
            "example_quality": 0.677714922154534,
            "example_similarity": 0.3700857001864739,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\";",
            "correct": 1
        },
        {
            "index": 353,
            "question": "Return the type code of the template type with the description \"Book\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the type code of the document named \"David CV\". */\nSELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the type code of the template type with the description \"Book\". */\nSELECT ",
            "response": "template_type_code FROM Ref_template_types WHERE template_type_description = \"Book\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4513,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"",
                    "question": "Return the type code of the document named \"David CV\"."
                }
            ],
            "example_quality": 0.6786279110436146,
            "example_similarity": 0.37116194466186636,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
            "correct": 1
        },
        {
            "index": 354,
            "question": "What are the distinct template type descriptions for the templates ever used by any document?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the distinct template type descriptions for the templates ever used by any document? */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6778408265491411,
            "example_similarity": 0.37119994872953166,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT RTT.Template_Type_Description FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID;",
            "correct": 1
        },
        {
            "index": 355,
            "question": "Return the different descriptions for templates that have been used in a document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give me a list of all the distinct building descriptions. */\nSELECT DISTINCT building_description FROM Apartment_Buildings\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different descriptions for templates that have been used in a document. */\nSELECT ",
            "response": "DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1200,
                    "db_id": "apartment_rentals",
                    "query": "SELECT DISTINCT building_description FROM Apartment_Buildings",
                    "question": "Give me a list of all the distinct building descriptions."
                }
            ],
            "example_quality": 0.6787483171785802,
            "example_similarity": 0.3708585404232513,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT DISTINCT t.Template_Details FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;",
            "correct": 0
        },
        {
            "index": 356,
            "question": "What are the template ids with template type description \"Presentation\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Luke Zettlemoyer . */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the template ids with template type description \"Presentation\". */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7687,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keyphrases used by Luke Zettlemoyer ."
                }
            ],
            "example_quality": 0.6792494254369068,
            "example_similarity": 0.3699728578814881,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t2.Template_ID FROM Templates AS t1 JOIN Ref_Template_Types AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code WHERE t2.Template_Type_Description = \"Presentation\";",
            "correct": 0
        },
        {
            "index": 357,
            "question": "Return the ids corresponding to templates with the description 'Presentation'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the ids for documents that have the budget description 'Government'. */\nSELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the ids corresponding to templates with the description 'Presentation'. */\nSELECT ",
            "response": "T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = \"Presentation\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6453,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
                    "question": "Give the ids for documents that have the budget description 'Government'."
                }
            ],
            "example_quality": 0.6801478864300807,
            "example_similarity": 0.37033707956809453,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'",
            "correct": 1
        },
        {
            "index": 358,
            "question": "How many paragraphs in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tasks are there in total? */\nSELECT count(*) FROM Tasks\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs in total? */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4389,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(*) FROM Tasks",
                    "question": "How many tasks are there in total?"
                }
            ],
            "example_quality": 0.6810413280880973,
            "example_similarity": 0.37139759051902166,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs",
            "correct": 1
        },
        {
            "index": 359,
            "question": "Count the number of paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs. */\nSELECT ",
            "response": "count(*) FROM Paragraphs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6819297923552614,
            "example_similarity": 0.37314857216103,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT count(*) FROM Paragraphs",
            "correct": 1
        },
        {
            "index": 360,
            "question": "How many paragraphs for the document with name 'Summer Show'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: How many paragraphs for the document with name 'Summer Show'? */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6819799873764967,
            "example_similarity": 0.37242069032478026,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');",
            "correct": 1
        },
        {
            "index": 361,
            "question": "Count the number of paragraphs in the document named 'Summer Show'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Count the number of paragraphs in the document named 'Summer Show'. */\nSELECT ",
            "response": "count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6820299043089718,
            "example_similarity": 0.3722547050330219,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');",
            "correct": 1
        },
        {
            "index": 362,
            "question": "Show paragraph details for paragraph with text 'Korea ' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the description of transaction type with code \"PUR\". */\nSELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show paragraph details for paragraph with text 'Korea ' . */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5854,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"",
                    "question": "Show the description of transaction type with code \"PUR\"."
                }
            ],
            "example_quality": 0.6808992340559836,
            "example_similarity": 0.37199371904612893,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
            "correct": 0
        },
        {
            "index": 363,
            "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the details for the paragraph that includes the text 'Korea ' ? */\nSELECT ",
            "response": "other_details from paragraphs where paragraph_text like 'korea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6793907880484832,
            "example_similarity": 0.3717851862010881,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea %'",
            "correct": 0
        },
        {
            "index": 364,
            "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the papers, which contain the keyword \" Natural Language \" . */\nSELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8287,
                    "db_id": "academic",
                    "query": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
                    "question": "return me all the papers, which contain the keyword \" Natural Language \" ."
                }
            ],
            "example_quality": 0.6802715825868115,
            "example_similarity": 0.37115626300508814,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Paragraph_ID, t1.Paragraph_Text FROM Paragraphs AS t1 JOIN Documents AS t2 ON t1.Document_ID = t2.Document_ID WHERE t2.Document_Name = 'Welcome to NY';",
            "correct": 1
        },
        {
            "index": 365,
            "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? */\nSELECT ",
            "response": "T1.paragraph_id , T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6802343088445647,
            "example_similarity": 0.3713135648285576,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
            "correct": 1
        },
        {
            "index": 366,
            "question": "Show all paragraph texts for the document \"Customer reviews\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of reviews. */\nSELECT count(*) FROM review\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all paragraph texts for the document \"Customer reviews\". */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1692,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM review",
                    "question": "Find the number of reviews."
                }
            ],
            "example_quality": 0.6795900742423785,
            "example_similarity": 0.37084549497929925,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'",
            "correct": 1
        },
        {
            "index": 367,
            "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of all reviewers whose ratings do not have a date field? */\nSELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the paragraph texts for the document with the name 'Customer reviews'? */\nSELECT ",
            "response": "T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = \"Customer reviews\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2462,
                    "db_id": "movie_1",
                    "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"",
                    "question": "What are the different names of all reviewers whose ratings do not have a date field?"
                }
            ],
            "example_quality": 0.6800738692911537,
            "example_similarity": 0.37056861561758664,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Paragraph_Text FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Customer reviews'",
            "correct": 1
        },
        {
            "index": 368,
            "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List each test result and its count in descending order of count. */\nSELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids and the number of paragraphs in each document. Order by document id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3801,
                    "db_id": "e_learning",
                    "query": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
                    "question": "List each test result and its count in descending order of count."
                }
            ],
            "example_quality": 0.6802638859506885,
            "example_similarity": 0.3705068152679641,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;",
            "correct": 1
        },
        {
            "index": 369,
            "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different products correspond to each order id? */\nSELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. */\nSELECT ",
            "response": "document_id , count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1625,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id",
                    "question": "How many different products correspond to each order id?"
                }
            ],
            "example_quality": 0.6803333126905,
            "example_similarity": 0.3702096953491279,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID, COUNT(Paragraph_ID) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;",
            "correct": 1
        },
        {
            "index": 370,
            "question": "Show all document ids, names and the number of paragraphs in each document.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all party names and the number of members in each party. */\nSELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show all document ids, names and the number of paragraphs in each document. */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2058,
                    "db_id": "party_people",
                    "query": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id",
                    "question": "Show all party names and the number of members in each party."
                }
            ],
            "example_quality": 0.6811972767102554,
            "example_similarity": 0.3712361556319681,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name",
            "correct": 1
        },
        {
            "index": 371,
            "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids and names of each document, as well as the number of paragraphs in each? */\nSELECT ",
            "response": "T1.document_id , T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6802596380488622,
            "example_similarity": 0.37164740460279705,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name",
            "correct": 0
        },
        {
            "index": 372,
            "question": "List all document ids with at least two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the race class with at least two races. */\nSELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: List all document ids with at least two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 772,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2",
                    "question": "List the race class with at least two races."
                }
            ],
            "example_quality": 0.6811191551508814,
            "example_similarity": 0.3728477659296225,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 373,
            "question": "What are the ids of documents that have 2 or more paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000? */\nSELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that have 2 or more paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4769,
                    "db_id": "department_store",
                    "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
                    "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?"
                }
            ],
            "example_quality": 0.6804548499985555,
            "example_similarity": 0.3730855425934531,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(*) >= 2",
            "correct": 0
        },
        {
            "index": 374,
            "question": "What is the document id and name with greatest number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer id, first and last name with most number of accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id and name with greatest number of paragraphs? */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1568,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id, first and last name with most number of accounts."
                }
            ],
            "example_quality": 0.6813092487953509,
            "example_similarity": 0.37372197459483725,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 375,
            "question": "Return the id and name of the document with the most paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id and full name of the customer with the most accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id and name of the document with the most paragraphs. */\nSELECT ",
            "response": "T1.document_id , T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1569,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the id and full name of the customer with the most accounts."
                }
            ],
            "example_quality": 0.6821590907985633,
            "example_similarity": 0.3752015731387748,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT T1.Document_ID, T2.Document_Name FROM Documents AS T1 JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY num_paragraphs DESC LIMIT 1 ) AS T3 ON T1.Document_ID = T3.Document_ID",
            "correct": 0
        },
        {
            "index": 376,
            "question": "What is the document id with least number of paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the structure of the document with the least number of accesses? */\nSELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with least number of paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4510,
                    "db_id": "document_management",
                    "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the structure of the document with the least number of accesses?"
                }
            ],
            "example_quality": 0.682691521251696,
            "example_similarity": 0.37597674625985966,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Documents.Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 377,
            "question": "Return the id of the document with the fewest paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the id of the project that has the fewest corresponding documents. */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Return the id of the document with the fewest paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6415,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "Return the id of the project that has the fewest corresponding documents."
                }
            ],
            "example_quality": 0.6835331883040787,
            "example_similarity": 0.3768741175278327,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 378,
            "question": "What is the document id with 1 to 2 paragraphs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What is the document id with 1 to 2 paragraphs? */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6829986599791512,
            "example_similarity": 0.37644398947692764,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;",
            "correct": 0
        },
        {
            "index": 379,
            "question": "Give the ids of documents that have between one and two paragraphs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the ids for projects with at least 2 documents. */\nSELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Give the ids of documents that have between one and two paragraphs. */\nSELECT ",
            "response": "document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6416,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
                    "question": "Show the ids for projects with at least 2 documents."
                }
            ],
            "example_quality": 0.6832142463178684,
            "example_similarity": 0.37614508157523874,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2",
            "correct": 1
        },
        {
            "index": 380,
            "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Luke Zettlemoyer . */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7687,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keyphrases used by Luke Zettlemoyer ."
                }
            ],
            "example_quality": 0.6825441336395882,
            "example_similarity": 0.37528680504477757,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT t1.Document_ID FROM Paragraphs AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID WHERE t1.Paragraph_Text = 'Brazil' AND t2.Paragraph_Text = 'Ireland';",
            "correct": 1
        },
        {
            "index": 381,
            "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE Ref_Template_Types (\nTemplate_Type_Code CHAR(15) NOT NULL,\nTemplate_Type_Description VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_Type_Code)\n)\n\nCREATE TABLE Templates (\nTemplate_ID INTEGER NOT NULL,\nVersion_Number INTEGER NOT NULL,\nTemplate_Type_Code CHAR(15) NOT NULL,\nDate_Effective_From DATETIME,\nDate_Effective_To DATETIME,\nTemplate_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Template_ID),\nFOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)\n)\n\nCREATE TABLE Documents (\nDocument_ID INTEGER NOT NULL,\nTemplate_ID INTEGER,\nDocument_Name VARCHAR(255),\nDocument_Description VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_ID),\nFOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)\n)\n\nCREATE TABLE Paragraphs (\nParagraph_ID INTEGER NOT NULL,\nDocument_ID INTEGER NOT NULL,\nParagraph_Text VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Paragraph_ID),\nFOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)\n)\n\n/* Answer the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? */\nSELECT ",
            "response": "document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6815602705793592,
            "example_similarity": 0.37537552972731336,
            "db_id": "cre_Doc_Template_Mgt",
            "pred": "SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' OR Paragraph_Text = 'Ireland'",
            "correct": 0
        },
        {
            "index": 382,
            "question": "How many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: How many teachers are there? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6823938824364812,
            "example_similarity": 0.3770106723196502,
            "db_id": "course_teach",
            "pred": "SELECT count(*) FROM teacher",
            "correct": 1
        },
        {
            "index": 383,
            "question": "What is the total count of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of accounts. */\nSELECT count(*) FROM accounts\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the total count of teachers? */\nSELECT ",
            "response": "count(*) FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1780,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) FROM accounts",
                    "question": "Count the number of accounts."
                }
            ],
            "example_quality": 0.6832231412290753,
            "example_similarity": 0.377070696673907,
            "db_id": "course_teach",
            "pred": "SELECT count(*) FROM teacher",
            "correct": 1
        },
        {
            "index": 384,
            "question": "List the names of teachers in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers in ascending order of age. */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6840480809654581,
            "example_similarity": 0.37769130583721616,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 385,
            "question": "What are the names of the teachers ordered by ascending age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are ids of the all distinct orders, sorted by placement date? */\nSELECT DISTINCT order_id FROM orders ORDER BY date_order_placed\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers ordered by ascending age? */\nSELECT ",
            "response": "Name FROM teacher ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6929,
                    "db_id": "tracking_orders",
                    "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
                    "question": "What are ids of the all distinct orders, sorted by placement date?"
                }
            ],
            "example_quality": 0.6845801350120124,
            "example_similarity": 0.37786469061281935,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 386,
            "question": "What are the age and hometown of teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the age and hometown of teachers? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6848791502062818,
            "example_similarity": 0.378181103331439,
            "db_id": "course_teach",
            "pred": "SELECT Age, Hometown FROM teacher",
            "correct": 1
        },
        {
            "index": 387,
            "question": "What is the age and hometown of every teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the age and hometown of every teacher? */\nSELECT ",
            "response": "Age , Hometown FROM teacher",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6851766201023894,
            "example_similarity": 0.37806521762084955,
            "db_id": "course_teach",
            "pred": "SELECT Name, Age, Hometown FROM teacher",
            "correct": 0
        },
        {
            "index": 388,
            "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of artworks whose type is not \"Program Talent Show\". */\nSELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the name of teachers whose hometown is not `` Little Lever Urban District '' . */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4601,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
                    "question": "List the name of artworks whose type is not \"Program Talent Show\"."
                }
            ],
            "example_quality": 0.6839629837471919,
            "example_similarity": 0.37895222021002833,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\"",
            "correct": 0
        },
        {
            "index": 389,
            "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators whose country is not \"China\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ? */\nSELECT ",
            "response": "name from teacher where hometown != \"little lever urban district\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2311,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
                    "question": "What are the names of perpetrators whose country is not \"China\"?"
                }
            ],
            "example_quality": 0.6827555871675994,
            "example_similarity": 0.3795204664305682,
            "db_id": "course_teach",
            "pred": "SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != \"Little Lever Urban District\"",
            "correct": 0
        },
        {
            "index": 390,
            "question": "Show the name of teachers aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of teachers aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6821038329147888,
            "example_similarity": 0.379463087945215,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Age IN ('32', '33')",
            "correct": 1
        },
        {
            "index": 391,
            "question": "What are the names of the teachers who are aged either 32 or 33?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which address has both members younger than 30 and members older than 40? */\nSELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who are aged either 32 or 33? */\nSELECT ",
            "response": "Name FROM teacher WHERE Age = 32 OR Age = 33",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 796,
                    "db_id": "coffee_shop",
                    "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
                    "question": "Which address has both members younger than 30 and members older than 40?"
                }
            ],
            "example_quality": 0.6815397271056421,
            "example_similarity": 0.37902541593853495,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
            "correct": 1
        },
        {
            "index": 392,
            "question": "What is the hometown of the youngest teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the hometown of the youngest teacher? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4413,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "Who is the youngest male?"
                }
            ],
            "example_quality": 0.6804968381914116,
            "example_similarity": 0.3793340245713448,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
            "correct": 1
        },
        {
            "index": 393,
            "question": "Where is the youngest teacher from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Where is the youngest teacher from? */\nSELECT ",
            "response": "Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4413,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "Who is the youngest male?"
                }
            ],
            "example_quality": 0.6794592565998998,
            "example_similarity": 0.37995912883452204,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
            "correct": 1
        },
        {
            "index": 394,
            "question": "Show different hometown of teachers and the number of teachers from each hometown.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different types of ships and the number of ships of each type. */\nSELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show different hometown of teachers and the number of teachers from each hometown. */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4011,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
                    "question": "Show different types of ships and the number of ships of each type."
                }
            ],
            "example_quality": 0.6802728117861945,
            "example_similarity": 0.381194427153893,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
            "correct": 1
        },
        {
            "index": 395,
            "question": "For each hometown, how many teachers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: For each hometown, how many teachers are there? */\nSELECT ",
            "response": "Hometown , COUNT(*) FROM teacher GROUP BY Hometown",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.6810822477057231,
            "example_similarity": 0.38170617122017014,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
            "correct": 1
        },
        {
            "index": 396,
            "question": "List the most common hometown of teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the most common type of artworks. */\nSELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the most common hometown of teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4615,
                    "db_id": "entertainment_awards",
                    "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "List the most common type of artworks."
                }
            ],
            "example_quality": 0.6818875955650521,
            "example_similarity": 0.38326751927264446,
            "db_id": "course_teach",
            "pred": "SELECT Hometown, COUNT(*) AS Frequency FROM teacher GROUP BY Hometown ORDER BY Frequency DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 397,
            "question": "What is the most commmon hometowns for teachers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the party form that is most common? */\nSELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the most commmon hometowns for teachers? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6314,
                    "db_id": "e_government",
                    "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the name of the party form that is most common?"
                }
            ],
            "example_quality": 0.6826888862563241,
            "example_similarity": 0.38347759269177295,
            "db_id": "course_teach",
            "pred": "SELECT t1.Hometown FROM teacher AS t1 JOIN course_arrange AS t2 ON t1.Teacher_ID = t2.Teacher_ID GROUP BY t1.Hometown ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 398,
            "question": "Show the hometowns shared by at least two teachers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of products that are in at least two events. */\nSELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the hometowns shared by at least two teachers. */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4596,
                    "db_id": "solvency_ii",
                    "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
                    "question": "Show the names of products that are in at least two events."
                }
            ],
            "example_quality": 0.6834861503612076,
            "example_similarity": 0.3836133273835021,
            "db_id": "course_teach",
            "pred": "SELECT T1.Hometown FROM teacher AS T1 JOIN teacher AS T2 ON T1.Hometown = T2.Hometown AND T1.Teacher_ID <> T2.Teacher_ID GROUP BY T1.Hometown HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 399,
            "question": "What are the towns from which at least two teachers come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different cities are they from? */\nSELECT count(DISTINCT city) FROM Person\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the towns from which at least two teachers come from? */\nSELECT ",
            "response": "Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4405,
                    "db_id": "network_2",
                    "query": "SELECT count(DISTINCT city) FROM Person",
                    "question": "How many different cities are they from?"
                }
            ],
            "example_quality": 0.6829427431339029,
            "example_similarity": 0.3832416000408043,
            "db_id": "course_teach",
            "pred": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 400,
            "question": "Show names of teachers and the courses they are arranged to teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the types of schools that have two schools. */\nSELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6359,
                    "db_id": "school_bus",
                    "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
                    "question": "Show the types of schools that have two schools."
                }
            ],
            "example_quality": 0.681949671990354,
            "example_similarity": 0.38337724604070234,
            "db_id": "course_teach",
            "pred": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;",
            "correct": 1
        },
        {
            "index": 401,
            "question": "What is the name of each teacher and what course they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the course names for courses taught on MTW? */\nSELECT CName FROM COURSE WHERE Days  =  \"MTW\"\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What is the name of each teacher and what course they teach? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4643,
                    "db_id": "college_3",
                    "query": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
                    "question": "What are the course names for courses taught on MTW?"
                }
            ],
            "example_quality": 0.6819115597576265,
            "example_similarity": 0.3832524482534021,
            "db_id": "course_teach",
            "pred": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;",
            "correct": 1
        },
        {
            "index": 402,
            "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all school names in alphabetical order. */\nSELECT school_name FROM school ORDER BY school_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1887,
                    "db_id": "school_finance",
                    "query": "SELECT school_name FROM school ORDER BY school_name",
                    "question": "Show all school names in alphabetical order."
                }
            ],
            "example_quality": 0.6827028245343488,
            "example_similarity": 0.38305616809875925,
            "db_id": "course_teach",
            "pred": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name;",
            "correct": 1
        },
        {
            "index": 403,
            "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the courses in alphabetical order? */\nSELECT course_name FROM courses ORDER BY course_name\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? */\nSELECT ",
            "response": "T3.Name , T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 97,
                    "db_id": "student_assessment",
                    "query": "SELECT course_name FROM courses ORDER BY course_name",
                    "question": "What are the names of the courses in alphabetical order?"
                }
            ],
            "example_quality": 0.6834901624387302,
            "example_similarity": 0.3831395688396225,
            "db_id": "course_teach",
            "pred": "SELECT t.Name AS Teacher_Name, c.Course AS Course_Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name, c.Course;",
            "correct": 0
        },
        {
            "index": 404,
            "question": "Show the name of the teacher for the math course.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show the name of the teacher for the math course. */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6828591754737121,
            "example_similarity": 0.38363509795965645,
            "db_id": "course_teach",
            "pred": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math'",
            "correct": 1
        },
        {
            "index": 405,
            "question": "What are the names of the people who teach math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of instructors who didn't teach? */\nSELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the people who teach math courses? */\nSELECT ",
            "response": "T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = \"Math\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1442,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
                    "question": "What are the names of instructors who didn't teach?"
                }
            ],
            "example_quality": 0.6822313044937064,
            "example_similarity": 0.3842751523915021,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange WHERE Course_ID IN (SELECT Course_ID FROM course WHERE Course = 'Math'))",
            "correct": 1
        },
        {
            "index": 406,
            "question": "Show names of teachers and the number of courses they teach.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all ages and corresponding number of students. */\nSELECT age ,  count(*) FROM Student GROUP BY age\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers and the number of courses they teach. */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 494,
                    "db_id": "allergy_1",
                    "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
                    "question": "Show all ages and corresponding number of students."
                }
            ],
            "example_quality": 0.6830139860097317,
            "example_similarity": 0.38456018896196636,
            "db_id": "course_teach",
            "pred": "SELECT Name, COUNT(Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY Name",
            "correct": 1
        },
        {
            "index": 407,
            "question": "What are the names of the teachers and how many courses do they teach?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many classes exist for each school? */\nSELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers and how many courses do they teach? */\nSELECT ",
            "response": "T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3209,
                    "db_id": "college_1",
                    "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
                    "question": "How many classes exist for each school?"
                }
            ],
            "example_quality": 0.6837928214249412,
            "example_similarity": 0.38429782431532217,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name, COUNT(T1.Course_ID) AS Num_Courses FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
            "correct": 1
        },
        {
            "index": 408,
            "question": "Show names of teachers that teach at least two courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the types of schools that have two schools. */\nSELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: Show names of teachers that teach at least two courses. */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6359,
                    "db_id": "school_bus",
                    "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
                    "question": "Show the types of schools that have two schools."
                }
            ],
            "example_quality": 0.684241041633867,
            "example_similarity": 0.3848642135091194,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2",
            "correct": 1
        },
        {
            "index": 409,
            "question": "What are the names of the teachers who teach at least two courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all professors who teach more than one class? */\nSELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers who teach at least two courses? */\nSELECT ",
            "response": "T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3331,
                    "db_id": "college_1",
                    "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
                    "question": "What are the first names of all professors who teach more than one class?"
                }
            ],
            "example_quality": 0.6846870700569301,
            "example_similarity": 0.3850234697108087,
            "db_id": "course_teach",
            "pred": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 410,
            "question": "List the names of teachers who have not been arranged to teach courses.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of instructors who didnt' teach? */\nSELECT id FROM instructor EXCEPT SELECT id FROM teaches\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: List the names of teachers who have not been arranged to teach courses. */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1444,
                    "db_id": "college_2",
                    "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                    "question": "What are the ids of instructors who didnt' teach?"
                }
            ],
            "example_quality": 0.6843179146015067,
            "example_similarity": 0.38481609539444084,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
            "correct": 1
        },
        {
            "index": 411,
            "question": "What are the names of the teachers whose courses have not been arranged?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of projects that have not been assigned? */\nSELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE \"course\" (\n\"Course_ID\" int,\n\"Staring_Date\" text,\n\"Course\" text,\nPRIMARY KEY (\"Course_ID\")\n)\n\nCREATE TABLE \"teacher\" (\n\"Teacher_ID\" int,\n\"Name\" text,\n\"Age\" text,\n\"Hometown\" text,\nPRIMARY KEY (\"Teacher_ID\")\n)\n\nCREATE TABLE \"course_arrange\" (\n\"Course_ID\" int,\n\"Teacher_ID\" int,\n\"Grade\" int,\nPRIMARY KEY (\"Course_ID\",\"Teacher_ID\",\"Grade\"),\nFOREIGN KEY (\"Course_ID\") REFERENCES `course`(\"Course_ID\"),\nFOREIGN KEY (\"Teacher_ID\") REFERENCES `teacher`(\"Teacher_ID\")\n)\n\n/* Answer the following: What are the names of the teachers whose courses have not been arranged? */\nSELECT ",
            "response": "Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6507,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
                    "question": "What are the names of projects that have not been assigned?"
                }
            ],
            "example_quality": 0.6850859975343497,
            "example_similarity": 0.38566406920937735,
            "db_id": "course_teach",
            "pred": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
            "correct": 1
        },
        {
            "index": 412,
            "question": "How many visitors below age 30 are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tourists did not make any visit? */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many visitors below age 30 are there? */\nSELECT ",
            "response": "count(*) FROM visitor WHERE age < 30",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5968,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "How many tourists did not make any visit?"
                }
            ],
            "example_quality": 0.684708147454669,
            "example_similarity": 0.38566152385842106,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM visitor WHERE Age < 30",
            "correct": 1
        },
        {
            "index": 413,
            "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the membership level with most number of members. */\nSELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. */\nSELECT ",
            "response": "name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5419,
                    "db_id": "shop_membership",
                    "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the membership level with most number of members."
                }
            ],
            "example_quality": 0.6843321271574564,
            "example_similarity": 0.38521198021711733,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",
            "correct": 1
        },
        {
            "index": 414,
            "question": "What is the average age of the visitors whose membership level is not higher than 4?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the membership level with the most people? */\nSELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the average age of the visitors whose membership level is not higher than 4? */\nSELECT ",
            "response": "avg(age) FROM visitor WHERE Level_of_membership <= 4",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5420,
                    "db_id": "shop_membership",
                    "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the membership level with the most people?"
                }
            ],
            "example_quality": 0.6836184961471459,
            "example_similarity": 0.3851269271248055,
            "db_id": "museum_visit",
            "pred": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4",
            "correct": 1
        },
        {
            "index": 415,
            "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the purchase time, age and address of each member, and show the results in the order of purchase time. */\nSELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. */\nSELECT ",
            "response": "name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 794,
                    "db_id": "coffee_shop",
                    "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
                    "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time."
                }
            ],
            "example_quality": 0.6835046290151374,
            "example_similarity": 0.3849598489237438,
            "db_id": "museum_visit",
            "pred": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
            "correct": 1
        },
        {
            "index": 416,
            "question": "Find the id and name of the museum that has the most staff members?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the department with the least number of staff? */\nSELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the id and name of the museum that has the most staff members? */\nSELECT ",
            "response": "museum_id , name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4744,
                    "db_id": "department_store",
                    "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                    "question": "What is the id of the department with the least number of staff?"
                }
            ],
            "example_quality": 0.6831342134759324,
            "example_similarity": 0.38479932481138346,
            "db_id": "museum_visit",
            "pred": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
            "correct": 1
        },
        {
            "index": 417,
            "question": "Find the average number of staff working for the museums that were open before 2009.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many staff in total? */\nSELECT count(*) FROM Staff;\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the average number of staff working for the museums that were open before 2009. */\nSELECT ",
            "response": "avg(num_of_staff) FROM museum WHERE open_year < 2009",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6641,
                    "db_id": "driving_school",
                    "query": "SELECT count(*) FROM Staff;",
                    "question": "How many staff in total?"
                }
            ],
            "example_quality": 0.682934850853688,
            "example_similarity": 0.3839907390147591,
            "db_id": "museum_visit",
            "pred": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009;",
            "correct": 1
        },
        {
            "index": 418,
            "question": "What are the opening year and staff number of the museum named Plaza Museum?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: When did the first staff member start working? */\nSELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the opening year and staff number of the museum named Plaza Museum? */\nSELECT ",
            "response": "Num_of_Staff , Open_Year FROM museum WHERE name = 'Plaza Museum'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4356,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1",
                    "question": "When did the first staff member start working?"
                }
            ],
            "example_quality": 0.6823884647381182,
            "example_similarity": 0.38341386438280317,
            "db_id": "museum_visit",
            "pred": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
            "correct": 1
        },
        {
            "index": 419,
            "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the department with the least number of staff? */\nSELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. */\nSELECT ",
            "response": "name FROM museum WHERE num_of_staff > (SELECT min(num_of_staff) FROM museum WHERE open_year > 2010)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4744,
                    "db_id": "department_store",
                    "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
                    "question": "What is the id of the department with the least number of staff?"
                }
            ],
            "example_quality": 0.6817542838357996,
            "example_similarity": 0.38320594655920764,
            "db_id": "museum_visit",
            "pred": "SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010)",
            "correct": 1
        },
        {
            "index": 420,
            "question": "find the id, name and age for visitors who visited some museums more than once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: find the id, name and age for visitors who visited some museums more than once. */\nSELECT ",
            "response": "t1.id , t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING count(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4849,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
                    "question": "What are the id and details of the customers who have at least 3 events?"
                }
            ],
            "example_quality": 0.6821945514139683,
            "example_similarity": 0.38282265197745285,
            "db_id": "museum_visit",
            "pred": "SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID HAVING COUNT(T2.Museum_ID) > 1;",
            "correct": 1
        },
        {
            "index": 421,
            "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the id and details of the customers who have at least 3 events? */\nSELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? */\nSELECT ",
            "response": "t2.visitor_id , t1.name , t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4849,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
                    "question": "What are the id and details of the customers who have at least 3 events?"
                }
            ],
            "example_quality": 0.6819493086990208,
            "example_similarity": 0.3828634532791692,
            "db_id": "museum_visit",
            "pred": "SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID, T1.Name, T1.Level_of_membership ORDER BY SUM(T2.Total_spent) DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 422,
            "question": "What are the id and name of the museum visited most times?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the id and name of the museum visited most times? */\nSELECT ",
            "response": "t2.Museum_ID , t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6809257321381227,
            "example_similarity": 0.3830713319095363,
            "db_id": "museum_visit",
            "pred": "SELECT Museum_ID, Name FROM museum WHERE Museum_ID = ( SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(visitor_ID) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 423,
            "question": "What is the name of the museum that had no visitor yet?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the detail of each visitor? */\nSELECT Tourist_Details FROM VISITORS\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the museum that had no visitor yet? */\nSELECT ",
            "response": "name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5895,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT Tourist_Details FROM VISITORS",
                    "question": "What is the detail of each visitor?"
                }
            ],
            "example_quality": 0.6799914261182083,
            "example_similarity": 0.383111352401476,
            "db_id": "museum_visit",
            "pred": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
            "correct": 1
        },
        {
            "index": 424,
            "question": "Find the name and age of the visitor who bought the most tickets at once.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the customer that has purchased the most items? */\nSELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the name and age of the visitor who bought the most tickets at once. */\nSELECT ",
            "response": "t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6110,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
                    "question": "What is the name of the customer that has purchased the most items?"
                }
            ],
            "example_quality": 0.6798617293584955,
            "example_similarity": 0.3827974105326046,
            "db_id": "museum_visit",
            "pred": "SELECT t2.Name, t2.Age FROM visit AS t1 JOIN visitor AS t2 ON t1.visitor_ID = t2.ID GROUP BY t1.visitor_ID ORDER BY sum(t1.Num_of_Ticket) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 425,
            "question": "What are the average and maximum number of tickets bought in all visits?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the average and maximum attendances of all events? */\nSELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What are the average and maximum number of tickets bought in all visits? */\nSELECT ",
            "response": "avg(num_of_ticket) , max(num_of_ticket) FROM visit",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2818,
                    "db_id": "news_report",
                    "query": "SELECT avg(Event_Attendance) ,  max(Event_Attendance) FROM event",
                    "question": "what are the average and maximum attendances of all events?"
                }
            ],
            "example_quality": 0.680614995877652,
            "example_similarity": 0.3834653381940964,
            "db_id": "museum_visit",
            "pred": "SELECT avg(Num_of_Ticket), max(Num_of_Ticket) FROM visit",
            "correct": 1
        },
        {
            "index": 426,
            "question": "What is the total ticket expense of the visitors whose membership level is 1?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many members have the black membership card? */\nSELECT count(*) FROM member WHERE Membership_card  =  'Black'\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the total ticket expense of the visitors whose membership level is 1? */\nSELECT ",
            "response": "sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 790,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
                    "question": "How many members have the black membership card?"
                }
            ],
            "example_quality": 0.680895242366202,
            "example_similarity": 0.38318292635499496,
            "db_id": "museum_visit",
            "pred": "SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1",
            "correct": 1
        },
        {
            "index": 427,
            "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the detail of each visitor? */\nSELECT Tourist_Details FROM VISITORS\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? */\nSELECT ",
            "response": "t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5895,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT Tourist_Details FROM VISITORS",
                    "question": "What is the detail of each visitor?"
                }
            ],
            "example_quality": 0.6800212308095885,
            "example_similarity": 0.3828710225462011,
            "db_id": "museum_visit",
            "pred": "SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND museum.Open_Year > 2011",
            "correct": 0
        },
        {
            "index": 428,
            "question": "Find the number of visitors who did not visit any museum opened after 2010.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of tourists who did not visit any place. */\nSELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: Find the number of visitors who did not visit any museum opened after 2010. */\nSELECT ",
            "response": "count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5969,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
                    "question": "Count the number of tourists who did not visit any place."
                }
            ],
            "example_quality": 0.6805229027985973,
            "example_similarity": 0.38335084561062027,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM visitor WHERE ID NOT IN ( SELECT visitor_ID FROM visit JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE Open_Year > 2010 )",
            "correct": 1
        },
        {
            "index": 429,
            "question": "How many museums were opened after 2013 or before 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products were not included in any order? */\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )\n\n/* Given the following database schema: */\nCREATE TABLE \"museum\" (\n\"Museum_ID\" int,\n\"Name\" text,\n\"Num_of_Staff\" int,\n\"Open_Year\" text,\nPRIMARY KEY (\"Museum_ID\")\n)\n\nCREATE TABLE \"visitor\" (\n\"ID\" int,\n\"Name\" text,\n\"Level_of_membership\" int,\n\"Age\" int,\nPRIMARY KEY (\"ID\")\n)\n\nCREATE TABLE \"visit\" (\n\"Museum_ID\" int,\n\"visitor_ID\" text,\n\"Num_of_Ticket\" int,\n\"Total_spent\" real,\nPRIMARY KEY (\"Museum_ID\",\"visitor_ID\"),\nFOREIGN KEY (\"Museum_ID\") REFERENCES `museum`(\"Museum_ID\"),\nFOREIGN KEY (\"visitor_ID\") REFERENCES `visitor`(\"ID\")\n)\n\n/* Answer the following: How many museums were opened after 2013 or before 2008? */\nSELECT ",
            "response": "count(*) FROM museum WHERE open_year > 2013 OR open_year < 2008",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1628,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
                    "question": "How many products were not included in any order?"
                }
            ],
            "example_quality": 0.6801706623834627,
            "example_similarity": 0.38338965482831117,
            "db_id": "museum_visit",
            "pred": "SELECT count(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'",
            "correct": 1
        },
        {
            "index": 430,
            "question": "Find the total number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of regions. */\nSELECT count(*) FROM region\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of players. */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2041,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region",
                    "question": "Count the number of regions."
                }
            ],
            "example_quality": 0.6809144515407104,
            "example_similarity": 0.38395153935196624,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM players;",
            "correct": 1
        },
        {
            "index": 431,
            "question": "How many players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there? */\nSELECT ",
            "response": "count(*) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6816547892401519,
            "example_similarity": 0.3853808861284118,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM players",
            "correct": 1
        },
        {
            "index": 432,
            "question": "Find the total number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of regions. */\nSELECT count(*) FROM region\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2041,
                    "db_id": "party_people",
                    "query": "SELECT count(*) FROM region",
                    "question": "Count the number of regions."
                }
            ],
            "example_quality": 0.6823916994502441,
            "example_similarity": 0.3859355600031145,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches;",
            "correct": 1
        },
        {
            "index": 433,
            "question": "Count the number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Count the number of matches. */\nSELECT ",
            "response": "count(*) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6831252059180265,
            "example_similarity": 0.3873537226820912,
            "db_id": "wta_1",
            "pred": "SELECT count(*) FROM matches;",
            "correct": 1
        },
        {
            "index": 434,
            "question": "List the first name and birth date of all players from the country with code USA.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes. */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first name and birth date of all players from the country with code USA. */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 730,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "Show all card type codes."
                }
            ],
            "example_quality": 0.6828678404007696,
            "example_similarity": 0.38710124354636694,
            "db_id": "wta_1",
            "pred": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
            "correct": 1
        },
        {
            "index": 435,
            "question": "What are the first names and birth dates of players from the USA?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and birth dates of players from the USA? */\nSELECT ",
            "response": "first_name , birth_date FROM players WHERE country_code = 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6832684726231654,
            "example_similarity": 0.3863208247051548,
            "db_id": "wta_1",
            "pred": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\";",
            "correct": 1
        },
        {
            "index": 436,
            "question": "Find the average age of losers and winners of all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the minimum, maximum, and average age for all people. */\nSELECT min(age) ,  max(age) ,  avg(age) FROM people\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average age of losers and winners of all matches. */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1639,
                    "db_id": "wedding",
                    "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people",
                    "question": "Show the minimum, maximum, and average age for all people."
                }
            ],
            "example_quality": 0.6831029740875871,
            "example_similarity": 0.386326714760622,
            "db_id": "wta_1",
            "pred": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
            "correct": 1
        },
        {
            "index": 437,
            "question": "What are the average ages of losers and winners across matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and oldest age for each gender of student? */\nSELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the average ages of losers and winners across matches? */\nSELECT ",
            "response": "avg(loser_age) , avg(winner_age) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5724,
                    "db_id": "dorm_1",
                    "query": "SELECT avg(age) ,  max(age) ,  sex FROM student GROUP BY sex",
                    "question": "What is the average and oldest age for each gender of student?"
                }
            ],
            "example_quality": 0.6829382329823779,
            "example_similarity": 0.38672985728977394,
            "db_id": "wta_1",
            "pred": "SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches",
            "correct": 1
        },
        {
            "index": 438,
            "question": "Find the average rank of winners in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average price of all product clothes. */\nSELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average rank of winners in all matches. */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4794,
                    "db_id": "department_store",
                    "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
                    "question": "Find the average price of all product clothes."
                }
            ],
            "example_quality": 0.6831547616234633,
            "example_similarity": 0.3875073524267213,
            "db_id": "wta_1",
            "pred": "SELECT avg(winner_rank) FROM matches",
            "correct": 1
        },
        {
            "index": 439,
            "question": "What is the average rank for winners in all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price across all products? */\nSELECT avg(price) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the average rank for winners in all matches? */\nSELECT ",
            "response": "avg(winner_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5332,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "What is the average price across all products?"
                }
            ],
            "example_quality": 0.6838765047632732,
            "example_similarity": 0.388143250636835,
            "db_id": "wta_1",
            "pred": "SELECT avg(winner_rank) FROM matches",
            "correct": 1
        },
        {
            "index": 440,
            "question": "Find the highest rank of losers in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the highest rank of losers in all matches. */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1695,
                    "db_id": "epinions_1",
                    "query": "SELECT min(rank) FROM review",
                    "question": "Find the highest rank of all reviews."
                }
            ],
            "example_quality": 0.6845949672524475,
            "example_similarity": 0.38907928870356956,
            "db_id": "wta_1",
            "pred": "SELECT max(loser_rank) FROM matches",
            "correct": 0
        },
        {
            "index": 441,
            "question": "What is the best rank of losers across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price across all products? */\nSELECT avg(price) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the best rank of losers across all matches? */\nSELECT ",
            "response": "min(loser_rank) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5332,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "What is the average price across all products?"
                }
            ],
            "example_quality": 0.6847432779843015,
            "example_similarity": 0.38970873854022053,
            "db_id": "wta_1",
            "pred": "SELECT MAX(loser_rank) FROM matches",
            "correct": 0
        },
        {
            "index": 442,
            "question": "find the number of distinct country codes of all players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of distinct projects. */\nSELECT count(DISTINCT name) FROM projects\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of distinct country codes of all players. */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6476,
                    "db_id": "scientist_1",
                    "query": "SELECT count(DISTINCT name) FROM projects",
                    "question": "Find the number of distinct projects."
                }
            ],
            "example_quality": 0.6854565284865993,
            "example_similarity": 0.3902667812954771,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT country_code) FROM players",
            "correct": 1
        },
        {
            "index": 443,
            "question": "How many distinct countries do players come from?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct companies are there? */\nSELECT count(DISTINCT Company) FROM entrepreneur\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many distinct countries do players come from? */\nSELECT ",
            "response": "count(DISTINCT country_code) FROM players",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2300,
                    "db_id": "entrepreneur",
                    "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
                    "question": "How many distinct companies are there?"
                }
            ],
            "example_quality": 0.6861665588963362,
            "example_similarity": 0.39041187988069154,
            "db_id": "wta_1",
            "pred": "SELECT count(DISTINCT country_code) FROM players",
            "correct": 1
        },
        {
            "index": 444,
            "question": "Find the number of distinct name of losers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of distinct names associated with the photos. */\nSELECT count(DISTINCT Name) FROM PHOTOS\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of distinct name of losers. */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5907,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(DISTINCT Name) FROM PHOTOS",
                    "question": "Count the number of distinct names associated with the photos."
                }
            ],
            "example_quality": 0.686873390970894,
            "example_similarity": 0.39049782481017514,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT loser_name) FROM matches;",
            "correct": 1
        },
        {
            "index": 445,
            "question": "How many different loser names are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many different positions are there? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different loser names are there? */\nSELECT ",
            "response": "count(DISTINCT loser_name) FROM matches",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3378,
                    "db_id": "sports_competition",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "how many different positions are there?"
                }
            ],
            "example_quality": 0.6875770462720829,
            "example_similarity": 0.391586593743186,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT loser_name) FROM matches;",
            "correct": 1
        },
        {
            "index": 446,
            "question": "Find the name of tourney that has more than 10 matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of tourney that has more than 10 matches. */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6882775461683339,
            "example_similarity": 0.3921499806246075,
            "db_id": "wta_1",
            "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "correct": 1
        },
        {
            "index": 447,
            "question": "What are the names of tournaments that have more than 10 matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct years in which the competitions type is not \"Tournament\"? */\nSELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of tournaments that have more than 10 matches? */\nSELECT ",
            "response": "tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3346,
                    "db_id": "sports_competition",
                    "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"",
                    "question": "What are the distinct years in which the competitions type is not \"Tournament\"?"
                }
            ],
            "example_quality": 0.6874368805169506,
            "example_similarity": 0.391856288420117,
            "db_id": "wta_1",
            "pred": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
            "correct": 1
        },
        {
            "index": 448,
            "question": "List the names of all winners who played in both 2013 and 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the players and the years played. */\nSELECT Player ,  Years_Played FROM player\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the names of all winners who played in both 2013 and 2016. */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1069,
                    "db_id": "match_season",
                    "query": "SELECT Player ,  Years_Played FROM player",
                    "question": "Show the players and the years played."
                }
            ],
            "example_quality": 0.6865892363811813,
            "example_similarity": 0.3918186627763221,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE year = 2013 AND winner_name IN (SELECT winner_name FROM matches WHERE year = 2016)",
            "correct": 0
        },
        {
            "index": 449,
            "question": "What are the names of players who won in both 2013 and 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which players won awards in both 1960 and 1961? Return their first names and last names. */\nSELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of players who won in both 2013 and 2016? */\nSELECT ",
            "response": "winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3663,
                    "db_id": "baseball_1",
                    "query": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961",
                    "question": "Which players won awards in both 1960 and 1961? Return their first names and last names."
                }
            ],
            "example_quality": 0.6872872558992633,
            "example_similarity": 0.39156962343829027,
            "db_id": "wta_1",
            "pred": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year = 2013 INTERSECT SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year = 2016;",
            "correct": 0
        },
        {
            "index": 450,
            "question": "List the number of all matches who played in years of 2013 or 2016.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of musicals and the number of actors who have appeared in the musicals. */\nSELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the number of all matches who played in years of 2013 or 2016. */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 257,
                    "db_id": "musical",
                    "query": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
                    "question": "Show names of musicals and the number of actors who have appeared in the musicals."
                }
            ],
            "example_quality": 0.6871274722536752,
            "example_similarity": 0.3919216909417607,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
            "correct": 1
        },
        {
            "index": 451,
            "question": "How many matches were played in 2013 or 2016?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in 2013 or 2016? */\nSELECT ",
            "response": "count(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                }
            ],
            "example_quality": 0.6869683971830122,
            "example_similarity": 0.39226211855708837,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
            "correct": 1
        },
        {
            "index": 452,
            "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6864696583873383,
            "example_similarity": 0.3922956258333059,
            "db_id": "wta_1",
            "pred": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = \"WTA Championships\" AND T1.player_id IN (SELECT T3.player_id FROM players AS T3 JOIN matches AS T4 ON T3.player_id = T4.winner_id WHERE T4.tourney_name = \"Australian Open\")",
            "correct": 0
        },
        {
            "index": 453,
            "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all aircrafts that have won a match at least twice? */\nSELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4831,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2",
                    "question": "What are the names of all aircrafts that have won a match at least twice?"
                }
            ],
            "example_quality": 0.6857268997595518,
            "example_similarity": 0.392038598113951,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T1.player_id IN (SELECT T3.player_id FROM matches AS T3 WHERE T3.tourney_name = 'Australian Open')",
            "correct": 0
        },
        {
            "index": 454,
            "question": "Find the first name and country code of the oldest player.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the order id and customer id associated with the oldest order. */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the oldest player. */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6889,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "Find the order id and customer id associated with the oldest order."
                }
            ],
            "example_quality": 0.6864191312578788,
            "example_similarity": 0.39290572517914996,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 455,
            "question": "What is the first name and country code of the oldest player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the order id and customer id of the oldest order? */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the oldest player? */\nSELECT ",
            "response": "first_name , country_code FROM players ORDER BY birth_date LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6888,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "what are the order id and customer id of the oldest order?"
                }
            ],
            "example_quality": 0.6871083199803889,
            "example_similarity": 0.3939260265680812,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 456,
            "question": "List the first and last name of all players in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6877944859453442,
            "example_similarity": 0.3942231444148746,
            "db_id": "wta_1",
            "pred": "SELECT first_name, last_name FROM players ORDER BY birth_date",
            "correct": 1
        },
        {
            "index": 457,
            "question": "What are the full names of all players, sorted by birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes and names for all regions, sorted by codes? */\nSELECT region_code ,  region_name FROM region ORDER BY region_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all players, sorted by birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2694,
                    "db_id": "storm_record",
                    "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code",
                    "question": "What are the codes and names for all regions, sorted by codes?"
                }
            ],
            "example_quality": 0.688477648995792,
            "example_similarity": 0.3945761693845478,
            "db_id": "wta_1",
            "pred": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;",
            "correct": 0
        },
        {
            "index": 458,
            "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the name, job title of all people ordered by their names. */\nSELECT name ,  job FROM Person ORDER BY name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: List the first and last name of all players who are left / L hand in the order of birth date. */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4435,
                    "db_id": "network_2",
                    "query": "SELECT name ,  job FROM Person ORDER BY name",
                    "question": "list the name, job title of all people ordered by their names."
                }
            ],
            "example_quality": 0.6887211475787706,
            "example_similarity": 0.39444245140190326,
            "db_id": "wta_1",
            "pred": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;",
            "correct": 1
        },
        {
            "index": 459,
            "question": "What are the full names of all left handed players, in order of birth date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of people in ascending alphabetical order? */\nSELECT Name FROM People ORDER BY Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the full names of all left handed players, in order of birth date? */\nSELECT ",
            "response": "first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1745,
                    "db_id": "gymnast",
                    "query": "SELECT Name FROM People ORDER BY Name ASC",
                    "question": "What are the names of people in ascending alphabetical order?"
                }
            ],
            "example_quality": 0.6889635851657451,
            "example_similarity": 0.3946150913999956,
            "db_id": "wta_1",
            "pred": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
            "correct": 0
        },
        {
            "index": 460,
            "question": "Find the first name and country code of the player who did the most number of tours.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the count and code of the job has most employees. */\nSELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name and country code of the player who did the most number of tours. */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3212,
                    "db_id": "college_1",
                    "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the count and code of the job has most employees."
                }
            ],
            "example_quality": 0.6885010349288423,
            "example_similarity": 0.39454774633963996,
            "db_id": "wta_1",
            "pred": "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 461,
            "question": "What is the first name and country code of the player with the most tours?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the song with the most vocals? */\nSELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name and country code of the player with the most tours? */\nSELECT ",
            "response": "T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5220,
                    "db_id": "music_2",
                    "query": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the song with the most vocals?"
                }
            ],
            "example_quality": 0.6883632886491702,
            "example_similarity": 0.39491206793109407,
            "db_id": "wta_1",
            "pred": "SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 462,
            "question": "Find the year that has the most number of matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the year that has the most number of matches. */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6890378269854274,
            "example_similarity": 0.3955002813482707,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 463,
            "question": "Which year had the most matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and ID of the product bought the most. */\nSELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Which year had the most matches? */\nSELECT ",
            "response": "YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6133,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1",
                    "question": "What are the name and ID of the product bought the most."
                }
            ],
            "example_quality": 0.6894553542299005,
            "example_similarity": 0.39502721505645,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 464,
            "question": "Find the name and rank points of the winner who won the most times.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time. */\nSELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank points of the winner who won the most times. */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5626,
                    "db_id": "swimming",
                    "query": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
                    "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time."
                }
            ],
            "example_quality": 0.6892625625181982,
            "example_similarity": 0.39484935467917315,
            "db_id": "wta_1",
            "pred": "SELECT t1.first_name, t1.last_name, t2.winner_rank_points FROM players AS t1 JOIN matches AS t2 ON t1.player_id = t2.winner_id GROUP BY t2.winner_id ORDER BY COUNT(*) DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 465,
            "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the most common reigns of wrestlers. */\nSELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? */\nSELECT ",
            "response": "winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1873,
                    "db_id": "wrestler",
                    "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common reigns of wrestlers."
                }
            ],
            "example_quality": 0.6899308150719224,
            "example_similarity": 0.3943842408595866,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, SUM(winner_rank_points) AS total_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 466,
            "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the first and last name of the faculty who is involved in the largest number of activities. */\nSELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6785,
                    "db_id": "activity_1",
                    "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the first and last name of the faculty who is involved in the largest number of activities."
                }
            ],
            "example_quality": 0.6898388150900715,
            "example_similarity": 0.3947396394843515,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' AND winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')",
            "correct": 1
        },
        {
            "index": 467,
            "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the name of the country that participated in the most tournament competitions? */\nSELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? */\nSELECT ",
            "response": "winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3385,
                    "db_id": "sports_competition",
                    "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1",
                    "question": "what is the name of the country that participated in the most tournament competitions?"
                }
            ],
            "example_quality": 0.6897891959285652,
            "example_similarity": 0.39532192433913155,
            "db_id": "wta_1",
            "pred": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 468,
            "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the full name and id of the actor or actress who starred in the greatest number of films. */\nSELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the names of loser and winner who played in the match with greatest number of minutes. */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2954,
                    "db_id": "sakila_1",
                    "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the full name and id of the actor or actress who starred in the greatest number of films."
                }
            ],
            "example_quality": 0.6896507574757264,
            "example_similarity": 0.3957236581190337,
            "db_id": "wta_1",
            "pred": "SELECT T1.first_name AS winner_first_name, T1.last_name AS winner_last_name, T2.first_name AS loser_first_name, T2.last_name AS loser_last_name FROM matches JOIN players AS T1 ON matches.winner_id = T1.player_id JOIN players AS T2 ON matches.loser_id = T2.player_id ORDER BY minutes DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 469,
            "question": "What are the names of the winner and loser who played in the longest match?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and location of the wrestlers? */\nSELECT Name ,  LOCATION FROM wrestler\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names of the winner and loser who played in the longest match? */\nSELECT ",
            "response": "winner_name , loser_name FROM matches ORDER BY minutes DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1853,
                    "db_id": "wrestler",
                    "query": "SELECT Name ,  LOCATION FROM wrestler",
                    "question": "What are the names and location of the wrestlers?"
                }
            ],
            "example_quality": 0.6890331652423027,
            "example_similarity": 0.39621252025524045,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
            "correct": 1
        },
        {
            "index": 470,
            "question": "Find the average ranking for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average prices of all products from each manufacture, and list each company's name. */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the average ranking for each player and their first name. */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5313,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "Find the average prices of all products from each manufacture, and list each company's name."
                }
            ],
            "example_quality": 0.689694796805617,
            "example_similarity": 0.3962813689963387,
            "db_id": "wta_1",
            "pred": "SELECT avg(T1.ranking) , T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name",
            "correct": 1
        },
        {
            "index": 471,
            "question": "What are the first names of all players, and their average rankings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average, minimum, maximum, and total transaction amount? */\nSELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their average rankings? */\nSELECT ",
            "response": "avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1584,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions",
                    "question": "What is the average, minimum, maximum, and total transaction amount?"
                }
            ],
            "example_quality": 0.6891151192469356,
            "example_similarity": 0.39628926417893673,
            "db_id": "wta_1",
            "pred": "SELECT first_name, avg(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
            "correct": 1
        },
        {
            "index": 472,
            "question": "Find the total ranking points for each player and their first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show total points of all players. */\nSELECT sum(Points) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total ranking points for each player and their first name. */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3376,
                    "db_id": "sports_competition",
                    "query": "SELECT sum(Points) FROM player",
                    "question": "Show total points of all players."
                }
            ],
            "example_quality": 0.6888910052937287,
            "example_similarity": 0.3959793292972017,
            "db_id": "wta_1",
            "pred": "SELECT players.first_name, sum(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
            "correct": 1
        },
        {
            "index": 473,
            "question": "What are the first names of all players, and their total ranking points?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total number of points for all players? */\nSELECT sum(Points) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the first names of all players, and their total ranking points? */\nSELECT ",
            "response": "sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3377,
                    "db_id": "sports_competition",
                    "query": "SELECT sum(Points) FROM player",
                    "question": "What is the total number of points for all players?"
                }
            ],
            "example_quality": 0.6886678389682311,
            "example_similarity": 0.3960817925427561,
            "db_id": "wta_1",
            "pred": "SELECT first_name, sum(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
            "correct": 1
        },
        {
            "index": 474,
            "question": "find the number of players for each country.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of checking accounts for each account name. */\nSELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the number of players for each country. */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1805,
                    "db_id": "small_bank_1",
                    "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
                    "question": "Find the number of checking accounts for each account name."
                }
            ],
            "example_quality": 0.6893246578733614,
            "example_similarity": 0.39697229892596086,
            "db_id": "wta_1",
            "pred": "SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code",
            "correct": 1
        },
        {
            "index": 475,
            "question": "How many players are from each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are from each country? */\nSELECT ",
            "response": "count(*) , country_code FROM players GROUP BY country_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.6899787112252069,
            "example_similarity": 0.397284893129179,
            "db_id": "wta_1",
            "pred": "SELECT country_code, count(*) FROM players GROUP BY country_code",
            "correct": 1
        },
        {
            "index": 476,
            "question": "find the code of the country where has the greatest number of players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the code of the location with the largest number of documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: find the code of the country where has the greatest number of players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4230,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the location with the largest number of documents."
                }
            ],
            "example_quality": 0.6906300164537255,
            "example_similarity": 0.39789458873184874,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 477,
            "question": "What is the code of the country with the most players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the card type code with most number of cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the code of the country with the most players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 722,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the card type code with most number of cards?"
                }
            ],
            "example_quality": 0.6912785908427114,
            "example_similarity": 0.3983182898036897,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 478,
            "question": "Find the codes of countries that have more than 50 players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the codes of countries that have more than 50 players. */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6919244515313249,
            "example_similarity": 0.39909425733387194,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "correct": 1
        },
        {
            "index": 479,
            "question": "What are the codes of countries with more than 50 players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the codes of countries with more than 50 players? */\nSELECT ",
            "response": "country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6922892578259707,
            "example_similarity": 0.3992005323707532,
            "db_id": "wta_1",
            "pred": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "correct": 1
        },
        {
            "index": 480,
            "question": "Find the total number of tours for each ranking date.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the total number of tours for each ranking date. */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6917398456816904,
            "example_similarity": 0.3991701466462628,
            "db_id": "wta_1",
            "pred": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;",
            "correct": 1
        },
        {
            "index": 481,
            "question": "How many total tours were there for each ranking date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many total tours were there for each ranking date? */\nSELECT ",
            "response": "sum(tours) , ranking_date FROM rankings GROUP BY ranking_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.6920608727096991,
            "example_similarity": 0.39923127197251057,
            "db_id": "wta_1",
            "pred": "SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date",
            "correct": 1
        },
        {
            "index": 482,
            "question": "Find the number of matches happened in each year.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of matches happened in each year. */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6917422018917568,
            "example_similarity": 0.39920094855475724,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
            "correct": 1
        },
        {
            "index": 483,
            "question": "How many matches were played in each year?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many players played each position? */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many matches were played in each year? */\nSELECT ",
            "response": "count(*) , YEAR FROM matches GROUP BY YEAR",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1092,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "How many players played each position?"
                }
            ],
            "example_quality": 0.6923804167946724,
            "example_similarity": 0.3999847515138111,
            "db_id": "wta_1",
            "pred": "SELECT year, COUNT(*) FROM matches GROUP BY year",
            "correct": 1
        },
        {
            "index": 484,
            "question": "Find the name and rank of the 3 youngest winners across all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of all the cities and states. */\nSELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the name and rank of the 3 youngest winners across all matches. */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6331,
                    "db_id": "e_government",
                    "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
                    "question": "Find the name of all the cities and states."
                }
            ],
            "example_quality": 0.6918353569016492,
            "example_similarity": 0.4003980061594437,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "correct": 1
        },
        {
            "index": 485,
            "question": "What are the names and ranks of the three youngest winners across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are characteristic names used at least twice across all products? */\nSELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What are the names and ranks of the three youngest winners across all matches? */\nSELECT ",
            "response": "DISTINCT winner_name , winner_rank FROM matches ORDER BY winner_age LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5599,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
                    "question": "What are characteristic names used at least twice across all products?"
                }
            ],
            "example_quality": 0.6912107250088394,
            "example_similarity": 0.4004405930159788,
            "db_id": "wta_1",
            "pred": "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE winner_age IN (SELECT DISTINCT winner_age FROM matches ORDER BY winner_age LIMIT 3) ORDER BY winner_age;",
            "correct": 1
        },
        {
            "index": 486,
            "question": "How many different winners both participated in the WTA Championships and were left handed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Of all players with an overall rating greater than 80, how many are right-footed and left-footed? */\nSELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many different winners both participated in the WTA Championships and were left handed? */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1303,
                    "db_id": "soccer_1",
                    "query": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
                    "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?"
                }
            ],
            "example_quality": 0.6910230486199324,
            "example_similarity": 0.40009675091786634,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "correct": 1
        },
        {
            "index": 487,
            "question": "Find the number of left handed winners who participated in the WTA Championships.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of left handed winners who participated in the WTA Championships. */\nSELECT ",
            "response": "count(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.690630804166914,
            "example_similarity": 0.39947075778505364,
            "db_id": "wta_1",
            "pred": "SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships'",
            "correct": 1
        },
        {
            "index": 488,
            "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the highest rank of all reviews. */\nSELECT min(rank) FROM review\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1695,
                    "db_id": "epinions_1",
                    "query": "SELECT min(rank) FROM review",
                    "question": "Find the highest rank of all reviews."
                }
            ],
            "example_quality": 0.6898460941331546,
            "example_similarity": 0.39936492854155253,
            "db_id": "wta_1",
            "pred": "SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
            "correct": 0
        },
        {
            "index": 489,
            "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the flag that is most common among all ships. */\nSELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? */\nSELECT ",
            "response": "T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6252,
                    "db_id": "ship_1",
                    "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the flag that is most common among all ships."
                }
            ],
            "example_quality": 0.6897134845337003,
            "example_similarity": 0.39895722930118127,
            "db_id": "wta_1",
            "pred": "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
            "correct": 0
        },
        {
            "index": 490,
            "question": "Find the number of players for each hand type.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of phones for each accreditation type. */\nSELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: Find the number of players for each hand type. */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1043,
                    "db_id": "phone_1",
                    "query": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type",
                    "question": "Find the number of phones for each accreditation type."
                }
            ],
            "example_quality": 0.6903467223203662,
            "example_similarity": 0.39981278968665196,
            "db_id": "wta_1",
            "pred": "SELECT hand, count(*) FROM players GROUP BY hand",
            "correct": 1
        },
        {
            "index": 491,
            "question": "How many players are there for each hand type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE players(\n    \"player_id\" INT PRIMARY KEY,\n    \"first_name\" TEXT,\n    \"last_name\" TEXT,\n    \"hand\" TEXT,\n    \"birth_date\" DATE,\n    \"country_code\" TEXT\n)\n\nCREATE TABLE matches(\n  \"best_of\" INT,\n  \"draw_size\" INT,\n  \"loser_age\" FLOAT,\n  \"loser_entry\" TEXT,\n  \"loser_hand\" TEXT,\n  \"loser_ht\" INT,\n  \"loser_id\" INT,\n  \"loser_ioc\" TEXT,\n  \"loser_name\" TEXT,\n  \"loser_rank\" INT,\n  \"loser_rank_points\" INT,\n  \"loser_seed\" INT,\n  \"match_num\" INT,\n  \"minutes\" INT,\n  \"round\" TEXT,\n  \"score\" TEXT,\n  \"surface\" TEXT,\n  \"tourney_date\" DATE,\n  \"tourney_id\" TEXT,\n  \"tourney_level\" TEXT,\n  \"tourney_name\" TEXT,\n  \"winner_age\" FLOAT,\n  \"winner_entry\" TEXT,\n  \"winner_hand\" TEXT,\n  \"winner_ht\" INT,\n  \"winner_id\" INT,\n  \"winner_ioc\" TEXT,\n  \"winner_name\" TEXT,\n  \"winner_rank\" INT,\n  \"winner_rank_points\" INT,\n  \"winner_seed\" INT,\n  \"year\" INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n)\n\nCREATE TABLE rankings(\"ranking_date\" DATE,\"ranking\" INT,\"player_id\" INT,\"ranking_points\" INT,\"tours\" INT,FOREIGN KEY(player_id) REFERENCES players(player_id))\n\n/* Answer the following: How many players are there for each hand type? */\nSELECT ",
            "response": "count(*) , hand FROM players GROUP BY hand",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.6909773807270457,
            "example_similarity": 0.4004797142031205,
            "db_id": "wta_1",
            "pred": "SELECT hand, count(*) FROM players GROUP BY hand",
            "correct": 1
        },
        {
            "index": 492,
            "question": "How many ships ended up being 'Captured'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many perpetrators are there? */\nSELECT count(*) FROM perpetrator\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many ships ended up being 'Captured'? */\nSELECT ",
            "response": "count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2304,
                    "db_id": "perpetrator",
                    "query": "SELECT count(*) FROM perpetrator",
                    "question": "How many perpetrators are there?"
                }
            ],
            "example_quality": 0.691153804298287,
            "example_similarity": 0.40034323781923886,
            "db_id": "battle_death",
            "pred": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured'",
            "correct": 1
        },
        {
            "index": 493,
            "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and tonnage ordered by in descending alphaetical order for the names. */\nSELECT ",
            "response": "name , tonnage FROM ship ORDER BY name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6913295121552433,
            "example_similarity": 0.40032000384574934,
            "db_id": "battle_death",
            "pred": "SELECT name, tonnage FROM ship ORDER BY name DESC",
            "correct": 1
        },
        {
            "index": 494,
            "question": "List the name, date and result of each battle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name, date and result of each battle. */\nSELECT ",
            "response": "name , date FROM battle",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6919543511994635,
            "example_similarity": 0.4000617189649427,
            "db_id": "battle_death",
            "pred": "SELECT name, date, result FROM battle;",
            "correct": 0
        },
        {
            "index": 495,
            "question": "What is maximum and minimum death toll caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum product prices for each product type? */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is maximum and minimum death toll caused each time? */\nSELECT ",
            "response": "max(killed) , min(killed) FROM death",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4747,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "What are the maximum and minimum product prices for each product type?"
                }
            ],
            "example_quality": 0.6919824885767195,
            "example_similarity": 0.4002636144821852,
            "db_id": "battle_death",
            "pred": "SELECT MAX(killed) as max_death_toll, MIN(killed) as min_death_toll FROM death",
            "correct": 1
        },
        {
            "index": 496,
            "question": "What is the average number of injuries caused each time?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average number of people injured by all perpetrators? */\nSELECT avg(Injured) FROM perpetrator\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the average number of injuries caused each time? */\nSELECT ",
            "response": "avg(injured) FROM death",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2307,
                    "db_id": "perpetrator",
                    "query": "SELECT avg(Injured) FROM perpetrator",
                    "question": "What is the average number of people injured by all perpetrators?"
                }
            ],
            "example_quality": 0.6926034916239439,
            "example_similarity": 0.4005319002056755,
            "db_id": "battle_death",
            "pred": "SELECT avg(injured) FROM death",
            "correct": 1
        },
        {
            "index": 497,
            "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct kinds of injuries happened after season 2010? */\nSELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the death and injury situations caused by the ship with tonnage 't'? */\nSELECT ",
            "response": "T1.killed , T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1288,
                    "db_id": "game_injury",
                    "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
                    "question": "How many distinct kinds of injuries happened after season 2010?"
                }
            ],
            "example_quality": 0.6924171666910989,
            "example_similarity": 0.4000613464158585,
            "db_id": "battle_death",
            "pred": "SELECT T1.note, T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'",
            "correct": 0
        },
        {
            "index": 498,
            "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' */\nSELECT ",
            "response": "name , RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6927479411699177,
            "example_similarity": 0.39925801037887887,
            "db_id": "battle_death",
            "pred": "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';",
            "correct": 1
        },
        {
            "index": 499,
            "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the names and classes of the ships that do not have any captain yet? */\nSELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? */\nSELECT ",
            "response": "DISTINCT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6261,
                    "db_id": "ship_1",
                    "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)",
                    "question": "what are the names and classes of the ships that do not have any captain yet?"
                }
            ],
            "example_quality": 0.6921612719491363,
            "example_similarity": 0.39959059430858923,
            "db_id": "battle_death",
            "pred": "SELECT id, name FROM battle WHERE id IN (SELECT lost_in_battle FROM ship WHERE ship_type = 'Brig')",
            "correct": 1
        },
        {
            "index": 500,
            "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20. */\nSELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the ids and names of the battles that led to more than 10 people killed in total. */\nSELECT ",
            "response": "T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed) > 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2321,
                    "db_id": "perpetrator",
                    "query": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20",
                    "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20."
                }
            ],
            "example_quality": 0.691476949405238,
            "example_similarity": 0.3995500338096272,
            "db_id": "battle_death",
            "pred": "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
            "correct": 0
        },
        {
            "index": 501,
            "question": "What is the ship id and name that caused most total injuries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct kinds of injuries happened after season 2010? */\nSELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What is the ship id and name that caused most total injuries? */\nSELECT ",
            "response": "T2.id , T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1288,
                    "db_id": "game_injury",
                    "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
                    "question": "How many distinct kinds of injuries happened after season 2010?"
                }
            ],
            "example_quality": 0.6908321272559892,
            "example_similarity": 0.3991517303489294,
            "db_id": "battle_death",
            "pred": "SELECT T1.caused_by_ship_id, T2.name FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T1.caused_by_ship_id, T2.name ORDER BY SUM(T1.injured) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 502,
            "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? */\nSELECT ",
            "response": "name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6911634235306642,
            "example_similarity": 0.3984252981343313,
            "db_id": "battle_death",
            "pred": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
            "correct": 1
        },
        {
            "index": 503,
            "question": "How many different results are there for the battles?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many different positions are there? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many different results are there for the battles? */\nSELECT ",
            "response": "count(DISTINCT RESULT) FROM battle",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3378,
                    "db_id": "sports_competition",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "how many different positions are there?"
                }
            ],
            "example_quality": 0.6917774127482971,
            "example_similarity": 0.39902485022551554,
            "db_id": "battle_death",
            "pred": "SELECT count(DISTINCT result) FROM battle",
            "correct": 1
        },
        {
            "index": 504,
            "question": "How many battles did not lose any ship with tonnage '225'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: How many battles did not lose any ship with tonnage '225'? */\nSELECT ",
            "response": "count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage = '225' );",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.6921801100287673,
            "example_similarity": 0.3992913353110469,
            "db_id": "battle_death",
            "pred": "SELECT count(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
            "correct": 1
        },
        {
            "index": 505,
            "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' */\nSELECT ",
            "response": "T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name , T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6916581126397429,
            "example_similarity": 0.3985006593995398,
            "db_id": "battle_death",
            "pred": "SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';",
            "correct": 1
        },
        {
            "index": 506,
            "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. */\nSELECT ",
            "response": "name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6916087224303099,
            "example_similarity": 0.39822866118969374,
            "db_id": "battle_death",
            "pred": "SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT s.lost_in_battle FROM ship s WHERE s.location = 'English Channel')",
            "correct": 1
        },
        {
            "index": 507,
            "question": "What are the notes of the death events which has substring 'East'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"battle\" (\n\"id\" int,\n\"name\" text,\n\"date\" text,\n\"bulgarian_commander\" text,\n\"latin_commander\" text,\n\"result\" text,\nprimary key(\"id\")\n)\n\nCREATE TABLE \"ship\" (\n\"lost_in_battle\" int,\n\"id\" int,\n\"name\" text,\n\"tonnage\" text,\n\"ship_type\" text,\n\"location\" text,\n\"disposition_of_ship\" text,\nprimary key(\"id\"),\nforeign key (`lost_in_battle`) references `battle`(\"id\") \n)\n\nCREATE TABLE \"death\" (\n\"caused_by_ship_id\" int,\n\"id\" int,\n\"note\" text,\n\"killed\" int,\n\"injured\" int,\nprimary key(\"id\"),\nforeign key (\"caused_by_ship_id\") references `ship`(\"id\") \n)\n\n/* Answer the following: What are the notes of the death events which has substring 'East'? */\nSELECT ",
            "response": "note FROM death WHERE note LIKE '%East%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.690984247632617,
            "example_similarity": 0.39780181606272824,
            "db_id": "battle_death",
            "pred": "SELECT note FROM death WHERE note LIKE '%East%'",
            "correct": 1
        },
        {
            "index": 508,
            "question": "what are all the addresses including line 1 and line 2?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: what are all the addresses including line 1 and line 2? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.691198845570348,
            "example_similarity": 0.3980029935901638,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT line_1, line_2 FROM Addresses",
            "correct": 1
        },
        {
            "index": 509,
            "question": "What is the first and second line for all addresses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first and second line for all addresses? */\nSELECT ",
            "response": "line_1 , line_2 FROM addresses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6914126002941784,
            "example_similarity": 0.3980396609243023,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT line_1, line_2 FROM Addresses",
            "correct": 1
        },
        {
            "index": 510,
            "question": "How many courses in total are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses in total are listed? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6912006801628826,
            "example_similarity": 0.3980761844649736,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Courses;",
            "correct": 1
        },
        {
            "index": 511,
            "question": "How many courses are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many courses are there? */\nSELECT ",
            "response": "count(*) FROM Courses",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6918049841155971,
            "example_similarity": 0.3992541175677819,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(*) FROM Courses;",
            "correct": 1
        },
        {
            "index": 512,
            "question": "How is the math course described?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of the document whose description starts with the word 'Initial'? */\nSELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How is the math course described? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4366,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'",
                    "question": "What is the type of the document whose description starts with the word 'Initial'?"
                }
            ],
            "example_quality": 0.6919186462559963,
            "example_similarity": 0.3989883046325652,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_description FROM Courses WHERE course_name = 'Math'",
            "correct": 0
        },
        {
            "index": 513,
            "question": "What are the descriptions for all the math courses?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions for each color? */\nSELECT color_description FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the descriptions for all the math courses? */\nSELECT ",
            "response": "course_description FROM Courses WHERE course_name = 'math'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5526,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT color_description FROM ref_colors",
                    "question": "What are the descriptions for each color?"
                }
            ],
            "example_quality": 0.6918694221242433,
            "example_similarity": 0.39945102457746007,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
            "correct": 1
        },
        {
            "index": 514,
            "question": "What is the zip code of the address in the city Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and description for location code x? */\nSELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code of the address in the city Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4185,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
                    "question": "What are the name and description for location code x?"
                }
            ],
            "example_quality": 0.6924688979566864,
            "example_similarity": 0.39928825891424363,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\"",
            "correct": 1
        },
        {
            "index": 515,
            "question": "What is the zip code for Port Chelsea?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the zip code for Port Chelsea? */\nSELECT ",
            "response": "zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6917715473457672,
            "example_similarity": 0.3992283225913647,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'",
            "correct": 1
        },
        {
            "index": 516,
            "question": "Which department offers the most number of degrees? List department name and id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum number that a certain service is provided? List the service id, details and number. */\nSELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which department offers the most number of degrees? List department name and id. */\nSELECT ",
            "response": "T2.department_name , T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4847,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.service_id ,  T1.service_details ,  count(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the maximum number that a certain service is provided? List the service id, details and number."
                }
            ],
            "example_quality": 0.691907464428246,
            "example_similarity": 0.3991006191238104,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.department_id, T1.department_name, count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 517,
            "question": "What is the name and id of the department with the most number of degrees ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the order which has the most items? */\nSELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name and id of the department with the most number of degrees ? */\nSELECT ",
            "response": "t2.department_name , t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6930,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the order which has the most items?"
                }
            ],
            "example_quality": 0.690998982335004,
            "example_similarity": 0.3993466832830945,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.department_id, T1.department_name FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 518,
            "question": "How many departments offer any degree?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many departments offer any degree? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6907045085051325,
            "example_similarity": 0.39945324461757775,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 519,
            "question": "How many different departments offer degrees?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different departments offer degrees? */\nSELECT ",
            "response": "count(DISTINCT department_id) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6904111694491718,
            "example_similarity": 0.3995593953110804,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 520,
            "question": "How many different degree names are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degree names are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6901189586203494,
            "example_similarity": 0.3995922939098412,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 521,
            "question": "How many different degrees are offered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different product types are there? */\nSELECT count(DISTINCT product_type_code) FROM products_for_hire\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different degrees are offered? */\nSELECT ",
            "response": "count(DISTINCT degree_summary_name) FROM Degree_Programs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1969,
                    "db_id": "products_for_hire",
                    "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire",
                    "question": "How many different product types are there?"
                }
            ],
            "example_quality": 0.6907137398897922,
            "example_similarity": 0.4001049126675318,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT count(DISTINCT degree_program_id) FROM Degree_Programs",
            "correct": 1
        },
        {
            "index": 522,
            "question": "How many degrees does the engineering department offer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: HOw many engineers are older than 30? */\nSELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department offer? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4420,
                    "db_id": "network_2",
                    "query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
                    "question": "HOw many engineers are older than 30?"
                }
            ],
            "example_quality": 0.6913062423037964,
            "example_similarity": 0.4001366401656144,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')",
            "correct": 1
        },
        {
            "index": 523,
            "question": "How many degrees does the engineering department have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: HOw many engineers are older than 30? */\nSELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many degrees does the engineering department have? */\nSELECT ",
            "response": "count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4420,
                    "db_id": "network_2",
                    "query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
                    "question": "HOw many engineers are older than 30?"
                }
            ],
            "example_quality": 0.6918964789341907,
            "example_similarity": 0.40016824633483256,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')",
            "correct": 1
        },
        {
            "index": 524,
            "question": "What are the names and descriptions of all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes, names, and descriptions of the different document types? */\nSELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions of all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6427,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
                    "question": "What are the codes, names, and descriptions of the different document types?"
                }
            ],
            "example_quality": 0.6924844627530186,
            "example_similarity": 0.40059731456701797,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name, section_description FROM Sections",
            "correct": 1
        },
        {
            "index": 525,
            "question": "What are the names and descriptions for all the sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions for each color? */\nSELECT color_description FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and descriptions for all the sections? */\nSELECT ",
            "response": "section_name , section_description FROM Sections",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5526,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT color_description FROM ref_colors",
                    "question": "What are the descriptions for each color?"
                }
            ],
            "example_quality": 0.6930702066334891,
            "example_similarity": 0.40094538317419187,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name, section_description FROM Sections",
            "correct": 1
        },
        {
            "index": 526,
            "question": "What are the names and id of courses having at most 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and id of courses having at most 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6922957657191939,
            "example_similarity": 0.4010280810093064,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2 )",
            "correct": 1
        },
        {
            "index": 527,
            "question": "What are the names and ids of every course with less than 2 sections?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names and ids of every course with less than 2 sections? */\nSELECT ",
            "response": "T1.course_name , T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(*) <= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.6915242638596021,
            "example_similarity": 0.40121588351213505,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2 )",
            "correct": 0
        },
        {
            "index": 528,
            "question": "List the section_name in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of enzymes in descending lexicographical order. */\nSELECT name FROM enzyme ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List the section_name in reversed lexicographical order. */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 936,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT name FROM enzyme ORDER BY name DESC",
                    "question": "List the name of enzymes in descending lexicographical order."
                }
            ],
            "example_quality": 0.6921084982083529,
            "example_similarity": 0.40140297464184693,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "correct": 1
        },
        {
            "index": 529,
            "question": "What are the names of the sections in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of all the races in reverse alphabetical order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of the sections in reverse alphabetical order? */\nSELECT ",
            "response": "section_name FROM Sections ORDER BY section_name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2203,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "What are the different names of all the races in reverse alphabetical order?"
                }
            ],
            "example_quality": 0.6924804838240061,
            "example_similarity": 0.4020304422386173,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_name FROM Sections ORDER BY section_name DESC",
            "correct": 1
        },
        {
            "index": 530,
            "question": "What is the semester which most student registered in? Show both the name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the the full names and ids for all customers, and how many accounts does each have? */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the semester which most student registered in? Show both the name and the id. */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1571,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
                    "question": "What are the the full names and ids for all customers, and how many accounts does each have?"
                }
            ],
            "example_quality": 0.6922221349027448,
            "example_similarity": 0.40169794414309706,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_id, T2.semester_name, count(*) FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 531,
            "question": "For each semester, what is the name and id of the one with the most students registered?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the customer id, first and last name with most number of accounts. */\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: For each semester, what is the name and id of the one with the most students registered? */\nSELECT ",
            "response": "T1.semester_name , T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1568,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the customer id, first and last name with most number of accounts."
                }
            ],
            "example_quality": 0.6928017542343781,
            "example_similarity": 0.40180460212650615,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 532,
            "question": "What is the description of the department whose name has the substring the computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which accelerator name contains substring \"Opera\"? */\nSELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description of the department whose name has the substring the computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1842,
                    "db_id": "browser_web",
                    "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"",
                    "question": "Which accelerator name contains substring \"Opera\"?"
                }
            ],
            "example_quality": 0.6933791945459675,
            "example_similarity": 0.40142527016762175,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
            "correct": 1
        },
        {
            "index": 533,
            "question": "What is the department description for the one whose name has the word computer?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the department description for the one whose name has the word computer? */\nSELECT ",
            "response": "department_description FROM Departments WHERE department_name LIKE '%computer%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6934854249501965,
            "example_similarity": 0.4011224084975136,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.department_description FROM Departments AS T1 WHERE T1.department_name LIKE \"%computer%\"",
            "correct": 1
        },
        {
            "index": 534,
            "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the student IDs and middle names of the students enrolled in at most two courses? */\nSELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3842,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
                    "question": "What are the student IDs and middle names of the students enrolled in at most two courses?"
                }
            ],
            "example_quality": 0.6938097343916132,
            "example_similarity": 0.40118272858147586,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_id, T2.first_name, T2.middle_name, T2.last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(DISTINCT T1.degree_program_id) = 2;",
            "correct": 1
        },
        {
            "index": 535,
            "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of the students who either registered or attended a course? */\nSELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? */\nSELECT ",
            "response": "T1.first_name , T1.middle_name , T1.last_name , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING count(*) = 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 101,
                    "db_id": "student_assessment",
                    "query": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
                    "question": "What are the ids of the students who either registered or attended a course?"
                }
            ],
            "example_quality": 0.6931725969001721,
            "example_similarity": 0.40098260693376997,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;",
            "correct": 1
        },
        {
            "index": 536,
            "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the full names and gradepoints for all enrollments? */\nSELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4691,
                    "db_id": "college_3",
                    "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
                    "question": "What are the full names and gradepoints for all enrollments?"
                }
            ],
            "example_quality": 0.6929454625242921,
            "example_similarity": 0.4003631720649408,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "correct": 1
        },
        {
            "index": 537,
            "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the full names and gradepoints for all enrollments? */\nSELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.middle_name , T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4691,
                    "db_id": "college_3",
                    "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
                    "question": "What are the full names and gradepoints for all enrollments?"
                }
            ],
            "example_quality": 0.6927191740864975,
            "example_similarity": 0.4001034074339398,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'",
            "correct": 0
        },
        {
            "index": 538,
            "question": "Find the kind of program which most number of students are enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the kind of program which most number of students are enrolled in? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6920876164701111,
            "example_similarity": 0.3996877330488122,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students_enrolled FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 539,
            "question": "What is the degree summary name that has the most number of students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the degree summary name that has the most number of students enrolled? */\nSELECT ",
            "response": "T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.691458402295715,
            "example_similarity": 0.3995646265558336,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT Degree_Programs.degree_summary_name, COUNT(Student_Enrolment.student_id) AS num_students_enrolled FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_summary_name ORDER BY num_students_enrolled DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 540,
            "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and login name of the student with the most course enrollments */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the program which most number of students are enrolled in. List both the id and the summary. */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3837,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Find the student ID and login name of the student with the most course enrollments"
                }
            ],
            "example_quality": 0.692029775624797,
            "example_similarity": 0.3993733889072048,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.degree_program_id, T2.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 541,
            "question": "What is the program id and the summary of the degree that has the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the program id and the summary of the degree that has the most students enrolled? */\nSELECT ",
            "response": "T1.degree_program_id , T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6914029944803344,
            "example_similarity": 0.398803214604066,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 542,
            "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and personal name of the student with at least two enrollments. */\nSELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3839,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
                    "question": "Find the student ID and personal name of the student with at least two enrollments."
                }
            ],
            "example_quality": 0.6910129520550938,
            "example_similarity": 0.3986014996033399,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_id, T2.first_name, T2.middle_name, T2.last_name, COUNT(*) AS num_enrollments FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T2.first_name, T2.middle_name, T2.last_name ORDER BY num_enrollments DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 543,
            "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the student ID and login name of the student who are enrolled in the most courses? */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? */\nSELECT ",
            "response": "T1.student_id , T1.first_name , T1.middle_name , T1.last_name , count(*) , T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3838,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What are the student ID and login name of the student who are enrolled in the most courses?"
                }
            ],
            "example_quality": 0.6910214957417569,
            "example_similarity": 0.39873407186059734,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollments DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 544,
            "question": "Which semesters do not have any student enrolled? List the semester name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which students not enrolled in any course? Find their personal names. */\nSELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which semesters do not have any student enrolled? List the semester name. */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3844,
                    "db_id": "e_learning",
                    "query": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id",
                    "question": "Which students not enrolled in any course? Find their personal names."
                }
            ],
            "example_quality": 0.6907316277961532,
            "example_similarity": 0.39908241969562863,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_name FROM Semesters EXCEPT SELECT T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id",
            "correct": 1
        },
        {
            "index": 545,
            "question": "What is the name of the semester with no students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students that are not enrolled in courses? */\nSELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the semester with no students enrolled? */\nSELECT ",
            "response": "semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4709,
                    "db_id": "college_3",
                    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
                    "question": "What are the first names of all students that are not enrolled in courses?"
                }
            ],
            "example_quality": 0.6912990926992795,
            "example_similarity": 0.3988744047708922,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
            "correct": 1
        },
        {
            "index": 546,
            "question": "What are all the course names of the courses which ever have students enrolled in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are all the course names of the courses which ever have students enrolled in? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.6909487280606361,
            "example_similarity": 0.3987222345674367,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT DISTINCT course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id;",
            "correct": 0
        },
        {
            "index": 547,
            "question": "What are the names of all courses that have some students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the first names of all students that are not enrolled in courses? */\nSELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the names of all courses that have some students enrolled? */\nSELECT ",
            "response": "DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4709,
                    "db_id": "college_3",
                    "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
                    "question": "What are the first names of all students that are not enrolled in courses?"
                }
            ],
            "example_quality": 0.6901730752975758,
            "example_similarity": 0.39885927657101783,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections WHERE section_id IN (SELECT section_id FROM Student_Enrolment_Courses))",
            "correct": 0
        },
        {
            "index": 548,
            "question": "What's the name of the course with most number of enrollments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the student ID and login name of the student who are enrolled in the most courses? */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What's the name of the course with most number of enrollments? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3838,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What are the student ID and login name of the student who are enrolled in the most courses?"
                }
            ],
            "example_quality": 0.6907384528973977,
            "example_similarity": 0.3986423800809248,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_name ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 549,
            "question": "What is the name of the course with the most students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the student ID and login name of the student who are enrolled in the most courses? */\nSELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the name of the course with the most students enrolled? */\nSELECT ",
            "response": "T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3838,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "What are the student ID and login name of the student who are enrolled in the most courses?"
                }
            ],
            "example_quality": 0.6913017708338324,
            "example_similarity": 0.3987442071746671,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 550,
            "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of customers who are not living in the state of California. */\nSELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2849,
                    "db_id": "customer_deliveries",
                    "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names of customers who are not living in the state of California."
                }
            ],
            "example_quality": 0.691711525189892,
            "example_similarity": 0.39879843848629754,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL;",
            "correct": 0
        },
        {
            "index": 551,
            "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the members that have never registered at any branch? */\nSELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? */\nSELECT ",
            "response": "T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5426,
                    "db_id": "shop_membership",
                    "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
                    "question": "What are the names of the members that have never registered at any branch?"
                }
            ],
            "example_quality": 0.6915904516414529,
            "example_similarity": 0.3989458097413134,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
            "correct": 0
        },
        {
            "index": 552,
            "question": "Show the date and id of the transcript with at least 2 course results.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location codes with at least 3 documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date and id of the transcript with at least 2 course results. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4231,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
                    "question": "Show the location codes with at least 3 documents."
                }
            ],
            "example_quality": 0.6921491645913779,
            "example_similarity": 0.3994308112937144,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_id, transcript_date FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) >= 2",
            "correct": 0
        },
        {
            "index": 553,
            "question": "What is the date and id of the transcript with at least 2 courses listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names for each of the documents? */\nSELECT document_id ,  document_name FROM Documents\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with at least 2 courses listed? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6405,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_id ,  document_name FROM Documents",
                    "question": "What are the ids and names for each of the documents?"
                }
            ],
            "example_quality": 0.691414200976772,
            "example_similarity": 0.39931128601711335,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN ( SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(student_course_id) >= 2 )",
            "correct": 1
        },
        {
            "index": 554,
            "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the phone numbers? */\nSELECT customer_phone FROM available_policies\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the phone number of the man with the first name Timmothy and the last name Ward? */\nSELECT ",
            "response": "cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 893,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies",
                    "question": "What are all the phone numbers?"
                }
            ],
            "example_quality": 0.691369530337223,
            "example_similarity": 0.39891869918642936,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "correct": 1
        },
        {
            "index": 555,
            "question": "What is the mobile phone number of the student named Timmothy Ward ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the cell phone number of the student whose address has the lowest monthly rental? */\nSELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the mobile phone number of the student named Timmothy Ward ? */\nSELECT ",
            "response": "cell_mobile_number from students where first_name = 'timmothy' and last_name = 'ward'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3118,
                    "db_id": "behavior_monitoring",
                    "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1",
                    "question": "What is the cell phone number of the student whose address has the lowest monthly rental?"
                }
            ],
            "example_quality": 0.6902739696219007,
            "example_similarity": 0.3992430751670322,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'",
            "correct": 0
        },
        {
            "index": 556,
            "question": "Who is the first student to register? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the members and branches at which they are registered sorted by year of registration? */\nSELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the first student to register? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5422,
                    "db_id": "shop_membership",
                    "query": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
                    "question": "What are the names of the members and branches at which they are registered sorted by year of registration?"
                }
            ],
            "example_quality": 0.6904713185974009,
            "example_similarity": 0.39906458042752324,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;",
            "correct": 1
        },
        {
            "index": 557,
            "question": "What is the first, middle, and last name of the first student to register?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'? */\nSELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the first student to register? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2653,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'",
                    "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?"
                }
            ],
            "example_quality": 0.6900477533118499,
            "example_similarity": 0.3990910230182247,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 WHERE T1.date_first_registered = (SELECT MIN(date_first_registered) FROM Students)",
            "correct": 1
        },
        {
            "index": 558,
            "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the students who took classes in 2009 or 2010? */\nSELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Who is the earliest graduate of the school? List the first name, middle name and last name. */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1370,
                    "db_id": "college_2",
                    "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
                    "question": "What are the names of the students who took classes in 2009 or 2010?"
                }
            ],
            "example_quality": 0.6895578230490448,
            "example_similarity": 0.39919719203312637,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Transcript_Contents AS T3 ON T2.student_enrolment_id = T3.student_course_id JOIN Transcripts AS T4 ON T3.transcript_id = T4.transcript_id ORDER BY T4.transcript_date ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 559,
            "question": "What is the first, middle, and last name of the earliest school graduate?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first, last name, gpa of the youngest one among students whose GPA is above 3? */\nSELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first, middle, and last name of the earliest school graduate? */\nSELECT ",
            "response": "first_name , middle_name , last_name FROM Students ORDER BY date_left ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3266,
                    "db_id": "college_1",
                    "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
                    "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?"
                }
            ],
            "example_quality": 0.6895627423142661,
            "example_similarity": 0.39914562347916793,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id JOIN Courses c ON sec.course_id = c.course_id JOIN Sections sec2 ON c.course_id = sec2.course_id JOIN Semesters sem ON se.semester_id = sem.semester_id WHERE sec2.section_name = 'Graduation' ORDER BY sem.semester_name ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 560,
            "question": "Whose permanent address is different from his or her current address? List his or her first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that are not perpetrators. */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Whose permanent address is different from his or her current address? List his or her first name. */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2320,
                    "db_id": "perpetrator",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
                    "question": "List the names of people that are not perpetrators."
                }
            ],
            "example_quality": 0.689096686396868,
            "example_similarity": 0.39880488724676466,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT s.first_name FROM Students s JOIN Addresses ca ON s.current_address_id = ca.address_id JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE ca.line_1 != pa.line_1 OR ca.line_2 != pa.line_2 OR ca.line_3 != pa.line_3 OR ca.city != pa.city OR ca.zip_postcode != pa.zip_postcode OR ca.state_province_county != pa.state_province_county OR ca.country != pa.country",
            "correct": 1
        },
        {
            "index": 561,
            "question": "What is the first name of the student whose permanent address is different from his or her current one?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the person who has exactly one friend. */\nSELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the first name of the student whose permanent address is different from his or her current one? */\nSELECT ",
            "response": "first_name FROM Students WHERE current_address_id != permanent_address_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4451,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
                    "question": "Find the person who has exactly one friend."
                }
            ],
            "example_quality": 0.688462527122245,
            "example_similarity": 0.398379210085897,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id",
            "correct": 1
        },
        {
            "index": 562,
            "question": "Which address holds the most number of students currently? List the address id and all lines.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Which address holds the most number of students currently? List the address id and all lines. */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2686,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Which parties have more than 20 hosts? Give me the host names for these parties."
                }
            ],
            "example_quality": 0.6877608458409934,
            "example_similarity": 0.3982862823920677,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 563,
            "question": "What is the id, line 1, and line 2 of the address with the most students?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the account with the most transactions? */\nSELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id, line 1, and line 2 of the address with the most students? */\nSELECT ",
            "response": "T1.address_id , T1.line_1 , T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1593,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the account with the most transactions?"
                }
            ],
            "example_quality": 0.6883154446938513,
            "example_similarity": 0.39870065657497417,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id IN ( SELECT current_address_id FROM Students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 564,
            "question": "On average, when were the transcripts printed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the most common publication date. */\nSELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: On average, when were the transcripts printed? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 228,
                    "db_id": "book_2",
                    "query": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common publication date."
                }
            ],
            "example_quality": 0.687720809466505,
            "example_similarity": 0.3982301471366025,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT AVG(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 565,
            "question": "What is the average transcript date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price for products? */\nSELECT avg(Product_Price) FROM Products\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the average transcript date? */\nSELECT ",
            "response": "avg(transcript_date) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4588,
                    "db_id": "solvency_ii",
                    "query": "SELECT avg(Product_Price) FROM Products",
                    "question": "What is the average price for products?"
                }
            ],
            "example_quality": 0.6882735159984228,
            "example_similarity": 0.3987052560207265,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT avg(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 566,
            "question": "When is the first transcript released? List the date and details.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct Famous release dates? */\nSELECT distinct(Famous_Release_date) FROM artist\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When is the first transcript released? List the date and details. */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6152,
                    "db_id": "music_4",
                    "query": "SELECT distinct(Famous_Release_date) FROM artist",
                    "question": "What are the distinct Famous release dates?"
                }
            ],
            "example_quality": 0.6876011110367513,
            "example_similarity": 0.3985529499146828,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MIN(transcript_date) AS first_transcript_date, other_details FROM Transcripts GROUP BY other_details ORDER BY first_transcript_date LIMIT 1",
            "correct": 1
        },
        {
            "index": 567,
            "question": "What is the earliest date of a transcript release, and what details can you tell me?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct Famous release dates? */\nSELECT distinct(Famous_Release_date) FROM artist\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the earliest date of a transcript release, and what details can you tell me? */\nSELECT ",
            "response": "transcript_date , other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6152,
                    "db_id": "music_4",
                    "query": "SELECT distinct(Famous_Release_date) FROM artist",
                    "question": "What are the distinct Famous release dates?"
                }
            ],
            "example_quality": 0.6869310778738862,
            "example_similarity": 0.398269955713943,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MIN(transcript_date), other_details FROM Transcripts",
            "correct": 1
        },
        {
            "index": 568,
            "question": "How many transcripts are released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many papers are there ? */\nSELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are released? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7696,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
                    "question": "How many papers are there ?"
                }
            ],
            "example_quality": 0.6870910192469565,
            "example_similarity": 0.39882632148607644,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(transcript_id) FROM Transcripts;",
            "correct": 1
        },
        {
            "index": 569,
            "question": "How many transcripts are listed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products are there for each manufacturer? */\nSELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many transcripts are listed? */\nSELECT ",
            "response": "count(*) FROM Transcripts",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5322,
                    "db_id": "manufactory_1",
                    "query": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "How many products are there for each manufacturer?"
                }
            ],
            "example_quality": 0.6869086683051048,
            "example_similarity": 0.3990041311143962,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(*) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 570,
            "question": "What is the last transcript release date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the last transcript release date? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.686341523910949,
            "example_similarity": 0.399005878252792,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MAX(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 571,
            "question": "When was the last transcript released?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct Famous release dates? */\nSELECT distinct(Famous_Release_date) FROM artist\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: When was the last transcript released? */\nSELECT ",
            "response": "transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6152,
                    "db_id": "music_4",
                    "query": "SELECT distinct(Famous_Release_date) FROM artist",
                    "question": "What are the distinct Famous release dates?"
                }
            ],
            "example_quality": 0.6856783904324576,
            "example_similarity": 0.39894393514488224,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT MAX(transcript_date) FROM Transcripts",
            "correct": 1
        },
        {
            "index": 572,
            "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and middle name for all the students with at most two enrollments. */\nSELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3841,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
                    "question": "Find the student ID and middle name for all the students with at most two enrollments."
                }
            ],
            "example_quality": 0.6853917833345595,
            "example_similarity": 0.3986289107827409,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.student_course_id, COUNT(T2.transcript_id) AS enrollment_count FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY enrollment_count DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 573,
            "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum enrollment across all schools? */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? */\nSELECT ",
            "response": "count(*) , student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1018,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "What is the maximum enrollment across all schools?"
                }
            ],
            "example_quality": 0.6846716009425747,
            "example_similarity": 0.3984030850557741,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT course_id, COUNT(course_id) AS course_count FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY course_count DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 574,
            "question": "Show the date of the transcript which shows the least number of results, also list the id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location name and code with the least documents. */\nSELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Show the date of the transcript which shows the least number of results, also list the id. */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4233,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
                    "question": "Show the location name and code with the least documents."
                }
            ],
            "example_quality": 0.685220953554173,
            "example_similarity": 0.39823922571959147,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 575,
            "question": "What is the date and id of the transcript with the least number of results?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the project with least number of documents? */\nSELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the date and id of the transcript with the least number of results? */\nSELECT ",
            "response": "T2.transcript_date , T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6414,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1",
                    "question": "What is the id of the project with least number of documents?"
                }
            ],
            "example_quality": 0.6857683953740787,
            "example_similarity": 0.39895967924007913,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT transcript_id, transcript_date FROM Transcript_Contents GROUP BY transcript_id ORDER BY count(*) ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 576,
            "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the student ID and personal name of the student with at least two enrollments. */\nSELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the semester when both Master students and Bachelor students got enrolled in. */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3839,
                    "db_id": "e_learning",
                    "query": "SELECT T1.student_id ,  T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  >=  2",
                    "question": "Find the student ID and personal name of the student with at least two enrollments."
                }
            ],
            "example_quality": 0.6851302242331201,
            "example_similarity": 0.39901108852711276,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name IN ('Master', 'Bachelor') GROUP BY T1.semester_id HAVING COUNT(DISTINCT T2.degree_summary_name) = 2",
            "correct": 0
        },
        {
            "index": 577,
            "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of instructors who didnt' teach? */\nSELECT id FROM instructor EXCEPT SELECT id FROM teaches\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the id of the semester that had both Masters and Bachelors students enrolled? */\nSELECT ",
            "response": "DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1444,
                    "db_id": "college_2",
                    "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
                    "question": "What are the ids of instructors who didnt' teach?"
                }
            ],
            "example_quality": 0.6848093746243972,
            "example_similarity": 0.3988972622616123,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Masters') AND semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors'))",
            "correct": 0
        },
        {
            "index": 578,
            "question": "How many different addresses do the students currently live?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many members are there? */\nSELECT count(*) FROM member\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: How many different addresses do the students currently live? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4485,
                    "db_id": "decoration_competition",
                    "query": "SELECT count(*) FROM member",
                    "question": "How many members are there?"
                }
            ],
            "example_quality": 0.6851384241492685,
            "example_similarity": 0.39878382985862215,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT COUNT(DISTINCT current_address_id) FROM Students",
            "correct": 1
        },
        {
            "index": 579,
            "question": "What are the different addresses that have students living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different cities where people live? */\nSELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the different addresses that have students living there? */\nSELECT ",
            "response": "count(DISTINCT current_address_id) FROM Students",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 93,
                    "db_id": "student_assessment",
                    "query": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
                    "question": "What are the different cities where people live?"
                }
            ],
            "example_quality": 0.6850345581317395,
            "example_similarity": 0.39902506942443033,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id",
            "correct": 0
        },
        {
            "index": 580,
            "question": "List all the student details in reversed lexicographical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of all distinct races in reversed  lexicographic order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: List all the student details in reversed lexicographical order. */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2202,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "List the names of all distinct races in reversed  lexicographic order?"
                }
            ],
            "example_quality": 0.6853860311158035,
            "example_similarity": 0.39914169286795137,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC",
            "correct": 0
        },
        {
            "index": 581,
            "question": "What other details can you tell me about students in reverse alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different names of all the races in reverse alphabetical order? */\nSELECT DISTINCT name FROM races ORDER BY name DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What other details can you tell me about students in reverse alphabetical order? */\nSELECT ",
            "response": "other_student_details FROM Students ORDER BY other_student_details DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2203,
                    "db_id": "formula_1",
                    "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
                    "question": "What are the different names of all the races in reverse alphabetical order?"
                }
            ],
            "example_quality": 0.6857362942100773,
            "example_similarity": 0.3991431701607777,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT * FROM Students ORDER BY last_name DESC",
            "correct": 0
        },
        {
            "index": 582,
            "question": "Describe the section h.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which head's name has the substring 'Ha'? List the id and name. */\nSELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Describe the section h. */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 16,
                    "db_id": "department_management",
                    "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'",
                    "question": "Which head's name has the substring 'Ha'? List the id and name."
                }
            ],
            "example_quality": 0.685846712948548,
            "example_similarity": 0.3986382216860938,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_id, course_id, section_name, section_description, other_details FROM Sections WHERE section_name = 'h'",
            "correct": 0
        },
        {
            "index": 583,
            "question": "What is the description for the section named h?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and description for location code x? */\nSELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What is the description for the section named h? */\nSELECT ",
            "response": "section_description FROM Sections WHERE section_name = 'h'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4185,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
                    "question": "What are the name and description for location code x?"
                }
            ],
            "example_quality": 0.6863855693585849,
            "example_similarity": 0.39900999937682874,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT section_description FROM Sections WHERE section_name = \"h\"",
            "correct": 1
        },
        {
            "index": 584,
            "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names and phone numbers of customers living in California state. */\nSELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 . */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2851,
                    "db_id": "customer_deliveries",
                    "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'",
                    "question": "Find the names and phone numbers of customers living in California state."
                }
            ],
            "example_quality": 0.6853759608383618,
            "example_similarity": 0.3989194922651456,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT t1.first_name FROM Students AS t1 JOIN Addresses AS t2 ON t1.permanent_address_id = t2.address_id WHERE t2.country = 'Haiti' OR t1.cell_mobile_number = '09700166582'",
            "correct": 0
        },
        {
            "index": 585,
            "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct first names, last names, and phone numbers for customers with accounts? */\nSELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`line_1` VARCHAR(255),\n`line_2` VARCHAR(255),\n`line_3` VARCHAR(255),\n`city` VARCHAR(255),\n`zip_postcode` VARCHAR(20),\n`state_province_county` VARCHAR(255),\n`country` VARCHAR(255),\n`other_address_details` VARCHAR(255)\n)\n\nCREATE TABLE `Courses` (\n`course_id` INTEGER PRIMARY KEY,\n`course_name` VARCHAR(255),\n`course_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Departments` (\n`department_id` INTEGER PRIMARY KEY,\n`department_name` VARCHAR(255),\n`department_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Degree_Programs` (\n`degree_program_id` INTEGER PRIMARY KEY,\n`department_id` INTEGER NOT NULL,\n`degree_summary_name` VARCHAR(255),\n`degree_summary_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )\n)\n\nCREATE TABLE `Sections` (\n`section_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`section_name` VARCHAR(255),\n`section_description` VARCHAR(255),\n`other_details` VARCHAR(255),\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )\n)\n\nCREATE TABLE `Semesters` (\n`semester_id` INTEGER PRIMARY KEY,\n`semester_name` VARCHAR(255),\n`semester_description` VARCHAR(255),\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Students` (\n`student_id` INTEGER PRIMARY KEY,\n`current_address_id` INTEGER NOT NULL,\n`permanent_address_id` INTEGER NOT NULL,\n`first_name` VARCHAR(80),\n`middle_name` VARCHAR(40),\n`last_name` VARCHAR(40),\n`cell_mobile_number` VARCHAR(40),\n`email_address` VARCHAR(40),\n`ssn` VARCHAR(40),\n`date_first_registered` DATETIME,\n`date_left` DATETIME,\n`other_student_details` VARCHAR(255),\nFOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),\nFOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )\n)\n\nCREATE TABLE `Student_Enrolment` (\n`student_enrolment_id` INTEGER PRIMARY KEY,\n`degree_program_id` INTEGER NOT NULL,\n`semester_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`other_details` VARCHAR(255),\nFOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),\nFOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),\nFOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )\n)\n\nCREATE TABLE `Student_Enrolment_Courses` (\n`student_course_id` INTEGER PRIMARY KEY,\n`course_id` INTEGER NOT NULL,\n`student_enrolment_id` INTEGER NOT NULL,\nFOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),\nFOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )\n)\n\nCREATE TABLE `Transcripts` (\n`transcript_id` INTEGER PRIMARY KEY,\n`transcript_date` DATETIME,\n`other_details` VARCHAR(255)\n)\n\nCREATE TABLE `Transcript_Contents` (\n`student_course_id` INTEGER NOT NULL,\n`transcript_id` INTEGER NOT NULL,\nFOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),\nFOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )\n)\n\n/* Answer the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ? */\nSELECT ",
            "response": "t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.country = 'haiti' or t1.cell_mobile_number = '09700166582'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1563,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
                    "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?"
                }
            ],
            "example_quality": 0.6843146619805737,
            "example_similarity": 0.3986787145281608,
            "db_id": "student_transcripts_tracking",
            "pred": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'",
            "correct": 0
        },
        {
            "index": 586,
            "question": "List the title of all cartoons in alphabetical order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoons in alphabetical order. */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6848533741614942,
            "example_similarity": 0.3993945901316653,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon ORDER BY Title",
            "correct": 1
        },
        {
            "index": 587,
            "question": "What are the titles of the cartoons sorted alphabetically?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the teams of the players, sorted in ascending alphabetical order? */\nSELECT Team FROM player ORDER BY Team ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of the cartoons sorted alphabetically? */\nSELECT ",
            "response": "Title FROM Cartoon ORDER BY title",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4871,
                    "db_id": "school_player",
                    "query": "SELECT Team FROM player ORDER BY Team ASC",
                    "question": "What are the teams of the players, sorted in ascending alphabetical order?"
                }
            ],
            "example_quality": 0.6853902508665002,
            "example_similarity": 0.3997363369968584,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon ORDER BY Title ASC",
            "correct": 1
        },
        {
            "index": 588,
            "question": "List all cartoon directed by \"Ben Jones\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List all cartoon directed by \"Ben Jones\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6853584080362283,
            "example_similarity": 0.39944897797266177,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "correct": 1
        },
        {
            "index": 589,
            "question": "What are the names of all cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the names of all cartoons directed by Ben Jones? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6856500624489731,
            "example_similarity": 0.3988601538656578,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
            "correct": 1
        },
        {
            "index": 590,
            "question": "How many cartoons were written by \"Joseph Kuhr\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many parsing papers were published at ACL 2014 ? */\nSELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons were written by \"Joseph Kuhr\"? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7756,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
                    "question": "how many parsing papers were published at ACL 2014 ?"
                }
            ],
            "example_quality": 0.6860133674278731,
            "example_similarity": 0.3988620858082585,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "correct": 1
        },
        {
            "index": 591,
            "question": "What is the number of cartoones written by Joseph Kuhr?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of vocal types used in song \"Demon Kitty Rag\"? */\nSELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the number of cartoones written by Joseph Kuhr? */\nSELECT ",
            "response": "count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5227,
                    "db_id": "music_2",
                    "query": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
                    "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?"
                }
            ],
            "example_quality": 0.6865446476860323,
            "example_similarity": 0.3988105781379087,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\"",
            "correct": 1
        },
        {
            "index": 592,
            "question": "list all cartoon titles and their directors ordered by their air date",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all directors. */\nSELECT DISTINCT directed_by FROM film\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: list all cartoon titles and their directors ordered by their air date */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1948,
                    "db_id": "cinema",
                    "query": "SELECT DISTINCT directed_by FROM film",
                    "question": "Show all directors."
                }
            ],
            "example_quality": 0.6861356946400161,
            "example_similarity": 0.3985267245105968,
            "db_id": "tvshow",
            "pred": "SELECT c.Title, c.Directed_by FROM Cartoon c ORDER BY c.Original_air_date;",
            "correct": 1
        },
        {
            "index": 593,
            "question": "What is the name and directors of all the cartoons that are ordered by air date?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For all directors who have directed more than one movie, what movies have they directed and what are their names? */\nSELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name and directors of all the cartoons that are ordered by air date? */\nSELECT ",
            "response": "title , Directed_by FROM Cartoon ORDER BY Original_air_date",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2488,
                    "db_id": "movie_1",
                    "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title",
                    "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?"
                }
            ],
            "example_quality": 0.6861028632269076,
            "example_similarity": 0.3982898573801051,
            "db_id": "tvshow",
            "pred": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;",
            "correct": 1
        },
        {
            "index": 594,
            "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\". */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6860701423572776,
            "example_similarity": 0.39789991934860097,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
            "correct": 1
        },
        {
            "index": 595,
            "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? */\nSELECT ",
            "response": "Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6853372513617191,
            "example_similarity": 0.39751129203316915,
            "db_id": "tvshow",
            "pred": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
            "correct": 1
        },
        {
            "index": 596,
            "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6854657203391403,
            "example_similarity": 0.39737818888912324,
            "db_id": "tvshow",
            "pred": "SELECT Country, COUNT(*) AS Number_of_Channels FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 597,
            "question": "What is the country with the most number of TV Channels and how many does it have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the card type code with most number of cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the country with the most number of TV Channels and how many does it have? */\nSELECT ",
            "response": "Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 722,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the card type code with most number of cards?"
                }
            ],
            "example_quality": 0.6855937589347276,
            "example_similarity": 0.3976823248682387,
            "db_id": "tvshow",
            "pred": "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 598,
            "question": "List the number of different series names and contents in the TV Channel table.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of card types. */\nSELECT count(DISTINCT card_type_code) FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the number of different series names and contents in the TV Channel table. */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 732,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
                    "question": "Show the number of card types."
                }
            ],
            "example_quality": 0.6854028472499347,
            "example_similarity": 0.3976443945590945,
            "db_id": "tvshow",
            "pred": "SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel",
            "correct": 1
        },
        {
            "index": 599,
            "question": "How many different series and contents are listed in the TV Channel table?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many different source system code for the cmi cross references are there? */\nSELECT count(DISTINCT source_system_code) FROM CMI_cross_references\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many different series and contents are listed in the TV Channel table? */\nSELECT ",
            "response": "count(DISTINCT series_name) , count(DISTINCT content) FROM TV_Channel;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2654,
                    "db_id": "local_govt_mdm",
                    "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
                    "question": "How many different source system code for the cmi cross references are there?"
                }
            ],
            "example_quality": 0.6852125729998156,
            "example_similarity": 0.3977713391600415,
            "db_id": "tvshow",
            "pred": "SELECT count(DISTINCT series_name), count(DISTINCT Content) FROM TV_Channel",
            "correct": 1
        },
        {
            "index": 600,
            "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6849038853781493,
            "example_similarity": 0.397453214514315,
            "db_id": "tvshow",
            "pred": "SELECT * FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 0
        },
        {
            "index": 601,
            "question": "What is the content of the series Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the content of the series Sky Radio? */\nSELECT ",
            "response": "Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6841802516254402,
            "example_similarity": 0.39717587011540467,
            "db_id": "tvshow",
            "pred": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "correct": 1
        },
        {
            "index": 602,
            "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the Package Option of TV Channel with serial name \"Sky Radio\"? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.683874304363604,
            "example_similarity": 0.39684833544743886,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 603,
            "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the Package Options of the TV Channels whose series names are Sky Radio? */\nSELECT ",
            "response": "Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6841616485639012,
            "example_similarity": 0.39619021217140665,
            "db_id": "tvshow",
            "pred": "SELECT t1.Package_Option FROM TV_Channel AS t1 JOIN TV_series AS t2 ON t1.id = t2.Channel WHERE t2.series_name = \"Sky Radio\";",
            "correct": 0
        },
        {
            "index": 604,
            "question": "How many TV Channel using language English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many parsing papers in ACL 2014 */\nSELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channel using language English? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7754,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
                    "question": "how many parsing papers in ACL 2014"
                }
            ],
            "example_quality": 0.6845189968278682,
            "example_similarity": 0.3961363150711831,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(DISTINCT id) FROM TV_Channel WHERE Language = \"English\";",
            "correct": 1
        },
        {
            "index": 605,
            "question": "How many TV Channels use the English language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many TV Channels use the English language? */\nSELECT ",
            "response": "count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.6844047251230033,
            "example_similarity": 0.39617749906541083,
            "db_id": "tvshow",
            "pred": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
            "correct": 1
        },
        {
            "index": 606,
            "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the transaction type code that occurs the fewest times. */\nSELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the language used least number of TV Channel. List language and number of TV Channel. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5876,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1",
                    "question": "Show the transaction type code that occurs the fewest times."
                }
            ],
            "example_quality": 0.6845326129724781,
            "example_similarity": 0.39586752519456575,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 607,
            "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which contact channel codes were used less than 5 times? */\nSELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the languages used by the least number of TV Channels and how many channels use it? */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6097,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5",
                    "question": "Which contact channel codes were used less than 5 times?"
                }
            ],
            "example_quality": 0.6842644194262876,
            "example_similarity": 0.3956272162568482,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(DISTINCT id) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels LIMIT 1;",
            "correct": 1
        },
        {
            "index": 608,
            "question": "List each language and the number of TV Channels using it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes and the number of cards in each type. */\nSELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List each language and the number of TV Channels using it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 720,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
                    "question": "Show all card type codes and the number of cards in each type."
                }
            ],
            "example_quality": 0.6847837213680207,
            "example_similarity": 0.39584725663258674,
            "db_id": "tvshow",
            "pred": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
            "correct": 1
        },
        {
            "index": 609,
            "question": "For each language, list the number of TV Channels that use it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: For each language, list the number of TV Channels that use it. */\nSELECT ",
            "response": "LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.6853013178846578,
            "example_similarity": 0.3957446065122267,
            "db_id": "tvshow",
            "pred": "SELECT T1.Language, COUNT(*) FROM TV_Channel AS T1 GROUP BY T1.Language",
            "correct": 1
        },
        {
            "index": 610,
            "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6851146412511232,
            "example_similarity": 0.3953219613121784,
            "db_id": "tvshow",
            "pred": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"The Rise of the Blue Beetle!\"",
            "correct": 1
        },
        {
            "index": 611,
            "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the details of the car with id 1? */\nSELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6628,
                    "db_id": "driving_school",
                    "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;",
                    "question": "What are the details of the car with id 1?"
                }
            ],
            "example_quality": 0.68563000190374,
            "example_similarity": 0.3951155927490337,
            "db_id": "tvshow",
            "pred": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle\");",
            "correct": 0
        },
        {
            "index": 612,
            "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6854174619587267,
            "example_similarity": 0.39501464134475966,
            "db_id": "tvshow",
            "pred": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 613,
            "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all of the products whose name includes the substring \"Scanner\"? */\nSELECT product FROM product WHERE product LIKE \"%Scanner%\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4936,
                    "db_id": "store_product",
                    "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
                    "question": "What are all of the products whose name includes the substring \"Scanner\"?"
                }
            ],
            "example_quality": 0.6855228168331822,
            "example_similarity": 0.39503485792887494,
            "db_id": "tvshow",
            "pred": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 614,
            "question": "List the Episode of all TV series sorted by rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all TV series sorted by rating. */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6860349946559294,
            "example_similarity": 0.3952058109289908,
            "db_id": "tvshow",
            "pred": "SELECT Episode FROM TV_series ORDER BY Rating;",
            "correct": 1
        },
        {
            "index": 615,
            "question": "What are all of the episodes ordered by ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different region names, ordered by labels? */\nSELECT DISTINCT region_name FROM region ORDER BY Label\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are all of the episodes ordered by ratings? */\nSELECT ",
            "response": "Episode FROM TV_series ORDER BY rating",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2043,
                    "db_id": "party_people",
                    "query": "SELECT DISTINCT region_name FROM region ORDER BY Label",
                    "question": "What are the different region names, ordered by labels?"
                }
            ],
            "example_quality": 0.6863648383863896,
            "example_similarity": 0.39556382524517875,
            "db_id": "tvshow",
            "pred": "SELECT * FROM TV_series ORDER BY Rating",
            "correct": 0
        },
        {
            "index": 616,
            "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6858999604019961,
            "example_similarity": 0.39520815440587703,
            "db_id": "tvshow",
            "pred": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "correct": 1
        },
        {
            "index": 617,
            "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the top 3 highest support rates? */\nSELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? */\nSELECT ",
            "response": "Episode , Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2399,
                    "db_id": "candidate_poll",
                    "query": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
                    "question": "what are the top 3 highest support rates?"
                }
            ],
            "example_quality": 0.6864090366412149,
            "example_similarity": 0.3951348834911187,
            "db_id": "tvshow",
            "pred": "SELECT T1.series_name, T2.Episode, T2.Rating FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel ORDER BY T2.Rating DESC LIMIT 3;",
            "correct": 0
        },
        {
            "index": 618,
            "question": "What is minimum and maximum share of TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum product prices for each product type? */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is minimum and maximum share of TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4747,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "What are the maximum and minimum product prices for each product type?"
                }
            ],
            "example_quality": 0.686440546861765,
            "example_similarity": 0.39535850557824204,
            "db_id": "tvshow",
            "pred": "SELECT min(Share), max(Share) FROM TV_series",
            "correct": 1
        },
        {
            "index": 619,
            "question": "What is the maximum and minimum share for the TV series?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum product prices for each product type? */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the maximum and minimum share for the TV series? */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM TV_series;",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4747,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "What are the maximum and minimum product prices for each product type?"
                }
            ],
            "example_quality": 0.6864719552722326,
            "example_similarity": 0.39579680632313446,
            "db_id": "tvshow",
            "pred": "SELECT max(Share), min(Share) FROM TV_series",
            "correct": 1
        },
        {
            "index": 620,
            "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that have both one of the three most common types and one of three most common structures? */\nSELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the air date of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4515,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?"
                }
            ],
            "example_quality": 0.6856019340920022,
            "example_similarity": 0.3954810050226133,
            "db_id": "tvshow",
            "pred": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 621,
            "question": "When did the episode \"A Love of a Lifetime\" air?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by Luke S Zettlemoyer for each year */\nSELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: When did the episode \"A Love of a Lifetime\" air? */\nSELECT ",
            "response": "Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7744,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;",
                    "question": "keyphrases used by Luke S Zettlemoyer for each year"
                }
            ],
            "example_quality": 0.6852411233471495,
            "example_similarity": 0.39492084083999884,
            "db_id": "tvshow",
            "pred": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "correct": 1
        },
        {
            "index": 622,
            "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6845413787758517,
            "example_similarity": 0.39452707743028825,
            "db_id": "tvshow",
            "pred": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "correct": 1
        },
        {
            "index": 623,
            "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the weekly rank for the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6838438805755694,
            "example_similarity": 0.3941472502383329,
            "db_id": "tvshow",
            "pred": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
            "correct": 1
        },
        {
            "index": 624,
            "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that have both one of the three most common types and one of three most common structures? */\nSELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name. */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4515,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?"
                }
            ],
            "example_quality": 0.6829836481123545,
            "example_similarity": 0.3938208543092269,
            "db_id": "tvshow",
            "pred": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 625,
            "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that have both one of the three most common types and one of three most common structures? */\nSELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the name of the series that has the episode \"A Love of a Lifetime\"? */\nSELECT ",
            "response": "T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4515,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?"
                }
            ],
            "example_quality": 0.6821261683930218,
            "example_similarity": 0.39361427035409685,
            "db_id": "tvshow",
            "pred": "SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Episode = \"A Love of a Lifetime\"",
            "correct": 1
        },
        {
            "index": 626,
            "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\". */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6819239789156456,
            "example_similarity": 0.39349377122922097,
            "db_id": "tvshow",
            "pred": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"",
            "correct": 1
        },
        {
            "index": 627,
            "question": "What is the episode for the TV series named \"Sky Radio\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the episode for the TV series named \"Sky Radio\"? */\nSELECT ",
            "response": "T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6812351049460832,
            "example_similarity": 0.3931476417507618,
            "db_id": "tvshow",
            "pred": "SELECT Episode FROM TV_series WHERE series_name = \"Sky Radio\";",
            "correct": 0
        },
        {
            "index": 628,
            "question": "Find the number of cartoons directed by each of the listed directors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different directors. */\nSELECT COUNT (DISTINCT director) FROM movie\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the number of cartoons directed by each of the listed directors. */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6986,
                    "db_id": "culture_company",
                    "query": "SELECT COUNT (DISTINCT director) FROM movie",
                    "question": "Count the number of different directors."
                }
            ],
            "example_quality": 0.6810077585026364,
            "example_similarity": 0.39305239603672126,
            "db_id": "tvshow",
            "pred": "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;",
            "correct": 1
        },
        {
            "index": 629,
            "question": "How many cartoons did each director create?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who are all the directors? */\nSELECT DISTINCT directed_by FROM film\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: How many cartoons did each director create? */\nSELECT ",
            "response": "count(*) , Directed_by FROM cartoon GROUP BY Directed_by",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1949,
                    "db_id": "cinema",
                    "query": "SELECT DISTINCT directed_by FROM film",
                    "question": "Who are all the directors?"
                }
            ],
            "example_quality": 0.6804142522215391,
            "example_similarity": 0.3925498057042672,
            "db_id": "tvshow",
            "pred": "SELECT Directed_by, COUNT(*) as num_cartoons FROM Cartoon GROUP BY Directed_by",
            "correct": 1
        },
        {
            "index": 630,
            "question": "Find the production code and channel of the most recently aired cartoon .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of the program that was launched most recently. */\nSELECT name FROM program ORDER BY launch DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the production code and channel of the most recently aired cartoon . */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3741,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                    "question": "find the name of the program that was launched most recently."
                }
            ],
            "example_quality": 0.6798944536886009,
            "example_similarity": 0.39298491183277895,
            "db_id": "tvshow",
            "pred": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 631,
            "question": "What is the produdction code and channel of the most recent cartoon ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and type codes of products? */\nSELECT Product_Name ,  Product_Type_Code FROM Products\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the produdction code and channel of the most recent cartoon ? */\nSELECT ",
            "response": "production_code , channel from cartoon order by original_air_date desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4586,
                    "db_id": "solvency_ii",
                    "query": "SELECT Product_Name ,  Product_Type_Code FROM Products",
                    "question": "What are the names and type codes of products?"
                }
            ],
            "example_quality": 0.6790282712474675,
            "example_similarity": 0.3929214510794315,
            "db_id": "tvshow",
            "pred": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 632,
            "question": "Find the package choice and series name of the TV channel that has high definition TV.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types. */\nSELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the package choice and series name of the TV channel that has high definition TV. */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1052,
                    "db_id": "phone_1",
                    "query": "SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode  =  t2.screen_mode WHERE t2.Accreditation_type  =  'Full'",
                    "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types."
                }
            ],
            "example_quality": 0.6786841418017253,
            "example_similarity": 0.39303436921741614,
            "db_id": "tvshow",
            "pred": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes'",
            "correct": 0
        },
        {
            "index": 633,
            "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name and country of origin for each artist who has released a song with a resolution higher than 900? */\nSELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? */\nSELECT ",
            "response": "package_option , series_name FROM TV_Channel WHERE hight_definition_TV = \"yes\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3609,
                    "db_id": "music_1",
                    "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
                    "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?"
                }
            ],
            "example_quality": 0.6782043880232076,
            "example_similarity": 0.39300587890269667,
            "db_id": "tvshow",
            "pred": "SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'",
            "correct": 0
        },
        {
            "index": 634,
            "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the songs without a lead vocal? */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are playing some cartoon written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5234,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "What are the names of the songs without a lead vocal?"
                }
            ],
            "example_quality": 0.6779233085468304,
            "example_similarity": 0.392672775279535,
            "db_id": "tvshow",
            "pred": "SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = \"Todd Casey\")",
            "correct": 1
        },
        {
            "index": 635,
            "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that have cartoons on TV that were written by Todd Casey? */\nSELECT ",
            "response": "T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6782055440564303,
            "example_similarity": 0.39212286265841695,
            "db_id": "tvshow",
            "pred": "SELECT DISTINCT t1.Country FROM TV_Channel AS t1 JOIN Cartoon AS t2 ON t1.id = t2.Channel WHERE t2.Written_by = \"Todd Casey\";",
            "correct": 1
        },
        {
            "index": 636,
            "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: which countries' tv channels are not playing any cartoon written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5233,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "Find all the songs that do not have a lead vocal."
                }
            ],
            "example_quality": 0.6785804829284591,
            "example_similarity": 0.3917028581573817,
            "db_id": "tvshow",
            "pred": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = \"Todd Casey\")",
            "correct": 0
        },
        {
            "index": 637,
            "question": "What are the countries that are not playing cartoons written by Todd Casey?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the countries that are not playing cartoons written by Todd Casey? */\nSELECT ",
            "response": "country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5233,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "Find all the songs that do not have a lead vocal."
                }
            ],
            "example_quality": 0.6789542445983777,
            "example_similarity": 0.3914617158966876,
            "db_id": "tvshow",
            "pred": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = \"Todd Casey\")",
            "correct": 0
        },
        {
            "index": 638,
            "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6783938595307134,
            "example_similarity": 0.3910289931686123,
            "db_id": "tvshow",
            "pred": "SELECT t1.series_name, t1.Country FROM TV_Channel AS t1 JOIN Cartoon AS t2 ON t1.id = t2.Channel WHERE t2.Directed_by IN ('Ben Jones', 'Michael Chang');",
            "correct": 0
        },
        {
            "index": 639,
            "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the characters and duration of actors? */\nSELECT Character ,  Duration FROM actor\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? */\nSELECT ",
            "response": "T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name , T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 239,
                    "db_id": "musical",
                    "query": "SELECT Character ,  Duration FROM actor",
                    "question": "What are the characters and duration of actors?"
                }
            ],
            "example_quality": 0.6778137319065531,
            "example_similarity": 0.39095876602148427,
            "db_id": "tvshow",
            "pred": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang'",
            "correct": 0
        },
        {
            "index": 640,
            "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the names of programs whose origin is not in Beijing. */\nSELECT name FROM program WHERE origin != 'Beijing'\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the pixel aspect ratio and nation of the tv channels that do not use English. */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3761,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program WHERE origin != 'Beijing'",
                    "question": "find the names of programs whose origin is not in Beijing."
                }
            ],
            "example_quality": 0.6783171479504493,
            "example_similarity": 0.39105101794957575,
            "db_id": "tvshow",
            "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'",
            "correct": 1
        },
        {
            "index": 641,
            "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? */\nSELECT ",
            "response": "Pixel_aspect_ratio_PAR , country FROM tv_channel WHERE LANGUAGE != 'English'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6780389620722114,
            "example_similarity": 0.390771876286817,
            "db_id": "tvshow",
            "pred": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'",
            "correct": 1
        },
        {
            "index": 642,
            "question": "find id of the tv channels that from the countries where have more than two tv channels.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find id of the tv channels that from the countries where have more than two tv channels. */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6785404590160241,
            "example_similarity": 0.3909830038774507,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE Country IN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2 )",
            "correct": 0
        },
        {
            "index": 643,
            "question": "What are the ids of all tv channels that have more than 2 TV channels?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the types of documents with more than 4 documents. */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of all tv channels that have more than 2 TV channels? */\nSELECT ",
            "response": "id FROM tv_channel GROUP BY country HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4504,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "Find the types of documents with more than 4 documents."
                }
            ],
            "example_quality": 0.6790403960937598,
            "example_similarity": 0.3909192667019026,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2",
            "correct": 0
        },
        {
            "index": 644,
            "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5233,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "Find all the songs that do not have a lead vocal."
                }
            ],
            "example_quality": 0.6794093809859536,
            "example_similarity": 0.39090379017123567,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Ben Jones\")",
            "correct": 1
        },
        {
            "index": 645,
            "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6796245320513736,
            "example_similarity": 0.390762854062443,
            "db_id": "tvshow",
            "pred": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT c.id FROM TV_Channel c JOIN Cartoon ca ON c.id = ca.Channel WHERE ca.Directed_by = 'Ben Jones')",
            "correct": 1
        },
        {
            "index": 646,
            "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5233,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "Find all the songs that do not have a lead vocal."
                }
            ],
            "example_quality": 0.679432474812216,
            "example_similarity": 0.39079122566465424,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Ben Jones\")",
            "correct": 1
        },
        {
            "index": 647,
            "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE \"TV_Channel\" (\n\"id\" text,\n\"series_name\" text,\n\"Country\" text,\n\"Language\" text,\n\"Content\" text,\n\"Pixel_aspect_ratio_PAR\" text,\n\"Hight_definition_TV\" text,\n\"Pay_per_view_PPV\" text,\n\"Package_Option\" text,\nPRIMARY KEY (\"id\")\n)\n\nCREATE TABLE \"TV_series\" (\n\"id\" real,\n\"Episode\" text,\n\"Air_Date\" text,\n\"Rating\" text,\n\"Share\" real,\n\"18_49_Rating_Share\" text,\n\"Viewers_m\" text,\n\"Weekly_Rank\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\nCREATE TABLE \"Cartoon\" (\n\"id\" real,\n\"Title\" text,\n\"Directed_by\" text,\n\"Written_by\" text,\n\"Original_air_date\" text,\n\"Production_code\" real,\n\"Channel\" text,\nPRIMARY KEY (\"id\"),\nFOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)\n)\n\n/* Answer the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? */\nSELECT ",
            "response": "package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5233,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "Find all the songs that do not have a lead vocal."
                }
            ],
            "example_quality": 0.6792410112584963,
            "example_similarity": 0.39054389646079735,
            "db_id": "tvshow",
            "pred": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Ben Jones\")",
            "correct": 1
        },
        {
            "index": 648,
            "question": "How many poker players are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many papers are there ? */\nSELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many poker players are there? */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7696,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
                    "question": "How many papers are there ?"
                }
            ],
            "example_quality": 0.6793930741697913,
            "example_similarity": 0.3912639565853067,
            "db_id": "poker_player",
            "pred": "SELECT COUNT(*) FROM poker_player;",
            "correct": 1
        },
        {
            "index": 649,
            "question": "Count the number of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of poker players. */\nSELECT ",
            "response": "count(*) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6798870755963402,
            "example_similarity": 0.39198179772638153,
            "db_id": "poker_player",
            "pred": "SELECT count(*) FROM poker_player",
            "correct": 1
        },
        {
            "index": 650,
            "question": "List the earnings of poker players in descending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the earnings of poker players in descending order. */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                }
            ],
            "example_quality": 0.6803795570184997,
            "example_similarity": 0.39276336419141783,
            "db_id": "poker_player",
            "pred": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 651,
            "question": "What are the earnings of poker players, ordered descending by value?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the themes of parties ordered by the number of hosts in ascending manner? */\nSELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the earnings of poker players, ordered descending by value? */\nSELECT ",
            "response": "Earnings FROM poker_player ORDER BY Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2664,
                    "db_id": "party_host",
                    "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
                    "question": "What are the themes of parties ordered by the number of hosts in ascending manner?"
                }
            ],
            "example_quality": 0.6805291702608336,
            "example_similarity": 0.3929685138462293,
            "db_id": "poker_player",
            "pred": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
            "correct": 1
        },
        {
            "index": 652,
            "question": "List the final tables made and the best finishes of poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the final tables made and the best finishes of poker players. */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6810191561960163,
            "example_similarity": 0.3927197419396694,
            "db_id": "poker_player",
            "pred": "SELECT Final_Table_Made, Best_Finish FROM poker_player;",
            "correct": 1
        },
        {
            "index": 653,
            "question": "What are the final tables made and best finishes for all poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the final tables made and best finishes for all poker players? */\nSELECT ",
            "response": "Final_Table_Made , Best_Finish FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6812013626949504,
            "example_similarity": 0.39277464498198456,
            "db_id": "poker_player",
            "pred": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
            "correct": 1
        },
        {
            "index": 654,
            "question": "What is the average earnings of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average and total transaction amount? */\nSELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players? */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 738,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
                    "question": "What is the average and total transaction amount?"
                }
            ],
            "example_quality": 0.6810517173901162,
            "example_similarity": 0.393147105213455,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player",
            "correct": 1
        },
        {
            "index": 655,
            "question": "Return the average earnings across all poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the average horizontal bar points across all gymnasts. */\nSELECT avg(Horizontal_Bar_Points) FROM gymnast\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the average earnings across all poker players. */\nSELECT ",
            "response": "avg(Earnings) FROM poker_player",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1744,
                    "db_id": "gymnast",
                    "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast",
                    "question": "Return the average horizontal bar points across all gymnasts."
                }
            ],
            "example_quality": 0.681538661333032,
            "example_similarity": 0.3939209264268696,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player",
            "correct": 1
        },
        {
            "index": 656,
            "question": "What is the money rank of the poker player with the highest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions? */\nSELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the poker player with the highest earnings? */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1603,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?"
                }
            ],
            "example_quality": 0.6814524743492927,
            "example_similarity": 0.3943112908682921,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
            "correct": 1
        },
        {
            "index": 657,
            "question": "Return the money rank of the player with the greatest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the duration of the actor with the greatest age. */\nSELECT Duration FROM actor ORDER BY Age DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the player with the greatest earnings. */\nSELECT ",
            "response": "Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 246,
                    "db_id": "musical",
                    "query": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
                    "question": "Return the duration of the actor with the greatest age."
                }
            ],
            "example_quality": 0.6819373259865084,
            "example_similarity": 0.39510635232308405,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
            "correct": 1
        },
        {
            "index": 658,
            "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the maximum number of final tables made among poker players with earnings less than 200000? */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6815658406886564,
            "example_similarity": 0.39503195641705185,
            "db_id": "poker_player",
            "pred": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "correct": 1
        },
        {
            "index": 659,
            "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the maximum enrollment across all schools. */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the maximum final tables made across all poker players who have earnings below 200000. */\nSELECT ",
            "response": "max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1019,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "Return the maximum enrollment across all schools."
                }
            ],
            "example_quality": 0.6817118375582909,
            "example_similarity": 0.3951912402464645,
            "db_id": "poker_player",
            "pred": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
            "correct": 1
        },
        {
            "index": 660,
            "question": "What are the names of poker players?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.681891062046839,
            "example_similarity": 0.3954342164817813,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID",
            "correct": 1
        },
        {
            "index": 661,
            "question": "Return the names of all the poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of all the poker players. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6823723161133339,
            "example_similarity": 0.3955924098002657,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;",
            "correct": 1
        },
        {
            "index": 662,
            "question": "What are the names of poker players whose earnings is higher than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players whose earnings is higher than 300000? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6817858286978437,
            "example_similarity": 0.3950635006396227,
            "db_id": "poker_player",
            "pred": "SELECT t2.Name FROM poker_player AS t1 JOIN people AS t2 ON t1.People_ID = t2.People_ID WHERE t1.Earnings > 300000",
            "correct": 1
        },
        {
            "index": 663,
            "question": "Give the names of poker players who have earnings above 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the names of members that have a rank in round higher than 3. */\nSELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the names of poker players who have earnings above 300000. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4497,
                    "db_id": "decoration_competition",
                    "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3",
                    "question": "Show the names of members that have a rank in round higher than 3."
                }
            ],
            "example_quality": 0.6822657897405318,
            "example_similarity": 0.39522177590260965,
            "db_id": "poker_player",
            "pred": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000",
            "correct": 1
        },
        {
            "index": 664,
            "question": "List the names of poker players ordered by the final tables made in ascending order.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of poker players ordered by the final tables made in ascending order. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6827443051174286,
            "example_similarity": 0.3952959064275221,
            "db_id": "poker_player",
            "pred": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
            "correct": 1
        },
        {
            "index": 665,
            "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the themes of parties ordered by the number of hosts in ascending manner? */\nSELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players, ordered ascending by the number of final tables they have made? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2664,
                    "db_id": "party_host",
                    "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
                    "question": "What are the themes of parties ordered by the number of hosts in ascending manner?"
                }
            ],
            "example_quality": 0.6832213813503347,
            "example_similarity": 0.39555142745741206,
            "db_id": "poker_player",
            "pred": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
            "correct": 1
        },
        {
            "index": 666,
            "question": "What is the birth date of the poker player with the lowest earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the full name and id of the customer who has the lowest total amount of payment? */\nSELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the birth date of the poker player with the lowest earnings? */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2962,
                    "db_id": "sakila_1",
                    "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
                    "question": "What is the full name and id of the customer who has the lowest total amount of payment?"
                }
            ],
            "example_quality": 0.6831339618588177,
            "example_similarity": 0.3959334823711397,
            "db_id": "poker_player",
            "pred": "SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 667,
            "question": "Return the birth date of the poker player with the lowest earnings.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the rank for which there are the fewest captains. */\nSELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the birth date of the poker player with the lowest earnings. */\nSELECT ",
            "response": "T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6232,
                    "db_id": "ship_1",
                    "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the rank for which there are the fewest captains."
                }
            ],
            "example_quality": 0.6829034937971191,
            "example_similarity": 0.39583962907423137,
            "db_id": "poker_player",
            "pred": "SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 668,
            "question": "What is the money rank of the tallest poker player?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the age of the tallest person? */\nSELECT Age FROM people ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the money rank of the tallest poker player? */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1751,
                    "db_id": "gymnast",
                    "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1",
                    "question": "What is the age of the tallest person?"
                }
            ],
            "example_quality": 0.6833781891656863,
            "example_similarity": 0.39647187786032057,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 669,
            "question": "Return the money rank of the poker player with the greatest height.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name of the mountain with the greatest height. */\nSELECT Name FROM mountain ORDER BY Height DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the money rank of the poker player with the greatest height. */\nSELECT ",
            "response": "T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1126,
                    "db_id": "climbing",
                    "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1",
                    "question": "Return the name of the mountain with the greatest height."
                }
            ],
            "example_quality": 0.6838514654150649,
            "example_similarity": 0.3971440482165142,
            "db_id": "poker_player",
            "pred": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 670,
            "question": "What is the average earnings of poker players with height higher than 200?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products have a price higher than the average? */\nSELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the average earnings of poker players with height higher than 200? */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5664,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
                    "question": "How many products have a price higher than the average?"
                }
            ],
            "example_quality": 0.6835377829450817,
            "example_similarity": 0.39713172708318933,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200",
            "correct": 1
        },
        {
            "index": 671,
            "question": "Give average earnings of poker players who are taller than 200.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of people whose height is lower than the average. */\nSELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give average earnings of poker players who are taller than 200. */\nSELECT ",
            "response": "avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2431,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
                    "question": "find the name of people whose height is lower than the average."
                }
            ],
            "example_quality": 0.6833573987678163,
            "example_similarity": 0.39711944267455407,
            "db_id": "poker_player",
            "pred": "SELECT avg(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200",
            "correct": 1
        },
        {
            "index": 672,
            "question": "What are the names of poker players in descending order of earnings?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the themes of parties ordered by the number of hosts in ascending manner? */\nSELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of poker players in descending order of earnings? */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2664,
                    "db_id": "party_host",
                    "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
                    "question": "What are the themes of parties ordered by the number of hosts in ascending manner?"
                }
            ],
            "example_quality": 0.6834979052842003,
            "example_similarity": 0.3973116991430051,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM poker_player ORDER BY Earnings DESC",
            "correct": 0
        },
        {
            "index": 673,
            "question": "Return the names of poker players sorted by their earnings descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the names of poker players sorted by their earnings descending. */\nSELECT ",
            "response": "T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                }
            ],
            "example_quality": 0.6839681907146844,
            "example_similarity": 0.39731569364650726,
            "db_id": "poker_player",
            "pred": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;",
            "correct": 1
        },
        {
            "index": 674,
            "question": "What are different nationalities of people and the corresponding number of people from each nation?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the numbers of constructors for different nationalities? */\nSELECT count(*) ,  nationality FROM constructors GROUP BY nationality\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are different nationalities of people and the corresponding number of people from each nation? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2188,
                    "db_id": "formula_1",
                    "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
                    "question": "What are the numbers of constructors for different nationalities?"
                }
            ],
            "example_quality": 0.68443708063944,
            "example_similarity": 0.3975116818825006,
            "db_id": "poker_player",
            "pred": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
            "correct": 1
        },
        {
            "index": 675,
            "question": "How many people are there of each nationality?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents are there of each type? */\nSELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many people are there of each nationality? */\nSELECT ",
            "response": "Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6419,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code",
                    "question": "How many documents are there of each type?"
                }
            ],
            "example_quality": 0.684904581260715,
            "example_similarity": 0.3981079608723042,
            "db_id": "poker_player",
            "pred": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
            "correct": 1
        },
        {
            "index": 676,
            "question": "What is the most common nationality of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which allergy type is most common? */\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What is the most common nationality of people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 457,
                    "db_id": "allergy_1",
                    "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which allergy type is most common?"
                }
            ],
            "example_quality": 0.6853706987440571,
            "example_similarity": 0.39840661773491914,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 677,
            "question": "Give the nationality that is most common across all people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the flag that is most common among all ships. */\nSELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Give the nationality that is most common across all people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6252,
                    "db_id": "ship_1",
                    "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the flag that is most common among all ships."
                }
            ],
            "example_quality": 0.6858354392185858,
            "example_similarity": 0.39884074044477547,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 678,
            "question": "What are the nationalities that are shared by at least two people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which locations are shared by more than two wrestlers? */\nSELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the nationalities that are shared by at least two people? */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1876,
                    "db_id": "wrestler",
                    "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2",
                    "question": "Which locations are shared by more than two wrestlers?"
                }
            ],
            "example_quality": 0.6861021519434354,
            "example_similarity": 0.39889776000164157,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1",
            "correct": 1
        },
        {
            "index": 679,
            "question": "Return the nationalities for which there are two or more people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Return the nationalities for which there are two or more people. */\nSELECT ",
            "response": "Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6863680790637936,
            "example_similarity": 0.3987193800572766,
            "db_id": "poker_player",
            "pred": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 680,
            "question": "List the names and birth dates of people in ascending alphabetical order of name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names and birth dates of people in ascending alphabetical order of name. */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6868293024769351,
            "example_similarity": 0.39882506955027197,
            "db_id": "poker_player",
            "pred": "SELECT Name, Birth_Date FROM people ORDER BY Name;",
            "correct": 1
        },
        {
            "index": 681,
            "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of people in ascending alphabetical order? */\nSELECT Name FROM People ORDER BY Name ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names and birth dates of people, ordered by their names in alphabetical order? */\nSELECT ",
            "response": "Name , Birth_Date FROM people ORDER BY Name ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1745,
                    "db_id": "gymnast",
                    "query": "SELECT Name FROM People ORDER BY Name ASC",
                    "question": "What are the names of people in ascending alphabetical order?"
                }
            ],
            "example_quality": 0.6872891713426077,
            "example_similarity": 0.3990122805927439,
            "db_id": "poker_player",
            "pred": "SELECT Name, Birth_Date FROM People ORDER BY Name ASC",
            "correct": 1
        },
        {
            "index": 682,
            "question": "Show names of people whose nationality is not \"Russia\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Show names of people whose nationality is not \"Russia\". */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6869098198136178,
            "example_similarity": 0.3990556224519502,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE Nationality != 'Russia'",
            "correct": 1
        },
        {
            "index": 683,
            "question": "What are the names of people who are not from Russia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators whose country is not \"China\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who are not from Russia? */\nSELECT ",
            "response": "Name FROM people WHERE Nationality != \"Russia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2311,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
                    "question": "What are the names of perpetrators whose country is not \"China\"?"
                }
            ],
            "example_quality": 0.6873682241769946,
            "example_similarity": 0.39924648063973045,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
            "correct": 1
        },
        {
            "index": 684,
            "question": "List the names of people that are not poker players.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of products that are not in any event. */\nSELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: List the names of people that are not poker players. */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4598,
                    "db_id": "solvency_ii",
                    "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)",
                    "question": "List the names of products that are not in any event."
                }
            ],
            "example_quality": 0.6878252881767358,
            "example_similarity": 0.3996026365786449,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "correct": 1
        },
        {
            "index": 685,
            "question": "What are the names of people who do not play poker?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids of all students who are not video game players? */\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: What are the names of people who do not play poker? */\nSELECT ",
            "response": "Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6037,
                    "db_id": "game_1",
                    "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games",
                    "question": "What are the ids of all students who are not video game players?"
                }
            ],
            "example_quality": 0.6875997524762345,
            "example_similarity": 0.3999316838245155,
            "db_id": "poker_player",
            "pred": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "correct": 1
        },
        {
            "index": 686,
            "question": "How many distinct nationalities are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct types of accounts are there? */\nSELECT count(DISTINCT acc_type) FROM customer\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: How many distinct nationalities are there? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3031,
                    "db_id": "loan_1",
                    "query": "SELECT count(DISTINCT acc_type) FROM customer",
                    "question": "How many distinct types of accounts are there?"
                }
            ],
            "example_quality": 0.6880551464230622,
            "example_similarity": 0.40048247987984087,
            "db_id": "poker_player",
            "pred": "SELECT count(DISTINCT Nationality) FROM people",
            "correct": 1
        },
        {
            "index": 687,
            "question": "Count the number of different nationalities.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE \"poker_player\" (\n\"Poker_Player_ID\" int,\n\"People_ID\" int,\n\"Final_Table_Made\" real,\n\"Best_Finish\" real,\n\"Money_Rank\" real,\n\"Earnings\" real,\nPRIMARY KEY (\"Poker_Player_ID\"),\nFOREIGN KEY (\"People_ID\") REFERENCES `people`(\"People_ID\")\n)\n\nCREATE TABLE \"people\" (\n\"People_ID\" int,\n\"Nationality\" text,\n\"Name\" text,\n\"Birth_Date\" text,\n\"Height\" real,\nPRIMARY KEY (\"People_ID\")\n)\n\n/* Answer the following: Count the number of different nationalities. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM people",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6885092146233197,
            "example_similarity": 0.40086993866701237,
            "db_id": "poker_player",
            "pred": "SELECT count(DISTINCT Nationality) FROM people",
            "correct": 1
        },
        {
            "index": 688,
            "question": "How many states are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many states are there? */\nSELECT ",
            "response": "count(*) FROM area_code_state",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6889619628578788,
            "example_similarity": 0.40174076724453134,
            "db_id": "voter_1",
            "pred": "SELECT count(DISTINCT state) FROM AREA_CODE_STATE",
            "correct": 1
        },
        {
            "index": 689,
            "question": "List the contestant numbers and names, ordered by contestant name descending.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the name, job title of all people ordered by their names. */\nSELECT name ,  job FROM Person ORDER BY name\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the contestant numbers and names, ordered by contestant name descending. */\nSELECT ",
            "response": "contestant_number , contestant_name FROM contestants ORDER BY contestant_name DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4435,
                    "db_id": "network_2",
                    "query": "SELECT name ,  job FROM Person ORDER BY name",
                    "question": "list the name, job title of all people ordered by their names."
                }
            ],
            "example_quality": 0.6890908682496348,
            "example_similarity": 0.4020114414489915,
            "db_id": "voter_1",
            "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
            "correct": 1
        },
        {
            "index": 690,
            "question": "List the vote ids, phone numbers and states of all votes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the description of all the colors. */\nSELECT color_description FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the vote ids, phone numbers and states of all votes. */\nSELECT ",
            "response": "vote_id , phone_number , state FROM votes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5525,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT color_description FROM ref_colors",
                    "question": "List the description of all the colors."
                }
            ],
            "example_quality": 0.6895414611942006,
            "example_similarity": 0.4020085263164568,
            "db_id": "voter_1",
            "pred": "SELECT vote_id, phone_number, state FROM VOTES",
            "correct": 1
        },
        {
            "index": 691,
            "question": "What are the maximum and minimum values of area codes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum and minimum market value of companies? */\nSELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the maximum and minimum values of area codes? */\nSELECT ",
            "response": "max(area_code) , min(area_code) FROM area_code_state",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4101,
                    "db_id": "company_employee",
                    "query": "SELECT max(Market_Value_in_Billion) ,  min(Market_Value_in_Billion) FROM company",
                    "question": "What is the maximum and minimum market value of companies?"
                }
            ],
            "example_quality": 0.6899907499623711,
            "example_similarity": 0.40242864088373786,
            "db_id": "voter_1",
            "pred": "SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE",
            "correct": 1
        },
        {
            "index": 692,
            "question": "What is last date created of votes from the state 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"? */\nSELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is last date created of votes from the state 'CA'? */\nSELECT ",
            "response": "max(created) FROM votes WHERE state = 'CA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4225,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
                    "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?"
                }
            ],
            "example_quality": 0.6899570446396894,
            "example_similarity": 0.40219742065475017,
            "db_id": "voter_1",
            "pred": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
            "correct": 1
        },
        {
            "index": 693,
            "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of projects that have not been assigned? */\nSELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the names of the contestants whose names are not 'Jessie Alloway' */\nSELECT ",
            "response": "contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6507,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
                    "question": "What are the names of projects that have not been assigned?"
                }
            ],
            "example_quality": 0.6895798648185231,
            "example_similarity": 0.40222462875132187,
            "db_id": "voter_1",
            "pred": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'",
            "correct": 1
        },
        {
            "index": 694,
            "question": "What are the distinct states and create time of all votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are broadcast in each time section of the day? */\nSELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the distinct states and create time of all votes? */\nSELECT ",
            "response": "DISTINCT state , created FROM votes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3749,
                    "db_id": "program_share",
                    "query": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day",
                    "question": "how many programs are broadcast in each time section of the day?"
                }
            ],
            "example_quality": 0.6890295945632979,
            "example_similarity": 0.40220541298783136,
            "db_id": "voter_1",
            "pred": "SELECT DISTINCT state, created FROM VOTES",
            "correct": 1
        },
        {
            "index": 695,
            "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the contestant numbers and names of the contestants who had at least two votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2310,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of perpetrators?"
                }
            ],
            "example_quality": 0.688449284766393,
            "example_similarity": 0.4022191673660968,
            "db_id": "voter_1",
            "pred": "SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2",
            "correct": 1
        },
        {
            "index": 696,
            "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name and email of the user followed by the least number of people. */\nSELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? */\nSELECT ",
            "response": "T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 292,
                    "db_id": "twitter_1",
                    "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
                    "question": "Find the name and email of the user followed by the least number of people."
                }
            ],
            "example_quality": 0.6883581220009239,
            "example_similarity": 0.40220571618145745,
            "db_id": "voter_1",
            "pred": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN ( SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 697,
            "question": "What are the number of votes from state 'NY' or 'CA'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the number of votes from state 'NY' or 'CA'? */\nSELECT ",
            "response": "count(*) FROM votes WHERE state = 'NY' OR state = 'CA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6883748248387993,
            "example_similarity": 0.40193070986812607,
            "db_id": "voter_1",
            "pred": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';",
            "correct": 1
        },
        {
            "index": 698,
            "question": "How many contestants did not get voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: How many contestants did not get voted? */\nSELECT ",
            "response": "count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.6888212792444743,
            "example_similarity": 0.4023577432350773,
            "db_id": "voter_1",
            "pred": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
            "correct": 1
        },
        {
            "index": 699,
            "question": "What is the area code in which the most voters voted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the minimum and maximum vote percents of elections? */\nSELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What is the area code in which the most voters voted? */\nSELECT ",
            "response": "T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1178,
                    "db_id": "election_representative",
                    "query": "SELECT min(Vote_Percent) ,  max(Vote_Percent) FROM election",
                    "question": "What are the minimum and maximum vote percents of elections?"
                }
            ],
            "example_quality": 0.6883127127982496,
            "example_similarity": 0.40228704714528546,
            "db_id": "voter_1",
            "pred": "SELECT state, COUNT(phone_number) AS num_votes FROM VOTES GROUP BY state ORDER BY num_votes DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 700,
            "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct visit dates? */\nSELECT DISTINCT Visit_Date FROM VISITS\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? */\nSELECT ",
            "response": "T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5908,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT DISTINCT Visit_Date FROM VISITS",
                    "question": "What are the distinct visit dates?"
                }
            ],
            "example_quality": 0.6881457354534357,
            "example_similarity": 0.4020420216933196,
            "db_id": "voter_1",
            "pred": "SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE contestant_name = 'Tabatha Gehling'",
            "correct": 1
        },
        {
            "index": 701,
            "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List all the distinct president votes and the vice president votes. */\nSELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. */\nSELECT ",
            "response": "T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5472,
                    "db_id": "voter_2",
                    "query": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
                    "question": "List all the distinct president votes and the vice president votes."
                }
            ],
            "example_quality": 0.6875716534994568,
            "example_similarity": 0.4020171620113254,
            "db_id": "voter_1",
            "pred": "SELECT a.area_code FROM VOTES v JOIN AREA_CODE_STATE a ON v.state = a.state JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling' OR c.contestant_name = 'Kelly Clauss' GROUP BY a.area_code HAVING COUNT(DISTINCT c.contestant_name) = 2;",
            "correct": 1
        },
        {
            "index": 702,
            "question": "Return the names of the contestants whose names contain the substring 'Al' .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of all instructors whose name includes the substring \u201cdar\u201d. */\nSELECT name FROM instructor WHERE name LIKE '%dar%'\n\n/* Given the following database schema: */\nCREATE TABLE `AREA_CODE_STATE` (\n  `area_code` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  PRIMARY KEY (`area_code`)\n)\n\nCREATE TABLE `CONTESTANTS` (\n  `contestant_number` integer\n,  `contestant_name` varchar(50) NOT NULL\n,  PRIMARY KEY (`contestant_number`)\n)\n\nCREATE TABLE `VOTES` (\n  `vote_id` integer NOT NULL PRIMARY KEY\n,  `phone_number` integer NOT NULL\n,  `state` varchar(2) NOT NULL\n,  `contestant_number` integer NOT NULL\n,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP\n, \tFOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)\n, \tFOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)\n)\n\n/* Answer the following: Return the names of the contestants whose names contain the substring 'Al' . */\nSELECT ",
            "response": "contestant_name from contestants where contestant_name like \"%al%\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1473,
                    "db_id": "college_2",
                    "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'",
                    "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d."
                }
            ],
            "example_quality": 0.6870670405077672,
            "example_similarity": 0.4019624885093667,
            "db_id": "voter_1",
            "pred": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'",
            "correct": 1
        },
        {
            "index": 703,
            "question": "What are the names of all the countries that became independent after 1950?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of projects that have not been assigned? */\nSELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of all the countries that became independent after 1950? */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6507,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
                    "question": "What are the names of projects that have not been assigned?"
                }
            ],
            "example_quality": 0.6866993369346003,
            "example_similarity": 0.40214378193212147,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE IndepYear > 1950",
            "correct": 1
        },
        {
            "index": 704,
            "question": "Give the names of the nations that were founded after 1950.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the schools that were either founded after 1850 or public. */\nSELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of the nations that were founded after 1950. */\nSELECT ",
            "response": "Name FROM country WHERE IndepYear > 1950",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1006,
                    "db_id": "university_basketball",
                    "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
                    "question": "Find the schools that were either founded after 1850 or public."
                }
            ],
            "example_quality": 0.6871443662855455,
            "example_similarity": 0.40215744801727804,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE IndepYear > 1950",
            "correct": 1
        },
        {
            "index": 705,
            "question": "How many countries have a republic as their form of government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents have document type code CV or BK? */\nSELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have a republic as their form of government? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4174,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
                    "question": "How many documents have document type code CV or BK?"
                }
            ],
            "example_quality": 0.687588133141878,
            "example_similarity": 0.40220757929668616,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'",
            "correct": 1
        },
        {
            "index": 706,
            "question": "How many countries have governments that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors that are not used in any products. */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries have governments that are republics? */\nSELECT ",
            "response": "count(*) FROM country WHERE GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5602,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                    "question": "Count the number of colors that are not used in any products."
                }
            ],
            "example_quality": 0.687364087294235,
            "example_similarity": 0.4019526425302916,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%'",
            "correct": 0
        },
        {
            "index": 707,
            "question": "What is the total surface area of the countries in the Caribbean region?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is total amount claimed summed across all the claims? */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the countries in the Caribbean region? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3898,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "What is total amount claimed summed across all the claims?"
                }
            ],
            "example_quality": 0.6874919708734197,
            "example_similarity": 0.40204972257663374,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
            "correct": 1
        },
        {
            "index": 708,
            "question": "How much surface area do the countires in the Carribean cover together?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the area of all the states combined */\nSELECT SUM ( area ) FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How much surface area do the countires in the Carribean cover together? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Region = \"Caribbean\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7322,
                    "db_id": "geo",
                    "query": "SELECT SUM ( area ) FROM state;",
                    "question": "what is the area of all the states combined"
                }
            ],
            "example_quality": 0.6876194931995557,
            "example_similarity": 0.40179572893206533,
            "db_id": "world_1",
            "pred": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';",
            "correct": 1
        },
        {
            "index": 709,
            "question": "Which continent is Anguilla in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent is Anguilla in? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6870022583713477,
            "example_similarity": 0.4019342398926689,
            "db_id": "world_1",
            "pred": "SELECT Continent FROM country WHERE Name = \"Anguilla\";",
            "correct": 1
        },
        {
            "index": 710,
            "question": "What is the continent name which Anguilla belongs to?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the continent name which Anguilla belongs to? */\nSELECT ",
            "response": "Continent FROM country WHERE Name = \"Anguilla\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6863867622327964,
            "example_similarity": 0.4016931624150303,
            "db_id": "world_1",
            "pred": "SELECT c.Continent FROM country AS c WHERE c.Name = \"Anguilla\";",
            "correct": 1
        },
        {
            "index": 711,
            "question": "Which region is the city Kabul located in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the name and description for location code x? */\nSELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which region is the city Kabul located in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4185,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"",
                    "question": "What are the name and description for location code x?"
                }
            ],
            "example_quality": 0.686827849768334,
            "example_similarity": 0.4015970163825666,
            "db_id": "world_1",
            "pred": "SELECT Region FROM city WHERE Name = \"Kabul\"",
            "correct": 0
        },
        {
            "index": 712,
            "question": "What region is Kabul in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region is Kabul in? */\nSELECT ",
            "response": "Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = \"Kabul\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6870670562393657,
            "example_similarity": 0.4010329756292203,
            "db_id": "world_1",
            "pred": "SELECT c.Region FROM city AS c JOIN country AS co ON c.CountryCode = co.Code WHERE c.Name = \"Kabul\";",
            "correct": 0
        },
        {
            "index": 713,
            "question": "Which language is the most popular in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the most popular party form. */\nSELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6313,
                    "db_id": "e_government",
                    "query": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the most popular party form."
                }
            ],
            "example_quality": 0.6870109437110207,
            "example_similarity": 0.4009714186607961,
            "db_id": "world_1",
            "pred": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Name = 'Aruba' ORDER BY cl.Percentage DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 714,
            "question": "What language is predominantly spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What language is predominantly spoken in Aruba? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\" ORDER BY Percentage DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6869549883606263,
            "example_similarity": 0.400783316767247,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 715,
            "question": "What are the population and life expectancies in Brazil?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population and life expectancies in Brazil? */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6871930133519301,
            "example_similarity": 0.4002227806598802,
            "db_id": "world_1",
            "pred": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\";",
            "correct": 1
        },
        {
            "index": 716,
            "question": "Give me Brazil\u2019s population and life expectancies.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me all the states of usa */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give me Brazil\u2019s population and life expectancies. */\nSELECT ",
            "response": "Population , LifeExpectancy FROM country WHERE Name = \"Brazil\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7045,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "give me all the states of usa"
                }
            ],
            "example_quality": 0.6871643452699675,
            "example_similarity": 0.3999861136907592,
            "db_id": "world_1",
            "pred": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';",
            "correct": 1
        },
        {
            "index": 717,
            "question": "What are the region and population of Angola?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the region and population of Angola? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6874014143241834,
            "example_similarity": 0.39942825300220863,
            "db_id": "world_1",
            "pred": "SELECT Region, Population FROM country WHERE Name = \"Angola\";",
            "correct": 1
        },
        {
            "index": 718,
            "question": "What region does Angola belong to and what is its population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and ids of documents that have the type code BK? */\nSELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What region does Angola belong to and what is its population? */\nSELECT ",
            "response": "Population , Region FROM country WHERE Name = \"Angola\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6407,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"",
                    "question": "What are the names and ids of documents that have the type code BK?"
                }
            ],
            "example_quality": 0.6878367883989409,
            "example_similarity": 0.3991884820750088,
            "db_id": "world_1",
            "pred": "SELECT Region, Population FROM country WHERE Name = \"Angola\"",
            "correct": 1
        },
        {
            "index": 719,
            "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average expected life expectancy for countries in the region of Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6874210055067155,
            "example_similarity": 0.39875422343754585,
            "db_id": "world_1",
            "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
            "correct": 1
        },
        {
            "index": 720,
            "question": "How long is the people\u2019s average life expectancy in Central Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How long is the people\u2019s average life expectancy in Central Africa? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Region = \"Central Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6870063775669686,
            "example_similarity": 0.3983392870161048,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
            "correct": 1
        },
        {
            "index": 721,
            "question": "What is the name of country that has the shortest life expectancy in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the shortest trip? */\nSELECT id FROM trip ORDER BY duration LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the name of country that has the shortest life expectancy in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 121,
                    "db_id": "bike_1",
                    "query": "SELECT id FROM trip ORDER BY duration LIMIT 1",
                    "question": "What is the id of the shortest trip?"
                }
            ],
            "example_quality": 0.6872093275749663,
            "example_similarity": 0.3986189828732254,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "correct": 1
        },
        {
            "index": 722,
            "question": "Give the name of the country in Asia with the lowest life expectancy.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the id and product type of the product with the lowest price. */\nSELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the country in Asia with the lowest life expectancy. */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" ORDER BY LifeExpectancy LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4713,
                    "db_id": "department_store",
                    "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1",
                    "question": "Give the id and product type of the product with the lowest price."
                }
            ],
            "example_quality": 0.6874117153945761,
            "example_similarity": 0.39910566018226523,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1",
            "correct": 1
        },
        {
            "index": 723,
            "question": "What is the total population and maximum GNP in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum OMIM value in the database? */\nSELECT max(OMIM) FROM enzyme\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and maximum GNP in Asia? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 941,
                    "db_id": "medicine_enzyme_interaction",
                    "query": "SELECT max(OMIM) FROM enzyme",
                    "question": "What is the maximum OMIM value in the database?"
                }
            ],
            "example_quality": 0.6871525014037123,
            "example_similarity": 0.3992452097532441,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'",
            "correct": 1
        },
        {
            "index": 724,
            "question": "How many people live in Asia, and what is the largest GNP among them?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the population of the largest city in the state with the largest area */\nSELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Asia, and what is the largest GNP among them? */\nSELECT ",
            "response": "sum(Population) , max(GNP) FROM country WHERE Continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7375,
                    "db_id": "geo",
                    "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
                    "question": "what is the population of the largest city in the state with the largest area"
                }
            ],
            "example_quality": 0.6864796388327128,
            "example_similarity": 0.3990966206053344,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';",
            "correct": 1
        },
        {
            "index": 725,
            "question": "What is the average life expectancy in African countries that are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the average number of cities within markets that had a low market estimation larger than 10000? */\nSELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average life expectancy in African countries that are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4136,
                    "db_id": "film_rank",
                    "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000",
                    "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?"
                }
            ],
            "example_quality": 0.686912080710185,
            "example_similarity": 0.39911040583083174,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "correct": 1
        },
        {
            "index": 726,
            "question": "Give the average life expectancy for countries in Africa which are republics?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the average quantity of stocks. */\nSELECT avg(Quantity) FROM stock\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the average life expectancy for countries in Africa which are republics? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5060,
                    "db_id": "device",
                    "query": "SELECT avg(Quantity) FROM stock",
                    "question": "Give the average quantity of stocks."
                }
            ],
            "example_quality": 0.6870372400725369,
            "example_similarity": 0.3990198038025983,
            "db_id": "world_1",
            "pred": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
            "correct": 1
        },
        {
            "index": 727,
            "question": "What is the total surface area of the continents Asia and Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is total amount claimed summed across all the claims? */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total surface area of the continents Asia and Europe? */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3898,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "What is total amount claimed summed across all the claims?"
                }
            ],
            "example_quality": 0.6871620551175235,
            "example_similarity": 0.3991587036598162,
            "db_id": "world_1",
            "pred": "SELECT sum(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
            "correct": 1
        },
        {
            "index": 728,
            "question": "Give the total surface area covered by countries in Asia or Europe.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total surface area covered by countries in Asia or Europe. */\nSELECT ",
            "response": "sum(SurfaceArea) FROM country WHERE Continent = \"Asia\" OR Continent = \"Europe\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6869674019449095,
            "example_similarity": 0.39893361494276575,
            "db_id": "world_1",
            "pred": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
            "correct": 1
        },
        {
            "index": 729,
            "question": "How many people live in Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the united states */\nSELECT SUM ( population ) FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7240,
                    "db_id": "geo",
                    "query": "SELECT SUM ( population ) FROM state;",
                    "question": "how many people live in the united states"
                }
            ],
            "example_quality": 0.6870919703616899,
            "example_similarity": 0.3992094261705534,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland';",
            "correct": 1
        },
        {
            "index": 730,
            "question": "What is the total population of Gelderland district?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is total amount claimed summed across all the claims? */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population of Gelderland district? */\nSELECT ",
            "response": "sum(Population) FROM city WHERE District = \"Gelderland\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3898,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "What is total amount claimed summed across all the claims?"
                }
            ],
            "example_quality": 0.6872161974951365,
            "example_similarity": 0.39957580595205494,
            "db_id": "world_1",
            "pred": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'",
            "correct": 1
        },
        {
            "index": 731,
            "question": "What is the average GNP and total population in all nations whose government is US territory?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average population of all counties. */\nSELECT avg(Population) FROM county\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the average GNP and total population in all nations whose government is US territory? */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2739,
                    "db_id": "election",
                    "query": "SELECT avg(Population) FROM county",
                    "question": "Show the average population of all counties."
                }
            ],
            "example_quality": 0.6869600877858408,
            "example_similarity": 0.39937118788645704,
            "db_id": "world_1",
            "pred": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'",
            "correct": 0
        },
        {
            "index": 732,
            "question": "Give the mean GNP and total population of nations which are considered US territory.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the average population of all counties. */\nSELECT avg(Population) FROM county\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean GNP and total population of nations which are considered US territory. */\nSELECT ",
            "response": "avg(GNP) , sum(population) FROM country WHERE GovernmentForm = \"US Territory\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2739,
                    "db_id": "election",
                    "query": "SELECT avg(Population) FROM county",
                    "question": "Show the average population of all counties."
                }
            ],
            "example_quality": 0.6867046778298492,
            "example_similarity": 0.39920507667046157,
            "db_id": "world_1",
            "pred": "SELECT avg(GNP), sum(Population) FROM country WHERE Code IN ('ASM', 'GUM', 'MNP', 'PRI', 'VIR')",
            "correct": 0
        },
        {
            "index": 733,
            "question": "How many unique languages are spoken in the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many languages are in these films? */\nSELECT count(DISTINCT language_id) FROM film\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many unique languages are spoken in the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2971,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT language_id) FROM film",
                    "question": "How many languages are in these films?"
                }
            ],
            "example_quality": 0.6871320930033419,
            "example_similarity": 0.399342586797787,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
            "correct": 1
        },
        {
            "index": 734,
            "question": "What is the number of distinct languages used around the world?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For which countries are there more than four distinct addresses listed? */\nSELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct languages used around the world? */\nSELECT ",
            "response": "count(DISTINCT LANGUAGE) FROM countrylanguage",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6095,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
                    "question": "For which countries are there more than four distinct addresses listed?"
                }
            ],
            "example_quality": 0.6868317313870794,
            "example_similarity": 0.39899315158805865,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage",
            "correct": 1
        },
        {
            "index": 735,
            "question": "How many type of governments are in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct types of accounts are there? */\nSELECT count(DISTINCT acc_type) FROM customer\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many type of governments are in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3031,
                    "db_id": "loan_1",
                    "query": "SELECT count(DISTINCT acc_type) FROM customer",
                    "question": "How many distinct types of accounts are there?"
                }
            ],
            "example_quality": 0.6869857018205664,
            "example_similarity": 0.3991305758716123,
            "db_id": "world_1",
            "pred": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
            "correct": 1
        },
        {
            "index": 736,
            "question": "How many different forms of governments are there in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different types of forms? */\nSELECT DISTINCT form_type_code FROM forms\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many different forms of governments are there in Africa? */\nSELECT ",
            "response": "count(DISTINCT GovernmentForm) FROM country WHERE Continent = \"Africa\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6312,
                    "db_id": "e_government",
                    "query": "SELECT DISTINCT form_type_code FROM forms",
                    "question": "What are the different types of forms?"
                }
            ],
            "example_quality": 0.6867316451604841,
            "example_similarity": 0.3990735273407307,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
            "correct": 1
        },
        {
            "index": 737,
            "question": "What is the total number of languages used in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many tasks are there in total? */\nSELECT count(*) FROM Tasks\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of languages used in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4389,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT count(*) FROM Tasks",
                    "question": "How many tasks are there in total?"
                }
            ],
            "example_quality": 0.6868551812970068,
            "example_similarity": 0.3988938708133575,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
            "correct": 1
        },
        {
            "index": 738,
            "question": "How many languages are spoken in Aruba?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many languages are spoken in Aruba? */\nSELECT ",
            "response": "COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Aruba\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6864514329333102,
            "example_similarity": 0.39851277757217884,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
            "correct": 1
        },
        {
            "index": 739,
            "question": "How many official languages does Afghanistan have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts are there? */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages does Afghanistan have? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1549,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "How many accounts are there?"
                }
            ],
            "example_quality": 0.6865750139141552,
            "example_similarity": 0.39851479005178353,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AF' AND IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 740,
            "question": "How many official languages are spoken in Afghanistan?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many distinct official languages are there among countries of players whose positions are defenders. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many official languages are spoken in Afghanistan? */\nSELECT ",
            "response": "COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1081,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "How many distinct official languages are there among countries of players whose positions are defenders."
                }
            ],
            "example_quality": 0.6868634260575145,
            "example_similarity": 0.3983140943895514,
            "db_id": "world_1",
            "pred": "SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 741,
            "question": "What is name of the country that speaks the largest number of languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which nationality has the most hosts? */\nSELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is name of the country that speaks the largest number of languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2676,
                    "db_id": "party_host",
                    "query": "SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Which nationality has the most hosts?"
                }
            ],
            "example_quality": 0.6872860125270726,
            "example_similarity": 0.398094094420938,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 742,
            "question": "Give the name of the nation that uses the greatest amount of languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Retrieve the country that has published the most papers. */\nSELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name of the nation that uses the greatest amount of languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2901,
                    "db_id": "icfp_1",
                    "query": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1",
                    "question": "Retrieve the country that has published the most papers."
                }
            ],
            "example_quality": 0.6877074599495427,
            "example_similarity": 0.39800681576718117,
            "db_id": "world_1",
            "pred": "SELECT t1.Name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode GROUP BY t1.Name ORDER BY COUNT(t2.Language) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 743,
            "question": "Which continent has the most diverse languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the race class with most number of races. */\nSELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent has the most diverse languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 770,
                    "db_id": "race_track",
                    "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the race class with most number of races."
                }
            ],
            "example_quality": 0.6881277729240387,
            "example_similarity": 0.39783004571455594,
            "db_id": "world_1",
            "pred": "SELECT Continent FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 744,
            "question": "Which continent speaks the most languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which vocal type is the most frequently appearring type? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which continent speaks the most languages? */\nSELECT ",
            "response": "T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5221,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Which vocal type is the most frequently appearring type?"
                }
            ],
            "example_quality": 0.6885469560249472,
            "example_similarity": 0.39802846574108824,
            "db_id": "world_1",
            "pred": "SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 745,
            "question": "How many countries speak both English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many languages are in these films? */\nSELECT count(DISTINCT language_id) FROM film\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many countries speak both English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2971,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT language_id) FROM film",
                    "question": "How many languages are in these films?"
                }
            ],
            "example_quality": 0.6880498216117349,
            "example_similarity": 0.39805348346045144,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') GROUP BY cl.CountryCode HAVING COUNT(DISTINCT cl.Language) = 2",
            "correct": 0
        },
        {
            "index": 746,
            "question": "What is the number of nations that use English and Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For which countries are there more than four distinct addresses listed? */\nSELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of nations that use English and Dutch? */\nSELECT ",
            "response": "COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6095,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
                    "question": "For which countries are there more than four distinct addresses listed?"
                }
            ],
            "example_quality": 0.6876636958454995,
            "example_similarity": 0.39771139721299387,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T'",
            "correct": 0
        },
        {
            "index": 747,
            "question": "What are the names of nations speak both English and French?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations speak both English and French? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.6873609846884619,
            "example_similarity": 0.39771446093827767,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" AND T1.Code IN (SELECT T3.CountryCode FROM countrylanguage AS T3 WHERE T3.Language = \"French\" AND T3.IsOfficial = \"T\")",
            "correct": 0
        },
        {
            "index": 748,
            "question": "Give the names of nations that speak both English and French.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of nations that speak both English and French. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1080,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "Return the official native languages of countries who have players from Maryland or Duke colleges."
                }
            ],
            "example_quality": 0.6870590829195448,
            "example_similarity": 0.3975473657668726,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.Language = \"French\"",
            "correct": 0
        },
        {
            "index": 749,
            "question": "What are the names of nations where both English and French are official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators whose country is not \"China\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of nations where both English and French are official languages? */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2311,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
                    "question": "What are the names of perpetrators whose country is not \"China\"?"
                }
            ],
            "example_quality": 0.6867579872968732,
            "example_similarity": 0.3976173959861425,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" AND EXISTS (SELECT * FROM countrylanguage WHERE CountryCode = T1.Code AND Language = \"French\" AND IsOfficial = \"T\")",
            "correct": 1
        },
        {
            "index": 750,
            "question": "Give the names of countries with English and French as official languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries with English and French as official languages. */\nSELECT ",
            "response": "T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6866266237059675,
            "example_similarity": 0.3975039061248276,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'",
            "correct": 1
        },
        {
            "index": 751,
            "question": "What is the number of distinct continents where Chinese is spoken?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the number of distinct continents where Chinese is spoken? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6862029145567339,
            "example_similarity": 0.3974445682690963,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'",
            "correct": 1
        },
        {
            "index": 752,
            "question": "How many continents speak Chinese?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many languages are in these films? */\nSELECT count(DISTINCT language_id) FROM film\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many continents speak Chinese? */\nSELECT ",
            "response": "COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Chinese\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2971,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT language_id) FROM film",
                    "question": "How many languages are in these films?"
                }
            ],
            "example_quality": 0.6863542404682277,
            "example_similarity": 0.3976548222415517,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Chinese'",
            "correct": 1
        },
        {
            "index": 753,
            "question": "What are the regions that use English or Dutch?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what keywords are used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the regions that use English or Dutch? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7680,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "what keywords are used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6867707687013377,
            "example_similarity": 0.3973037976878887,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');",
            "correct": 1
        },
        {
            "index": 754,
            "question": "Which regions speak Dutch or English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which regions speak Dutch or English? */\nSELECT ",
            "response": "DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6862283376788925,
            "example_similarity": 0.396942652067613,
            "db_id": "world_1",
            "pred": "SELECT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English') GROUP BY c.Region",
            "correct": 0
        },
        {
            "index": 755,
            "question": "What are the countries where either English or Dutch is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of projects that have not been assigned? */\nSELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries where either English or Dutch is the official language ? */\nSELECT ",
            "response": "t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"english\" and isofficial = \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = \"dutch\" and isofficial = \"t\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6507,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
                    "question": "What are the names of projects that have not been assigned?"
                }
            ],
            "example_quality": 0.6854197671333014,
            "example_similarity": 0.3969048751147176,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')",
            "correct": 0
        },
        {
            "index": 756,
            "question": "Which countries have either English or Dutch as an official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of projects that have not been assigned? */\nSELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have either English or Dutch as an official language? */\nSELECT ",
            "response": "* FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND IsOfficial = \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6507,
                    "db_id": "scientist_1",
                    "query": "SELECT Name FROM Projects WHERE Code NOT IN (SELECT Project FROM AssignedTo)",
                    "question": "What are the names of projects that have not been assigned?"
                }
            ],
            "example_quality": 0.685291216243069,
            "example_similarity": 0.39672796111950875,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') OR Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T')",
            "correct": 0
        },
        {
            "index": 757,
            "question": "Which language is the most popular on the Asian continent?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most popular paper this year in CVPR ? */\nSELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is the most popular on the Asian continent? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8100,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
                    "question": "What is the most popular paper this year in CVPR ?"
                }
            ],
            "example_quality": 0.6853623380641254,
            "example_similarity": 0.3968203504267045,
            "db_id": "world_1",
            "pred": "SELECT t2.Language, SUM(t2.Percentage) AS TotalPercentage FROM countrylanguage AS t2 JOIN country AS t1 ON t1.Code = t2.CountryCode WHERE t1.Continent = 'Asia' GROUP BY t2.Language ORDER BY TotalPercentage DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 758,
            "question": "What is the language that is used by the largest number of Asian nations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language that is used by the largest number of Asian nations? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6848979198520794,
            "example_similarity": 0.39655054480913327,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 759,
            "question": "Which languages are spoken by only one country in republic governments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which languages are spoken by only one country in republic governments? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6847860648852122,
            "example_similarity": 0.3961535587095667,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT cl.CountryCode) = 1",
            "correct": 1
        },
        {
            "index": 760,
            "question": "What languages are only used by a single country with a republic government?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What languages are only used by a single country with a republic government? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = \"Republic\" GROUP BY T2.Language HAVING COUNT(*) = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6843005430546848,
            "example_similarity": 0.3959734346313426,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT country.Code) = 1",
            "correct": 1
        },
        {
            "index": 761,
            "question": "Find the city with the largest population that uses English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the code of the location with the largest number of documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the city with the largest population that uses English. */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4230,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the code of the location with the largest number of documents."
                }
            ],
            "example_quality": 0.6842516051840863,
            "example_similarity": 0.396110131826308,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 762,
            "question": "What is the most populace city that speaks English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the most populous city */\nSELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the most populace city that speaks English? */\nSELECT ",
            "response": "T1.Name , T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = \"English\" ORDER BY T1.Population DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7300,
                    "db_id": "geo",
                    "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
                    "question": "what is the most populous city"
                }
            ],
            "example_quality": 0.6838785715814827,
            "example_similarity": 0.39618681860152993,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 763,
            "question": "Find the name, population and expected life length of asian country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the name, population and expected life length of asian country with the largest area? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6835589404260678,
            "example_similarity": 0.39586416222066295,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 764,
            "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, population, and life expectancy of the largest Asian country by land? */\nSELECT ",
            "response": "Name , Population , LifeExpectancy FROM country WHERE Continent = \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.68331868003284,
            "example_similarity": 0.39589139062962364,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 765,
            "question": "What is average life expectancy in the countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is average life expectancy in the countries where English is not the official language? */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.6829483288171108,
            "example_similarity": 0.39548755419970144,
            "db_id": "world_1",
            "pred": "SELECT avg(c.LifeExpectancy) FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'F'",
            "correct": 0
        },
        {
            "index": 766,
            "question": "Give the mean life expectancy of countries in which English is not the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the zip code in which the average mean visibility is lower than 10. */\nSELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the mean life expectancy of countries in which English is not the official language. */\nSELECT ",
            "response": "avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 182,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
                    "question": "Find the zip code in which the average mean visibility is lower than 10."
                }
            ],
            "example_quality": 0.682624352681182,
            "example_similarity": 0.39568926757541983,
            "db_id": "world_1",
            "pred": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
            "correct": 1
        },
        {
            "index": 767,
            "question": "What is the total number of people living in the nations that do not use English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many people live in the united states */\nSELECT SUM ( population ) FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of people living in the nations that do not use English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7240,
                    "db_id": "geo",
                    "query": "SELECT SUM ( population ) FROM state;",
                    "question": "how many people live in the united states"
                }
            ],
            "example_quality": 0.6822147003995005,
            "example_similarity": 0.3954217146717703,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
            "correct": 1
        },
        {
            "index": 768,
            "question": "How many people live in countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students live in HKG or CHI? */\nSELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many people live in countries that do not speak English? */\nSELECT ",
            "response": "sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = \"English\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 482,
                    "db_id": "allergy_1",
                    "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
                    "question": "How many students live in HKG or CHI?"
                }
            ],
            "example_quality": 0.6818472333416888,
            "example_similarity": 0.39555788431412475,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\")",
            "correct": 1
        },
        {
            "index": 769,
            "question": "What is the official language spoken in the country whose head of state is Beatrix?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the official languages of the countries of players from Maryland or Duke college? */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language spoken in the country whose head of state is Beatrix? */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1079,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "What are the official languages of the countries of players from Maryland or Duke college?"
                }
            ],
            "example_quality": 0.6822609560551587,
            "example_similarity": 0.3956345911674814,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T2 JOIN country AS T1 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 770,
            "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the official language used in the country the name of whose head of state is Beatrix. */\nSELECT ",
            "response": "T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6826736041641779,
            "example_similarity": 0.3955703304596715,
            "db_id": "world_1",
            "pred": "SELECT T2.Language FROM countrylanguage AS T2 JOIN country AS T1 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 771,
            "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different official languages corresponding to countries that players who play Defender are from. */\nSELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1082,
                    "db_id": "match_season",
                    "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
                    "question": "Count the number of different official languages corresponding to countries that players who play Defender are from."
                }
            ],
            "example_quality": 0.6830851818500869,
            "example_similarity": 0.39541506682608635,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'",
            "correct": 1
        },
        {
            "index": 772,
            "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of distinct governors. */\nSELECT count(DISTINCT Governor) FROM party\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: For the countries founded before 1930, what is the total number of distinct official languages? */\nSELECT ",
            "response": "count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2752,
                    "db_id": "election",
                    "query": "SELECT count(DISTINCT Governor) FROM party",
                    "question": "Count the number of distinct governors."
                }
            ],
            "example_quality": 0.683236625915048,
            "example_similarity": 0.3952437492456599,
            "db_id": "world_1",
            "pred": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 ) AND IsOfficial = 'T'",
            "correct": 1
        },
        {
            "index": 773,
            "question": "What are the countries that have greater surface area than any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the countries that have greater surface area than any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.682932666324044,
            "example_similarity": 0.3950368286355711,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');",
            "correct": 0
        },
        {
            "index": 774,
            "question": "Which countries have greater area than that of any country in Europe?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which countries have greater area than that of any country in Europe? */\nSELECT ",
            "response": "Name FROM country WHERE SurfaceArea > (SELECT min(SurfaceArea) FROM country WHERE Continent = \"Europe\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6826294921583398,
            "example_similarity": 0.39487097571313073,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe');",
            "correct": 0
        },
        {
            "index": 775,
            "question": "What are the African countries that have a  population less than any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes corresponding to document types for which there are less than 3 documents? */\nSELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the African countries that have a  population less than any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT max(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6423,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3",
                    "question": "What are the codes corresponding to document types for which there are less than 3 documents?"
                }
            ],
            "example_quality": 0.6823351901743232,
            "example_similarity": 0.39492247459439844,
            "db_id": "world_1",
            "pred": "SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
            "correct": 0
        },
        {
            "index": 776,
            "question": "Which African countries have a smaller population than that of any country in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what papers have fewer than 5 citations by ACL papers ? */\nSELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which African countries have a smaller population than that of any country in Asia? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Africa\" AND population < (SELECT min(population) FROM country WHERE Continent = \"Asia\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8003,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
                    "question": "what papers have fewer than 5 citations by ACL papers ?"
                }
            ],
            "example_quality": 0.6821002221457481,
            "example_similarity": 0.3948001518178593,
            "db_id": "world_1",
            "pred": "SELECT c1.Name FROM country AS c1 WHERE c1.Continent = \"Africa\" AND c1.Population < (SELECT MIN(c2.Population) FROM country AS c2 WHERE c2.Continent = \"Asia\");",
            "correct": 1
        },
        {
            "index": 777,
            "question": "Which Asian countries have a population that is larger than any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which Asian countries have a population that is larger than any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT max(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6816513587109829,
            "example_similarity": 0.39460092382324174,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = \"Asia\" AND T1.Population > (SELECT MAX(Population) FROM country WHERE Continent = \"Africa\")",
            "correct": 1
        },
        {
            "index": 778,
            "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the Asian countries which have a population larger than that of any country in Africa? */\nSELECT ",
            "response": "Name FROM country WHERE Continent = \"Asia\" AND population > (SELECT min(population) FROM country WHERE Continent = \"Africa\")",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6812036491667958,
            "example_similarity": 0.3946292859605727,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM country AS T1 WHERE T1.Continent = \"Asia\" AND T1.Population > (SELECT MAX(Population) FROM country WHERE Continent = \"Africa\")",
            "correct": 0
        },
        {
            "index": 779,
            "question": "What are the country codes for countries that do not speak English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes for countries that do not speak English? */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6809710385773647,
            "example_similarity": 0.3941868863637041,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT CountryCode FROM country WHERE CountryCode NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
            "correct": 0
        },
        {
            "index": 780,
            "question": "Return the country codes for countries that do not speak English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a lead vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country codes for countries that do not speak English. */\nSELECT ",
            "response": "CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5233,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
                    "question": "Find all the songs that do not have a lead vocal."
                }
            ],
            "example_quality": 0.6812732124595304,
            "example_similarity": 0.3942094220297537,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
            "correct": 0
        },
        {
            "index": 781,
            "question": "What are the country codes of countries where people use languages other than English?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by dan klein in his emnlp papers */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of countries where people use languages other than English? */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8106,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
                    "question": "keyphrases used by dan klein in his emnlp papers"
                }
            ],
            "example_quality": 0.6816813133398639,
            "example_similarity": 0.39376034243799923,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> \"English\";",
            "correct": 1
        },
        {
            "index": 782,
            "question": "Give the country codes for countries in which people speak langauges that are not English.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all official native languages that contain the word \"English\". */\nSELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the country codes for countries in which people speak langauges that are not English. */\nSELECT ",
            "response": "DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1057,
                    "db_id": "match_season",
                    "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
                    "question": "Show all official native languages that contain the word \"English\"."
                }
            ],
            "example_quality": 0.6816621130244251,
            "example_similarity": 0.3936636947087714,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language != 'English'",
            "correct": 1
        },
        {
            "index": 783,
            "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all people who do not have friends? */\nSELECT name FROM person EXCEPT SELECT name FROM PersonFriend\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4478,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
                    "question": "What are the names of all people who do not have friends?"
                }
            ],
            "example_quality": 0.6816757089111215,
            "example_similarity": 0.3937162092860215,
            "db_id": "world_1",
            "pred": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm <> 'Republic'",
            "correct": 1
        },
        {
            "index": 784,
            "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a back vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries that do not speak English and do not have Republics for governments. */\nSELECT ",
            "response": "Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = \"English\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5253,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
                    "question": "Find all the songs that do not have a back vocal."
                }
            ],
            "example_quality": 0.681808411177452,
            "example_similarity": 0.39367784213595813,
            "db_id": "world_1",
            "pred": "SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' AND c.GovernmentForm <> 'Republic'",
            "correct": 0
        },
        {
            "index": 785,
            "question": "Which cities are in European countries where English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names for all regions except for Denmark. */\nSELECT region_name FROM region WHERE region_name != 'Denmark'\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which cities are in European countries where English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2697,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
                    "question": "Show names for all regions except for Denmark."
                }
            ],
            "example_quality": 0.6813894720249591,
            "example_similarity": 0.39336742450266393,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F'",
            "correct": 0
        },
        {
            "index": 786,
            "question": "What are the names of cities in Europe for which English is not the official language?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators whose country is not \"China\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of cities in Europe for which English is not the official language? */\nSELECT ",
            "response": "DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English')",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2311,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
                    "question": "What are the names of perpetrators whose country is not \"China\"?"
                }
            ],
            "example_quality": 0.6809715988753989,
            "example_similarity": 0.39356670258853843,
            "db_id": "world_1",
            "pred": "SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = \"Europe\" AND T3.Language = \"English\" AND T3.IsOfficial = \"F\"",
            "correct": 0
        },
        {
            "index": 787,
            "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which unique cities are in Asian countries where Chinese is the official language ? */\nSELECT ",
            "response": "distinct t3.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join city as t3 on t1.code = t3.countrycode where t2.isofficial = 't' and t2.language = 'chinese' and t1.continent = \"asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6801857391563705,
            "example_similarity": 0.3935286716622968,
            "db_id": "world_1",
            "pred": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"Asia\" AND countrylanguage.Language = \"Chinese\" AND countrylanguage.IsOfficial = \"T\"",
            "correct": 0
        },
        {
            "index": 788,
            "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the different names of cities that are in Asia and for which Chinese is the official language. */\nSELECT ",
            "response": "DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1080,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "Return the official native languages of countries who have players from Maryland or Duke colleges."
                }
            ],
            "example_quality": 0.6804103040269116,
            "example_similarity": 0.39346855132535713,
            "db_id": "world_1",
            "pred": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = \"Asia\" AND countrylanguage.Language = \"Chinese\" AND countrylanguage.IsOfficial = \"T\"",
            "correct": 1
        },
        {
            "index": 789,
            "question": "What are the name, independence year, and surface area of the country with the smallest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the semester and year which has the least number of student taking any class. */\nSELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the name, independence year, and surface area of the country with the smallest population? */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1413,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
                    "question": "Find the semester and year which has the least number of student taking any class."
                }
            ],
            "example_quality": 0.6803400755046974,
            "example_similarity": 0.39340858338470885,
            "db_id": "world_1",
            "pred": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
            "correct": 0
        },
        {
            "index": 790,
            "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the semester and year which has the least number of student taking any class. */\nSELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, year of independence, and surface area of the country that has the lowest population. */\nSELECT ",
            "response": "Name , SurfaceArea , IndepYear FROM country ORDER BY Population LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1413,
                    "db_id": "college_2",
                    "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
                    "question": "Find the semester and year which has the least number of student taking any class."
                }
            ],
            "example_quality": 0.6802700247762106,
            "example_similarity": 0.39346755986143706,
            "db_id": "world_1",
            "pred": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
            "correct": 0
        },
        {
            "index": 791,
            "question": "What are the population, name and leader of the country with the largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the population, name and leader of the country with the largest area? */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6798651322038008,
            "example_similarity": 0.39316974339744293,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
            "correct": 1
        },
        {
            "index": 792,
            "question": "Give the name, population, and head of state for the country that has the largest area.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the largest state */\nSELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the name, population, and head of state for the country that has the largest area. */\nSELECT ",
            "response": "Name , population , HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7183,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
                    "question": "give me the largest state"
                }
            ],
            "example_quality": 0.6793855045116243,
            "example_similarity": 0.39292584220628457,
            "db_id": "world_1",
            "pred": "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
            "correct": 1
        },
        {
            "index": 793,
            "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6789701381755441,
            "example_similarity": 0.39271694798820944,
            "db_id": "world_1",
            "pred": "SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;",
            "correct": 1
        },
        {
            "index": 794,
            "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many languages are in these films? */\nSELECT count(DISTINCT language_id) FROM film\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? */\nSELECT ",
            "response": "COUNT(T2.Language) , T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2971,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT language_id) FROM film",
                    "question": "How many languages are in these films?"
                }
            ],
            "example_quality": 0.6785558181022749,
            "example_similarity": 0.39253720372122175,
            "db_id": "world_1",
            "pred": "SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;",
            "correct": 1
        },
        {
            "index": 795,
            "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average number of factories for the manufacturers that have more than 20 shops. */\nSELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the number of cities in each district whose population is greater than the average population of cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3397,
                    "db_id": "manufacturer",
                    "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20",
                    "question": "Find the average number of factories for the manufacturers that have more than 20 shops."
                }
            ],
            "example_quality": 0.6781739868845362,
            "example_similarity": 0.3924788598752251,
            "db_id": "world_1",
            "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;",
            "correct": 1
        },
        {
            "index": 796,
            "question": "How many cities in each district have a population that is above the average population across all cities?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products have a price higher than the average? */\nSELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: How many cities in each district have a population that is above the average population across all cities? */\nSELECT ",
            "response": "count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5664,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
                    "question": "How many products have a price higher than the average?"
                }
            ],
            "example_quality": 0.6783165656279813,
            "example_similarity": 0.3925242022982103,
            "db_id": "world_1",
            "pred": "SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;",
            "correct": 1
        },
        {
            "index": 797,
            "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each zip code, select all those that have an average mean visiblity below 10. */\nSELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 183,
                    "db_id": "bike_1",
                    "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
                    "question": "For each zip code, select all those that have an average mean visiblity below 10."
                }
            ],
            "example_quality": 0.6782810366874191,
            "example_similarity": 0.3923662882008056,
            "db_id": "world_1",
            "pred": "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
            "correct": 0
        },
        {
            "index": 798,
            "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids for transactions that have an amount greater than the average amount of a transaction? */\nSELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? */\nSELECT ",
            "response": "sum(Population) , GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1587,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
                    "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?"
                }
            ],
            "example_quality": 0.6781715480335616,
            "example_similarity": 0.3924809557190276,
            "db_id": "world_1",
            "pred": "SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country WHERE LifeExpectancy > 72) GROUP BY GovernmentForm",
            "correct": 0
        },
        {
            "index": 799,
            "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of people whose height is lower than the average. */\nSELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2431,
                    "db_id": "candidate_poll",
                    "query": "SELECT name FROM people WHERE height  <  (SELECT avg(height) FROM people)",
                    "question": "find the name of people whose height is lower than the average."
                }
            ],
            "example_quality": 0.6779253777375014,
            "example_similarity": 0.39244030370936667,
            "db_id": "world_1",
            "pred": "SELECT c.Continent, AVG(c.LifeExpectancy) AS AvgLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c GROUP BY c.Continent HAVING AVG(c.LifeExpectancy) < 72;",
            "correct": 1
        },
        {
            "index": 800,
            "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the different statuses of cities and the average population of cities with each status. */\nSELECT Status ,  avg(Population) FROM city GROUP BY Status\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? */\nSELECT ",
            "response": "sum(Population) , avg(LifeExpectancy) , Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 43,
                    "db_id": "farm",
                    "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
                    "question": "Please show the different statuses of cities and the average population of cities with each status."
                }
            ],
            "example_quality": 0.6777029710153295,
            "example_similarity": 0.3923426104725871,
            "db_id": "world_1",
            "pred": "SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72",
            "correct": 1
        },
        {
            "index": 801,
            "question": "What are the names and areas of countries with the top 5 largest area?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the top 8 countries by total invoice size and what are those sizes? */\nSELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names and areas of countries with the top 5 largest area? */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 541,
                    "db_id": "store_1",
                    "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;",
                    "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?"
                }
            ],
            "example_quality": 0.677451394866984,
            "example_similarity": 0.3925337614525896,
            "db_id": "world_1",
            "pred": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
            "correct": 1
        },
        {
            "index": 802,
            "question": "Return the names and surface areas of the 5 largest countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the amount of the largest payment. */\nSELECT amount FROM payment ORDER BY amount DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names and surface areas of the 5 largest countries. */\nSELECT ",
            "response": "Name , SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3002,
                    "db_id": "sakila_1",
                    "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
                    "question": "Return the amount of the largest payment."
                }
            ],
            "example_quality": 0.677853575172636,
            "example_similarity": 0.39287557305510096,
            "db_id": "world_1",
            "pred": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "correct": 1
        },
        {
            "index": 803,
            "question": "What are names of countries with the top 3 largest population?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the institution type with the largest number of institutions. */\nSELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are names of countries with the top 3 largest population? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1919,
                    "db_id": "protein_institute",
                    "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the institution type with the largest number of institutions."
                }
            ],
            "example_quality": 0.6777877550292081,
            "example_similarity": 0.39293114519326394,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
            "correct": 1
        },
        {
            "index": 804,
            "question": "Return the names of the 3 most populated countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the keyword, which have been contained by the most number of papers in PVLDB . */\nSELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 most populated countries. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population DESC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8396,
                    "db_id": "academic",
                    "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
                    "question": "return me the keyword, which have been contained by the most number of papers in PVLDB ."
                }
            ],
            "example_quality": 0.6775993570620992,
            "example_similarity": 0.3928570185615973,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
            "correct": 1
        },
        {
            "index": 805,
            "question": "What are the names of the nations with the 3 lowest populations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the countries for each market ordered by decreasing number of cities? */\nSELECT Country FROM market ORDER BY Number_cities DESC\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the nations with the 3 lowest populations? */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4130,
                    "db_id": "film_rank",
                    "query": "SELECT Country FROM market ORDER BY Number_cities DESC",
                    "question": "What are the countries for each market ordered by decreasing number of cities?"
                }
            ],
            "example_quality": 0.6775481325643372,
            "example_similarity": 0.3928920441678301,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
            "correct": 1
        },
        {
            "index": 806,
            "question": "Return the names of the 3 countries with the fewest people.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the rank for which there are the fewest captains. */\nSELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of the 3 countries with the fewest people. */\nSELECT ",
            "response": "Name FROM country ORDER BY Population ASC LIMIT 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6232,
                    "db_id": "ship_1",
                    "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the rank for which there are the fewest captains."
                }
            ],
            "example_quality": 0.6773643405446617,
            "example_similarity": 0.39294738902618265,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country ORDER BY Population LIMIT 3",
            "correct": 1
        },
        {
            "index": 807,
            "question": "how many countries are in Asia?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: how many countries are in Asia? */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6773923896889682,
            "example_similarity": 0.39255578516979717,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
            "correct": 1
        },
        {
            "index": 808,
            "question": "Count the number of countries in Asia.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries in Asia. */\nSELECT ",
            "response": "count(*) FROM country WHERE continent = \"Asia\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6774203694046996,
            "example_similarity": 0.3926887606832009,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
            "correct": 1
        },
        {
            "index": 809,
            "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keyphrases used by dan klein in his emnlp papers */\nSELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8106,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
                    "question": "keyphrases used by dan klein in his emnlp papers"
                }
            ],
            "example_quality": 0.6776425232832386,
            "example_similarity": 0.3922916529090913,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = \"Europe\" AND Population = 80000;",
            "correct": 1
        },
        {
            "index": 810,
            "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the names of countries that are in Europe and have a population equal to 80000. */\nSELECT ",
            "response": "Name FROM country WHERE continent = \"Europe\" AND Population = \"80000\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6778641286336826,
            "example_similarity": 0.3919146959570296,
            "db_id": "world_1",
            "pred": "SELECT Name FROM country WHERE Continent = \"Europe\" AND Population = 80000;",
            "correct": 1
        },
        {
            "index": 811,
            "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: which gender got the highest average uncertain ratio. */\nSELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ? */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2419,
                    "db_id": "candidate_poll",
                    "query": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
                    "question": "which gender got the highest average uncertain ratio."
                }
            ],
            "example_quality": 0.677100823332546,
            "example_similarity": 0.3915136502982252,
            "db_id": "world_1",
            "pred": "SELECT SUM(c.Population) AS TotalPopulation, AVG(c.SurfaceArea) AS AverageArea FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000",
            "correct": 0
        },
        {
            "index": 812,
            "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show ids for all transactions whose amounts are greater than the average. */\nSELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 . */\nSELECT ",
            "response": "sum(population) , avg(surfacearea) from country where continent = \"north america\" and surfacearea > 3000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1586,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)",
                    "question": "Show ids for all transactions whose amounts are greater than the average."
                }
            ],
            "example_quality": 0.6764208962102152,
            "example_similarity": 0.3912777960490895,
            "db_id": "world_1",
            "pred": "SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;",
            "correct": 0
        },
        {
            "index": 813,
            "question": "What are the cities whose population is between 160000 and 900000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the cities whose population is between 160000 and 900000? */\nSELECT ",
            "response": "name FROM city WHERE Population BETWEEN 160000 AND 900000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6762598059878836,
            "example_similarity": 0.39079651954718414,
            "db_id": "world_1",
            "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
            "correct": 1
        },
        {
            "index": 814,
            "question": "Return the names of cities that have a population between 160000 and 900000 .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the names of cities that have a population between 160000 and 900000 . */\nSELECT ",
            "response": "name from city where population between 160000 and 900000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6756337701901916,
            "example_similarity": 0.3906235508499517,
            "db_id": "world_1",
            "pred": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
            "correct": 1
        },
        {
            "index": 815,
            "question": "Which language is spoken by the largest number of countries?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Which language is spoken by the largest number of countries? */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6760317655641913,
            "example_similarity": 0.3905051386980607,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 816,
            "question": "Give the language that is spoken in the most countries.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Give the language that is spoken in the most countries. */\nSELECT ",
            "response": "LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6764287854593332,
            "example_similarity": 0.3903870167720322,
            "db_id": "world_1",
            "pred": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 817,
            "question": "What is the language spoken by the largest percentage of people in each country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the language spoken by the largest percentage of people in each country? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6762808378095123,
            "example_similarity": 0.3902763839485659,
            "db_id": "world_1",
            "pred": "SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = (SELECT MAX(Percentage) FROM countrylanguage GROUP BY CountryCode)",
            "correct": 0
        },
        {
            "index": 818,
            "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? */\nSELECT ",
            "response": "LANGUAGE , CountryCode , max(Percentage) FROM countrylanguage GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6761332518898864,
            "example_similarity": 0.38999644988821386,
            "db_id": "world_1",
            "pred": "SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = c.Code)",
            "correct": 0
        },
        {
            "index": 819,
            "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6759181929742699,
            "example_similarity": 0.3898387858043667,
            "db_id": "world_1",
            "pred": "SELECT COUNT(*) FROM ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode ) AS MaxPercentageTable WHERE Percentage = MaxPercentage;",
            "correct": 0
        },
        {
            "index": 820,
            "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different languages in these films. */\nSELECT count(DISTINCT language_id) FROM film\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Count the number of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "count(*) , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2972,
                    "db_id": "sakila_1",
                    "query": "SELECT count(DISTINCT language_id) FROM film",
                    "question": "Count the number of different languages in these films."
                }
            ],
            "example_quality": 0.6755681572375803,
            "example_similarity": 0.38986552473129105,
            "db_id": "world_1",
            "pred": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50",
            "correct": 0
        },
        {
            "index": 821,
            "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6754504705276942,
            "example_similarity": 0.3897228472014445,
            "db_id": "world_1",
            "pred": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 822,
            "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the official native languages of countries who have players from Maryland or Duke colleges. */\nSELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"\n\n/* Given the following database schema: */\nCREATE TABLE `city` (\n  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT\n,  `Name` char(35) NOT NULL DEFAULT ''\n,  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `District` char(20) NOT NULL DEFAULT ''\n,  `Population` integer NOT NULL DEFAULT '0'\n,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\nCREATE TABLE sqlite_sequence(name,seq)\n\nCREATE TABLE `country` (\n  `Code` char(3) NOT NULL DEFAULT ''\n,  `Name` char(52) NOT NULL DEFAULT ''\n,  `Continent` text  NOT NULL DEFAULT 'Asia'\n,  `Region` char(26) NOT NULL DEFAULT ''\n,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'\n,  `IndepYear` integer DEFAULT NULL\n,  `Population` integer NOT NULL DEFAULT '0'\n,  `LifeExpectancy` float(3,1) DEFAULT NULL\n,  `GNP` float(10,2) DEFAULT NULL\n,  `GNPOld` float(10,2) DEFAULT NULL\n,  `LocalName` char(45) NOT NULL DEFAULT ''\n,  `GovernmentForm` char(45) NOT NULL DEFAULT ''\n,  `HeadOfState` char(60) DEFAULT NULL\n,  `Capital` integer DEFAULT NULL\n,  `Code2` char(2) NOT NULL DEFAULT ''\n,  PRIMARY KEY (`Code`)\n)\n\nCREATE TABLE `countrylanguage` (\n  `CountryCode` char(3) NOT NULL DEFAULT ''\n,  `Language` char(30) NOT NULL DEFAULT ''\n,  `IsOfficial` text  NOT NULL DEFAULT 'F'\n,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'\n,  PRIMARY KEY (`CountryCode`,`Language`)\n,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)\n)\n\n/* Answer the following: Return the codes of countries for which Spanish is the predominantly spoken language. */\nSELECT ",
            "response": "CountryCode , max(Percentage) FROM countrylanguage WHERE LANGUAGE = \"Spanish\" GROUP BY CountryCode",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1080,
                    "db_id": "match_season",
                    "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
                    "question": "Return the official native languages of countries who have players from Maryland or Duke colleges."
                }
            ],
            "example_quality": 0.6751501310605943,
            "example_similarity": 0.38969111181997845,
            "db_id": "world_1",
            "pred": "SELECT T1.CountryCode FROM countrylanguage AS T1 WHERE T1.Language = \"Spanish\" AND T1.Percentage > 50.0",
            "correct": 0
        },
        {
            "index": 823,
            "question": "How many conductors are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many conductors are there? */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.6755448453606422,
            "example_similarity": 0.3904326779052518,
            "db_id": "orchestra",
            "pred": "SELECT count(*) FROM conductor",
            "correct": 1
        },
        {
            "index": 824,
            "question": "Count the number of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of conductors. */\nSELECT ",
            "response": "count(*) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6759386016162724,
            "example_similarity": 0.3911724440728426,
            "db_id": "orchestra",
            "pred": "SELECT COUNT(*) FROM conductor",
            "correct": 1
        },
        {
            "index": 825,
            "question": "List the names of conductors in ascending order of age.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of conductors in ascending order of age. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.676331403311283,
            "example_similarity": 0.39144421640170535,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Age ASC",
            "correct": 1
        },
        {
            "index": 826,
            "question": "What are the names of conductors, ordered by age?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the themes of parties ordered by the number of hosts in ascending manner? */\nSELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, ordered by age? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Age ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2664,
                    "db_id": "party_host",
                    "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC",
                    "question": "What are the themes of parties ordered by the number of hosts in ascending manner?"
                }
            ],
            "example_quality": 0.6767232539126011,
            "example_similarity": 0.39168246225850434,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Age",
            "correct": 1
        },
        {
            "index": 827,
            "question": "What are the names of conductors whose nationalities are not \"USA\"?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: give me the keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors whose nationalities are not \"USA\"? */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7683,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "give me the keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6769414154642701,
            "example_similarity": 0.3912664242722414,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Nationality <> \"USA\";",
            "correct": 1
        },
        {
            "index": 828,
            "question": "Return the names of conductors that do not have the nationality \"USA\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the songs that do not have a back vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the names of conductors that do not have the nationality \"USA\". */\nSELECT ",
            "response": "Name FROM conductor WHERE Nationality != 'USA'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5253,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
                    "question": "Find all the songs that do not have a back vocal."
                }
            ],
            "example_quality": 0.6767277181025982,
            "example_similarity": 0.3913023979525635,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Nationality <> \"USA\"",
            "correct": 1
        },
        {
            "index": 829,
            "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the different schools and their nicknames, ordered by their founding years? */\nSELECT school ,  nickname FROM university ORDER BY founded\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies of orchestras in descending order of years in which they were founded? */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 979,
                    "db_id": "university_basketball",
                    "query": "SELECT school ,  nickname FROM university ORDER BY founded",
                    "question": "What are the different schools and their nicknames, ordered by their founding years?"
                }
            ],
            "example_quality": 0.6768496120225925,
            "example_similarity": 0.39109844116639897,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "correct": 1
        },
        {
            "index": 830,
            "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the locations of schools in descending order of founded year. */\nSELECT LOCATION FROM school ORDER BY Founded DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. */\nSELECT ",
            "response": "Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4865,
                    "db_id": "school_player",
                    "query": "SELECT LOCATION FROM school ORDER BY Founded DESC",
                    "question": "List the locations of schools in descending order of founded year."
                }
            ],
            "example_quality": 0.6772389498394328,
            "example_similarity": 0.39114358934399546,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
            "correct": 1
        },
        {
            "index": 831,
            "question": "What is the average attendance of shows?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the average attendance of shows? */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6768251043322051,
            "example_similarity": 0.3910010907680427,
            "db_id": "orchestra",
            "pred": "SELECT AVG(Attendance) AS Average_Attendance FROM show",
            "correct": 1
        },
        {
            "index": 832,
            "question": "Return the average attendance across all shows.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me all the keywords . */\nSELECT keyword FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the average attendance across all shows. */\nSELECT ",
            "response": "avg(Attendance) FROM SHOW",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8252,
                    "db_id": "academic",
                    "query": "SELECT keyword FROM keyword;",
                    "question": "return me all the keywords ."
                }
            ],
            "example_quality": 0.6766984258070804,
            "example_similarity": 0.39119887257668157,
            "db_id": "orchestra",
            "pred": "SELECT AVG(Attendance) FROM show;",
            "correct": 1
        },
        {
            "index": 833,
            "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the maximum and minimum product prices for each product type? */\nSELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the maximum and minimum share of performances whose type is not \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4747,
                    "db_id": "department_store",
                    "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code",
                    "question": "What are the maximum and minimum product prices for each product type?"
                }
            ],
            "example_quality": 0.676753076222945,
            "example_similarity": 0.3913009033133128,
            "db_id": "orchestra",
            "pred": "SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type <> 'Live final'",
            "correct": 1
        },
        {
            "index": 834,
            "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the maximum and minimum population among all counties. */\nSELECT max(Population) ,  min(Population) FROM county\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Return the maximum and minimum shares for performances that do not have the type \"Live final\". */\nSELECT ",
            "response": "max(SHARE) , min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2741,
                    "db_id": "election",
                    "query": "SELECT max(Population) ,  min(Population) FROM county",
                    "question": "Return the maximum and minimum population among all counties."
                }
            ],
            "example_quality": 0.6769693709242879,
            "example_similarity": 0.39128849501311985,
            "db_id": "orchestra",
            "pred": "SELECT max(Share), min(Share) FROM performance WHERE Type <> 'Live final'",
            "correct": 1
        },
        {
            "index": 835,
            "question": "How many different nationalities do conductors have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many different positions are there? */\nSELECT count(DISTINCT POSITION) FROM player\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many different nationalities do conductors have? */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3378,
                    "db_id": "sports_competition",
                    "query": "SELECT count(DISTINCT POSITION) FROM player",
                    "question": "how many different positions are there?"
                }
            ],
            "example_quality": 0.6773562339531211,
            "example_similarity": 0.3914186884322658,
            "db_id": "orchestra",
            "pred": "SELECT count(DISTINCT Nationality) FROM conductor",
            "correct": 1
        },
        {
            "index": 836,
            "question": "Count the number of different nationalities of conductors.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of different nationalities of conductors. */\nSELECT ",
            "response": "count(DISTINCT Nationality) FROM conductor",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6777421714723159,
            "example_similarity": 0.3917878048336626,
            "db_id": "orchestra",
            "pred": "SELECT count(DISTINCT Nationality) FROM conductor",
            "correct": 1
        },
        {
            "index": 837,
            "question": "List names of conductors in descending order of years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List names of conductors in descending order of years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                }
            ],
            "example_quality": 0.6781271867991112,
            "example_similarity": 0.392054945587009,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "correct": 1
        },
        {
            "index": 838,
            "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the working years of managers in descending order of their level. */\nSELECT Working_year_starts FROM manager ORDER BY LEVEL DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors, sorted descending by the number of years they have worked? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5652,
                    "db_id": "railway",
                    "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC",
                    "question": "Show the working years of managers in descending order of their level."
                }
            ],
            "example_quality": 0.6782461015854818,
            "example_similarity": 0.39187349577127273,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
            "correct": 1
        },
        {
            "index": 839,
            "question": "List the name of the conductor with the most years of work.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the list of documents that are both in the most three popular type and have the most three popular structure. */\nSELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the name of the conductor with the most years of work. */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4514,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
                    "question": "Find the list of documents that are both in the most three popular type and have the most three popular structure."
                }
            ],
            "example_quality": 0.6777988837087772,
            "example_similarity": 0.3917595777742823,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 840,
            "question": "What is the name of the conductor who has worked the greatest number of years?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the count and code of the job with the most employee? */\nSELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has worked the greatest number of years? */\nSELECT ",
            "response": "Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3213,
                    "db_id": "college_1",
                    "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the count and code of the job with the most employee?"
                }
            ],
            "example_quality": 0.6775588736998269,
            "example_similarity": 0.39172609775745143,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
            "correct": 1
        },
        {
            "index": 841,
            "question": "Show the names of conductors and the orchestras they have conducted.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors and the orchestras they have conducted. */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2310,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
                    "question": "What are the names of perpetrators?"
                }
            ],
            "example_quality": 0.6779422757525025,
            "example_similarity": 0.3915773945100189,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "correct": 1
        },
        {
            "index": 842,
            "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators in country \"China\" or \"Japan\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? */\nSELECT ",
            "response": "T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2314,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
                    "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?"
                }
            ],
            "example_quality": 0.6779288842927806,
            "example_similarity": 0.39149238572794043,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID;",
            "correct": 1
        },
        {
            "index": 843,
            "question": "Show the names of conductors that have conducted more than one orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the authors who have submissions to more than one workshop. */\nSELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the names of conductors that have conducted more than one orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5839,
                    "db_id": "workshop_paper",
                    "query": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
                    "question": "Show the authors who have submissions to more than one workshop."
                }
            ],
            "example_quality": 0.6782318551694597,
            "example_similarity": 0.3916952417353806,
            "db_id": "orchestra",
            "pred": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
            "correct": 1
        },
        {
            "index": 844,
            "question": "What are the names of conductors who have conducted at more than one orchestra?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of staff who have been assigned multiple jobs? */\nSELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted at more than one orchestra? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4763,
                    "db_id": "department_store",
                    "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
                    "question": "What are the names of staff who have been assigned multiple jobs?"
                }
            ],
            "example_quality": 0.6786130970472211,
            "example_similarity": 0.391792385063332,
            "db_id": "orchestra",
            "pred": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
            "correct": 1
        },
        {
            "index": 845,
            "question": "Show the name of the conductor that has conducted the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the name of the conductor that has conducted the most number of orchestras. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6789934365773427,
            "example_similarity": 0.3919204414123695,
            "db_id": "orchestra",
            "pred": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 846,
            "question": "What is the name of the conductor who has conducted the most orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the id of the account with the most transactions? */\nSELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the name of the conductor who has conducted the most orchestras? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1593,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the id of the account with the most transactions?"
                }
            ],
            "example_quality": 0.679372876959639,
            "example_similarity": 0.39219594916483713,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Conductor_ID = ( SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 847,
            "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the organization that was formed most recently? */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the name of the conductor that has conducted orchestras founded after 2008. */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6322,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "What is the name of the organization that was formed most recently?"
                }
            ],
            "example_quality": 0.6791074372637544,
            "example_similarity": 0.3920548999600702,
            "db_id": "orchestra",
            "pred": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;",
            "correct": 1
        },
        {
            "index": 848,
            "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the organization that was formed most recently? */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the names of conductors who have conducted orchestras founded after the year 2008? */\nSELECT ",
            "response": "T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6322,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "What is the name of the organization that was formed most recently?"
                }
            ],
            "example_quality": 0.6788426236048887,
            "example_similarity": 0.3919677854768412,
            "db_id": "orchestra",
            "pred": "SELECT Name FROM conductor WHERE Conductor_ID IN ( SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008 )",
            "correct": 1
        },
        {
            "index": 849,
            "question": "Please show the different record companies and the corresponding number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show different types of artworks with the corresponding number of artworks of each type. */\nSELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the different record companies and the corresponding number of orchestras. */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4614,
                    "db_id": "entertainment_awards",
                    "query": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE",
                    "question": "Please show different types of artworks with the corresponding number of artworks of each type."
                }
            ],
            "example_quality": 0.6792209008444589,
            "example_similarity": 0.392225904823878,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company",
            "correct": 1
        },
        {
            "index": 850,
            "question": "How many orchestras does each record company manage?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many accounts are there for each customer id? */\nSELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: How many orchestras does each record company manage? */\nSELECT ",
            "response": "Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 679,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id",
                    "question": "How many accounts are there for each customer id?"
                }
            ],
            "example_quality": 0.6795982880199359,
            "example_similarity": 0.3924507370927126,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company",
            "correct": 1
        },
        {
            "index": 851,
            "question": "Please show the record formats of orchestras in ascending order of count.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List each test result and its count in descending order of count. */\nSELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Please show the record formats of orchestras in ascending order of count. */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3801,
                    "db_id": "e_learning",
                    "query": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
                    "question": "List each test result and its count in descending order of count."
                }
            ],
            "example_quality": 0.6795635074229679,
            "example_similarity": 0.39242250009569607,
            "db_id": "orchestra",
            "pred": "SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "correct": 0
        },
        {
            "index": 852,
            "question": "What are the major record formats of orchestras, sorted by their frequency?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the type of vocables that appears most frequently? */\nSELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the major record formats of orchestras, sorted by their frequency? */\nSELECT ",
            "response": "Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5222,
                    "db_id": "music_2",
                    "query": "SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the type of vocables that appears most frequently?"
                }
            ],
            "example_quality": 0.6796634397879091,
            "example_similarity": 0.3922553375368983,
            "db_id": "orchestra",
            "pred": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;",
            "correct": 0
        },
        {
            "index": 853,
            "question": "List the record company shared by the most number of orchestras.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the votes of elections in descending order. */\nSELECT Votes FROM election ORDER BY Votes DESC\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the record company shared by the most number of orchestras. */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1176,
                    "db_id": "election_representative",
                    "query": "SELECT Votes FROM election ORDER BY Votes DESC",
                    "question": "List the votes of elections in descending order."
                }
            ],
            "example_quality": 0.6794528144188728,
            "example_similarity": 0.39226441685983277,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Of_Orchestras DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 854,
            "question": "What is the record company used by the greatest number of orchestras?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the card type code with most number of cards? */\nSELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What is the record company used by the greatest number of orchestras? */\nSELECT ",
            "response": "Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 722,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the card type code with most number of cards?"
                }
            ],
            "example_quality": 0.6798281624113567,
            "example_similarity": 0.3924637559501608,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company, COUNT(Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company ORDER BY Num_Of_Orchestras DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 855,
            "question": "List the names of orchestras that have no performance.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of clubs that do not have any players. */\nSELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: List the names of orchestras that have no performance. */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3372,
                    "db_id": "sports_competition",
                    "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
                    "question": "List the names of clubs that do not have any players."
                }
            ],
            "example_quality": 0.6802026323968404,
            "example_similarity": 0.39281445061256726,
            "db_id": "orchestra",
            "pred": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "correct": 1
        },
        {
            "index": 856,
            "question": "What are the orchestras that do not have any performances?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of documents that do not have any sections? */\nSELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the orchestras that do not have any performances? */\nSELECT ",
            "response": "Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4521,
                    "db_id": "document_management",
                    "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)",
                    "question": "What are the names of documents that do not have any sections?"
                }
            ],
            "example_quality": 0.6805762274524516,
            "example_similarity": 0.39334405271016226,
            "db_id": "orchestra",
            "pred": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
            "correct": 1
        },
        {
            "index": 857,
            "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the opening year in whcih at least two churches opened. */\nSELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the record companies shared by orchestras founded before 2003 and after 2003. */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1633,
                    "db_id": "wedding",
                    "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2",
                    "question": "Show the opening year in whcih at least two churches opened."
                }
            ],
            "example_quality": 0.6801904908976645,
            "example_similarity": 0.39316289890080997,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "correct": 1
        },
        {
            "index": 858,
            "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the denominations used by both schools founded before 1890 and schools founded  after 1900? */\nSELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? */\nSELECT ",
            "response": "Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4896,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
                    "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?"
                }
            ],
            "example_quality": 0.6805632292532616,
            "example_similarity": 0.3934993269694782,
            "db_id": "orchestra",
            "pred": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003",
            "correct": 1
        },
        {
            "index": 859,
            "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Find the number of orchestras whose record format is \"CD\" or \"DVD\". */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6805858564601845,
            "example_similarity": 0.3933475907270653,
            "db_id": "orchestra",
            "pred": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';",
            "correct": 1
        },
        {
            "index": 860,
            "question": "Count the number of orchestras that have CD or DVD as their record format.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors that are not used in any products. */\nSELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Count the number of orchestras that have CD or DVD as their record format. */\nSELECT ",
            "response": "COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5602,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
                    "question": "Count the number of colors that are not used in any products."
                }
            ],
            "example_quality": 0.6804100726325633,
            "example_similarity": 0.393355326086685,
            "db_id": "orchestra",
            "pred": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD'",
            "correct": 1
        },
        {
            "index": 861,
            "question": "Show the years in which orchestras that have given more than one performance are founded.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the denomination shared by more than one school. */\nSELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: Show the years in which orchestras that have given more than one performance are founded. */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4899,
                    "db_id": "school_player",
                    "query": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
                    "question": "Show the denomination shared by more than one school."
                }
            ],
            "example_quality": 0.6807812572171944,
            "example_similarity": 0.3933263664194898,
            "db_id": "orchestra",
            "pred": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 862,
            "question": "What are years of founding for orchestras that have had more than a single performance?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What document types have more than 2 corresponding documents? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"conductor\" (\n\"Conductor_ID\" int,\n\"Name\" text,\n\"Age\" int,\n\"Nationality\" text,\n\"Year_of_Work\" int,\nPRIMARY KEY (\"Conductor_ID\")\n)\n\nCREATE TABLE \"orchestra\" (\n\"Orchestra_ID\" int,\n\"Orchestra\" text,\n\"Conductor_ID\" int,\n\"Record_Company\" text,\n\"Year_of_Founded\" real,\n\"Major_Record_Format\" text,\nPRIMARY KEY (\"Orchestra_ID\"),\nFOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)\n)\n\nCREATE TABLE \"performance\" (\n\"Performance_ID\" int,\n\"Orchestra_ID\" int,\n\"Type\" text,\n\"Date\" text,\n\"Official_ratings_(millions)\" real,\n\"Weekly_rank\" text,\n\"Share\" text,\nPRIMARY KEY (\"Performance_ID\"),\nFOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)\n)\n\nCREATE TABLE \"show\" (\n\"Show_ID\" int,\n\"Performance_ID\" int,\n\"If_first_show\" bool,\n\"Result\" text,\n\"Attendance\" real,\nFOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)\n)\n\n/* Answer the following: What are years of founding for orchestras that have had more than a single performance? */\nSELECT ",
            "response": "Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4542,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                    "question": "What document types have more than 2 corresponding documents?"
                }
            ],
            "example_quality": 0.6811515805846918,
            "example_similarity": 0.39348423811123734,
            "db_id": "orchestra",
            "pred": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 863,
            "question": "How many high schoolers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many papers are there ? */\nSELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there? */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7696,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
                    "question": "How many papers are there ?"
                }
            ],
            "example_quality": 0.6812635460507326,
            "example_similarity": 0.39402150186446055,
            "db_id": "network_1",
            "pred": "SELECT COUNT(ID) FROM Highschooler;",
            "correct": 1
        },
        {
            "index": 864,
            "question": "Count the number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers. */\nSELECT ",
            "response": "count(*) FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6816324539835442,
            "example_similarity": 0.3945575219515882,
            "db_id": "network_1",
            "pred": "SELECT count(*) FROM Highschooler",
            "correct": 1
        },
        {
            "index": 865,
            "question": "Show the names and grades of each high schooler.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: show the train name and station name for each train. */\nSELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names and grades of each high schooler. */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6614,
                    "db_id": "train_station",
                    "query": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id",
                    "question": "show the train name and station name for each train."
                }
            ],
            "example_quality": 0.6820005089500373,
            "example_similarity": 0.39496843811118176,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 866,
            "question": "What are the names and grades for each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names and grades for each high schooler? */\nSELECT ",
            "response": "name , grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6821367670228431,
            "example_similarity": 0.3949934938023545,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 867,
            "question": "Show all the grades of the high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all majors. */\nSELECT DISTINCT Major FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show all the grades of the high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 466,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT Major FROM Student",
                    "question": "Show all majors."
                }
            ],
            "example_quality": 0.6822727107748352,
            "example_similarity": 0.3950505306543061,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler",
            "correct": 1
        },
        {
            "index": 868,
            "question": "What is the grade of each high schooler?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the grade of each high schooler? */\nSELECT ",
            "response": "grade FROM Highschooler",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6824083412923757,
            "example_similarity": 0.3950143392176495,
            "db_id": "network_1",
            "pred": "SELECT name, grade FROM Highschooler",
            "correct": 0
        },
        {
            "index": 869,
            "question": "What grade is Kyle in?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What grade is Kyle in? */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6826094166846087,
            "example_similarity": 0.3945597772622782,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler WHERE name = \"Kyle\";",
            "correct": 1
        },
        {
            "index": 870,
            "question": "Return the grade for the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade for the high schooler named Kyle. */\nSELECT ",
            "response": "grade FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6822845782746265,
            "example_similarity": 0.3944599295961058,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler WHERE name = 'Kyle';",
            "correct": 1
        },
        {
            "index": 871,
            "question": "Show the names of all high schoolers in grade 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all high schoolers in grade 10. */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6819932887801337,
            "example_similarity": 0.3945369428359937,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade = 10",
            "correct": 1
        },
        {
            "index": 872,
            "question": "What are the names of all high schoolers in grade 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of all high schoolers in grade 10? */\nSELECT ",
            "response": "name FROM Highschooler WHERE grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.68149788363245,
            "example_similarity": 0.39441214621085413,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade = 10;",
            "correct": 1
        },
        {
            "index": 873,
            "question": "Show the ID of the high schooler named Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ID of the high schooler named Kyle. */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6812081626071796,
            "example_similarity": 0.39453309449698143,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
            "correct": 1
        },
        {
            "index": 874,
            "question": "What is Kyle's id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which institution does \"Katsuhiro Ueno\" belong to? */\nSELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is Kyle's id? */\nSELECT ",
            "response": "ID FROM Highschooler WHERE name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2873,
                    "db_id": "icfp_1",
                    "query": "SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t1.fname  =  \"Katsuhiro\" AND t1.lname  =  \"Ueno\"",
                    "question": "Which institution does \"Katsuhiro Ueno\" belong to?"
                }
            ],
            "example_quality": 0.6814094608846805,
            "example_similarity": 0.39434572165518766,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE name = \"Kyle\"",
            "correct": 1
        },
        {
            "index": 875,
            "question": "How many high schoolers are there in grade 9 or 10?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are there in grade 9 or 10? */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6814307072150979,
            "example_similarity": 0.39395853289393096,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",
            "correct": 1
        },
        {
            "index": 876,
            "question": "Count the number of high schoolers in grades 9 or 10.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of high schoolers in grades 9 or 10. */\nSELECT ",
            "response": "count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6814519050379118,
            "example_similarity": 0.39391650586681787,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",
            "correct": 1
        },
        {
            "index": 877,
            "question": "Show the number of high schoolers for each grade.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the number of high schoolers for each grade. */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1548,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Show the number of accounts."
                }
            ],
            "example_quality": 0.6813400252526158,
            "example_similarity": 0.3941514927472434,
            "db_id": "network_1",
            "pred": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
            "correct": 1
        },
        {
            "index": 878,
            "question": "How many high schoolers are in each grade?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms are located for each block code? */\nSELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many high schoolers are in each grade? */\nSELECT ",
            "response": "grade , count(*) FROM Highschooler GROUP BY grade",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3936,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
                    "question": "How many rooms are located for each block code?"
                }
            ],
            "example_quality": 0.6817029637204375,
            "example_similarity": 0.3945309018981836,
            "db_id": "network_1",
            "pred": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
            "correct": 1
        },
        {
            "index": 879,
            "question": "Which grade has the most high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many customers are there in the customer type with the most customers? */\nSELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grade has the most high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5801,
                    "db_id": "customer_complaints",
                    "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "How many customers are there in the customer type with the most customers?"
                }
            ],
            "example_quality": 0.6818854464274197,
            "example_similarity": 0.3945086824420992,
            "db_id": "network_1",
            "pred": "SELECT grade, count(*) FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 880,
            "question": "Return the grade that has the greatest number of high schoolers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the account details with the greatest value, as well as those that include the character 5. */\nSELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the grade that has the greatest number of high schoolers. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6469,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
                    "question": "Return the account details with the greatest value, as well as those that include the character 5."
                }
            ],
            "example_quality": 0.6816271055275538,
            "example_similarity": 0.3945252531542001,
            "db_id": "network_1",
            "pred": "SELECT grade, COUNT(*) as num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1;",
            "correct": 0
        },
        {
            "index": 881,
            "question": "Show me all grades that have at least 4 students.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the location codes with at least 3 documents. */\nSELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show me all grades that have at least 4 students. */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4231,
                    "db_id": "cre_Doc_Tracking_DB",
                    "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
                    "question": "Show the location codes with at least 3 documents."
                }
            ],
            "example_quality": 0.6819884822522672,
            "example_similarity": 0.3946449747737754,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
            "correct": 1
        },
        {
            "index": 882,
            "question": "Which grades have 4 or more high schoolers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of types of documents of which there are for or more? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Which grades have 4 or more high schoolers? */\nSELECT ",
            "response": "grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4505,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "What are the codes of types of documents of which there are for or more?"
                }
            ],
            "example_quality": 0.6821978679488822,
            "example_similarity": 0.3944809782037371,
            "db_id": "network_1",
            "pred": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
            "correct": 1
        },
        {
            "index": 883,
            "question": "Show the student IDs and numbers of friends corresponding to each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the position of players and the corresponding number of players. */\nSELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the student IDs and numbers of friends corresponding to each. */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1091,
                    "db_id": "match_season",
                    "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION",
                    "question": "Show the position of players and the corresponding number of players."
                }
            ],
            "example_quality": 0.6825577797632095,
            "example_similarity": 0.39471372907779856,
            "db_id": "network_1",
            "pred": "SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 884,
            "question": "How many friends does each student have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does each student have? */\nSELECT ",
            "response": "student_id , count(*) FROM Friend GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.6829168772974141,
            "example_similarity": 0.39460658685033495,
            "db_id": "network_1",
            "pred": "SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name",
            "correct": 0
        },
        {
            "index": 885,
            "question": "Show the names of high school students and their corresponding number of friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the type of school and the number of buses for each type. */\nSELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high school students and their corresponding number of friends. */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6363,
                    "db_id": "school_bus",
                    "query": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
                    "question": "Show the type of school and the number of buses for each type."
                }
            ],
            "example_quality": 0.6832751633117673,
            "example_similarity": 0.39478845009180974,
            "db_id": "network_1",
            "pred": "SELECT H.name, COUNT(F.friend_id) FROM Highschooler AS H LEFT JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.name",
            "correct": 0
        },
        {
            "index": 886,
            "question": "What are the names of the high schoolers and how many friends does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many assets can each parts be used in? List the part name and the number. */\nSELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of the high schoolers and how many friends does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3136,
                    "db_id": "assets_maintenance",
                    "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
                    "question": "How many assets can each parts be used in? List the part name and the number."
                }
            ],
            "example_quality": 0.683632640554079,
            "example_similarity": 0.3948826627548723,
            "db_id": "network_1",
            "pred": "SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name",
            "correct": 0
        },
        {
            "index": 887,
            "question": "What is the name of the high schooler who has the greatest number of friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6839893117597678,
            "example_similarity": 0.39471932266157483,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 888,
            "question": "Return the name of the high school student with the most friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the maximum enrollment across all schools. */\nSELECT max(Enrollment) FROM university\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the name of the high school student with the most friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1019,
                    "db_id": "university_basketball",
                    "query": "SELECT max(Enrollment) FROM university",
                    "question": "Return the maximum enrollment across all schools."
                }
            ],
            "example_quality": 0.6836165098056134,
            "example_similarity": 0.39462673333425324,
            "db_id": "network_1",
            "pred": "SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(friend_id) as num_friends FROM Friend GROUP BY student_id ORDER BY num_friends DESC LIMIT 1 ) f ON h.ID = f.student_id;",
            "correct": 1
        },
        {
            "index": 889,
            "question": "Show the names of high schoolers who have at least 3 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of the party that has at least two records. */\nSELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have at least 3 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2789,
                    "db_id": "election",
                    "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
                    "question": "Show the name of the party that has at least two records."
                }
            ],
            "example_quality": 0.6839723967462145,
            "example_similarity": 0.394597255628176,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(*) >= 3;",
            "correct": 1
        },
        {
            "index": 890,
            "question": "What are the names of high schoolers who have 3 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have 3 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 3",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                }
            ],
            "example_quality": 0.6836635411421074,
            "example_similarity": 0.3945860400427683,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 )",
            "correct": 1
        },
        {
            "index": 891,
            "question": "Show the names of all of the high schooler Kyle's friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all majors. */\nSELECT DISTINCT Major FROM Student\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of all of the high schooler Kyle's friends. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 466,
                    "db_id": "allergy_1",
                    "query": "SELECT DISTINCT Major FROM Student",
                    "question": "Show all majors."
                }
            ],
            "example_quality": 0.683537575968467,
            "example_similarity": 0.3944885162129699,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
            "correct": 1
        },
        {
            "index": 892,
            "question": "Return the names of friends of the high school student Kyle.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the types of schools that have two schools. */\nSELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the names of friends of the high school student Kyle. */\nSELECT ",
            "response": "T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6359,
                    "db_id": "school_bus",
                    "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
                    "question": "Show the types of schools that have two schools."
                }
            ],
            "example_quality": 0.6831449703152886,
            "example_similarity": 0.39446666810062353,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id WHERE F.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
            "correct": 1
        },
        {
            "index": 893,
            "question": "How many friends does the high school student Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many schools are there? */\nSELECT count(*) FROM school\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many friends does the high school student Kyle have? */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1885,
                    "db_id": "school_finance",
                    "query": "SELECT count(*) FROM school",
                    "question": "How many schools are there?"
                }
            ],
            "example_quality": 0.6832509421041604,
            "example_similarity": 0.39436949636444396,
            "db_id": "network_1",
            "pred": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
            "correct": 1
        },
        {
            "index": 894,
            "question": "Count the number of friends Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of friends Kyle has. */\nSELECT ",
            "response": "count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6832696770682497,
            "example_similarity": 0.3944876512902108,
            "db_id": "network_1",
            "pred": "SELECT COUNT(friend_id) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 895,
            "question": "Show ids of all students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display all the information of those employees who did not have any job in the past. */\nSELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show ids of all students who do not have any friends. */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3514,
                    "db_id": "hr_1",
                    "query": "SELECT * FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                    "question": "display all the information of those employees who did not have any job in the past."
                }
            ],
            "example_quality": 0.683102150427205,
            "example_similarity": 0.3945496762608363,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 896,
            "question": "What are the ids of high school students who do not have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of the people who have no friends who are students? */\nSELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of high school students who do not have friends? */\nSELECT ",
            "response": "id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4450,
                    "db_id": "network_2",
                    "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
                    "question": "What are the names of the people who have no friends who are students?"
                }
            ],
            "example_quality": 0.6832529089849669,
            "example_similarity": 0.394791374290803,
            "db_id": "network_1",
            "pred": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 897,
            "question": "Show names of all high school students who do not have any friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all school names in alphabetical order. */\nSELECT school_name FROM school ORDER BY school_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show names of all high school students who do not have any friends. */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1887,
                    "db_id": "school_finance",
                    "query": "SELECT school_name FROM school ORDER BY school_name",
                    "question": "Show all school names in alphabetical order."
                }
            ],
            "example_quality": 0.6829557113904091,
            "example_similarity": 0.3946791404811799,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 898,
            "question": "What are the names of students who have no friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of customers who do not have any policies? */\nSELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have no friends? */\nSELECT ",
            "response": "name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1525,
                    "db_id": "insurance_and_eClaims",
                    "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
                    "question": "What are the names of customers who do not have any policies?"
                }
            ],
            "example_quality": 0.683308767391088,
            "example_similarity": 0.3949077828637176,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 899,
            "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the ids of high schoolers who have friends and are also liked by someone else. */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.6833187773186927,
            "example_similarity": 0.39490550184035095,
            "db_id": "network_1",
            "pred": "SELECT Highschooler.ID FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)",
            "correct": 1
        },
        {
            "index": 900,
            "question": "What are the ids of students who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the ids of students who both have friends and are liked? */\nSELECT ",
            "response": "student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.6833287650020139,
            "example_similarity": 0.39483708831978764,
            "db_id": "network_1",
            "pred": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes",
            "correct": 0
        },
        {
            "index": 901,
            "question": "Show name of all students who have some friends and also are liked by someone else.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the ID for those employees who did two or more jobs in the past. */\nSELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show name of all students who have some friends and also are liked by someone else. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3460,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
                    "question": "display the ID for those employees who did two or more jobs in the past."
                }
            ],
            "example_quality": 0.6829620751146315,
            "example_similarity": 0.3945519539648075,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes)",
            "correct": 1
        },
        {
            "index": 902,
            "question": "What are the names of high schoolers who both have friends and are liked?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who both have friends and are liked? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.6829724361093024,
            "example_similarity": 0.3945251451138159,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT student_id FROM Likes)",
            "correct": 0
        },
        {
            "index": 903,
            "question": "Count the number of likes for each student id.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of colors. */\nSELECT count(*) FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Count the number of likes for each student id. */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5520,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM ref_colors",
                    "question": "Count the number of colors."
                }
            ],
            "example_quality": 0.6828620938027953,
            "example_similarity": 0.3947526920184518,
            "db_id": "network_1",
            "pred": "SELECT student_id, count(liked_id) FROM Likes GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 904,
            "question": "How many likes correspond to each student id?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What document types have more than 2 corresponding documents? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes correspond to each student id? */\nSELECT ",
            "response": "student_id , count(*) FROM Likes GROUP BY student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4542,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                    "question": "What document types have more than 2 corresponding documents?"
                }
            ],
            "example_quality": 0.682917924819975,
            "example_similarity": 0.39461100393731047,
            "db_id": "network_1",
            "pred": "SELECT student_id, count(liked_id) as num_likes FROM Likes GROUP BY student_id",
            "correct": 1
        },
        {
            "index": 905,
            "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the department name and number of employees in each of the department. */\nSELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of high schoolers who have likes, and numbers of likes for each. */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3464,
                    "db_id": "hr_1",
                    "query": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
                    "question": "display the department name and number of employees in each of the department."
                }
            ],
            "example_quality": 0.6832682917538756,
            "example_similarity": 0.39470114700057357,
            "db_id": "network_1",
            "pred": "SELECT H.name, COUNT(L.liked_id) FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name",
            "correct": 0
        },
        {
            "index": 906,
            "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How old is each student and how many students are each age? */\nSELECT age ,  count(*) FROM Student GROUP BY age\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have likes, and how many likes does each have? */\nSELECT ",
            "response": "T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 495,
                    "db_id": "allergy_1",
                    "query": "SELECT age ,  count(*) FROM Student GROUP BY age",
                    "question": "How old is each student and how many students are each age?"
                }
            ],
            "example_quality": 0.683617885250836,
            "example_similarity": 0.3946973977741117,
            "db_id": "network_1",
            "pred": "SELECT name, count(liked_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, name",
            "correct": 1
        },
        {
            "index": 907,
            "question": "What is the name of the high schooler who has the greatest number of likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the name of the high schooler who has the greatest number of likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6839667078690821,
            "example_similarity": 0.3945378637082086,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 908,
            "question": "Give the name of the student with the most likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Give the name of the student with the most likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6843147621555699,
            "example_similarity": 0.39457534560783764,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE ID = ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 909,
            "question": "Show the names of students who have at least 2 likes.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of the party that has at least two records. */\nSELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have at least 2 likes. */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2789,
                    "db_id": "election",
                    "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
                    "question": "Show the name of the party that has at least two records."
                }
            ],
            "example_quality": 0.6846620506460478,
            "example_similarity": 0.39456908987987405,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(*) >= 2;",
            "correct": 1
        },
        {
            "index": 910,
            "question": "What are the names of students who have 2 or more likes?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids and names of accounts with 4 or more transactions? */\nSELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of students who have 2 or more likes? */\nSELECT ",
            "response": "T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1595,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4",
                    "question": "What are the ids and names of accounts with 4 or more transactions?"
                }
            ],
            "example_quality": 0.6850085758651181,
            "example_similarity": 0.39478190988453093,
            "db_id": "network_1",
            "pred": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(*) >= 2",
            "correct": 1
        },
        {
            "index": 911,
            "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20. */\nSELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2321,
                    "db_id": "perpetrator",
                    "query": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20",
                    "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20."
                }
            ],
            "example_quality": 0.684750608163839,
            "example_similarity": 0.39489740723921307,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)",
            "correct": 1
        },
        {
            "index": 912,
            "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Whare the names, friends, and ages of all people who are older than the average age of a person? */\nSELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? */\nSELECT ",
            "response": "T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4468,
                    "db_id": "network_2",
                    "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
                    "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?"
                }
            ],
            "example_quality": 0.684476520445124,
            "example_similarity": 0.39499374628904915,
            "db_id": "network_1",
            "pred": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)",
            "correct": 1
        },
        {
            "index": 913,
            "question": "How many likes does Kyle have?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: How many likes does Kyle have? */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6844935231609562,
            "example_similarity": 0.394645366585472,
            "db_id": "network_1",
            "pred": "SELECT COUNT(liked_id) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 914,
            "question": "Return the number of likes that the high schooler named Kyle has.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: return me the number of keywords . */\nSELECT COUNT ( DISTINCT keyword ) FROM keyword;\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Return the number of likes that the high schooler named Kyle has. */\nSELECT ",
            "response": "count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = \"Kyle\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8333,
                    "db_id": "academic",
                    "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
                    "question": "return me the number of keywords ."
                }
            ],
            "example_quality": 0.6845104886717212,
            "example_similarity": 0.39468248481521595,
            "db_id": "network_1",
            "pred": "SELECT COUNT(liked_id) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
            "correct": 1
        },
        {
            "index": 915,
            "question": "Find the average grade of all students who have some friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average hours of all projects. */\nSELECT avg(hours) FROM projects\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the average grade of all students who have some friends. */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6478,
                    "db_id": "scientist_1",
                    "query": "SELECT avg(hours) FROM projects",
                    "question": "Find the average hours of all projects."
                }
            ],
            "example_quality": 0.6842405318535006,
            "example_similarity": 0.3949797352871847,
            "db_id": "network_1",
            "pred": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 916,
            "question": "What is the average grade of students who have friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the average grade of students who have friends? */\nSELECT ",
            "response": "avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5736,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "How many students are older than average for each gender?"
                }
            ],
            "example_quality": 0.6841485662073724,
            "example_similarity": 0.39479113538209193,
            "db_id": "network_1",
            "pred": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 917,
            "question": "Find the minimum grade of students who have no friends.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the person who has exactly one friend. */\nSELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: Find the minimum grade of students who have no friends. */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4451,
                    "db_id": "network_2",
                    "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1",
                    "question": "Find the person who has exactly one friend."
                }
            ],
            "example_quality": 0.6838486123828179,
            "example_similarity": 0.39482797321545005,
            "db_id": "network_1",
            "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 918,
            "question": "What is the lowest grade of students who do not have any friends?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN? */\nSELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )\n\n/* Given the following database schema: */\nCREATE TABLE Highschooler(\n\tID int primary key, \n\tname text, \n\tgrade int)\n\nCREATE TABLE Friend(\n\tstudent_id int, \n\tfriend_id int,\n\tprimary key (student_id,friend_id),\n\tforeign key(student_id) references Highschooler(ID),\n\tforeign key (friend_id) references Highschooler(ID)\n)\n\nCREATE TABLE Likes(\n\tstudent_id int, \n\tliked_id int,\n\tprimary key (student_id, liked_id),\n        foreign key (liked_id) references Highschooler(ID),\n        foreign key (student_id) references Highschooler(ID)\n)\n\n/* Answer the following: What is the lowest grade of students who do not have any friends? */\nSELECT ",
            "response": "min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3509,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id ,  job_id FROM employees WHERE salary  <  ( SELECT min(salary) FROM employees WHERE job_id  =  'MK_MAN' )",
                    "question": "What are the employee ids and job ids for employees who make less than the lowest earning employee with title MK_MAN?"
                }
            ],
            "example_quality": 0.6839206727179128,
            "example_similarity": 0.3947091129894139,
            "db_id": "network_1",
            "pred": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
            "correct": 1
        },
        {
            "index": 919,
            "question": "Which states have both owners and professionals living there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which states have both owners and professionals living there? */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.683929798963386,
            "example_similarity": 0.3945307235637118,
            "db_id": "dog_kennels",
            "pred": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "correct": 1
        },
        {
            "index": 920,
            "question": "Find the states where both owners and professionals live.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the residences that have both a player of gender \"M\" and a player of gender \"F\". */\nSELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the states where both owners and professionals live. */\nSELECT ",
            "response": "state FROM Owners INTERSECT SELECT state FROM Professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1734,
                    "db_id": "riding_club",
                    "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"",
                    "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\"."
                }
            ],
            "example_quality": 0.683938905369195,
            "example_similarity": 0.3944062336467947,
            "db_id": "dog_kennels",
            "pred": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
            "correct": 1
        },
        {
            "index": 921,
            "question": "What is the average age of the dogs who have gone through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many students are older than average for each gender? */\nSELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of the dogs who have gone through any treatments? */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5736,
                    "db_id": "dorm_1",
                    "query": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
                    "question": "How many students are older than average for each gender?"
                }
            ],
            "example_quality": 0.6838477664925726,
            "example_similarity": 0.39417541057206223,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 922,
            "question": "Find the average age of the dogs who went through treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the average age of female students. */\nSELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the average age of the dogs who went through treatments. */\nSELECT ",
            "response": "avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5460,
                    "db_id": "voter_2",
                    "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"",
                    "question": "Find the average age of female students."
                }
            ],
            "example_quality": 0.6837161528629712,
            "example_similarity": 0.39433190311858013,
            "db_id": "dog_kennels",
            "pred": "SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 923,
            "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the ids, full names, and phones of each customer? */\nSELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 695,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers",
                    "question": "What are the ids, full names, and phones of each customer?"
                }
            ],
            "example_quality": 0.6831817650380666,
            "example_similarity": 0.3940757415083131,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
            "correct": 1
        },
        {
            "index": 924,
            "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find all the phone numbers. */\nSELECT customer_phone FROM available_policies\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. */\nSELECT ",
            "response": "professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 892,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies",
                    "question": "Find all the phone numbers."
                }
            ],
            "example_quality": 0.6826485338967659,
            "example_similarity": 0.39379852862192183,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
            "correct": 1
        },
        {
            "index": 925,
            "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of hosts who did not serve as a host of any party in our record. */\nSELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names . */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2689,
                    "db_id": "party_host",
                    "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)",
                    "question": "List the names of hosts who did not serve as a host of any party in our record."
                }
            ],
            "example_quality": 0.6822580258292328,
            "example_similarity": 0.39367102974661755,
            "db_id": "dog_kennels",
            "pred": "SELECT d.name FROM Dogs d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t GROUP BY t.dog_id HAVING SUM(t.cost_of_treatment) > 1000)",
            "correct": 1
        },
        {
            "index": 926,
            "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many documents do not have any expense? */\nSELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ? */\nSELECT ",
            "response": "name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6464,
                    "db_id": "cre_Docs_and_Epenses",
                    "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )",
                    "question": "How many documents do not have any expense?"
                }
            ],
            "example_quality": 0.6818347694089476,
            "example_similarity": 0.3933705044611294,
            "db_id": "dog_kennels",
            "pred": "SELECT d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments t GROUP BY t.dog_id HAVING SUM(t.cost_of_treatment) > 1000)",
            "correct": 1
        },
        {
            "index": 927,
            "question": "Which first names are used for professionals or owners but are not used as dog names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names, details and data types of the characteristics which are never used by any product? */\nSELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which first names are used for professionals or owners but are not used as dog names? */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5597,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
                    "question": "What are the names, details and data types of the characteristics which are never used by any product?"
                }
            ],
            "example_quality": 0.6817927223468636,
            "example_similarity": 0.3931978645785752,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs",
            "correct": 1
        },
        {
            "index": 928,
            "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the names of the chip models that are not used by any phone with full accreditation type. */\nSELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names that are used for professionals or owners but are not used as dog names. */\nSELECT ",
            "response": "first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1051,
                    "db_id": "phone_1",
                    "query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
                    "question": "Find the names of the chip models that are not used by any phone with full accreditation type."
                }
            ],
            "example_quality": 0.681776422717898,
            "example_similarity": 0.39327150746323025,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name FROM Owners WHERE first_name NOT IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Professionals WHERE first_name NOT IN (SELECT name FROM Dogs)",
            "correct": 1
        },
        {
            "index": 929,
            "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which organizations are not a parent organization of others? List the organization id. */\nSELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4855,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
                    "question": "Which organizations are not a parent organization of others? List the organization id."
                }
            ],
            "example_quality": 0.6821189669345633,
            "example_similarity": 0.39334154172143276,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 930,
            "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of members who did not attend any performance. */\nSELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. */\nSELECT ",
            "response": "professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1322,
                    "db_id": "performance_attendance",
                    "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)",
                    "question": "List the names of members who did not attend any performance."
                }
            ],
            "example_quality": 0.6819589823823039,
            "example_similarity": 0.3934073523803833,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 931,
            "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Which parties have more than 20 hosts? Give me the host names for these parties. */\nSELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner owns the most dogs? List the owner id, first name and last name. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2686,
                    "db_id": "party_host",
                    "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
                    "question": "Which parties have more than 20 hosts? Give me the host names for these parties."
                }
            ],
            "example_quality": 0.6815423966300768,
            "example_similarity": 0.39341443363453976,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 932,
            "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the owner id, first name and last name of the owner who has the most dogs. */\nSELECT ",
            "response": "T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.6818840893375553,
            "example_similarity": 0.3933499689346457,
            "db_id": "dog_kennels",
            "pred": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 933,
            "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the ID for those employees who did two or more jobs in the past. */\nSELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3460,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
                    "question": "display the ID for those employees who did two or more jobs in the past."
                }
            ],
            "example_quality": 0.6822250495847819,
            "example_similarity": 0.3931358193292461,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
            "correct": 1
        },
        {
            "index": 934,
            "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the ID for those employees who did two or more jobs in the past. */\nSELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the id, role, and first name of the professionals who have performed two or more treatments? */\nSELECT ",
            "response": "T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3460,
                    "db_id": "hr_1",
                    "query": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
                    "question": "display the ID for those employees who did two or more jobs in the past."
                }
            ],
            "example_quality": 0.6825652797244127,
            "example_similarity": 0.39305904497389205,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
            "correct": 1
        },
        {
            "index": 935,
            "question": "What is the name of the breed with the most dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the party that has the most people. */\nSELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the name of the breed with the most dogs? */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1500,
                    "db_id": "debate",
                    "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Show the party that has the most people."
                }
            ],
            "example_quality": 0.682904782099039,
            "example_similarity": 0.3929728855675028,
            "db_id": "dog_kennels",
            "pred": "SELECT Breed_name FROM Breeds WHERE breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 )",
            "correct": 1
        },
        {
            "index": 936,
            "question": "Which breed do the most dogs have? Give me the breed name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most frequently ordered product? Tell me the detail of the product */\nSELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which breed do the most dogs have? Give me the breed name. */\nSELECT ",
            "response": "T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6131,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most frequently ordered product? Tell me the detail of the product"
                }
            ],
            "example_quality": 0.6832435590412409,
            "example_similarity": 0.3929600431480423,
            "db_id": "dog_kennels",
            "pred": "SELECT t2.breed_name FROM Dogs AS t1 JOIN Breeds AS t2 ON t1.breed_code = t2.breed_code GROUP BY t1.breed_code ORDER BY COUNT(*) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 937,
            "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the maximum total amount paid by a customer? List the customer id and amount. */\nSELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1963,
                    "db_id": "products_for_hire",
                    "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1",
                    "question": "What is the maximum total amount paid by a customer? List the customer id and amount."
                }
            ],
            "example_quality": 0.6833275090976587,
            "example_similarity": 0.3929980488955592,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 938,
            "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Give the ids of the three products purchased in the largest amounts. */\nSELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4711,
                    "db_id": "department_store",
                    "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
                    "question": "Give the ids of the three products purchased in the largest amounts."
                }
            ],
            "example_quality": 0.6832653262521389,
            "example_similarity": 0.39283640844934303,
            "db_id": "dog_kennels",
            "pred": "SELECT owner_id, last_name FROM Owners WHERE owner_id IN ( SELECT owner_id FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments GROUP BY dog_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1 ) )",
            "correct": 0
        },
        {
            "index": 939,
            "question": "What is the description of the treatment type that costs the least money in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Tell me the payment method used by the customer who ordered the least amount of goods in total. */\nSELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the description of the treatment type that costs the least money in total? */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6113,
                    "db_id": "customers_and_addresses",
                    "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
                    "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total."
                }
            ],
            "example_quality": 0.6836026368738085,
            "example_similarity": 0.3928440374073309,
            "db_id": "dog_kennels",
            "pred": "SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY SUM(Treatments.cost_of_treatment) LIMIT 1",
            "correct": 1
        },
        {
            "index": 940,
            "question": "Give me the description of the treatment type whose total cost is the lowest.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the structure description of the document that has been accessed the fewest number of times. */\nSELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Give me the description of the treatment type whose total cost is the lowest. */\nSELECT ",
            "response": "T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4511,
                    "db_id": "document_management",
                    "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "Return the structure description of the document that has been accessed the fewest number of times."
                }
            ],
            "example_quality": 0.6838140733677476,
            "example_similarity": 0.3927807281476778,
            "db_id": "dog_kennels",
            "pred": "SELECT Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY SUM(Treatments.cost_of_treatment) ASC LIMIT 1",
            "correct": 1
        },
        {
            "index": 941,
            "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the total amount of all payments? */\nSELECT sum(amount) FROM payment\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2959,
                    "db_id": "sakila_1",
                    "query": "SELECT sum(amount) FROM payment",
                    "question": "What is the total amount of all payments?"
                }
            ],
            "example_quality": 0.6834624549863478,
            "example_similarity": 0.3926085586499324,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.owner_id, Owners.zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1;",
            "correct": 1
        },
        {
            "index": 942,
            "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the customer who made the most orders. */\nSELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. */\nSELECT ",
            "response": "T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6933,
                    "db_id": "tracking_orders",
                    "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the name of the customer who made the most orders."
                }
            ],
            "example_quality": 0.6837984821041967,
            "example_similarity": 0.3926164051906437,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.owner_id, T2.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 943,
            "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of the company that produced more than one phone model. */\nSELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1035,
                    "db_id": "phone_1",
                    "query": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;",
                    "question": "List the name of the company that produced more than one phone model."
                }
            ],
            "example_quality": 0.6839924038269565,
            "example_similarity": 0.39248556146216024,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, cell_number FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;",
            "correct": 0
        },
        {
            "index": 944,
            "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the accreditation level that more than 3 phones use. */\nSELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the id and cell phone of the professionals who operate two or more types of treatments. */\nSELECT ",
            "response": "T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1045,
                    "db_id": "phone_1",
                    "query": "SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING count(*)  >  3",
                    "question": "Find the accreditation level that more than 3 phones use."
                }
            ],
            "example_quality": 0.6841859146986087,
            "example_similarity": 0.3924068498697023,
            "db_id": "dog_kennels",
            "pred": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
            "correct": 1
        },
        {
            "index": 945,
            "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the first name and GPA of every student that has a GPA lower than average? */\nSELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the first name and last name of the professionals who have done treatment with cost below average? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3303,
                    "db_id": "college_1",
                    "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
                    "question": "What is the first name and GPA of every student that has a GPA lower than average?"
                }
            ],
            "example_quality": 0.6844578623767987,
            "example_similarity": 0.39223055315197025,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT avg(cost_of_treatment) FROM Treatments))",
            "correct": 0
        },
        {
            "index": 946,
            "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what is the average number of factories and maximum number of shops for manufacturers that opened before 1990. */\nSELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3400,
                    "db_id": "manufacturer",
                    "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",
                    "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990."
                }
            ],
            "example_quality": 0.6844019650036398,
            "example_similarity": 0.3920721955296365,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments ) )",
            "correct": 0
        },
        {
            "index": 947,
            "question": "List the date of each treatment, together with the first name of the professional who operated it.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the id and type of each thing, and the details of the organization that owns it. */\nSELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the date of each treatment, together with the first name of the professional who operated it. */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4848,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id",
                    "question": "List the id and type of each thing, and the details of the organization that owns it."
                }
            ],
            "example_quality": 0.6847352258642484,
            "example_similarity": 0.39220728296835916,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 1
        },
        {
            "index": 948,
            "question": "What are the date and the operating professional's first name of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the date and the operating professional's first name of each treatment? */\nSELECT ",
            "response": "T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6848568131787376,
            "example_similarity": 0.39212320355594527,
            "db_id": "dog_kennels",
            "pred": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
            "correct": 1
        },
        {
            "index": 949,
            "question": "List the cost of each treatment and the corresponding treatment type description.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the cost of each treatment and the corresponding treatment type description. */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6851888924061572,
            "example_similarity": 0.3919531782948423,
            "db_id": "dog_kennels",
            "pred": "SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;",
            "correct": 1
        },
        {
            "index": 950,
            "question": "What are the cost and treatment type description of each treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the cost and treatment type description of each treatment? */\nSELECT ",
            "response": "T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6853097462036245,
            "example_similarity": 0.3919454543014955,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
            "correct": 1
        },
        {
            "index": 951,
            "question": "List each owner's first name, last name, and the size of his for her dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of perpetrators in descending order of the year. */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each owner's first name, last name, and the size of his for her dog. */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2319,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC",
                    "question": "List the names of perpetrators in descending order of the year."
                }
            ],
            "example_quality": 0.6851148884263336,
            "example_similarity": 0.39184000867832536,
            "db_id": "dog_kennels",
            "pred": "SELECT O.first_name, O.last_name, S.size_description FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Sizes AS S ON D.size_code = S.size_code",
            "correct": 0
        },
        {
            "index": 952,
            "question": "What are each owner's first name, last name, and the size of their dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name, last name, and the size of their dog? */\nSELECT ",
            "response": "T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6852355660645412,
            "example_similarity": 0.39170483839057163,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code",
            "correct": 0
        },
        {
            "index": 953,
            "question": "List pairs of the owner's first name and the dogs's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List member names and their party names. */\nSELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List pairs of the owner's first name and the dogs's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2056,
                    "db_id": "party_people",
                    "query": "SELECT T1.member_name ,  T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id",
                    "question": "List member names and their party names."
                }
            ],
            "example_quality": 0.685565854032994,
            "example_similarity": 0.3917834971820471,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "correct": 1
        },
        {
            "index": 954,
            "question": "What are each owner's first name and their dogs's name?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each owner's first name and their dogs's name? */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6856858059679699,
            "example_similarity": 0.3916523474645257,
            "db_id": "dog_kennels",
            "pred": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
            "correct": 1
        },
        {
            "index": 955,
            "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the names of the dogs of the rarest breed and the treatment dates of them. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6851353496266421,
            "example_similarity": 0.39142702625067316,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id WHERE B.breed_name = (SELECT breed_name FROM Breeds GROUP BY breed_name HAVING COUNT(*) = 1);",
            "correct": 0
        },
        {
            "index": 956,
            "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name of aircraft which fewest people have its certificate. */\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are of the rarest breed? Show their names and treatment dates. */\nSELECT ",
            "response": "T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 432,
                    "db_id": "flight_1",
                    "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
                    "question": "Show the name of aircraft which fewest people have its certificate."
                }
            ],
            "example_quality": 0.6850221568727681,
            "example_similarity": 0.39145801537758557,
            "db_id": "dog_kennels",
            "pred": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY D.dog_id ORDER BY COUNT(D.breed_code) ASC LIMIT 1",
            "correct": 0
        },
        {
            "index": 957,
            "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many residents does each property have? List property id and resident count. */\nSELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4844,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
                    "question": "How many residents does each property have? List property id and resident count."
                }
            ],
            "example_quality": 0.6847082521995629,
            "example_similarity": 0.3913732576055987,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "correct": 1
        },
        {
            "index": 958,
            "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of members living in each address. */\nSELECT count(*) ,  address FROM member GROUP BY address\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the first names of owners living in Virginia and the names of dogs they own. */\nSELECT ",
            "response": "T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 791,
                    "db_id": "coffee_shop",
                    "query": "SELECT count(*) ,  address FROM member GROUP BY address",
                    "question": "Find the number of members living in each address."
                }
            ],
            "example_quality": 0.6843950028597047,
            "example_similarity": 0.3914042381629822,
            "db_id": "dog_kennels",
            "pred": "SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'",
            "correct": 1
        },
        {
            "index": 959,
            "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000? */\nSELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4819,
                    "db_id": "aircraft",
                    "query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000",
                    "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?"
                }
            ],
            "example_quality": 0.6842772067893906,
            "example_similarity": 0.39135567022559314,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id;",
            "correct": 1
        },
        {
            "index": 960,
            "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the origins from which more than 1 train starts. */\nSELECT origin FROM train GROUP BY origin HAVING count(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the arriving date and the departing date of the dogs that received a treatment. */\nSELECT ",
            "response": "DISTINCT T1.date_arrived , T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3173,
                    "db_id": "station_weather",
                    "query": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1",
                    "question": "Find the origins from which more than 1 train starts."
                }
            ],
            "example_quality": 0.6838421958100962,
            "example_similarity": 0.3912456271167272,
            "db_id": "dog_kennels",
            "pred": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;",
            "correct": 1
        },
        {
            "index": 961,
            "question": "List the last name of the owner owning the youngest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of the youngest organization. */\nSELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the last name of the owner owning the youngest dog. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6321,
                    "db_id": "e_government",
                    "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
                    "question": "Find the name of the youngest organization."
                }
            ],
            "example_quality": 0.683442776251501,
            "example_similarity": 0.3912844677009673,
            "db_id": "dog_kennels",
            "pred": "SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.age DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 962,
            "question": "Who owns the youngest dog? Give me his or her last name.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Who is the youngest male? */\nSELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Who owns the youngest dog? Give me his or her last name. */\nSELECT ",
            "response": "T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT max(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4413,
                    "db_id": "network_2",
                    "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
                    "question": "Who is the youngest male?"
                }
            ],
            "example_quality": 0.6835529954905435,
            "example_similarity": 0.3912242274365519,
            "db_id": "dog_kennels",
            "pred": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs WHERE age = (SELECT min(age) FROM Dogs))",
            "correct": 0
        },
        {
            "index": 963,
            "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: list the states */\nSELECT state_name FROM state;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7044,
                    "db_id": "geo",
                    "query": "SELECT state_name FROM state;",
                    "question": "list the states"
                }
            ],
            "example_quality": 0.6835354603619622,
            "example_similarity": 0.3909819330537954,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
            "correct": 1
        },
        {
            "index": 964,
            "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the distinct ages of the heads who are acting? */\nSELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? */\nSELECT ",
            "response": "email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 13,
                    "db_id": "department_management",
                    "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
                    "question": "What are the distinct ages of the heads who are acting?"
                }
            ],
            "example_quality": 0.6837155510225233,
            "example_similarity": 0.3909221316018032,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'",
            "correct": 1
        },
        {
            "index": 965,
            "question": "What are the arriving date and the departing date of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and arrival times of trains? */\nSELECT Name ,  Arrival FROM train\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the arriving date and the departing date of all the dogs? */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5639,
                    "db_id": "railway",
                    "query": "SELECT Name ,  Arrival FROM train",
                    "question": "What are the names and arrival times of trains?"
                }
            ],
            "example_quality": 0.6836287991561787,
            "example_similarity": 0.3910351656623195,
            "db_id": "dog_kennels",
            "pred": "SELECT date_arrived, date_departed FROM Dogs",
            "correct": 1
        },
        {
            "index": 966,
            "question": "List the arrival date and the departure date for all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show flight number, origin, destination of all flights in the alphabetical order of the departure cities. */\nSELECT flno ,  origin ,  destination FROM Flight ORDER BY origin\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the arrival date and the departure date for all the dogs. */\nSELECT ",
            "response": "date_arrived , date_departed FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 384,
                    "db_id": "flight_1",
                    "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
                    "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities."
                }
            ],
            "example_quality": 0.6834387072315864,
            "example_similarity": 0.39092022242664426,
            "db_id": "dog_kennels",
            "pred": "SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs",
            "correct": 1
        },
        {
            "index": 967,
            "question": "How many dogs went through any treatments?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs went through any treatments? */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.6831341055580158,
            "example_similarity": 0.3910800304132295,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
            "correct": 1
        },
        {
            "index": 968,
            "question": "Count the number of dogs that went through a treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of different affected regions. */\nSELECT count(DISTINCT region_id) FROM affected_region\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs that went through a treatment. */\nSELECT ",
            "response": "count(DISTINCT dog_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2710,
                    "db_id": "storm_record",
                    "query": "SELECT count(DISTINCT region_id) FROM affected_region",
                    "question": "Count the number of different affected regions."
                }
            ],
            "example_quality": 0.6834614463580592,
            "example_similarity": 0.3911528180486894,
            "db_id": "dog_kennels",
            "pred": "SELECT count(DISTINCT dog_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 969,
            "question": "How many professionals have performed any treatment to dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many performances are there? */\nSELECT count(*) FROM performance\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals have performed any treatment to dogs? */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1308,
                    "db_id": "performance_attendance",
                    "query": "SELECT count(*) FROM performance",
                    "question": "How many performances are there?"
                }
            ],
            "example_quality": 0.6836591125640881,
            "example_similarity": 0.391093148817817,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 970,
            "question": "Find the number of professionals who have ever treated dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Return the name of each physician and the number of patients he or she treats. */\nSELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have ever treated dogs. */\nSELECT ",
            "response": "count(DISTINCT professional_id) FROM Treatments",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3930,
                    "db_id": "hospital_1",
                    "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
                    "question": "Return the name of each physician and the number of patients he or she treats."
                }
            ],
            "example_quality": 0.6835094243433638,
            "example_similarity": 0.39098451081461744,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(DISTINCT professional_id) FROM Treatments",
            "correct": 1
        },
        {
            "index": 971,
            "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the resident details containing the substring 'Miss'? */\nSELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4857,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
                    "question": "What are the resident details containing the substring 'Miss'?"
                }
            ],
            "example_quality": 0.6838353672637105,
            "example_similarity": 0.39086595011240416,
            "db_id": "dog_kennels",
            "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
            "correct": 1
        },
        {
            "index": 972,
            "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the resident details containing the substring 'Miss'? */\nSELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. */\nSELECT ",
            "response": "role_code , street , city , state FROM professionals WHERE city LIKE '%West%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4857,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
                    "question": "What are the resident details containing the substring 'Miss'?"
                }
            ],
            "example_quality": 0.684160639519612,
            "example_similarity": 0.39071215727313713,
            "db_id": "dog_kennels",
            "pred": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
            "correct": 1
        },
        {
            "index": 973,
            "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the resident details containing the substring 'Miss'? */\nSELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4857,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
                    "question": "What are the resident details containing the substring 'Miss'?"
                }
            ],
            "example_quality": 0.684485243178893,
            "example_similarity": 0.3905941201834068,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
            "correct": 1
        },
        {
            "index": 974,
            "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the resident details containing the substring 'Miss'? */\nSELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. */\nSELECT ",
            "response": "first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4857,
                    "db_id": "local_govt_and_lot",
                    "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
                    "question": "What are the resident details containing the substring 'Miss'?"
                }
            ],
            "example_quality": 0.6848091803008859,
            "example_similarity": 0.3904326614700084,
            "db_id": "dog_kennels",
            "pred": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
            "correct": 1
        },
        {
            "index": 975,
            "question": "How many dogs have an age below the average?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many products have a price higher than the average? */\nSELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have an age below the average? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5664,
                    "db_id": "customers_and_products_contacts",
                    "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)",
                    "question": "How many products have a price higher than the average?"
                }
            ],
            "example_quality": 0.6850298888339106,
            "example_similarity": 0.39066338142274126,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
            "correct": 1
        },
        {
            "index": 976,
            "question": "Count the number of dogs of an age below the average.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of buildings with a height above the average or a number of floors above the average. */\nSELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Count the number of dogs of an age below the average. */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE age < ( SELECT avg(age) FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1915,
                    "db_id": "protein_institute",
                    "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)",
                    "question": "Show the number of buildings with a height above the average or a number of floors above the average."
                }
            ],
            "example_quality": 0.6849043459150234,
            "example_similarity": 0.39066403815061357,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
            "correct": 1
        },
        {
            "index": 977,
            "question": "How much does the most recent treatment cost?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the average prices of products for each manufacturer? */\nSELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most recent treatment cost? */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5314,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
                    "question": "What are the average prices of products for each manufacturer?"
                }
            ],
            "example_quality": 0.6846809706036127,
            "example_similarity": 0.3905200626765597,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(cost_of_treatment) FROM Treatments",
            "correct": 0
        },
        {
            "index": 978,
            "question": "Show me the cost of the most recently performed treatment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the name of the program that was launched most recently. */\nSELECT name FROM program ORDER BY launch DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Show me the cost of the most recently performed treatment. */\nSELECT ",
            "response": "cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3741,
                    "db_id": "program_share",
                    "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
                    "question": "find the name of the program that was launched most recently."
                }
            ],
            "example_quality": 0.68500338269911,
            "example_similarity": 0.3906660885156771,
            "db_id": "dog_kennels",
            "pred": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 979,
            "question": "How many dogs have not gone through any treatment?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many dogs have not gone through any treatment? */\nSELECT ",
            "response": "count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.685325136138641,
            "example_similarity": 0.3910099155215576,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 980,
            "question": "Tell me the number of dogs that have not received any treatment .",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of items that did not receive any review. */\nSELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the number of dogs that have not received any treatment . */\nSELECT ",
            "response": "count(*) from dogs where dog_id not in ( select dog_id from treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1698,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)",
                    "question": "Find the number of items that did not receive any review."
                }
            ],
            "example_quality": 0.6850432644783881,
            "example_similarity": 0.3911849054036785,
            "db_id": "dog_kennels",
            "pred": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 981,
            "question": "How many owners temporarily do not have any dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many rooms have not had any reservation yet? */\nSELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many owners temporarily do not have any dogs? */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2638,
                    "db_id": "inn_1",
                    "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
                    "question": "How many rooms have not had any reservation yet?"
                }
            ],
            "example_quality": 0.6853076897382925,
            "example_similarity": 0.39146572269344704,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs WHERE date_departed IS NULL)",
            "correct": 0
        },
        {
            "index": 982,
            "question": "Find the number of owners who do not own any dogs at this moment.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of users who did not write any review. */\nSELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of owners who do not own any dogs at this moment. */\nSELECT ",
            "response": "count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1718,
                    "db_id": "epinions_1",
                    "query": "SELECT count(*) FROM useracct WHERE u_id NOT IN (SELECT u_id FROM review)",
                    "question": "Find the number of users who did not write any review."
                }
            ],
            "example_quality": 0.6856281503393736,
            "example_similarity": 0.3916660990390929,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
            "correct": 0
        },
        {
            "index": 983,
            "question": "How many professionals did not operate any treatment on dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many events did not have any participants? */\nSELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How many professionals did not operate any treatment on dogs? */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2152,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)",
                    "question": "How many events did not have any participants?"
                }
            ],
            "example_quality": 0.6859479589351627,
            "example_similarity": 0.3919458554659775,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 984,
            "question": "Find the number of professionals who have not treated any dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the number of patients who are not using the medication of Procrastin-X. */\nSELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the number of professionals who have not treated any dogs. */\nSELECT ",
            "response": "count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3993,
                    "db_id": "hospital_1",
                    "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
                    "question": "Find the number of patients who are not using the medication of Procrastin-X."
                }
            ],
            "example_quality": 0.6861601427595224,
            "example_similarity": 0.39197543552300285,
            "db_id": "dog_kennels",
            "pred": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
            "correct": 1
        },
        {
            "index": 985,
            "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the names of people that are not perpetrators. */\nSELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2320,
                    "db_id": "perpetrator",
                    "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)",
                    "question": "List the names of people that are not perpetrators."
                }
            ],
            "example_quality": 0.68589863137456,
            "example_similarity": 0.3918143775512367,
            "db_id": "dog_kennels",
            "pred": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
            "correct": 1
        },
        {
            "index": 986,
            "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: question answering 2016 papers */\nSELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. */\nSELECT ",
            "response": "name , age , weight FROM Dogs WHERE abandoned_yn = 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 8043,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
                    "question": "question answering 2016 papers"
                }
            ],
            "example_quality": 0.6860723070599234,
            "example_similarity": 0.3914766586383164,
            "db_id": "dog_kennels",
            "pred": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';",
            "correct": 1
        },
        {
            "index": 987,
            "question": "What is the average age of all the dogs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the average price across all products? */\nSELECT avg(price) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the average age of all the dogs? */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5332,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "What is the average price across all products?"
                }
            ],
            "example_quality": 0.6863903695654351,
            "example_similarity": 0.39181687755283956,
            "db_id": "dog_kennels",
            "pred": "SELECT avg(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 988,
            "question": "Compute the average age of all the dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Compute the average price of all the products. */\nSELECT avg(price) FROM products\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Compute the average age of all the dogs. */\nSELECT ",
            "response": "avg(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5331,
                    "db_id": "manufactory_1",
                    "query": "SELECT avg(price) FROM products",
                    "question": "Compute the average price of all the products."
                }
            ],
            "example_quality": 0.6867077882197211,
            "example_similarity": 0.3924324475148306,
            "db_id": "dog_kennels",
            "pred": "SELECT AVG(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 989,
            "question": "What is the age of the oldest dog?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the order id and customer id of the oldest order? */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the age of the oldest dog? */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6888,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "what are the order id and customer id of the oldest order?"
                }
            ],
            "example_quality": 0.6863245571979542,
            "example_similarity": 0.39261343449553204,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(age) FROM Dogs",
            "correct": 1
        },
        {
            "index": 990,
            "question": "Tell me the age of the oldest dog.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: what are the order id and customer id of the oldest order? */\nSELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Tell me the age of the oldest dog. */\nSELECT ",
            "response": "max(age) FROM Dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6888,
                    "db_id": "tracking_orders",
                    "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
                    "question": "what are the order id and customer id of the oldest order?"
                }
            ],
            "example_quality": 0.6859421003802718,
            "example_similarity": 0.39259564314755674,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(age) AS oldest_dog_age FROM Dogs",
            "correct": 1
        },
        {
            "index": 991,
            "question": "How much does each charge type costs? List both charge type and amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names and buying prices of all the products? */\nSELECT product_name ,  typical_buying_price FROM products\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does each charge type costs? List both charge type and amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5523,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT product_name ,  typical_buying_price FROM products",
                    "question": "What are the names and buying prices of all the products?"
                }
            ],
            "example_quality": 0.6862590104707054,
            "example_similarity": 0.3923256172715249,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_type, charge_amount FROM Charges",
            "correct": 1
        },
        {
            "index": 992,
            "question": "List each charge type and its amount.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the method, date and amount of all the payments, in ascending order of date. */\nSELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List each charge type and its amount. */\nSELECT ",
            "response": "charge_type , charge_amount FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3855,
                    "db_id": "insurance_policies",
                    "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC",
                    "question": "List the method, date and amount of all the payments, in ascending order of date."
                }
            ],
            "example_quality": 0.6860712493714406,
            "example_similarity": 0.3921701430989682,
            "db_id": "dog_kennels",
            "pred": "SELECT charge_type, charge_amount FROM Charges",
            "correct": 1
        },
        {
            "index": 993,
            "question": "How much does the most expensive charge type costs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most expensive product? */\nSELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: How much does the most expensive charge type costs? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5111,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
                    "question": "What is the name of the most expensive product?"
                }
            ],
            "example_quality": 0.6856902031059027,
            "example_similarity": 0.3921108915282073,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(charge_amount) FROM Charges",
            "correct": 1
        },
        {
            "index": 994,
            "question": "What is the charge amount of the most expensive charge type?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the name of the most expensive product? */\nSELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What is the charge amount of the most expensive charge type? */\nSELECT ",
            "response": "max(charge_amount) FROM Charges",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5111,
                    "db_id": "cre_Drama_Workshop_Groups",
                    "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1",
                    "question": "What is the name of the most expensive product?"
                }
            ],
            "example_quality": 0.6853099235330519,
            "example_similarity": 0.39241290038211013,
            "db_id": "dog_kennels",
            "pred": "SELECT MAX(charge_amount) FROM Charges",
            "correct": 1
        },
        {
            "index": 995,
            "question": "List the email, cell phone and home phone of all the professionals.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: For each phone, show its names and total number of stocks. */\nSELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the email, cell phone and home phone of all the professionals. */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1991,
                    "db_id": "phone_market",
                    "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
                    "question": "For each phone, show its names and total number of stocks."
                }
            ],
            "example_quality": 0.6849561782162683,
            "example_similarity": 0.3923056655934993,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address, cell_number, home_phone FROM Professionals",
            "correct": 1
        },
        {
            "index": 996,
            "question": "What are the email, cell phone and home phone of each professional?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the phone numbers? */\nSELECT customer_phone FROM available_policies\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are the email, cell phone and home phone of each professional? */\nSELECT ",
            "response": "email_address , cell_number , home_phone FROM professionals",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 893,
                    "db_id": "insurance_fnol",
                    "query": "SELECT customer_phone FROM available_policies",
                    "question": "What are all the phone numbers?"
                }
            ],
            "example_quality": 0.6852724872742841,
            "example_similarity": 0.3922255394232247,
            "db_id": "dog_kennels",
            "pred": "SELECT email_address, cell_number, home_phone FROM Professionals",
            "correct": 1
        },
        {
            "index": 997,
            "question": "What are all the possible breed type and size type combinations?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of all the media types? */\nSELECT name FROM media_types;\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are all the possible breed type and size type combinations? */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 613,
                    "db_id": "store_1",
                    "query": "SELECT name FROM media_types;",
                    "question": "What are the names of all the media types?"
                }
            ],
            "example_quality": 0.6853875600052026,
            "example_similarity": 0.392300204545836,
            "db_id": "dog_kennels",
            "pred": "SELECT b.breed_name, s.size_description FROM Breeds b, Sizes s;",
            "correct": 0
        },
        {
            "index": 998,
            "question": "Find the distinct breed type and size type combinations for dogs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all the distinct institution types. */\nSELECT DISTINCT TYPE FROM institution\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: Find the distinct breed type and size type combinations for dogs. */\nSELECT ",
            "response": "DISTINCT breed_code , size_code FROM dogs",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1925,
                    "db_id": "protein_institute",
                    "query": "SELECT DISTINCT TYPE FROM institution",
                    "question": "Show all the distinct institution types."
                }
            ],
            "example_quality": 0.6857028029310491,
            "example_similarity": 0.3922649767428269,
            "db_id": "dog_kennels",
            "pred": "SELECT DISTINCT breed_code, size_code FROM Dogs",
            "correct": 1
        },
        {
            "index": 999,
            "question": "List the first name of all the professionals along with the description of the treatment they have done.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the description of the outcomes for all projects. */\nSELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: List the first name of all the professionals along with the description of the treatment they have done. */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4396,
                    "db_id": "tracking_grants_for_research",
                    "query": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code",
                    "question": "List the description of the outcomes for all projects."
                }
            ],
            "example_quality": 0.6858172145397267,
            "example_similarity": 0.3923227695589002,
            "db_id": "dog_kennels",
            "pred": "SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id",
            "correct": 0
        },
        {
            "index": 1000,
            "question": "What are each professional's first name and description of the treatment they have performed?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the descriptions for each color? */\nSELECT color_description FROM ref_colors\n\n/* Given the following database schema: */\nCREATE TABLE `Breeds` (\n`breed_code` VARCHAR(10) PRIMARY KEY ,\n`breed_name` VARCHAR(80)\n)\n\nCREATE TABLE `Charges` (\n`charge_id` INTEGER PRIMARY KEY ,\n`charge_type` VARCHAR(10),\n`charge_amount` DECIMAL(19,4)\n)\n\nCREATE TABLE `Sizes` (\n`size_code` VARCHAR(10) PRIMARY KEY ,\n`size_description` VARCHAR(80)\n)\n\nCREATE TABLE `Treatment_Types` (\n`treatment_type_code` VARCHAR(10) PRIMARY KEY ,\n`treatment_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Owners` (\n`owner_id` INTEGER PRIMARY KEY ,\n`first_name` VARCHAR(50),\n`last_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Dogs` (\n`dog_id` INTEGER PRIMARY KEY ,\n`owner_id` INTEGER NOT NULL,\n`abandoned_yn` VARCHAR(1),\n`breed_code` VARCHAR(10) NOT NULL,\n`size_code` VARCHAR(10) NOT NULL,\n`name` VARCHAR(50),\n`age` VARCHAR(20),\n`date_of_birth` DATETIME,\n`gender` VARCHAR(1),\n`weight` VARCHAR(20),\n`date_arrived` DATETIME,\n`date_adopted` DATETIME,\n`date_departed` DATETIME,\nFOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),\nFOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),\nFOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )\n)\n\nCREATE TABLE `Professionals` (\n`professional_id` INTEGER PRIMARY KEY ,\n`role_code` VARCHAR(10) NOT NULL,\n`first_name` VARCHAR(50),\n`street` VARCHAR(50),\n`city` VARCHAR(50),\n`state` VARCHAR(20),\n`zip_code` VARCHAR(20),\n`last_name` VARCHAR(50),\n`email_address` VARCHAR(50),\n`home_phone` VARCHAR(20),\n`cell_number` VARCHAR(20)\n)\n\nCREATE TABLE `Treatments` (\n`treatment_id` INTEGER PRIMARY KEY ,\n`dog_id` INTEGER NOT NULL,\n`professional_id` INTEGER NOT NULL,\n`treatment_type_code` VARCHAR(10) NOT NULL,\n`date_of_treatment` DATETIME,\n`cost_of_treatment` DECIMAL(19,4),\nFOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),\nFOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),\nFOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )\n)\n\n/* Answer the following: What are each professional's first name and description of the treatment they have performed? */\nSELECT ",
            "response": "DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5526,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT color_description FROM ref_colors",
                    "question": "What are the descriptions for each color?"
                }
            ],
            "example_quality": 0.6859313973251869,
            "example_similarity": 0.39226378012267465,
            "db_id": "dog_kennels",
            "pred": "SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;",
            "correct": 1
        },
        {
            "index": 1001,
            "question": "How many singers are there?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: how many programs are there? */\nSELECT count(*) FROM program\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: How many singers are there? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3735,
                    "db_id": "program_share",
                    "query": "SELECT count(*) FROM program",
                    "question": "how many programs are there?"
                }
            ],
            "example_quality": 0.686245152173014,
            "example_similarity": 0.3928709092134612,
            "db_id": "singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 1002,
            "question": "What is the count of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Count the number of characteristics. */\nSELECT count(*) FROM CHARACTERISTICS\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the count of singers? */\nSELECT ",
            "response": "count(*) FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5522,
                    "db_id": "products_gen_characteristics",
                    "query": "SELECT count(*) FROM CHARACTERISTICS",
                    "question": "Count the number of characteristics."
                }
            ],
            "example_quality": 0.6865582807636597,
            "example_similarity": 0.3929223798075041,
            "db_id": "singer",
            "pred": "SELECT count(*) FROM singer",
            "correct": 1
        },
        {
            "index": 1003,
            "question": "List the name of singers in ascending order of net worth.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the titles of all items in alphabetic order . */\nSELECT title FROM item ORDER BY title\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers in ascending order of net worth. */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1706,
                    "db_id": "epinions_1",
                    "query": "SELECT title FROM item ORDER BY title",
                    "question": "List the titles of all items in alphabetic order ."
                }
            ],
            "example_quality": 0.6868707849702761,
            "example_similarity": 0.39310035208230076,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "correct": 1
        },
        {
            "index": 1004,
            "question": "What are the names of singers ordered by ascending net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are ids of the all distinct orders, sorted by placement date? */\nSELECT DISTINCT order_id FROM orders ORDER BY date_order_placed\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of singers ordered by ascending net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6929,
                    "db_id": "tracking_orders",
                    "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
                    "question": "What are ids of the all distinct orders, sorted by placement date?"
                }
            ],
            "example_quality": 0.6870719982211911,
            "example_similarity": 0.393151491616526,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
            "correct": 1
        },
        {
            "index": 1005,
            "question": "What are the birth year and citizenship of singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth year and citizenship of singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6871843643921153,
            "example_similarity": 0.3932125801368533,
            "db_id": "singer",
            "pred": "SELECT Birth_Year, Citizenship FROM singer",
            "correct": 1
        },
        {
            "index": 1006,
            "question": "What are the birth years and citizenships of the singers?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the birth years and citizenships of the singers? */\nSELECT ",
            "response": "Birth_Year , Citizenship FROM singer",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6872965071710495,
            "example_similarity": 0.3932358943381752,
            "db_id": "singer",
            "pred": "SELECT Birth_Year, Citizenship FROM singer",
            "correct": 1
        },
        {
            "index": 1007,
            "question": "List the name of singers whose citizenship is not \"France\".",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: List the name of artworks whose type is not \"Program Talent Show\". */\nSELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers whose citizenship is not \"France\". */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4601,
                    "db_id": "entertainment_awards",
                    "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"",
                    "question": "List the name of artworks whose type is not \"Program Talent Show\"."
                }
            ],
            "example_quality": 0.687607036955388,
            "example_similarity": 0.39370603413194727,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
            "correct": 1
        },
        {
            "index": 1008,
            "question": "What are the names of the singers who are not French citizens?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the names of perpetrators whose country is not \"China\"? */\nSELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers who are not French citizens? */\nSELECT ",
            "response": "Name FROM singer WHERE Citizenship != \"France\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2311,
                    "db_id": "perpetrator",
                    "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"",
                    "question": "What are the names of perpetrators whose country is not \"China\"?"
                }
            ],
            "example_quality": 0.6879169506092022,
            "example_similarity": 0.39373316369290656,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Citizenship != \"French\"",
            "correct": 0
        },
        {
            "index": 1009,
            "question": "Show the name of singers whose birth year is either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the name of singers whose birth year is either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.687659918377252,
            "example_similarity": 0.3936344367190373,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "correct": 1
        },
        {
            "index": 1010,
            "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers whose birth years are either 1948 or 1949? */\nSELECT ",
            "response": "Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6872265917253934,
            "example_similarity": 0.39340103107559476,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
            "correct": 1
        },
        {
            "index": 1011,
            "question": "What is the name of the singer with the largest net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the most prominent max page size among all the products. */\nSELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer with the largest net worth? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4937,
                    "db_id": "store_product",
                    "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
                    "question": "Find the most prominent max page size among all the products."
                }
            ],
            "example_quality": 0.6871650421786818,
            "example_similarity": 0.3933242639565133,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)",
            "correct": 1
        },
        {
            "index": 1012,
            "question": "What is the name of the singer who is worth the most?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the title of the film that has the highest high market estimation. */\nSELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the name of the singer who is worth the most? */\nSELECT ",
            "response": "Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4157,
                    "db_id": "film_rank",
                    "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1",
                    "question": "What is the title of the film that has the highest high market estimation."
                }
            ],
            "example_quality": 0.6874741676310744,
            "example_similarity": 0.39333086053363137,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
            "correct": 1
        },
        {
            "index": 1013,
            "question": "Show different citizenship of singers and the number of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show different types of ships and the number of ships of each type. */\nSELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenship of singers and the number of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4011,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE",
                    "question": "Show different types of ships and the number of ships of each type."
                }
            ],
            "example_quality": 0.6877826827666804,
            "example_similarity": 0.3939297441856218,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1014,
            "question": "For each citizenship, how many singers are from that country?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: display the country ID and number of cities for each country. */\nSELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, how many singers are from that country? */\nSELECT ",
            "response": "Citizenship , COUNT(*) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3456,
                    "db_id": "hr_1",
                    "query": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
                    "question": "display the country ID and number of cities for each country."
                }
            ],
            "example_quality": 0.688090589391171,
            "example_similarity": 0.39373849197242106,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1015,
            "question": "Please show the most common citizenship of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Please show the most common type of ships. */\nSELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Please show the most common citizenship of singers. */\nSELECT ",
            "response": "Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4013,
                    "db_id": "ship_mission",
                    "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
                    "question": "Please show the most common type of ships."
                }
            ],
            "example_quality": 0.6883978893031008,
            "example_similarity": 0.39433579395077334,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship ORDER BY Singer_Count DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 1016,
            "question": "What is the most common singer citizenship ?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is the most common participant type? */\nSELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the most common singer citizenship ? */\nSELECT ",
            "response": "citizenship from singer group by citizenship order by count(*) desc limit 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2147,
                    "db_id": "local_govt_in_alabama",
                    "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1",
                    "question": "What is the most common participant type?"
                }
            ],
            "example_quality": 0.6880952854562989,
            "example_similarity": 0.3949319201378297,
            "db_id": "singer",
            "pred": "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1",
            "correct": 0
        },
        {
            "index": 1017,
            "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the maximum amount of transaction. */\nSELECT max(amount_of_transaction) FROM TRANSACTIONS\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show different citizenships and the maximum net worth of singers of each citizenship. */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5848,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
                    "question": "Show the maximum amount of transaction."
                }
            ],
            "example_quality": 0.6879922746872499,
            "example_similarity": 0.3950352319174385,
            "db_id": "singer",
            "pred": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1018,
            "question": "For each citizenship, what is the maximum net worth?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the maximum amount of transaction. */\nSELECT max(amount_of_transaction) FROM TRANSACTIONS\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each citizenship, what is the maximum net worth? */\nSELECT ",
            "response": "Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5848,
                    "db_id": "tracking_share_transactions",
                    "query": "SELECT max(amount_of_transaction) FROM TRANSACTIONS",
                    "question": "Show the maximum amount of transaction."
                }
            ],
            "example_quality": 0.6878894662969217,
            "example_similarity": 0.3950249963110514,
            "db_id": "singer",
            "pred": "SELECT Citizenship, max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
            "correct": 1
        },
        {
            "index": 1019,
            "question": "Show titles of songs and names of singers.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the types of schools that have two schools. */\nSELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show titles of songs and names of singers. */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 6359,
                    "db_id": "school_bus",
                    "query": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
                    "question": "Show the types of schools that have two schools."
                }
            ],
            "example_quality": 0.687494789966615,
            "example_similarity": 0.39509026958409105,
            "db_id": "singer",
            "pred": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
            "correct": 1
        },
        {
            "index": 1020,
            "question": "What are the song titles and singer names?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are all the labels? */\nSELECT DISTINCT label FROM Albums\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the song titles and singer names? */\nSELECT ",
            "response": "T2.Title , T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5175,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT label FROM Albums",
                    "question": "What are all the labels?"
                }
            ],
            "example_quality": 0.6876050891921379,
            "example_similarity": 0.39519312226096937,
            "db_id": "singer",
            "pred": "SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
            "correct": 1
        },
        {
            "index": 1021,
            "question": "Show distinct names of singers that have songs with sales more than 300000.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the types of documents with more than 4 documents. */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show distinct names of singers that have songs with sales more than 300000. */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4504,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "Find the types of documents with more than 4 documents."
                }
            ],
            "example_quality": 0.6872376992908723,
            "example_similarity": 0.3952669666420009,
            "db_id": "singer",
            "pred": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;",
            "correct": 1
        },
        {
            "index": 1022,
            "question": "what are the different names of the singers that have sales more than 300000?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What are the codes of types of documents of which there are for or more? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: what are the different names of the singers that have sales more than 300000? */\nSELECT ",
            "response": "DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4505,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4",
                    "question": "What are the codes of types of documents of which there are for or more?"
                }
            ],
            "example_quality": 0.6868710283522316,
            "example_similarity": 0.39516559648546923,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000)",
            "correct": 0
        },
        {
            "index": 1023,
            "question": "Show the names of singers that have more than one song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the locations that have more than one railways. */\nSELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers that have more than one song. */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5648,
                    "db_id": "railway",
                    "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1",
                    "question": "Show the locations that have more than one railways."
                }
            ],
            "example_quality": 0.6870467816643668,
            "example_similarity": 0.39559391294377605,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 1024,
            "question": "What are the names of the singers that have more than one songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What document types have more than 2 corresponding documents? */\nSELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the names of the singers that have more than one songs? */\nSELECT ",
            "response": "T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 4542,
                    "db_id": "document_management",
                    "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2",
                    "question": "What document types have more than 2 corresponding documents?"
                }
            ],
            "example_quality": 0.6873524000416478,
            "example_similarity": 0.3956958720131669,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1)",
            "correct": 1
        },
        {
            "index": 1025,
            "question": "Show the names of singers and the total sales of their songs.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the number of accounts. */\nSELECT count(*) FROM Accounts\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the names of singers and the total sales of their songs. */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 1548,
                    "db_id": "customers_and_invoices",
                    "query": "SELECT count(*) FROM Accounts",
                    "question": "Show the number of accounts."
                }
            ],
            "example_quality": 0.6871320937601811,
            "example_similarity": 0.39565825931573245,
            "db_id": "singer",
            "pred": "SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;",
            "correct": 0
        },
        {
            "index": 1026,
            "question": "For each singer name, what is the total sales for their songs?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: What is total amount claimed summed across all the claims? */\nSELECT sum(Amount_Claimed) FROM Claims\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: For each singer name, what is the total sales for their songs? */\nSELECT ",
            "response": "T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 3898,
                    "db_id": "insurance_policies",
                    "query": "SELECT sum(Amount_Claimed) FROM Claims",
                    "question": "What is total amount claimed summed across all the claims?"
                }
            ],
            "example_quality": 0.6870309253776988,
            "example_similarity": 0.39573129048140343,
            "db_id": "singer",
            "pred": "SELECT s.Name, SUM(sales) FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;",
            "correct": 1
        },
        {
            "index": 1027,
            "question": "List the name of singers that do not have any song.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show names of parties that does not have any members. */\nSELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: List the name of singers that do not have any song. */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2064,
                    "db_id": "party_people",
                    "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)",
                    "question": "Show names of parties that does not have any members."
                }
            ],
            "example_quality": 0.6873356664435434,
            "example_similarity": 0.3958652749437714,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "correct": 1
        },
        {
            "index": 1028,
            "question": "What is the sname of every sing that does not have any song?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Find the name of songs that does not have a back vocal. */\nSELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What is the sname of every sing that does not have any song? */\nSELECT ",
            "response": "Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5265,
                    "db_id": "music_2",
                    "query": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
                    "question": "Find the name of songs that does not have a back vocal."
                }
            ],
            "example_quality": 0.6872750286357189,
            "example_similarity": 0.3958206589175615,
            "db_id": "singer",
            "pred": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
            "correct": 1
        },
        {
            "index": 1029,
            "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show the name for regions not affected. */\nSELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2711,
                    "db_id": "storm_record",
                    "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)",
                    "question": "Show the name for regions not affected."
                }
            ],
            "example_quality": 0.6871787801084905,
            "example_similarity": 0.3957789878947753,
            "db_id": "singer",
            "pred": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "correct": 1
        },
        {
            "index": 1030,
            "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: keywords used by Luke Zettlemoyer */\nSELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";\n\n/* Given the following database schema: */\nCREATE TABLE \"singer\" (\n\"Singer_ID\" int,\n\"Name\" text,\n\"Birth_Year\" real,\n\"Net_Worth_Millions\" real,\n\"Citizenship\" text,\nPRIMARY KEY (\"Singer_ID\")\n)\n\nCREATE TABLE \"song\" (\n\"Song_ID\" int,\n\"Title\" text,\n\"Singer_ID\" int,\n\"Sales\" real,\n\"Highest_Position\" real,\nPRIMARY KEY (\"Song_ID\"),\nFOREIGN KEY (\"Singer_ID\") REFERENCES `singer`(\"Singer_ID\")\n)\n\n/* Answer the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? */\nSELECT ",
            "response": "Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7679,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
                    "question": "keywords used by Luke Zettlemoyer"
                }
            ],
            "example_quality": 0.6869277050099108,
            "example_similarity": 0.3954369483539742,
            "db_id": "singer",
            "pred": "SELECT DISTINCT s1.Citizenship FROM singer AS s1 JOIN singer AS s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;",
            "correct": 1
        },
        {
            "index": 1031,
            "question": "How many available features are there in total?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: How many available hotels are there in total? */\nSELECT count(*) FROM HOTELS\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: How many available features are there in total? */\nSELECT ",
            "response": "count(*) FROM Other_Available_Features",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 5886,
                    "db_id": "cre_Theme_park",
                    "query": "SELECT count(*) FROM HOTELS",
                    "question": "How many available hotels are there in total?"
                }
            ],
            "example_quality": 0.6872313638799303,
            "example_similarity": 0.3960233334671129,
            "db_id": "real_estate_properties",
            "pred": "SELECT count(*) FROM Other_Available_Features;",
            "correct": 1
        },
        {
            "index": 1032,
            "question": "What is the feature type name of feature AirCon?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: best paper in TACL 2014 ? */\nSELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What is the feature type name of feature AirCon? */\nSELECT ",
            "response": "T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = \"AirCon\"",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 7805,
                    "db_id": "scholar",
                    "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
                    "question": "best paper in TACL 2014 ?"
                }
            ],
            "example_quality": 0.6868076900777211,
            "example_similarity": 0.3958632035226382,
            "db_id": "real_estate_properties",
            "pred": "SELECT t1.feature_type_name FROM Ref_Feature_Types AS t1 JOIN Other_Available_Features AS t2 ON t1.feature_type_code = t2.feature_type_code WHERE t2.feature_name = \"AirCon\";",
            "correct": 1
        },
        {
            "index": 1033,
            "question": "Show the property type descriptions of properties belonging to that code.",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: Show all card type codes. */\nSELECT DISTINCT card_type_code FROM Customers_Cards\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: Show the property type descriptions of properties belonging to that code. */\nSELECT ",
            "response": "T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 730,
                    "db_id": "customers_card_transactions",
                    "query": "SELECT DISTINCT card_type_code FROM Customers_Cards",
                    "question": "Show all card type codes."
                }
            ],
            "example_quality": 0.6866268501066874,
            "example_similarity": 0.39585231502418006,
            "db_id": "real_estate_properties",
            "pred": "SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code;",
            "correct": 0
        },
        {
            "index": 1034,
            "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
            "prompt": "/* Some SQL examples are provided based on similar problems: */\n/* Answer the following: find the event names that have more than 2 records. */\nSELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2\n\n/* Given the following database schema: */\nCREATE TABLE `Ref_Feature_Types` (\n`feature_type_code` VARCHAR(20) PRIMARY KEY,\n`feature_type_name` VARCHAR(80)\n)\n\nCREATE TABLE `Ref_Property_Types` (\n`property_type_code` VARCHAR(20) PRIMARY KEY,\n`property_type_description` VARCHAR(80)\n)\n\nCREATE TABLE `Other_Available_Features` (\n`feature_id` INTEGER PRIMARY KEY,\n`feature_type_code` VARCHAR(20) NOT NULL,\n`feature_name` VARCHAR(80),\n`feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )\n)\n\nCREATE TABLE `Properties` (\n`property_id` INTEGER PRIMARY KEY,\n`property_type_code` VARCHAR(20) NOT NULL,\n`date_on_market` DATETIME,\n`date_sold` DATETIME,\n`property_name` VARCHAR(80),\n`property_address` VARCHAR(255),\n`room_count` INTEGER,\n`vendor_requested_price` DECIMAL(19,4),\n`buyer_offered_price` DECIMAL(19,4),\n`agreed_selling_price` DECIMAL(19,4),\n`apt_feature_1` VARCHAR(255),\n`apt_feature_2` VARCHAR(255),\n`apt_feature_3` VARCHAR(255),\n`fld_feature_1` VARCHAR(255),\n`fld_feature_2` VARCHAR(255),\n`fld_feature_3` VARCHAR(255),\n`hse_feature_1` VARCHAR(255),\n`hse_feature_2` VARCHAR(255),\n`hse_feature_3` VARCHAR(255),\n`oth_feature_1` VARCHAR(255),\n`oth_feature_2` VARCHAR(255),\n`oth_feature_3` VARCHAR(255),\n`shp_feature_1` VARCHAR(255),\n`shp_feature_2` VARCHAR(255),\n`shp_feature_3` VARCHAR(255),\n`other_property_details` VARCHAR(255),\nFOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )\n)\n\nCREATE TABLE `Other_Property_Features` (\n`property_id` INTEGER NOT NULL,\n`feature_id` INTEGER NOT NULL,\n`property_feature_description` VARCHAR(80),\nFOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),\nFOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )\n)\n\n/* Answer the following: What are the names of properties that are either houses or apartments with more than 1 room? */\nSELECT ",
            "response": "property_name FROM Properties WHERE property_type_code = \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code = \"Apartment\" AND room_count > 1",
            "n_examples": 1,
            "examples": [
                {
                    "ex_id": 2080,
                    "db_id": "party_people",
                    "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2",
                    "question": "find the event names that have more than 2 records."
                }
            ],
            "example_quality": 0.6863012922245727,
            "example_similarity": 0.39577719848951626,
            "db_id": "real_estate_properties",
            "pred": "SELECT property_name FROM Properties WHERE property_type_code IN ('APT', 'HSE') AND room_count > 1",
            "correct": 0
        }
    ]
}