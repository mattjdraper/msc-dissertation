SELECT MAX(`Percent (%) Eligible Free (K-12)`) FROM frpm WHERE `County Name` = 'Alameda County'
SELECT TOP 3 `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation' ORDER BY (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) ASC LIMIT 3;
SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.County = 'Fresno County Office of Education'
SELECT MailStreet, MailCity, MailState, MailZip FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm))
SELECT T3.Phone FROM schools AS T3 INNER JOIN frpm AS T1 ON T3.CDSCode = T1.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T3.OpenDate > '2000-01-01'
SELECT COUNT(*) FROM schools AS S INNER JOIN satscores AS SAT ON S.CDSCode = SAT.cds WHERE SAT.AvgScrMath < 400 AND S.Virtual = 'F'
SELECT s.School FROM satscores AS s INNER JOIN schools AS sc ON s.cds = sc.CDSCode WHERE s.NumTstTakr > 500 AND sc.Magnet = 1;
SELECT T3.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0) AND T1.NumGE1500 > 0;
SELECT SUM(T2.NumTstTakr) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)
SELECT COUNT(DISTINCT T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Charter'
SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T3.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)
SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm WHERE CDSCode IN ( SELECT cds FROM satscores WHERE NumGE1500 / NumTstTakr > 0.3 )
SELECT Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY satscores.NumGE1500 / satscores.NumTstTakr DESC LIMIT 3;
SELECT NCESchool FROM schools ORDER BY (SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm WHERE frpm.CDSCode = schools.CDSCode) DESC LIMIT 5
SELECT District Name, AVG(AvgScrRead) AS AvgReadingScore FROM frpm JOIN satscores ON frpm.CDSCode = satscores.cds JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.StatusType = 'Active' GROUP BY District Name ORDER BY AvgReadingScore DESC LIMIT 1;
SELECT COUNT(satscores.cds) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Alameda' AND satscores.NumTstTakr < 100;
SELECT CharterNum FROM satscores WHERE AvgScrWrite = 499
SELECT COUNT(schools.CDSCode) FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Contra Costa' AND schools.FundingType = 'Directly Funded' AND satscores.NumTstTakr <= 250;
SELECT Phone FROM schools WHERE CDSCode = ( SELECT cds FROM satscores WHERE AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores ) )
SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'
SELECT COUNT(schools.school) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700
SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Contra Costa' ORDER BY satscores.NumTstTakr DESC LIMIT 1;
SELECT s.School, s.Street FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;
SELECT s.School FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode INNER JOIN satscores ss ON s.CDSCode = ss.cds WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND ss.NumGE1500 > 0;
SELECT T1.`School Name`, T1.`FundingType` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Riverside' GROUP BY T1.`School Name`, T1.`FundingType` HAVING AVG(T2.AvgScrMath) > 400
SELECT T1.`School Name`, T2.Zip, T2.Street, T2.City, T2.State FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`School Type` = 'High School' AND T1.`Percent (%) Eligible FRPM (Ages 5-17)` > 800 AND T2.City = 'Monterey'
SELECT s.School, s.Phone, AVG(ss.AvgScrWrite) AS AvgWritingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01' GROUP BY s.School, s.Phone;
SELECT s.School, s.DOCType FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Charter Funding Type` = 'Local' AND (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > (SELECT AVG(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) FROM frpm f)
SELECT MIN(OpenDate) FROM schools WHERE GSoffered = 'K-12' ORDER BY Enrollment DESC LIMIT 1
SELECT DISTINCT City FROM schools ORDER BY enroll12 LIMIT 5;
SELECT (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS Eligible_Free_Rate FROM frpm WHERE `Enrollment (K-12)` IS NOT NULL ORDER BY `Enrollment (K-12)` DESC LIMIT 10, 2
SELECT TOP 5 schools with the highest free or reduced price meal count in grades 1-12 with ownership code 66 and calculate the eligible free or reduced price meal rate for K-12: SELECT s.School, (f.`FRPM Count (K-12)` / f.`Enrollment (K-12)`) AS Eligible_Free_Reduced_Meal_Rate FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.CharterNum = 66 ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 5;
SELECT s.School, s.Website FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000;
SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `School Name` = 'Kacey Gibson'
SELECT AdmEmail1 FROM schools WHERE CDSCode IN (SELECT cds FROM frpm WHERE `Charter School (Y/N)` = 1 ORDER BY `Enrollment (K-12)` ASC LIMIT 1)
SELECT AdmFName1, AdmLName1 FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500)
SELECT Street, City, Zip, State FROM schools WHERE CDSCode = ( SELECT cds FROM satscores WHERE (NumGE1500 / NumTstTakr) = ( SELECT MIN(NumGE1500 / NumTstTakr) FROM satscores ) )
SELECT Website FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE County = 'Los Angeles' AND NumTstTakr BETWEEN 2000 AND 3000;
SELECT AVG(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE City = 'Fresno' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31')
SELECT Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE District = 'Fresno Unified' ORDER BY AvgScrRead LIMIT 1;
SELECT T1.sname, T2.AvgScrRead FROM satscores AS T2 INNER JOIN schools AS T1 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC LIMIT 5
SELECT s.`Educational Option Type` FROM frpm AS f INNER JOIN satscores AS s ON f.CDSCode = s.cds WHERE s.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT AVG(T2.AvgScrMath) AS average_math_score, T1.cname AS county_name FROM satscores AS T2 INNER JOIN schools AS T1 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite = ( SELECT MIN(T3.AvgScrMath + T3.AvgScrRead + T3.AvgScrWrite) FROM satscores AS T3 )
SELECT AVG(AvgScrWrite), schools.City FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500)
SELECT T2.`School Name`, AVG(T1.AvgScrWrite) AS AvgWritingScore FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich' GROUP BY T2.`School Name`
SELECT schools.State, schools.School, SUM(satscores.enroll12) AS TotalEnrollment FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.DOC = 31 GROUP BY schools.State, schools.School ORDER BY TotalEnrollment DESC;
SELECT AVG(num_schools) AS monthly_avg_schools_opened FROM ( SELECT COUNT(schools.CDSCode) AS num_schools FROM schools WHERE schools.County = 'Alameda' AND schools.DOC = '52' AND strftime('%Y', schools.OpenDate) = '1980' GROUP BY strftime('%m', schools.OpenDate) ) as T1;
SELECT COUNT(DISTINCT CASE WHEN s1.DOC = '54' THEN s1.CDSCode END) * 1.0 / COUNT(DISTINCT CASE WHEN s1.DOC = '52' THEN s1.CDSCode END) FROM schools s1 INNER JOIN frpm f ON s1.CDSCode = f.CDSCode;
SELECT schools.`School`, schools.`ClosedDate`, schools.`County` FROM schools WHERE schools.`StatusType` = 'Closed' GROUP BY schools.`County` ORDER BY COUNT(schools.`School`) DESC LIMIT 1;
SELECT s.MailStreet, s.School FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.CDSCode WHERE ss.AvgScrMath = ( SELECT DISTINCT AvgScrMath FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 5 )
SELECT MailStreet, satscores.sname FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(*) FROM satscores AS S INNER JOIN schools AS SCH ON S.cds = SCH.CDSCode WHERE (S.AvgScrRead + S.AvgScrMath + S.AvgScrWrite) >= 1500 AND SCH.MailCity = 'Lakeport'
SELECT SUM(NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'
SELECT schools.School, schools.MailZip FROM schools WHERE schools.AdmFName1 = 'Avetik' AND schools.AdmLName1 = 'Atoian'
SELECT COUNT(CASE WHEN T1.County = 'Colusa' THEN 1 END) * 1.0 / COUNT(CASE WHEN T1.County = 'Humboldt' THEN 1 END) FROM schools AS T1 WHERE T1.MailState = 'California'
SELECT COUNT(schools.school) FROM schools WHERE schools.State = 'CA' AND schools.County = 'San Joaquin' AND schools.StatusType = 'Active'
SELECT Phone, Ext FROM schools WHERE CDSCode = ( SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332 )
SELECT T1.Phone, T1.Ext, T1.School FROM schools AS T1 WHERE T1.Zip = '95203-3704'
SELECT T2.Website FROM schools AS T2 WHERE T2.AdmFName1 = 'Mike' AND T2.AdmLName1 = 'Larson' OR T2.AdmFName1 = 'Dante' AND T2.AdmLName1 = 'Alvarez' OR T2.AdmFName2 = 'Mike' AND T2.AdmLName2 = 'Larson' OR T2.AdmFName2 = 'Dante' AND T2.AdmLName2 = 'Alvarez' OR T2.AdmFName3 = 'Mike' AND T2.AdmLName3 = 'Larson' OR T2.AdmFName3 = 'Dante' AND T2.AdmLName3 = 'Alvarez'
SELECT T1.Website FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Virtual = 'P' AND T1.Charter = 1 AND T1.County = 'San Joaquin'
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = '52'
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.Charter = 0 AND T2.`Percent (%) Eligible Free (K-12)` < 0.18;
SELECT T3.AdmFName1 || ' ' || T3.AdmLName1 AS Administrator_Name, T2.School AS School_Name, T2.City FROM schools AS T2 INNER JOIN frpm AS T1 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T4 ON T4.cds = T2.CDSCode WHERE T2.Charter = 1 AND T2.CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'
SELECT (CAST(SUM(CASE WHEN Charter Funding Type = 'locally funded' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 FROM frpm WHERE `County Name` = 'Santa Clara'
SELECT COUNT(*) FROM schools WHERE OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus' AND FundingType = 'Directly Funded'
SELECT SUM(Enrollment) FROM frpm WHERE `District Type` = 'Community College District' AND `ClosedDate` = '1989' AND City = 'San Francisco'
SELECT County FROM schools WHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' AND SOC = '11' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1;
SELECT schools.NCESDist FROM schools WHERE schools.SOC = '31'
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND StatusType IN ('Active', 'Closed') AND School = 'District Community Day School'
SELECT District Code FROM frpm WHERE `School Name` IN (SELECT School FROM schools WHERE City = 'Fresno' AND Magnet = 0)
SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm WHERE `School Name` = 'State Special School' AND `City` = 'Fremont' AND `Academic Year` = '2014-2015' AND EdOpsCode = 'SSS'
SELECT FRPM Count (Ages 5-17) FROM frpm WHERE `School Name` = 'Youth Authority School' AND `MailStreet` = 'PO Box 1040'
SELECT MIN(`Low Grade`) FROM frpm WHERE `EdOpsCode` = 'SPECON' AND `NCESDist` = '613360'
SELECT schools.School, schools.`Educational Option Type` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`NSLP Provision Status` = 'Breakfast Provision 2' AND frpm.`County Code` = 37;
SELECT schools.City FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Educational Option Type` = 'HS' AND frpm.`NSLP Provision Status` = 2 AND frpm.`Low Grade` = '9' AND frpm.`High Grade` = '12' AND frpm.`County Name` = 'Merced'
SELECT s.School, s.`Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE s.County = 'Los Angeles' AND s.`Low Grade` = 'K' AND s.`High Grade` = '9';
SELECT T2.`School Type` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.City = 'Adelanto' GROUP BY T2.`School Type` ORDER BY COUNT(T2.`School Type`) DESC LIMIT 1
SELECT County, COUNT(*) AS Num_Schools FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY Num_Schools DESC LIMIT 1;
SELECT T1.`School Name`, T1.Latitude, T1.`School Type` FROM schools AS T1 WHERE T1.Latitude = (SELECT MAX(Latitude) FROM schools)
SELECT City, `Low Grade`, `School Name` FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1;
SELECT `Low Grade`, `High Grade` FROM frpm WHERE `School Code` = (SELECT `School Code` FROM schools ORDER BY Longitude DESC LIMIT 1)
SELECT COUNT(*) FROM schools WHERE GSoffered = 'K-8' AND Magnet = 1 AND EdOpsCode = 'Multiple Provision Types'; SELECT City, COUNT(*) AS NumSchools FROM schools WHERE GSoffered = 'K-8' GROUP BY City;
SELECT AdmFName1, District FROM schools GROUP BY AdmFName1, District ORDER BY COUNT(AdmFName1) DESC LIMIT 2
SELECT DISTRICT_CODE FROM schools WHERE AdmFName1 = 'Alusine'
SELECT schools.AdmLName1, schools.District, schools.County, schools.School FROM schools WHERE schools.CharterNum = '40'
SELECT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'San Bernardino' AND T1.District = 'San Bernardino City Unified' AND T1.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (T2.SOC = 62 OR T2.DOC = 54)
SELECT s.AdmEmail1, s.School FROM satscores ss INNER JOIN schools s ON ss.cds = s.CDSCode WHERE ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) LIMIT 1;
SELECT COUNT(account.account_id) FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'East Bohemia' AND account.frequency = 'POPLATEK PO OBRATU';
SELECT COUNT(account_id) FROM account JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague'
SELECT AVG(A12) AS avg_unemployment_1995, AVG(A13) AS avg_unemployment_1996 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE date BETWEEN '1995-01-01' AND '1996-12-31') 
SELECT COUNT(DISTINCT d.district_id) FROM district d JOIN client c ON d.district_id = c.district_id JOIN disp ON c.client_id = disp.client_id JOIN account a ON disp.account_id = a.account_id WHERE c.gender = 'F' GROUP BY d.district_id HAVING AVG(a.A11) > 6000 AND AVG(a.A11) < 10000
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000
SELECT T1.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F' AND birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F')) AND T1.district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MIN(A11) FROM district)) AND T1.district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district)) SELECT MAX(A11) - MIN(A11) FROM district;
SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id GROUP BY account.account_id HAVING client.birth_date = (SELECT birth_date FROM client ORDER BY year DESC, month DESC, day DESC LIMIT 1) ORDER BY AVG(client.A11) DESC;
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'Owner'
SELECT T2.client_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.type = 'DISPONENT' AND T1.account_id IN (SELECT account_id FROM account WHERE frequency = 'POPLATEK PO OBRATU')
SELECT DISTINCT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date LIKE '1997%' AND T2.status = 'approved' AND T2.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%' AND status = 'approved') AND T1.frequency = 'POPLATEK TYDNE'
SELECT account_id FROM loan WHERE duration > 12 AND date LIKE '1993%' ORDER BY amount DESC LIMIT 1;
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Slokolov'
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE date LIKE '1995%')
SELECT DISTINCT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000;
SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued = '1994-03-03'
SELECT MIN(date) AS account_opened_date FROM account WHERE account_id IN ( SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14' )
SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'
SELECT MAX(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE issued = '1996-10-21'))
SELECT T2.gender FROM client AS T2 INNER JOIN account AS T1 ON T2.district_id = T1.district_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id GROUP BY T2.client_id ORDER BY T2.birth_date, T3.A11 DESC LIMIT 1
SELECT T3.amount FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id INNER JOIN trans AS T5 ON T3.account_id = T5.account_id WHERE T4.amount = (SELECT MAX(amount) FROM loan) ORDER BY T5.date ASC LIMIT 1
SELECT COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik') AND gender = 'F'
SELECT disp_id FROM trans WHERE amount = 5100 AND date = '1998-09-02'
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice') AND date >= '1996-01-01' AND date <= '1996-12-31'
SELECT d.A2 FROM client c JOIN disp d ON c.client_id = d.client_id WHERE c.gender = 'F' AND c.birth_date = '1976-01-29'
SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T4.amount = 98832 AND T4.date = '1996-01-03'
SELECT account_id FROM disp JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY client.birth_date LIMIT 1;
SELECT CAST(COUNT(CASE WHEN c.gender = 'M' THEN 1 END) AS REAL) * 100 / COUNT(c.client_id) FROM client c JOIN district d ON c.district_id = d.district_id WHERE d.A3 = 'south Bohemia' AND d.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')
SELECT CAST(((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22') - (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1998-12-27')) AS REAL) * 100 / (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22')
SELECT (CAST(SUM(IIF(T1.status = 'A', T1.amount, 0)) AS REAL) / SUM(T1.amount)) * 100 FROM loan AS T1
SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM loan WHERE amount < 100000) FROM loan WHERE amount < 100000 AND status = 'C'
SELECT T1.account_id, T2.A2 AS district_name, T2.A3 AS district_region FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN card AS T3 ON T1.account_id = T3.account_id INNER JOIN trans AS T4 ON T1.account_id = T4.account_id WHERE T4.date > T3.issued AND T4.date LIKE '1993%' AND T3.type = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A6 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';
SELECT account_id, date FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Prachatice')
SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 4990;
SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount > 300000
SELECT loan.loan_id, district.A3, district.A11 FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id JOIN district ON client.district_id = district.district_id WHERE loan.duration = 60;
SELECT d.A2 AS district, ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.district_id = c.district_id JOIN district d ON c.district_id = d.district_id WHERE l.status = 'D'
SELECT COUNT(account_id) * 100.0 / (SELECT COUNT(account_id) FROM account WHERE date >= '1993-01-01' AND date <= '1993-12-31') FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Decin') AND date >= '1993-01-01' AND date <= '1993-12-31';
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'
SELECT A2, COUNT(account_id) AS num_female_account_holders FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE gender = 'F' GROUP BY A2 ORDER BY num_female_account_holders DESC LIMIT 10
SELECT DISTINCT district.A2, SUM(trans.amount) AS total_withdrawals FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%' GROUP BY district.A2 ORDER BY total_withdrawals DESC LIMIT 10;
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T4.A3 = 'South Bohemia' AND T2.type != 'credit card'
SELECT A3 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE status = 'C' OR status = 'D' GROUP BY account_id HAVING COUNT(*) > 0 ORDER BY COUNT(*) DESC LIMIT 1))
SELECT AVG(amount) FROM loan WHERE account_id IN (SELECT account_id FROM disp WHERE client_id IN (SELECT client_id FROM client WHERE gender = 'M'))
SELECT A2, A5 FROM district WHERE STRFTIME('%Y', date) = '1996' ORDER BY A13 DESC;
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A16 = ( SELECT MAX(A16) FROM district WHERE A16 IN ( SELECT COUNT(*) FROM Crime WHERE date LIKE '%1996%' GROUP BY district_id ) ) )
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T3.balance < 0 AND T3.operation = 'VYBER KARTOU' AND T1.frequency = 'POPLATEK MESICNE'
SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE' AND T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.status = 'approved'
SELECT COUNT(account_id) FROM loan WHERE status = 'C' AND account_id IN (SELECT account_id FROM account WHERE district_id = 1)
SELECT COUNT(DISTINCT T3.client_id) AS male_clients FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.district_id = ( SELECT T1.district_id FROM district AS T1 ORDER BY T1.A15 DESC LIMIT 1 OFFSET 1 ) AND T4.gender = 'M'
SELECT COUNT(*) FROM card WHERE type = 'gold' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'disponent')
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek')
SELECT DISTINCT A2, A3 FROM district WHERE district_id IN ( SELECT district_id FROM account WHERE account_id IN ( SELECT account_id FROM trans WHERE amount > 10000 AND date >= '1997-01-01' AND date <= '1997-12-31' ) )
SELECT T1.account_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A4 = 'Pisek'
SELECT account_id FROM disp WHERE type = 'gold' AND account_id IN ( SELECT account_id FROM card WHERE type = 'junior' )
SELECT AVG(T2.amount) FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T3.type = 'credit' AND T2.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T2.date) = '2021'
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN trans AS T4 ON T1.account_id = T4.account_id WHERE T3.type = 'credit' AND T4.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T4.date) = '1998' GROUP BY T1.account_id HAVING SUM(T4.amount) / 12 < (SELECT AVG(T5.amount) FROM trans AS T5 WHERE STRFTIME('%Y', T5.date) = '1998' AND T5.operation = 'VYBER KARTOU')
SELECT client.client_id FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id JOIN account ON disp.account_id = account.account_id JOIN loan ON account.account_id = loan.account_id WHERE client.gender = 'F' AND card.type = 'credit' AND loan.status = 'active'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'South Bohemia'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'
SELECT DISTINCT type FROM disp JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE type != 'OWNER' AND district.A11 > 8000 AND district.A11 <= 9000
SELECT COUNT(DISTINCT T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.bank = 'AB' AND T3.A3 = 'North Bohemia'
SELECT DISTINCT A2 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE type = 'VYDAJ'))
SELECT AVG(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01')
SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T2.client_id = T4.client_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
SELECT (CAST(COUNT(CASE WHEN T2.type = 'Gold' AND T2.issued < '1998-01-01' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.card_id)) AS percentage FROM card AS T1 WHERE T1.type = 'Gold';
SELECT C.FirstName, C.LastName FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN loan AS L ON A.account_id = L.account_id ORDER BY L.amount DESC LIMIT 1;
SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532)
SELECT T1.district_id FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333
SELECT t.trans_id, t.date, t.amount FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 3356 AND t.type = 'VYBER'
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000;
SELECT type FROM card JOIN disp ON card.disp_id = disp.disp_id JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 13539
SELECT A3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541
SELECT district.A2 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.A2 ORDER BY COUNT(district.A2) DESC LIMIT 1
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN `order` AS T4 ON T3.account_id = T4.account_id WHERE T4.order_id = 32423;
SELECT T1.trans_id, T1.date, T1.type, T1.operation, T1.amount, T1.balance, T1.k_symbol, T1.bank, T1.account FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.district_id = 5
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik')
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued > '1996-01-01' AND T2.type = 'junior'
SELECT COUNT(client_id) / (SELECT COUNT(client_id) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A11 > 10000)) * 100 FROM client WHERE gender = 'F' AND district_id IN (SELECT district_id FROM district WHERE A11 > 10000)
SELECT ((SUM(CASE WHEN EXTRACT(YEAR FROM date) = 1997 THEN amount ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM date) = 1996 THEN amount ELSE 0 END)) / SUM(CASE WHEN EXTRACT(YEAR FROM date) = 1996 THEN amount ELSE 0 END)) * 100 AS growth_rate FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M' AND (EXTRACT(YEAR FROM date) = 1996 OR EXTRACT(YEAR FROM date) = 1997)
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-01-01';
SELECT SUM(CASE WHEN A3 = 'North Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'East Bohemia' THEN A16 ELSE 0 END) AS Difference_in_Crimes FROM district WHERE A16 IS NOT NULL AND strftime('%Y', date) = '1996'
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10
SELECT frequency, SUM(amount) FROM account JOIN trans ON account.account_id = trans.account_id WHERE account.account_id = 3 AND k_symbol = 'SIPO' GROUP BY frequency, k_symbol
SELECT C.birth_date FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id WHERE D.client_id = 130
SELECT COUNT(*) FROM disp AS D INNER JOIN account AS A ON D.account_id = A.account_id WHERE D.type = 'OWNER' AND A.frequency = 'POPLATEK PO OBRATU'
SELECT SUM(amount) AS total_debt, status FROM loan WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 992)
SELECT SUM(T.amount) AS TotalAmount, C.gender AS OwnerGender FROM trans AS T INNER JOIN disp AS D ON T.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE T.trans_id = 851 AND D.client_id = 4;
SELECT T2.type FROM card AS T2 INNER JOIN disp AS T1 ON T2.disp_id = T1.disp_id WHERE T1.client_id = 9
SELECT SUM(t.amount) FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 617 AND t.date >= '1998-01-01' AND t.date <= '1998-12-31'
SELECT client.client_id, client.birth_date FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.A6 = 'East Bohemia';
SELECT client_id FROM client WHERE gender = 'F' ORDER BY client_id DESC LIMIT 3
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T4.type = 'SIPO' AND T4.amount > 4000;
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-01-01'
SELECT COUNT(client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE client.gender = 'F' AND card.type = 'junior'
SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'
SELECT CAST(COUNT(CASE WHEN T1.gender = 'M' THEN 1 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE';
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'
SELECT account_id FROM loan WHERE duration > 24 AND amount = (SELECT MIN(amount) FROM loan WHERE duration > 24) AND account_id IN (SELECT account_id FROM account WHERE date < '1997-01-01')
SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC, district.A11 ASC LIMIT 1;
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.A3 = 'East Bohemia'
SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'
SELECT AVG(amount) FROM loan WHERE status = 'C' AND account_id IN (SELECT account_id FROM trans WHERE k_symbol = 'POPLATEK PO OBRATU')
SELECT client.client_id, district.A2 FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id JOIN district ON client.district_id = district.district_id WHERE disp.type = 'OWNER'
SELECT client.client_id, (strftime('%Y', 'now') - strftime('%Y', client.birth_date)) AS age FROM client JOIN disp ON client.client_id = disp.client_id JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.molecule_id) AS NonCarcinogenic_with_Chlorine FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'
SELECT AVG(CASE WHEN T1.element = 'o' AND T2.bond_type = '-' THEN 1 ELSE 0 END) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id;
SELECT DIVIDE(SUM(CASE WHEN T3.label = '+' AND T2.bond_type = '-' THEN 1 ELSE 0 END), COUNT(T1.atom_id)) FROM atom AS T1 INNER JOIN bond AS T2 ON T2.molecule_id = T1.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T1.molecule_id;
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+';
SELECT SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) * 100 / COUNT(c.atom_id) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id WHERE b.bond_type = ' = '
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM atom WHERE element != 'br'
SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'si'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR004_8_9'
SELECT element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = '
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1
SELECT bond_type FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'te'
SELECT a.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '-'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T4.label = '-'
SELECT element, COUNT(element) AS element_count FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-') GROUP BY element ORDER BY element_count LIMIT 1;
SELECT B.bond_type FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE C.atom_id = 'TR004_8' AND C.atom_id2 = 'TR004_20'
SELECT DISTINCT T3.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element != 'sn' AND T1.label IN ('+', '-')
SELECT COUNT(DISTINCT a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN molecule m2 ON a2.molecule_id = m2.molecule_id JOIN bond b2 ON m2.molecule_id = b2.molecule_id WHERE (a.element = 'i' OR a.element = 's') AND (a2.element = 'i' OR a2.element = 's') AND b.bond_type = '-' AND b2.bond_type = '-'
SELECT a.atom_id, c.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '#'
SELECT T1.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR181'
SELECT CAST(SUM(CASE WHEN M1.element = 'f' THEN 1 ELSE 0 END) AS REAL) / COUNT(M1.molecule_id) as percent FROM molecule AS M1 INNER JOIN bond AS B1 ON M1.molecule_id = B1.molecule_id INNER JOIN atom AS A1 ON M1.molecule_id = A1.molecule_id WHERE M1.label = '+' AND A1.element != 'f'
SELECT CAST(SUM(IIF(bond_type = '#', 1, 0)) AS REAL) * 100 / COUNT(bond_id) FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')))
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT T1.atom_id, T2.atom_id FROM connected AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_2_6' AND T2.bond_id = 'TR001_2_6'
SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' ORDER BY T1.label LIMIT 5
SELECT CAST(SUM(CASE WHEN B.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(B.bond_id) FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE M.molecule_id = 'TR008'
SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100 / COUNT(molecule_id) AS percent FROM molecule
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) as percent FROM atom AS T1 WHERE T1.molecule_id = 'TR206'
SELECT BOND.bond_type FROM BOND INNER JOIN MOLECULE ON BOND.molecule_id = MOLECULE.molecule_id WHERE MOLECULE.molecule_id = 'TR000'
SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'
SELECT T2.bond_type, CASE WHEN T3.label = '+' THEN 'carcinogenic' WHEN T3.label = '-' THEN 'non-carcinogenic' END AS carcinogenic_status FROM molecule AS T3 INNER JOIN bond AS T2 ON T3.molecule_id = T2.molecule_id WHERE T3.molecule_id = 'TR018' GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_type) DESC LIMIT 1
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T2.bond_type = '-' AND T1.label = '-' GROUP BY T1.molecule_id ORDER BY T1.label ASC LIMIT 3;
SELECT T.bond_id FROM bond AS T INNER JOIN connected AS T2 ON T.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR006' ORDER BY T.bond_id LIMIT 2
SELECT COUNT(*) FROM `connected` c JOIN `bond` b ON c.bond_id = b.bond_id JOIN `molecule` m ON b.molecule_id = m.molecule_id WHERE (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12') AND m.molecule_id = 'TR009'
SELECT COUNT(DISTINCT T1.molecule_id) AS Num_molecules FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT B.bond_type, C.atom_id, C.atom_id2 FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_id = 'TR001_6_9'
SELECT T2.label, CASE WHEN T2.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS Carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) AS connections FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR004'
SELECT COUNT(*) FROM molecule WHERE label = '-'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTRING(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T2.label = '+';
SELECT B.bond_id FROM bond B JOIN connected C ON B.molecule_id = C.bond_id JOIN atom A ON C.atom_id = A.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id WHERE A.element = 'p' AND A2.element = 'n'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' GROUP BY T1.label ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CAST(COUNT(bond_id) AS REAL) / COUNT(atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE element = 'i'
SELECT T2.bond_type, T2.bond_id FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45
SELECT element FROM atom WHERE element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') AND atom_id NOT IN (SELECT atom_id FROM connected)
SELECT a.atom_id, b.atom_id2 FROM connected c JOIN bond b ON c.bond_id = b.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '#' AND b.molecule_id = 'TR447'
SELECT element FROM atom WHERE molecule_id = 'TR144_8_19'
SELECT T1.molecule_id, COUNT(T2.bond_id) AS double_bonds FROM Molecule AS T1 INNER JOIN Bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1;
SELECT element FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' GROUP BY element ORDER BY COUNT(atom.atom_id) ASC LIMIT 1
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'
SELECT T1.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(bond_id) * 100 / (SELECT COUNT(atom_id) FROM atom GROUP BY element ORDER BY COUNT(element) DESC LIMIT 1) FROM bond;
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h')
SELECT T2.atom_id2 FROM atom AS T1 JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'
SELECT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'sn'
SELECT COUNT(DISTINCT A.element) FROM atom A INNER JOIN bond B ON A.molecule_id = B.molecule_id WHERE B.bond_type = '-'
SELECT COUNT(DISTINCT A.atom_id) FROM atom A JOIN bond B ON A.molecule_id = B.molecule_id JOIN connected C ON A.atom_id = C.atom_id JOIN atom A2 ON C.atom_id2 = A2.atom_id JOIN bond B2 ON A2.molecule_id = B2.molecule_id WHERE (A.element = 'p' OR A.element = 'br') AND B.bond_type = '#' AND B2.bond_type = '#'
SELECT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT SUM(CASE WHEN A.element = 'cl' THEN 1 ELSE 0 END) * 100 / COUNT(DISTINCT C.atom_id) as percentage FROM atom A JOIN bond B ON A.molecule_id = B.molecule_id JOIN connected C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE B.bond_type = '-'
SELECT m.label FROM molecule AS m WHERE m.molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(DISTINCT T1.molecule_id) AS total_carcinogenic_molecules FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR030' AND T1.label = '+';
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT element FROM atom WHERE molecule_id = 'TR001_10_11'
SELECT COUNT(bond_id) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'i'
SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Ca' GROUP BY T1.label ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM Connected AS T1 INNER JOIN Atom AS T2 ON T1.AtomId = T2.AtomId WHERE T1.BondId = 'TR001_1_8' AND T2.Element IN ('cl', 'c') HAVING COUNT(DISTINCT T2.Element) = 2
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-' AND T2.element = 'c' LIMIT 2;
SELECT (CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.molecule_id)) * 100 AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'
SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ';
SELECT T1.atom_id, T2.atom_id2 FROM bond AS T3 INNER JOIN connected AS T1 ON T3.bond_id = T1.bond_id INNER JOIN connected AS T2 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR005_16_26' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(DISTINCT T1.molecule_id) AS SingleBondNonCarcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11';
SELECT T1.bond_id, CASE WHEN T2.label = '+' THEN 'Carcinogenic' WHEN T2.label = '-' THEN 'Non-carcinogenic' END AS Carcinogenicity FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT T2.element, COUNT(T2.element) AS element_count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, 7, 1) = '4' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY T2.element;
SELECT COUNT(CASE WHEN T1.element = 'h' THEN 1 ELSE NULL END) / COUNT(T1.element) AS RATIO, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'
SELECT CASE WHEN T1.label = '+' THEN 'Carcinogenic' WHEN T1.label = '-' THEN 'Non-carcinogenic' END AS Carcinogenicity FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'ca'
SELECT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'
SELECT DISTINCT element FROM atom AS a JOIN bond AS b ON a.molecule_id = b.molecule_id JOIN connected AS c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE b.bond_id = 'TR001_10_11'
SELECT COUNT(DISTINCT molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#') AS percentage_triple_bond FROM bond WHERE bond_type = '#'
SELECT CAST(COUNT(T1.bond_id) AS REAL) * 100 / COUNT(T2.bond_id) FROM bond AS T1 JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.molecule_id = 'TR047'
SELECT CASE WHEN T1.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS Carcinogenicity FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1';
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM molecule WHERE molecule_id = 'TR151';
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR151' AND T1.element = 'cl'
SELECT COUNT(*) AS Carcinogenic_compounds FROM molecule WHERE label = '+';
SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c'
SELECT COUNT(*) AS num_atoms FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT T3.bond_id FROM bond AS T3 INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.bond_type = ' = ' AND T4.label = '+'
SELECT COUNT(a.atom_id) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'h' AND m.label = '+'
SELECT T2.molecule_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T3.element = 'TR00_1' AND T2.bond_type = 'TR00_1_2'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM molecule WHERE molecule_id = 'TR124';
SELECT atom_id FROM atom WHERE molecule_id = 'TR186'
SELECT bond_type FROM bond WHERE molecule_id = 'TR007_4_19'
SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_2_4'
SELECT COUNT(T1.bond_id) AS double_bonds, T2.label AS carcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.molecule_id = 'TR006'
SELECT T1.label AS Carcinogenic_Molecule, T2.element AS Element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND (T2.element = 'cl' OR T2.element = 'c' OR T2.element = 'h' OR T2.element = 'o' OR T2.element = 's' OR T2.element = 'n' OR T2.element = 'p' OR T2.element = 'na' OR T2.element = 'br' OR T2.element = 'f' OR T2.element = 'i' OR T2.element = 'sn' OR T2.element = 'pb' OR T2.element = 'te' OR T2.element = 'ca')
SELECT bond_id, atom_id, atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond_type = '-'
SELECT T2.label, T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3'
SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'cl'
SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) AS num_bond_types FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id;
SELECT COUNT(DISTINCT T1.molecule_id) AS DoubleBondMolecules, COUNT(DISTINCT T1.molecule_id) AS CarcinogenicMolecules FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id LEFT JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.element != 's' OR T3.bond_type != ' = '
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4' AND T2.label = '+';
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005'
SELECT COUNT(*) FROM bond WHERE bond_type = '-'
SELECT T1.molecule_id, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element LIKE '%cl%' AND T1.label = '+';
SELECT T1.molecule_id, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element LIKE '%c%' AND T1.label = '-'
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'Cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(*) FROM atom WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_3_4') AND element = 'cl'
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T1.atom_id2 = 'TR000_2'
SELECT m1.label FROM atom a1 JOIN molecule m1 ON a1.molecule_id = m1.molecule_id WHERE a1.atom_id = "TR000_2" UNION SELECT m2.label FROM atom a2 JOIN molecule m2 ON a2.molecule_id = m2.molecule_id WHERE a2.atom_id = "TR000_4"
SELECT T1.element FROM atom AS T1 WHERE T1.atom_id = 'TR000_1'
SELECT CASE WHEN T1.label = '+' THEN 'Carcinogenic' WHEN T1.label = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS Carcinogenicity FROM molecule AS T1 WHERE T1.molecule_id = 'TR000';
SELECT (SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) / COUNT(bond_id)) as percentage FROM bond;
SELECT COUNT(DISTINCT T1.molecule_id) AS Carcinogenic_Nitrogen_Molecules FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'
SELECT m.label FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id INNER JOIN bond AS b ON m.molecule_id = b.molecule_id WHERE a.element = 'S' AND b.bond_type = ' = '
SELECT T2.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T2.molecule_id HAVING COUNT(T2.atom_id) > 5
SELECT A.element FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id INNER JOIN bond AS B2 ON A2.molecule_id = B2.molecule_id WHERE B.bond_type = '=' AND B2.bond_type = '=' AND A.element = 'cl' AND A2.element = 'cl' AND A.molecule_id = 'TR024'
SELECT T.label FROM molecule AS T INNER JOIN atom AS T1 ON T.molecule_id = T1.molecule_id WHERE T.label = '+' GROUP BY T.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE a.element = 'h' AND b.bond_type = '#'
SELECT COUNT(*) AS Carcinogenic_molecules FROM molecule WHERE label = '+'
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-' AND T1.element != 'cl'
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN connected c2 ON a.atom_id = c2.atom_id2 WHERE a.element = 'o' AND b.bond_type = ' = ';
SELECT COUNT(DISTINCT M.molecule_id) FROM molecule AS M INNER JOIN bond AS B ON M.molecule_id = B.molecule_id WHERE B.bond_type = '#' AND M.label = '-'
SELECT atom.element, bond.bond_type FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T1.element = 'c' AND T2.bond_type = ' = ' AND T1.molecule_id = 'TR012'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator';
SELECT C.name, L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.types = 'Artifact' AND C.side IS NULL AND L.format = 'vintage'
SELECT id, artist FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE (power = '*' OR power IS NULL) AND format = 'commander' AND status = 'Legal'
SELECT cards.name, rulings.text, cards.hasContentWarning FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele' AND cards.hasContentWarning = 1;
SELECT r.text FROM rulings AS r INNER JOIN cards AS c ON r.uuid = c.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s'
SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name, T1.artist, T1.isPromo ORDER BY COUNT(T2.uuid) DESC LIMIT 1
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT CAST(COUNT(T1.id) * 100.0 / (SELECT COUNT(*) FROM cards) AS REAL) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT T1.name AS set_name, T2.totalSetSize AS total_cards FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT T1.type) FROM cards AS T1 WHERE T1.artist = 'Aaron Boyd'
SELECT T3.keyword_name FROM cards AS T1 INNER JOIN card_keywords AS T2 ON T1.uuid = T2.uuid INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(*) AS count_cards_with_infinite_power FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress';
SELECT borderColor FROM cards WHERE name = "Ancestor's Chosen"
SELECT originalType FROM cards WHERE name = "Ancestor's Chosen"
SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T2.name = 'Angel of Mercy'
SELECT COUNT(*) FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0;
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn')
SELECT COUNT(*) FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'
SELECT type FROM cards WHERE name = 'Benalish Knight'
SELECT T1.format FROM cards AS T1 WHERE T1.name = 'Benalish Knight'
SELECT artist FROM cards WHERE asciiName = 'Phyrexian'
SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards;
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1
SELECT COUNT(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.borderColor = 'borderless' AND foreign_data.language = 'Russian'
SELECT CAST(SUM(IIF(T1.language = 'French', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.isStorySpotlight = 1;
SELECT COUNT(id) FROM cards WHERE toughness = '99'
SELECT name FROM cards WHERE artist = 'Aaron Boyd'
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT id FROM cards WHERE convertedManaCost = 0
SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
SELECT cards.id FROM cards WHERE cards.cardKingdomFoilId IS NOT NULL AND cards.cardKingdomId IS NOT NULL
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT * FROM cards WHERE availability = 'paper' AND uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese')
SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white'
SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
SELECT COUNT(*) AS num_cards, status FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE c.frameVersion = 'future' AND l.status = 'legal' GROUP BY status;
SELECT name, colors FROM cards WHERE setCode = 'OGW'
SELECT cards.name, set_translations.language FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5;
SELECT c.name, r.date FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf'
SELECT c.colors, l.format FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE c.id BETWEEN 1 AND 20;
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B'
SELECT name FROM cards WHERE rarity = 'uncommon' ORDER BY (SELECT date FROM rulings WHERE rulings.uuid = cards.uuid) ASC LIMIT 3
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT T1.manaCost FROM cards AS T1 WHERE T1.layout = 'normal' AND T1.frameVersion = '2003' AND T1.borderColor = 'black' AND T1.availability = 'paper' AND T1.availability = 'mtgo'
SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'
SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 WHERE T1.availability = 'arena'
SELECT sets.code FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish'
SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary';
SELECT CAST(COUNT(CASE WHEN isStorySpotlight = 1 AND isTextless = 0 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) AS percentage, id FROM cards GROUP BY id HAVING isStorySpotlight = 1 ORDER BY id;
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish' GROUP BY cards.name HAVING COUNT(cards.id) * 100 / (SELECT COUNT(id) FROM cards)
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
SELECT COUNT(*) FROM set_translations WHERE language = 'Portuguese (Brasil)' AND setCode IN (SELECT code FROM sets WHERE block = 'Commander')
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types LIKE '%Creature%' AND T1.types LIKE '%Goblin%' AND T2.status = 'legal'
SELECT DISTINCT types FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'German') AND subtypes IS NOT NULL AND supertypes IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'pre-modern' AND T3.text = 'This is a triggered mana ability' AND T1.side IS NULL;
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'
SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.text = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT FD.name FROM cards AS C INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.type LIKE '%Creature%' AND C.layout = 'normal' AND C.borderColor = 'black' AND C.artist = 'Matthew D. Wilson' AND FD.language = 'French'
SELECT COUNT(c.id) FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10'
SELECT language FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE baseSetSize = 180 AND block = 'Ravnica'
SELECT CAST(COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal';
SELECT CAST(SUM(IIF(T1.language = 'French' AND (T2.power IS NULL OR T2.power = '*'), 1, 0)) AS REAL) * 100 / COUNT(T2.power) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid
SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' AND T2.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code;
SELECT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT T1.id, T2.id FROM cards AS T1 INNER JOIN cards AS T2 ON T1.cardKingdomFoilId = T2.cardKingdomId WHERE T1.cardKingdomFoilId IS NOT NULL AND T2.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC LIMIT 3;
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(isTextless) FROM cards;
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND name NOT IN (SELECT name FROM cards WHERE side IS NOT NULL)
SELECT Sets.name FROM Sets WHERE Sets.mtgoCode IS NULL OR Sets.mtgoCode = '' ORDER BY Sets.name ASC LIMIT 3;
SELECT T.language FROM set_translations AS T JOIN sets AS S ON T.setCode = S.code WHERE S.name = 'Archenemy' AND S.code = 'ARC'
SELECT name, translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5
SELECT T2.language, T3.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode INNER JOIN set_translations AS T3 ON T1.code = T3.setCode WHERE T1.id = 206;
SELECT T1.id, T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.name LIMIT 2
SELECT T2.id, T2.name FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'
SELECT name FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Russian') AND baseSetSize = (SELECT MAX(baseSetSize) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Russian'))
SELECT (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM cards)) * 100 FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified' AND cards.isOnlineOnly = 1;
SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Japanese') AND (mtgoCode IS NULL OR mtgoCode = '')
SELECT COUNT(id) AS num_cards, id FROM cards WHERE borderColor = 'black'
SELECT COUNT(id) AS num_cards, id FROM cards WHERE frameEffects = 'extendedart'
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT language FROM set_translations WHERE setCode = 174;
SELECT name FROM sets WHERE code = 'ALL'
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'
SELECT code FROM sets WHERE releaseDate = '07/13/2007'
SELECT T1.baseSetSize, T1.code FROM sets AS T1 WHERE T1.block = 'Masques' AND T1.parentCode = 'Mirage';
SELECT code FROM sets WHERE type = 'expansion'
SELECT foreign_data.name, cards.type FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'
SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie'
SELECT CAST(SUM(IIF(T1.name = 'Abyssal Horror' AND T2.convertedManaCost = 10, 1, 0)) AS REAL) * 100 / COUNT(T2.convertedManaCost) FROM cards AS T2 INNER JOIN sets AS T1 ON T2.setCode = T1.code
SELECT T1.code FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.type LIKE '%Commander%'
SELECT foreign_data.name, cards.type FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'
SELECT T1.language, T1.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.watermark = 'Azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL
SELECT T1.subtypes, T1.supertypes FROM cards AS T1 WHERE T1.name = 'Molimo, Maro-Sorcerer'
SELECT T1.purchaseUrls FROM cards AS T1 WHERE T1.promoTypes = 'bundle'
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'
SELECT CASE WHEN (SELECT convertedManaCost FROM cards WHERE name = 'Serra Angel') > (SELECT convertedManaCost FROM cards WHERE name = 'Shrine Keeper') THEN 'Serra Angel' ELSE 'Shrine Keeper' END as card_with_higher_converted_mana_cost;
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor\'s Chosen' AND T2.language = 'Italian'
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE id IN (SELECT id FROM cards WHERE name = 'Angel of Mercy'))
SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'
SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor\'s Chosen' AND foreign_data.language = 'Korean';
SELECT COUNT(*) FROM cards AS c INNER JOIN set_translations AS st ON c.setCode = st.code WHERE st.translation = 'Hauptset Zehnte Edition' AND c.artist = 'Adam Rex'
SELECT baseSetSize FROM sets WHERE name = (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition')
SELECT T2.translation FROM set_translations AS T2 INNER JOIN sets AS T1 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Simplified Chinese'
SELECT S1.name FROM cards AS S1 INNER JOIN sets AS S2 ON S1.setCode = S2.code WHERE S1.name = 'Angel of Mercy' AND S2.mtgoCode IS NOT NULL;
SELECT releaseDate FROM sets WHERE name = 'Ancestor''s Chosen'
SELECT s.type FROM sets AS s INNER JOIN set_translations AS st ON s.code = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code=T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT S1.name FROM cards AS S1 INNER JOIN sets AS S2 ON S1.setCode = S2.code WHERE S1.name = 'Adarkar Valkyrie' AND S2.isForeignOnly = 1;
SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T2.translation IS NOT NULL AND T1.baseSetSize < 10;
SELECT COUNT(*) FROM cards WHERE name = 'Coldsnap' AND borderColor = 'black';
SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedManaCost DESC LIMIT 1
SELECT DISTINCT artist FROM cards WHERE setCode = 'CSP' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')
SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND number = '4'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T2.name = 'Coldsnap' AND (T1.power = '*' OR T1.power IS NULL)
SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'
SELECT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;
SELECT T1.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code INNER JOIN set_translations AS T4 ON T3.code = T4.setCode WHERE T3.name = 'Coldsnap' AND T4.language = 'Italian'
SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T2.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap')
SELECT R.date FROM rulings AS R INNER JOIN cards AS C ON R.uuid = C.uuid WHERE C.name = 'Reminisce'
SELECT (SUM(CASE WHEN convertedManaCost = 7 THEN 1 ELSE 0 END) / SUM(CASE WHEN convertedManaCost IS NOT NULL THEN 1 ELSE 0 END)) * 100 AS percentage FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap');
SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.name = 'Coldsnap' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT code FROM sets WHERE releaseDate = '2017-07-14'
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2'
SELECT T1.mcmName FROM sets AS T1 WHERE T1.releaseDate = '2017-06-09'
SELECT T1.type FROM sets AS T1 WHERE T1.name LIKE 'From the Vault: Lore'
SELECT T2.parentCode FROM sets AS T1 INNER JOIN sets AS T2 ON T1.code = T2.parentCode WHERE T1.name = 'Commander 2014 Oversized'
SELECT C.asciiName, R.text, C.hasContentWarning FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Jim Pavelec';
SELECT T2.releaseDate FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Evacuation'
SELECT baseSetSize FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara')
SELECT T2.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'HuitiÃ¨me Ã©dition'
SELECT T2.translation FROM set_translations AS T1 INNER JOIN foreign_data AS T2 ON T1.setCode = T2.uuid WHERE T2.name = 'Tendo Ice Bridge' AND T2.language = 'French'
SELECT COUNT(translation) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011') AND translation IS NOT NULL;
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese';
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1;
SELECT T2.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de frío'
SELECT T2.type FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') AND convertedManaCost = 3;
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'
SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' AND T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid;
SELECT CAST(SUM(IIF(T1.isOnlineOnly = 1, 1, 0)) AS REAL) * 100 / SUM(IIF(T2.language = 'Portuguese (Brazil)', 1, 0)) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'
SELECT T1.availability FROM cards AS T1 WHERE T1.artist = 'Aleksi Briclot' AND T1.isTextless = 1
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)
SELECT T1.artist FROM cards AS T1 WHERE T1.side IS NULL ORDER BY T1.convertedManaCost DESC LIMIT 1;
SELECT T1.frameEffects FROM cards AS T1 WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.frameEffects DESC LIMIT 1
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'A'
SELECT id FROM sets WHERE type = 'Commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'Commander' AND isPartialPreview = 0)
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.convertedManaCost DESC LIMIT 10;
SELECT MIN(c.originalReleaseDate) AS oldest_release_date, c.name AS card_name, l.format AS legal_play_format FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' GROUP BY c.name ORDER BY c.originalReleaseDate LIMIT 1
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French'
SELECT COUNT(*) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND id IN (SELECT id FROM legalities WHERE format = 'Legal')
SELECT legalities.format, cards.name FROM legalities JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'banned' GROUP BY legalities.format ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond'
SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid GROUP BY T1.artist ORDER BY COUNT(T1.artist) LIMIT 1
SELECT T1.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T1.hasContentWarning = 1 AND T2.format = 'legacy'
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned'
SELECT AVG(T1.id), MAX(COUNT(T2.language)) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
SELECT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'
SELECT c.uuid FROM legalities AS l JOIN cards AS c ON l.uuid = c.uuid WHERE l.format = 'oldschool' AND (l.status = 'banned' OR l.status = 'restricted')
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT text FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE artist = 'Kev Walker') ORDER BY date DESC
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN sets AS T3 ON T1.setCode = T3.code INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T3.name = 'Hour of Devastation' AND T2.status = 'legal'
SELECT name FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Korean') AND code NOT IN (SELECT setCode FROM set_translations WHERE language LIKE '%Japanese%')
SELECT T1.frameVersion, T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.artist = 'Allen Williams' AND T3.status = 'banned'
SELECT T1.DisplayName FROM users AS T1 WHERE T1.DisplayName = 'Harlan' OR T1.DisplayName = 'Jarrod Dixon' GROUP BY T1.DisplayName ORDER BY T1.Reputation DESC LIMIT 1
SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014'
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00'
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)
SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(Id) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013'
SELECT COUNT(*) AS post_count FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT T1.DisplayName FROM posts AS T2 INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id WHERE T2.Title = "Eliciting priors from experts"
SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC LIMIT 1
SELECT OwnerDisplayName FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT SUM(p.CommentCount) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'
SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Title = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL;
SELECT COUNT(*) FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.Age > 65 AND p.Score >= 20;
SELECT T1.Location FROM Users AS T1 INNER JOIN Posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Eliciting priors from experts'
SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian'
SELECT posts.Body FROM posts JOIN tags ON posts.Id = tags.ExcerptPostId ORDER BY tags.Count DESC LIMIT 1
SELECT COUNT(*) AS badge_count FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT COUNT(Id) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011'
SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1 )
SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT COUNT(Id) / COUNT(DisplayName) AS avg_badges FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Views > 200)
SELECT CAST(SUM(CASE WHEN T1.Age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 WHERE T1.Score > 20
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate LIKE '2010-07-19%'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(*) FROM badges WHERE Name = 'Revival';
SELECT p.Title FROM posts p JOIN comments c ON p.Id = c.PostId WHERE c.Score = (SELECT MAX(Score) FROM comments)
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ViewCount = 1910)
SELECT P.FavoriteCount FROM posts AS P INNER JOIN comments AS C ON P.Id = C.PostId WHERE C.UserId = 3025 AND C.CreationDate = '2014-04-23 20:29:39.0'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ParentId = 107829 AND T2.CommentCount = 1
SELECT CASE WHEN P.ClosedDate IS NULL THEN 'Well-finished' ELSE 'Not well-finished' END AS PostStatus FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE C.UserId = 23853 AND C.CreationDate = '2013-07-12 09:08:18.0'
SELECT T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = '65041'
SELECT COUNT(*) AS NumberOfPostsOwned FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')
SELECT T1.UserDisplayName FROM votes AS T1 WHERE T1.Id = 6347;
SELECT COUNT(*) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT COUNT(posts.Id) / COUNT(votes.Id) FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN votes ON posts.Id = votes.PostId WHERE users.Id = 24
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'
SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'A Lion'
SELECT U.DisplayName, U.Reputation FROM users U INNER JOIN posts P ON U.Id = P.OwnerUserId WHERE P.Title = 'Understanding what Dassault iSight is doing?'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'
SELECT DisplayName FROM users JOIN badges ON users.Id = badges.UserId WHERE badges.Name = 'Necromancer' LIMIT 10;
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'
SELECT SUM(P.Score), U.WebsiteUrl FROM posts AS P INNER JOIN users AS U ON P.LastEditorUserId = U.Id WHERE U.DisplayName = 'Yevgeny'
SELECT T2.Text FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.PostId = T2.PostId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
SELECT SUM(v.BountyAmount) FROM votes v JOIN posts p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'
SELECT U.DisplayName FROM users AS U INNER JOIN votes AS V ON U.Id = V.UserId INNER JOIN posts AS P ON P.Id = V.PostId WHERE P.Title LIKE '%variance%' AND V.BountyAmount = 50;
SELECT AVG(T1.ViewCount), T2.Title, T3.Text, T2.Score FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId LEFT JOIN comments AS T3 ON T1.Id = T3.PostId WHERE T2.TagName = 'humor' GROUP BY T1.Id, T2.Title, T3.Text, T2.Score
SELECT COUNT(*) AS total_comments FROM comments WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT T1.Id FROM users AS T1 ORDER BY T1.Views LIMIT 1
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'
SELECT COUNT(UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5
SELECT COUNT(users.Id) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'New York' AND (badges.Name = 'Supporter' OR badges.Name = 'Teacher')
SELECT u.DisplayName, u.Reputation FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.Id = 1;
SELECT u.Id, u.DisplayName FROM users u JOIN postHistory ph ON u.Id = ph.UserId JOIN posts p ON ph.PostId = p.Id WHERE p.ViewCount >= 1000 GROUP BY u.Id, u.DisplayName HAVING COUNT(DISTINCT ph.PostId) = 1;
SELECT u.Id, u.DisplayName, b.Name FROM users u JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(c.Id) DESC LIMIT 1;
SELECT COUNT(*) FROM users JOIN badges ON users.Id = badges.UserId WHERE users.Location = 'India' AND badges.Name = 'Teacher'
SELECT ((COUNT(CASE WHEN Year(Date) = 2010 AND Name = 'Students' THEN 1 END) - COUNT(CASE WHEN Year(Date) = 2011 AND Name = 'Students' THEN 1 END)) * 100) / COUNT(CASE WHEN Name = 'Students' THEN 1 END) as percentage_difference FROM badges
SELECT T1.PostHistoryTypeId, COUNT(DISTINCT T2.UserId) AS UniqueUsers FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.PostId = T2.PostId WHERE T1.PostId = 3720 GROUP BY T1.PostHistoryTypeId;
SELECT T1.* FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.RelatedPostId = 61217 SELECT ViewCount FROM posts WHERE Id = 61217
SELECT Score, LinkTypeId FROM posts WHERE Id = 395
SELECT T1.Id AS Post_ID, T1.OwnerUserId AS User_ID FROM posts AS T1 WHERE T1.Score > 60;
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreationDate) = '2011'
SELECT AVG(T1.UpVotes) AS AvgUpVotes, AVG(T2.Age) AS AvgAge FROM users AS T2 INNER JOIN posts AS T1 ON T1.OwnerUserId = T2.Id GROUP BY T1.OwnerUserId HAVING COUNT(T1.OwnerUserId) > 10
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08 PM'
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'
SELECT COUNT(Id) AS countposts FROM posts WHERE Score = 10
SELECT T.Name FROM badges AS T INNER JOIN users AS U ON T.UserId = U.Id WHERE U.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT T2.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'
SELECT b.Date FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY'
SELECT COUNT(DISTINCT UserId) * 100 / (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') FROM badges WHERE Name = 'Teacher'
SELECT COUNT(CASE WHEN T1.Age BETWEEN 13 AND 18 THEN T1.UserId END) / COUNT(T1.UserId) * 100 AS percentage FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer';
SELECT T2.Score FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CreationDate = '2010-07-19 19:19:56.0'
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreaionDate = '2010-07-19 19:37:33.0')
SELECT u.Age FROM users AS u INNER JOIN badges AS b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'
SELECT COUNT(*) FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT SUM(T3.ViewCount) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id INNER JOIN posts AS T3 ON T2.Id = T3.OwnerUserId WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users))
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'
SELECT COUNT(*) FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.Age > 65 AND b.Name = "Supporter"
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(*) FROM users WHERE Location = 'New York'
SELECT COUNT(*) FROM votes WHERE YEAR(CreationDate) = 2010;
SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)
SELECT CAST(SUM(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN 1 ELSE 0 END) AS REAL) / COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010' OR strftime('%Y', CreationDate) = '2011'
SELECT T2.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'John Stauffer'
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo')
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')
SELECT posts.Id FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1
SELECT MAX(SUM(ViewCount)) FROM posts WHERE OwnerDisplayName = 'Harvey Motulsky' OR OwnerDisplayName = 'Noah Snyder' GROUP BY OwnerDisplayName
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Matt Parker') AND Id IN (SELECT PostId FROM votes WHERE VoteTypeId > 4)
SELECT COUNT(T2.Id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Neil McGuigan' AND T1.Score < 60
SELECT T2.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId LEFT JOIN comments AS T3 ON T2.Id = T3.PostId INNER JOIN tags AS T4 ON T2.Tags LIKE '%' || T4.TagName || '%' WHERE T1.DisplayName = 'Mark Meckes' AND T3.Id IS NULL;
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer';
SELECT CAST(SUM(IIF(T1.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T2.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.OwnerDisplayName = 'Community'
SELECT SUM(CASE WHEN T1.OwnerDisplayName = 'Mornington' THEN T2.ViewCount ELSE 0 END) - SUM(CASE WHEN T1.OwnerDisplayName = 'Amos' THEN T2.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id;
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'commentator' AND strftime('%Y', T1.Date) = '2014'
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';
SELECT T1.DisplayName, T1.Age FROM users AS T1 WHERE T1.Views = (SELECT MAX(Views) FROM users)
SELECT P.LastEditDate, P.LastEditorUserId FROM posts AS P WHERE P.Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60
SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60;
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE YEAR(b.Date) = 2011 AND u.Location = 'North Pole'
SELECT U.DisplayName, U.WebsiteUrl FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount > 150;
SELECT COUNT(*) AS post_history_counts, MAX(CreationDate) AS last_edit_date FROM postHistory WHERE PostId = (SELECT Id FROM posts WHERE Title = "What is the best introductory Bayesian statistics textbook?")
SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Outliers')
SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'
SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND YEAR(T1.CreationDate) = 2013 AND YEAR(T2.Date) = 2013;
SELECT OwnerDisplayName FROM posts ORDER BY ViewCount DESC LIMIT 1
SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId WHERE T3.TagName = 'hypothesis-testing'
SELECT Title, LinkTypeId FROM postLinks WHERE PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ParentId IS NOT NULL ORDER BY T1.Score DESC LIMIT 1
SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.VoteTypeId = 8 ORDER BY T2.BountyAmount DESC LIMIT 1
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT DATEDIFF(CURRENT_DATE, CreationDate) AS Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(p.Id) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(p.CreationDate) = 2011 AND v.BountyAmount = 50;
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)
SELECT p.Score FROM posts p JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%' WHERE t.Count = (SELECT MAX(Count) FROM tags) ORDER BY p.ViewCount DESC LIMIT 1;
SELECT COUNT(pl.Id) / 12 FROM postLinks AS pl INNER JOIN posts AS p ON pl.PostId = p.Id WHERE YEAR(p.CreationDate) = 2010 AND p.AnswerCount <= 2;
SELECT T1.Id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT Title FROM posts WHERE Id = (SELECT PostId FROM postLinks ORDER BY CreationDate ASC LIMIT 1);
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T2.Name) DESC LIMIT 1;
SELECT MIN(v.CreationDate) FROM votes v JOIN users u ON v.UserId = u.Id WHERE u.DisplayName = 'chl';
SELECT MIN(T5.CreationDate) AS First_Post_Date FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MIN(Age) AS Min_Age FROM users ) AS T3 ON T1.Age = T3.Min_Age INNER JOIN ( SELECT MIN(CreationDate) AS CreationDate FROM posts ) AS T5 ON T2.CreaionDate = T5.CreationDate;
SELECT u.DisplayName FROM users u JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Autobiographer' AND b.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')
SELECT COUNT(DISTINCT u.Id) FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;
SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND strftime('%Y', CreationDate) = '2010'
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Harvey Motulsky' ORDER BY p.ViewCount DESC LIMIT 1;
SELECT p.Id, p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score = (SELECT MAX(Score) FROM posts)
SELECT AVG(P.Score) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Stephen Turner'
SELECT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND YEAR(p.CreationDate) = 2011;
SELECT T2.Id, T2.OwnerDisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE year(T1.CreationDate) = 2010 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T1.CreationDate = '2011' AND T2.Reputation > 1000 THEN T3.Id ELSE NULL END) AS REAL) * 100 / COUNT(T3.Id) FROM posts AS T3 INNER JOIN users AS T2 ON T3.OwnerUserId = T2.Id INNER JOIN postHistory AS T1 ON T3.Id = T1.PostId;
SELECT (CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN Id END) AS REAL) / COUNT(Id)) * 100 as percentage FROM users;
SELECT P.ViewCount AS TotalViews, U.DisplayName AS LastPoster FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Title = 'Computer Game Datasets' AND P.Body = 'Computer Game Datasets';
SELECT COUNT(*) AS TotalPostsAboveAverageViews FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
SELECT u.DisplayName, u.Location FROM users u JOIN posts p ON u.Id = p.LastEditorUserId WHERE p.Id = 183;
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1;
SELECT COUNT(U.Id) FROM users AS U INNER JOIN votes AS V ON U.Id = V.UserId WHERE U.Age BETWEEN 19 AND 65 AND U.UpVotes > 5000
SELECT julianday(b.Date) - julianday(u.CreationDate) AS days_to_get_badge FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon';
SELECT COUNT(posts.Id) AS num_posts, COUNT(comments.Id) AS num_comments FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId LEFT JOIN comments ON users.Id = comments.UserId WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)
SELECT T2.Text, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T1.Id WHERE T1.Title = 'Analysing wind data with R' ORDER BY T2.CreationDate DESC LIMIT 1
SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(*) FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'careers'
SELECT T1.Reputation, T1.Views FROM users AS T1 WHERE T1.DisplayName = 'Jarrod Dixon'
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') UNION SELECT COUNT(*) FROM posts WHERE ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(Id) FROM votes WHERE BountyAmount >= 30
SELECT COUNT(stats_posts.Id) * 100 / (SELECT COUNT(stats_posts.Id) FROM posts AS stats_posts WHERE stats_posts.OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)) AS percentage FROM posts AS stats_posts WHERE stats_posts.OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1) AND stats_posts.Score >= 50;
SELECT COUNT(*) FROM posts WHERE Score < 20
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
SELECT U.Reputation, U.UpVotes FROM users U INNER JOIN comments C ON U.Id = C.UserId WHERE C.Text = 'fine, you win :)'
SELECT T2.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How can I adapt ANOVA for binary data?'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1
SELECT U.CreationDate, U.Age FROM users U INNER JOIN comments C ON U.Id = C.UserId WHERE C.Text LIKE '%http%'
SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5
SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1)
SELECT COUNT(DISTINCT u.Id) FROM comments c JOIN users u ON c.UserId = u.Id WHERE c.Score = 0 AND u.Age = 40;
SELECT T1.Id AS PostID, T2.Text AS Comment FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T1.Id WHERE T1.Title = 'Group differences on a five point Likert item'
SELECT U.UpVotes FROM users U INNER JOIN comments C ON U.Id = C.UserId WHERE C.Text = 'R is also lazy evaluated.';
SELECT Text FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky')
SELECT T1.UserDisplayName FROM comments AS T1 LEFT JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0;
SELECT CAST((SELECT COUNT(UserId) FROM comments WHERE UpVotes = 0 AND Score BETWEEN 5 AND 10) AS REAL) * 100 / (SELECT COUNT(UserId) FROM comments WHERE Score BETWEEN 5 AND 10) as percentage;
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T2.id = T3.power_id WHERE T1.superhero_name = '3-D Man'
SELECT COUNT(*) FROM superhero AS s INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE sp.power_name = 'Super Strength'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id JOIN superpower ON superhero.id = superpower.hero_id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond' AND superpower.power_name = 'Agility'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Sauron'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'
SELECT AVG(height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT (CAST(SUM(power_name = 'Super Strength') AS REAL) / COUNT(id)) * 100 FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')
SELECT P1.publisher_name FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id INNER JOIN publisher AS P1 ON S.publisher_id = P1.id WHERE A.attribute_name = 'Speed' ORDER BY HA.attribute_value LIMIT 1;
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name = 'Blue Beetle II'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence'))
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(s.id) FROM superhero s JOIN gender g ON s.gender_id = g.id JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id WHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100
SELECT s.superhero_name FROM superhero s JOIN hero_power hp ON s.id = hp.hero_id GROUP BY s.superhero_name ORDER BY COUNT(hp.power_id) DESC LIMIT 1;
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT (MULTIPLY(DIVIDE(SUM(CASE WHEN T1.alignment = 'Bad' THEN 1 ELSE 0 END), COUNT(T1.id)), 100)) AS percentage_bad_superheroes, COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_bad_superheroes FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id;
SELECT (SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS superhero_difference FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id;
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
SELECT AVG(attribute_value) FROM hero_attribute;
SELECT COUNT(full_name) FROM superhero WHERE full_name IS NULL
SELECT c.colour FROM superhero s JOIN colour c ON s.eye_colour_id = c.id WHERE s.id = 75;
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T2.id = T3.power_id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2
SELECT T1.superhero_name, T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T4.gender = 'Male' LIMIT 5;
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')
SELECT superhero.superhero_name FROM superhero WHERE superhero.height_cm BETWEEN 170 AND 190 AND superhero.eye_colour_id = 1
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.id = 56;
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169
SELECT c.colour FROM superhero s JOIN colour c ON s.hair_colour_id = c.id WHERE s.height_cm = 185 AND s.race_id = (SELECT id FROM race WHERE race = 'human');
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)
SELECT (MULTIPLY(DIVIDE(SUM(CASE WHEN publisher_id = 13 THEN 1 ELSE 0 END), COUNT(publisher_id), 100)) AS percentage_of_marvel_heroes FROM superhero WHERE height_cm BETWEEN 150 AND 180;
SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'M' AND T1.weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79;
SELECT power_name FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY COUNT(power_name) DESC LIMIT 1
SELECT attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Abomination';
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.id = 1;
SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'stealth')
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T1.skin_colour_id IS NULL THEN T1.id ELSE NULL END) AS REAL) / COUNT(T1.id) FROM superhero AS T1
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT S.superhero_name FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'durability' AND P.publisher_name = 'Dark Horse Comics' ORDER BY HA.attribute_value DESC LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'
SELECT C.colour AS eye_colour, D.colour AS hair_colour, E.colour AS skin_colour FROM superhero AS A INNER JOIN gender AS B ON A.gender_id = B.id INNER JOIN colour AS C ON A.eye_colour_id = C.id INNER JOIN colour AS D ON A.hair_colour_id = D.id INNER JOIN colour AS E ON A.skin_colour_id = E.id INNER JOIN publisher AS F ON A.publisher_id = F.id WHERE B.gender = 'Female' AND F.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.superhero_name = 'A-Bomb'
SELECT CAST(SUM(CASE WHEN c.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN g.gender = 'Female' THEN 1 END) FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Female';
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Adaptation';
SELECT COUNT(T2.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.full_name = 'Hunter Zolomon'
SELECT height_cm FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'
SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'
SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))
SELECT T1.race, T2.alignment FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T1.superhero_name = 'Cameron Hicks'
SELECT CAST(SUM(CASE WHEN gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')
SELECT SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg END) AS difference FROM superhero;
SELECT superhero.superhero_name, AVG(superhero.height_cm) FROM superhero GROUP BY superhero.superhero_name;
SELECT power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero_name = 'Abomination'
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT COUNT(id) FROM superhero WHERE alignment_id = 3
SELECT T2.attribute_name, T1.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = '3-D Man'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'blue' AND T3.colour = 'brown'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;
SELECT CAST(COUNT(DISTINCT T1.superhero_name) AS REAL) * 100 / COUNT(DISTINCT T2.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'blue'
SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
SELECT id FROM superpower WHERE power_name = 'cryokinesis'
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Karen Beecher-Duncan'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Helen Parr';
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;
SELECT T6.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T6 ON T1.race_id = T6.id WHERE T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)
SELECT A.alignment, SP.power_name FROM superhero AS S JOIN alignment AS A ON S.alignment_id = A.id JOIN hero_power AS HP ON S.id = HP.hero_id JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.superhero_name = 'Atom IV'
SELECT superhero.full_name FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' LIMIT 5
SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.alignment_id = 3;
SELECT colour.colour FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT race.race FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'blue' AND gender.gender = 'male'
SELECT CAST(SUM(CASE WHEN s.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero s WHERE s.alignment_id = 2;
SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL;
SELECT HA.attribute_value FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE S.superhero_name = 'Hulk' AND A.attribute_name = 'Strength'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T2.id = T3.power_id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(*) FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC;
SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';
SELECT superhero.superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'DC Comics' ORDER BY superhero.weight_kg DESC LIMIT 1
SELECT AVG(height_cm) FROM superhero WHERE race_id <> (SELECT id FROM race WHERE race = 'Human') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');
SELECT COUNT(*) FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Speed' AND HA.attribute_value = 100
SELECT COUNT(CASE WHEN T3.publisher_name = 'DC Comics' THEN T1.id ELSE NULL END) - COUNT(CASE WHEN T3.publisher_name = 'Marvel Comics' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id;
SELECT attribute.attribute_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' AND hero_attribute.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Black Panther'))
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'
SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.height_cm DESC LIMIT 1
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
SELECT CAST(SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN gender ON superhero.gender_id = gender.id WHERE publisher.publisher_name = 'George Lucas'
SELECT CAST(SUM(CASE WHEN alignment.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE publisher.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)
SELECT superhero.full_name FROM superhero WHERE superhero.superhero_name = 'Alien'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'brown'
SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Aquababy'
SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40;
SELECT AVG(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral');
SELECT hero_id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm > (SELECT AVG(height_cm) FROM superhero) * 0.8;
SELECT T1.driverRef FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.round = 18 AND T1.q1 = (SELECT MAX(q1) FROM qualifying WHERE raceId = T2.raceId LIMIT 5)
SELECT surname FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 19 AND q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19))
SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany'
SELECT T1.position FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T2.raceId = T3.raceId INNER JOIN constructors AS T4 ON T3.constructorId = T4.constructorId WHERE T4.name = 'Renault'
SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2010 AND C.country NOT IN ('Asia', 'Europe')
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'
SELECT c.lat, c.lng FROM circuits c INNER JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Australian Grand Prix';
SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit'
SELECT T1.name, T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Sepang International Circuit';
SELECT c.lat, c.lng FROM circuits c WHERE c.name = 'Abu Dhabi Grand Prix'
SELECT c.country FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId WHERE cr.raceId = 24 AND cr.points = 1;
SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna')
SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40')
SELECT T2.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q3 = '0:01:54' AND T2.raceId = 903
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL
SELECT T2.year FROM seasons AS T2 INNER JOIN races AS T1 ON T1.year = T2.year WHERE T1.raceId = 901;
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1
SELECT T2.forename, T2.surname, T2.url FROM drivers AS T2 INNER JOIN lapTimes AS T1 ON T1.driverId = T2.driverId WHERE T1.time = '0:01:27' AND T1.raceId = 161
SELECT T3.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T1.raceId = 933 ORDER BY T1.fastestLapSpeed DESC LIMIT 1
SELECT c.lat, c.lng FROM races AS r JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.name = 'Malaysian Grand Prix';
SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1
SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi')
SELECT nationality FROM drivers WHERE driverId = ( SELECT driverId FROM qualifying WHERE raceId = 347 AND q2 = '0:01:15' )
SELECT drivers.code FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE raceId = 45 AND q3 = '0:01:33'
SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.forename = 'Bruce' AND T2.surname = 'McLaren'
SELECT T2.forename, T2.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'San Marino Grand Prix' AND T1.year = 2006 AND T2.position = 2
SELECT T2.year FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901;
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND position IS NOT NULL
SELECT d.forename, d.surname FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob DESC LIMIT 1
SELECT T1.forename || ' ' || T1.surname AS full_name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 348 AND T2.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348)
SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT CAST((SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) - (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) AS REAL) * 100 / (SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')) as percentage;
SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'
SELECT MIN(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')
SELECT COUNT(*) FROM races WHERE year = 2005; SELECT name FROM races WHERE year = 2005 ORDER BY round DESC;
SELECT name FROM races WHERE date = (SELECT MIN(date) FROM races) UNION SELECT name FROM races WHERE year = (SELECT year(MIN(date)) FROM races) AND month = (SELECT month(MIN(date)) FROM races) AND date != (SELECT MIN(date) FROM races)
SELECT races.name, races.date FROM races WHERE races.year = 1999 AND races.round = (SELECT MAX(round) FROM races WHERE year = 1999)
SELECT year FROM races GROUP BY year HAVING MAX(round) = (SELECT MAX(round) FROM races)
SELECT races.name FROM races WHERE races.year = 2017 AND races.raceId NOT IN (SELECT raceId FROM races WHERE year = 2000)
SELECT T2.country, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix')
SELECT MAX(year) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Brands Hatch' AND circuits.country = 'UK' AND races.name = 'British Grand Prix'
SELECT COUNT(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name = 'British Grand Prix'
SELECT T2.forename, T2.surname FROM races AS T1 INNER JOIN results AS T3 ON T1.raceId = T3.raceId INNER JOIN drivers AS T2 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T3.position;
SELECT drivers.forename || ' ' || drivers.surname AS full_name FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE driverStandings.points = (SELECT MAX(points) FROM driverStandings)
SELECT T1.forename || ' ' || T1.surname AS driver_name, T2.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2017 AND T3.name = 'Chinese Grand Prix' ORDER BY T2.points DESC LIMIT 3;
SELECT Drivers.forename, Drivers.surname, Races.name FROM LapTimes INNER JOIN Drivers ON LapTimes.driverId = Drivers.driverId INNER JOIN Races ON LapTimes.raceId = Races.raceId WHERE LapTimes.time = (SELECT MIN(time) FROM LapTimes)
SELECT AVG(milliseconds) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.name = 'Chinese Grand Prix' AND races.year = 2009;
SELECT CAST((SELECT COUNT(raceId) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND year >= 2010 AND position > 1) AS REAL) * 100 / (SELECT COUNT(raceId) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton') AND year >= 2010) as percentage;
SELECT drivers.forename, drivers.surname, drivers.nationality, AVG(driverStandings.points) AS avg_points FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId GROUP BY drivers.driverId ORDER BY COUNT(driverStandings.wins) DESC LIMIT 1
SELECT 2022 - year(dob) + 1 AS age, forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year BETWEEN 1990 AND 2000 GROUP BY T1.name HAVING COUNT(T1.name) = 4;
SELECT C.name AS circuit_name, C.location AS circuit_location, R.name AS race_name FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId INNER JOIN seasons AS S ON R.year = S.year WHERE C.country = 'USA' AND S.year = 2006;
SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%m', races.date) = '09' AND races.year = 2005;
SELECT T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Alex' AND T1.surname = 'Yoong' AND T2.position < 10;
SELECT COUNT(*) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN circuits AS C ON RA.circuitId = C.circuitId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Michael' AND D.surname = 'Schumacher' AND C.name = 'Sepang International Circuit' AND R.position = 1;
SELECT T1.name, T2.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds LIMIT 1
SELECT AVG(points) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Eddie' AND drivers.surname = 'Irvine' AND results.year = 2000;
SELECT races.name, results.points FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = (SELECT MIN(year) FROM races)
SELECT R.name, C.country FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2017 ORDER BY R.date;
SELECT Races.name, Races.year, Circuits.location FROM Races INNER JOIN Circuits ON Races.circuitId = Circuits.circuitId WHERE Races.laps = (SELECT MAX(laps) FROM Races)
SELECT CAST(SUM(IIF(T2.country = 'Germany' AND T1.name = 'European Grand Prix', 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'))
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)
SELECT COUNT(*) FROM drivers WHERE code IS NULL
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);
SELECT surname FROM drivers WHERE nationality = 'Italian'
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
SELECT circuits.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;
SELECT S.year FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId INNER JOIN seasons AS S ON R.year = S.year WHERE C.name = 'Silverstone Circuit' AND R.name = 'Formula_1'
SELECT races.name, races.date, races.time, races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit'
SELECT races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.name = 'Abu Dhabi Circuit' AND circuits.country = 'UAE';
SELECT COUNT(*) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'
SELECT races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Barcelona-Catalunya'
SELECT c.url FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN seasons s ON r.year = s.year WHERE s.year = 2009 AND r.name = 'Spanish Grand Prix'
SELECT MIN(fastestLapTime) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE fastestLapSpeed IS NOT NULL)
SELECT T2.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.position = 1
SELECT T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1
SELECT MAX(fastestLapSpeed) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'
SELECT T1.year FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN results AS T3 ON T2.raceId = T3.raceId INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T4.forename = 'Lewis' AND T4.surname = 'Hamilton'
SELECT positionOrder FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = 2008 AND races.name = 'Australian Grand Prix'
SELECT forename, surname FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND grid = 4
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL;
SELECT T1.fastestLapTime FROM drivers AS T2 INNER JOIN results AS T1 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT Results.time FROM Results JOIN Races ON Results.raceId = Races.raceId JOIN Drivers ON Results.driverId = Drivers.driverId WHERE Races.name = 'Australian Grand Prix' AND Races.year = 2008 AND Results.position = 2
SELECT D.forename, D.surname, D.url FROM drivers AS D JOIN results AS R ON D.driverId = R.driverId JOIN races AS RA ON R.raceId = RA.raceId JOIN constructorStandings AS CS ON RA.raceId = CS.raceId WHERE RA.year = 2008 AND RA.name = 'Australian Grand Prix' AND R.position = 1 AND R.time LIKE '__:__:__.___'
SELECT COUNT(T2.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL
SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT AVG(strftime('%s', fastestLapTime) - strftime('%s', '00:00.000')) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix'
SELECT ((RT1.milliseconds - RT2.milliseconds) * 100.0 / RT2.milliseconds) AS percentage_faster FROM results AS RT1 INNER JOIN results AS RT2 ON RT1.raceId = RT2.raceId WHERE RT1.position = 1 AND RT2.position = (SELECT MAX(position) FROM results WHERE raceId = 1)
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'
SELECT c.lat, c.lng FROM circuits c WHERE c.country = 'USA'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND SUBSTR(dob, 1, 4) > 1980;
SELECT AVG(points) AS avg_points FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE nationality = 'British'
SELECT constructors.name FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructorStandings.points = (SELECT MAX(points) FROM constructorStandings)
SELECT constructors.name FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructorStandings.points = 0 AND constructorStandings.raceId = 291;
SELECT COUNT(DISTINCT constructors.constructorId) FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE constructors.nationality = 'Japanese' AND constructorResults.points = 0 GROUP BY constructors.constructorId HAVING COUNT(DISTINCT races.raceId) = 2;
SELECT constructors.name FROM constructorStandings JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructorStandings.position = 1;
SELECT COUNT(*) FROM constructors JOIN results ON constructors.constructorId = results.constructorId JOIN races ON results.raceId = races.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE constructors.nationality = 'French' AND lapTimes.lap > 50;
SELECT COUNT(DISTINCT T1.driverId) / COUNT(DISTINCT T2.driverId) * 100 AS race_completion_percentage FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year BETWEEN 2007 AND 2009 AND T1.time IS NOT NULL AND T3.nationality = 'Japanese';
SELECT seasons.year, AVG(STRFTIME('%s', results.time)) AS average_time FROM seasons JOIN races ON seasons.year = races.year JOIN results ON races.raceId = results.raceId WHERE results.position = 1 AND results.time IS NOT NULL GROUP BY seasons.year;
SELECT forename, surname FROM drivers JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE year(dob) > 1975 AND position = 2;
SELECT COUNT(DISTINCT T2.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'italian' AND T1.time IS NULL
SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE fastestLap = 1 ORDER BY milliseconds LIMIT 1)
SELECT T2.fastestLap FROM Results AS T1 INNER JOIN Drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN Races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2009 AND T1.position = 1;
SELECT AVG(fastestLapSpeed) FROM results JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009
SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1;
SELECT CAST(SUM(CASE WHEN SUBSTR(dob, 1, 4) < '1985' AND laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(driverId) FROM drivers WHERE SUBSTR(dob, 1, 4) < '1985' AND SUBSTR(dob, 1, 4) BETWEEN '2000' AND '2005';
SELECT COUNT(DISTINCT d.driverId) AS french_drivers FROM drivers d JOIN lapTimes lt ON d.driverId = lt.driverId WHERE d.nationality = 'French' AND lt.time < '02:00.00';
SELECT driverRef FROM drivers WHERE nationality = 'America'
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;
SELECT T1.code FROM drivers AS T1 INNER JOIN ( SELECT driverId, MAX(year(dob)) AS max_dob FROM drivers GROUP BY driverId ORDER BY max_dob DESC LIMIT 3 ) AS T2 ON T1.driverId = T2.driverId SELECT COUNT(*) FROM drivers WHERE nationality = 'Dutch' AND driverId IN ( SELECT driverId FROM drivers INNER JOIN ( SELECT driverId, MAX(year(dob)) AS max_dob FROM drivers GROUP BY driverId ORDER BY max_dob DESC LIMIT 3 ) AS T2 ON drivers.driverId = T2.driverId )
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980'
SELECT d.forename, d.surname, l.time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND year(d.dob) BETWEEN 1980 AND 1990 GROUP BY d.driverId ORDER BY l.time LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' AND dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'German')
SELECT driverId, code FROM drivers WHERE year(dob) = 1971 AND driverId IN (SELECT driverId FROM results WHERE fastestLapTime IS NOT NULL)
SELECT forename, surname FROM drivers WHERE nationality = 'Spanish' AND SUBSTR(dob, 1, 4) < '1982' ORDER BY time DESC LIMIT 10;
SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.time DESC LIMIT 1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL
SELECT COUNT(*) AS num_circuits, location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng
SELECT round, COUNT(*) AS finishers FROM results WHERE time IS NOT NULL GROUP BY round ORDER BY COUNT(*) DESC LIMIT 1;
SELECT driverRef, nationality, dob FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE raceId = 23 AND q2 IS NOT NULL
SELECT T1.name, T1.date, T1.time FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.dob = (SELECT MAX(year(dob)) FROM drivers) ORDER BY T1.date LIMIT 1
SELECT COUNT(*) FROM results WHERE statusId = 2 AND driverId IN (SELECT driverId FROM drivers WHERE nationality = 'American')
SELECT constructors.name, constructors.url FROM constructors JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructors.nationality = 'Italian' ORDER BY constructorStandings.points DESC LIMIT 1;
SELECT c.url FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId WHERE cs.wins = (SELECT MAX(wins) FROM constructorStandings)
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.milliseconds DESC LIMIT 1
SELECT Races.name, LapTimes.time, LapTimes.milliseconds FROM Races INNER JOIN LapTimes ON Races.raceId = LapTimes.raceId WHERE LapTimes.lap = 1 ORDER BY LapTimes.milliseconds LIMIT 1;
SELECT AVG(fastestLapTime) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'United States Grand Prix' AND year = 2006) AND rank < 11;
SELECT drivers.forename, drivers.surname, AVG(pitStops.milliseconds) as avg_duration FROM drivers JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE drivers.nationality = 'German' AND year(dob) > 1980 AND year(dob) < 1985 GROUP BY drivers.driverId ORDER BY avg_duration LIMIT 5;
SELECT Drivers.forename || ' ' || Drivers.surname AS Champion, Results.time FROM Results JOIN Races ON Results.raceId = Races.raceId JOIN Drivers ON Results.driverId = Drivers.driverId WHERE Races.name = 'Canadian Grand Prix' AND Races.year = 2008 ORDER BY Results.position ASC LIMIT 1;
SELECT C.constructorRef, C.url, MAX(R.time) FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId INNER JOIN races AS R ON CR.raceId = R.raceId WHERE R.name = 'Singapore Grand Prix' AND R.year = 2009 GROUP BY C.constructorRef, C.url
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND year(dob) BETWEEN 1981 AND 1991;
SELECT forename || ' ' || surname AS full_name, url AS wikipedia_page, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND year(dob) BETWEEN 1971 AND 1985 ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring'
SELECT c.name, c.nationality, SUM(cr.points) AS total_points FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races r ON cr.raceId = r.raceId WHERE r.name = 'Monaco Grand Prix' AND r.year BETWEEN 1980 AND 2010 GROUP BY c.constructorId ORDER BY total_points DESC LIMIT 1;
SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Turkish Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT AVG(COUNT(raceId)) FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year LIMIT 10;
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1
SELECT COUNT(results.position) FROM results JOIN driverStandings ON results.driverId = driverStandings.driverId WHERE driverStandings.position = 91 AND results.position = 1
SELECT races.name FROM results JOIN races ON results.raceId = races.raceId WHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT c.name || ', ' || c.location || ', ' || c.country AS full_location FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races)
SELECT D.forename, D.surname FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverId = Q.driverId INNER JOIN races AS R ON Q.raceId = R.raceId WHERE R.year = 2008 AND R.name = 'Marina Bay Street Circuit' AND Q.position = 1 AND Q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = R.raceId)
SELECT forename || ' ' || surname AS full_name, nationality, races.name FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE dob = (SELECT MAX(dob) FROM drivers)
SELECT COUNT(*) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE RA.name = 'Canadian Grand Prix' AND D.driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1) AND R.statusId = 3;
SELECT forename || ' ' || surname AS Full_Name, COUNT(results.position) AS Wins FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE dob = (SELECT MIN(dob) FROM drivers) AND results.position = 1 GROUP BY Full_Name;
SELECT MAX(milliseconds) FROM pitStops
SELECT MIN(milliseconds) as fastest_lap_time FROM lapTimes
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT T1.lap FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T1.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix' AND T1.position IS NOT NULL;
SELECT T1.forename, T1.surname, T2.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2011 AND T3.name = 'Australian Grand Prix'
SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name LIKE '%Formula_1%' ORDER BY T1.time ASC LIMIT 1;
SELECT Drivers.forename || ' ' || Drivers.surname AS DriverName FROM LapTimes INNER JOIN Drivers ON LapTimes.driverId = Drivers.driverId WHERE LapTimes.time = (SELECT MIN(time) FROM LapTimes)
SELECT Circuits.name, Results.position FROM Circuits INNER JOIN Races ON Circuits.circuitId = Races.circuitId INNER JOIN Results ON Races.raceId = Results.raceId INNER JOIN Drivers ON Results.driverId = Drivers.driverId WHERE Drivers.forename = 'Lewis' AND Drivers.surname = 'Hamilton' AND Results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM Results WHERE driverId = Drivers.driverId)
SELECT MIN(milliseconds) AS lap_record FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit'
SELECT T1.name AS circuit_name, T2.time AS lap_record FROM circuits AS T1 INNER JOIN races AS T3 ON T1.circuitId = T3.circuitId INNER JOIN lapTimes AS T2 ON T3.raceId = T2.raceId WHERE T1.country = 'Italy' ORDER BY T2.milliseconds ASC LIMIT 1;
SELECT Races.name FROM Races INNER JOIN LapTimes ON Races.raceId = LapTimes.raceId WHERE LapTimes.time = (SELECT MIN(time) FROM LapTimes WHERE raceId = Races.raceId)
SELECT PitStops.duration FROM PitStops INNER JOIN races ON PitStops.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId INNER JOIN drivers ON PitStops.driverId = drivers.driverId WHERE circuits.name = 'Austrian Grand Prix Circuit' AND PitStops.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = races.raceId AND driverId = drivers.driverId)
SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId INNER JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime = '1:29.488'
SELECT AVG(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT T1.player_name, T1.height FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.height DESC LIMIT 1
SELECT T1.preferred_foot FROM Player_Attributes AS T1 WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes)
SELECT COUNT(DISTINCT T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating >= 60 AND T1.overall_rating < 65 AND T1.defensive_work_rate = 'low'
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5;
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1
SELECT M.home_team_api_id, COUNT(*) AS num_losses FROM Match AS M WHERE SUBTRACT(M.home_team_goal, M.away_team_goal) < 0 AND M.season = '2015/2016' GROUP BY M.home_team_api_id ORDER BY num_losses LIMIT 1;
SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY penalties DESC LIMIT 10;
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T1.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' GROUP BY T1.away_team_api_id ORDER BY COUNT(CASE WHEN T1.away_team_goal > T1.home_team_goal THEN 1 END) DESC LIMIT 1;
SELECT buildUpPlaySpeed FROM Team_Attributes WHERE buildUpPlaySpeed IN ( SELECT MAX(buildUpPlaySpeed) FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4 )
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(CASE WHEN T1.home_team_goal = T1.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1
SELECT (DATETIME('now') - DATETIME(T1.birthday)) AS age FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date >= '2013-01-01 00:00:00' AND T2.date <= '2015-12-31 00:00:00'
SELECT l.name, COUNT(m.id) AS total_matches FROM League l JOIN Match m ON l.id = m.league_id GROUP BY l.name ORDER BY total_matches DESC LIMIT 1;
SELECT AVG(height) AS avg_height FROM Player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1996-01-01 00:00:00'
SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE SUBSTR(date, 1, 4) = '2010') AND SUBSTR(T1.date, 1, 4) = '2010' ORDER BY T1.overall_rating DESC LIMIT 1;
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL) AND strftime('%Y', T2.date) = '2012'
SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT League.name, SUM(Match.home_team_goal + Match.away_team_goal) AS total_goals FROM League JOIN Match ON League.id = Match.league_id GROUP BY League.name ORDER BY total_goals ASC LIMIT 5;
SELECT AVG(T1.long_shots) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ahmed Samir Farag'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.height > 180 GROUP BY Player.player_name ORDER BY AVG(Player_Attributes.heading_accuracy) DESC LIMIT 10;
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date >= '2014-01-01 00:00:00' AND T2.date <= '2014-01-31 00:00:00' AND T1.team_api_id IN ( SELECT team_api_id FROM Team_Attributes GROUP BY team_api_id HAVING AVG(chanceCreationPassing) < ( SELECT AVG(chanceCreationPassing) FROM Team_Attributes ) ) ORDER BY T2.chanceCreationPassing DESC;
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'
SELECT Player_Name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Franco Zennaro'
SELECT T1.buildUpPlayPositioningClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'ADO Den Haag' AND T1.date = (SELECT MAX(date) FROM Team_Attributes WHERE team_api_id = T1.team_api_id) AND T1.buildUpPlayPositioningClass = 'Free Form'
SELECT ROUND(AVG(PA.heading_accuracy), 2) AS Header_Finishing_Rate FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00'
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League')
SELECT T3.preferred_foot FROM Player AS T3 ORDER BY T3.birthday DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )
SELECT COUNT(*) FROM Player_Attributes WHERE weight < 130 AND preferred_foot = 'left' AND attacking_work_rate = 'left'
SELECT T.team_short_name FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'David Wilson'
SELECT birthday FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands')
SELECT AVG(home_team_goal) FROM Match INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011'
SELECT Player.player_name, AVG(Player_Attributes.finishing) AS avg_finishing FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height = (SELECT MAX(height) FROM Player) OR Player.height = (SELECT MIN(height) FROM Player) GROUP BY Player.player_name ORDER BY avg_finishing DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180
SELECT COUNT(*) AS cnt FROM Player WHERE strftime('%Y', birthday) > '1990'
SELECT COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name LIKE 'Adam%' AND T1.weight > 170
SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.overall_rating > 80 AND strftime('%Y', Player_Attributes.date) BETWEEN '2008' AND '2010';
SELECT overall_rating FROM Player_Attributes WHERE player_name = 'Aaron Doran';
SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.preferred_foot = 'left';
SELECT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'
SELECT team_short_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE buildUpPlayPassing > 70
SELECT AVG(overall_rating) FROM Player_Attributes WHERE height > 170 AND strftime('%Y', date) BETWEEN '2010' AND '2015'
SELECT Player.player_name FROM Player ORDER BY Player.height LIMIT 1;
SELECT C.name FROM Country AS C INNER JOIN League AS L ON C.id = L.country_id WHERE L.name = 'Italy Serie A'
SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran')
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'
SELECT team_short_name FROM Team WHERE team_api_id IN (SELECT home_team_api_id FROM Match WHERE home_team_goal = 10)
SELECT player_name FROM Player WHERE balance = (SELECT MAX(balance) FROM Player WHERE potential = 61)
SELECT AVG(CASE WHEN T3.player_name = 'Abdou Diallo' THEN T1.ball_control ELSE NULL END) - AVG(CASE WHEN T3.player_name = 'Aaron Appindangoye' THEN T1.ball_control ELSE NULL END) AS DIFFERENCE FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T2.player_api_id = T3.home_player_1 OR T2.player_api_id = T3.home_player_2 OR T2.player_api_id = T3.home_player_3 OR T2.player_api_id = T3.home_player_4 OR T2.player_api_id = T3.home_player_5 OR T2.player_api_id = T3.home_player_6 OR T2.player_api_id = T3.home_player_7 OR T2.player_api_id = T3.home_player_8 OR T2.player_api_id
SELECT T1.team_long_name FROM Team AS T1 WHERE T1.team_short_name = 'GEN'
SELECT CASE WHEN T1.birthday < T2.birthday THEN T1.player_name ELSE T2.player_name END AS older_player FROM Player AS T1 INNER JOIN Player AS T2 ON T1.player_name = 'Aaron Lennon' AND T2.player_name = 'Abdelaziz Barrada'
SELECT T.player_name FROM Player AS T ORDER BY T.height DESC LIMIT 1
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany'
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT COUNT(Player.player_api_id) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', birthday)<'1986' AND defensive_work_rate = 'high'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY Player_Attributes.crossing DESC LIMIT 1;
SELECT T2.heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk';
SELECT COUNT(DISTINCT Player.player_api_id) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height > 180 AND Player_Attributes.volleys > 70;
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70
SELECT COUNT(*) FROM Match INNER JOIN Country ON Match.country_id = Country.id WHERE Match.season = '2008/2009' AND Country.name = 'Belgium'
SELECT T1.long_passing FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday = (SELECT MIN(birthday) FROM Player)
SELECT COUNT(id) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04'
SELECT League.name FROM Match JOIN League ON Match.league_id = League.id WHERE Match.season = '2008/2009' GROUP BY Match.league_id ORDER BY COUNT(Match.id) DESC LIMIT 1;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986'
SELECT ((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel'))) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) * 100 as percentage_higher;
SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Heart of Midlothian')
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'
SELECT MAX(chanceCreationPassing) AS highest_chance_creation_passing_score, chanceCreationPassingClass FROM Team_Attributes JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE Team.team_long_name = 'Ajax'
SELECT preferred_foot FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE player_name = 'Abdou Diallo'
SELECT MAX(overall_rating) AS highest_overall_rating FROM Player_Attributes JOIN Player AS T1 ON Player_Attributes.player_api_id = T1.player_api_id WHERE T1.player_name = 'Dorlan Pabon'
SELECT AVG(away_team_goal) FROM Match WHERE away_team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Parma') AND country_id = (SELECT id FROM Country WHERE name = 'Italy')
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date = '2016-06-23' ORDER BY Player.birthday ASC LIMIT 1;
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy') AND date = '2016-02-04 00:00:00'
SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T3.home_player_1 = T2.player_api_id OR T3.home_player_2 = T2.player_api_id OR T3.home_player_3 = T2.player_api_id OR T3.home_player_4 = T2.player_api_id OR T3.home_player_5 = T2.player_api_id OR T3.home_player_6 = T2.player_api_id OR T3.home_player_7 = T2.player_api_id OR T3.home_player_8 = T2.player_api_id OR T3.home_player_9 = T2.player_api_id OR T3.home_player_10 = T2.player_api_id OR T3.home_player_11 = T2.player_api_id OR T3.away_player_1 = T2.player_api_id OR T3
SELECT date FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant') ORDER BY crossing DESC LIMIT 1;
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2012-02-22 00:00:00'
SELECT T2.buildUpPlayDribblingClass FROM Match AS T1 INNER JOIN Team AS T2 ON T2.team_api_id = T1.home_team_api_id WHERE T2.team_short_name = 'LEI' AND T1.date = '2015-09-10 00:00:00'
SELECT TA.buildUpPlayPassingClass FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'FC Lorient' AND TA.date = '2010-02-22'
SELECT T1.chanceCreationPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'PEC Zwolle' AND T1.date = '2013-09-20 00:00:00'
SELECT T2.chanceCreationCrossingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hull City' AND T2.date = '2010-02-22 00:00:00'
SELECT T2.defenceAggressionClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T2.team_api_id = T1.team_api_id WHERE T2.team_long_name = 'Hannover 96' AND T1.date = '2015-09-10 00:00:00'
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic') AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT ((SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') - (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Jordan Bowery') AND date = '2013-07-12')) / (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Landon Donovan') AND date = '2013-07-12') * 100 as percentage;
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.height DESC LIMIT 5
SELECT T1.player_api_id FROM Player AS T1 ORDER BY T1.weight DESC LIMIT 10
SELECT player_name FROM Player WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) >= 35;
SELECT SUM(home_team_goal) FROM `Match` JOIN `Player` ON `Match`.`home_player_1` = `Player`.`player_api_id` WHERE `Player`.`player_name` = 'Aaron Lennon'
SELECT SUM(away_team_goal) FROM Match WHERE away_player_1 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_2 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_3 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_4 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_5 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_6 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_7 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_8 IN (SELECT player_api_id FROM Player WHERE player_name = 'Daan Smith') OR away_player_9 IN
SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) < 31;
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10;
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = (SELECT MAX(potential) FROM Player_Attributes)
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high';
SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE finishing = 1) AND birthday = (SELECT birthday FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE finishing = 1) ORDER BY birthday DESC LIMIT 1)
SELECT T1.player_name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE T2.Country_Name = 'Belgium'
SELECT Player.player_name, Country.name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id JOIN Country ON Player.country_id = Country.id WHERE Player_Attributes.vision >= 90;
SELECT C.name FROM Player AS P JOIN Country AS C ON P.country_id = C.id GROUP BY C.name ORDER BY AVG(P.weight) DESC LIMIT 1
SELECT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Slow'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'
SELECT AVG(T2.height) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Italy'
SELECT Player.player_name FROM Player WHERE Player.height > 180 ORDER BY Player.player_name LIMIT 3;
SELECT COUNT(id) AS cnt FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'
SELECT (SELECT jumping FROM Player_Attributes WHERE id = 6) - (SELECT jumping FROM Player_Attributes WHERE id = 23) as difference;
SELECT id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' ORDER BY potential ASC LIMIT 3
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes WHERE stamina > 80 AND strength > 80) AS percentage FROM Player_Attributes WHERE stamina > 80 AND strength > 80;
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa'
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')
SELECT T1.sprint_speed, T1.agility, T1.acceleration FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Alexis Blin'
SELECT T2.`buildUpPlaySpeedClass` FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T1.`team_long_name` = 'KSV Cercle Brugge'
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Italian Serie A') AND season = '2015/2016'
SELECT MAX(home_team_goal) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Netherlands Eredivisie') AND home_team_goal IS NOT NULL;
SELECT T3.finishing, T3.curve FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Match AS T3 ON T1.player_api_id = T3.home_player_1 OR T1.player_api_id = T3.away_player_1 WHERE T1.weight = (SELECT MAX(weight) FROM Player)
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id GROUP BY T2.team_long_name ORDER BY MAX(T1.away_team_goal) DESC LIMIT 1
SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT CAST(SUM(CASE WHEN height < 180 AND overall_rating > 70 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes;
SELECT (COUNT(ID) WHERE SEX = 'M' AND Admission = '+') - (COUNT(ID) WHERE SEX = 'M' AND Admission = '-') as deviation_percentage FROM Patient
SELECT (COUNT(CASE WHEN Sex = 'F' AND strftime('%Y', Birthday) > '1930' THEN ID END) * 100.0 / COUNT(CASE WHEN Sex = 'F' THEN ID END)) AS percentage_female_born_after_1930 FROM Patient;
SELECT COUNT(DISTINCT T1.ID) * 100.0 / (SELECT COUNT(DISTINCT ID) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31') AS Percentage FROM Patient AS T1 WHERE T1.Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND T1.Admission = '+'
SELECT COUNT(CASE WHEN P.Admission = '+' THEN 1 END) / COUNT(CASE WHEN P.Admission = '-' THEN 1 END) FROM Patient P WHERE P.Diagnosis = 'SLE';
SELECT Patient.Diagnosis, Laboratory.Date FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = '30609'
SELECT Patient.SEX, Patient.Birthday, Examination.`Examination Date`, Examination.Symptoms FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = '163109'
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > '500'
SELECT Patient.ID, SUBTRACT(year(current_timestamp), year(Birthday)) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE RVVT = '+'
SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.`T-CHO` FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) = 1937 AND Laboratory.`T-CHO` >= 250;
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5;
SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.ID) FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID;
SELECT AVG(aCL IgG) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Admission = '+' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) >= 50
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'F' AND strftime('%Y', T1.Description) = '1997' AND T1.Admission = '-'
SELECT YEAR(Birthday) - YEAR(`First Date`) AS Age FROM Patient ORDER BY Age ASC LIMIT 1
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 1 AND T2.`Examination Date` LIKE '1997%' AND T1.SEX = 'F'
SELECT MAX(year(P.Birthday)) - MIN(year(P.Birthday)) AS "Age Gap" FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200
SELECT Symptoms, Diagnosis FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient)
SELECT AVG(COUNT(ID)/12) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE SEX = 'M' AND Date BETWEEN '1998-01-01' AND '1998-12-31'
SELECT MAX(L.Date) AS "Laboratory Completion Date", (strftime('%Y', L.`First Date`) - strftime('%Y', P.Birthday)) AS "Age at Initial Hospital Arrival" FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Diagnosis = 'SJS' ORDER BY P.Birthday DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (SEX = 'M' AND UA <= 8.0) OR (SEX = 'F' AND UA <= 6.5)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.`First Date`) >= 1 OR T2.ID IS NULL
SELECT COUNT(DISTINCT e.ID) AS underage_patients_examined FROM Examination e JOIN Patient p ON e.ID = p.ID WHERE YEAR(p.Birthday) < 18 AND `Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` > 2.0
SELECT Diagnosis FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT AVG(YEAR('1999') - YEAR(Birthday)) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-30')
SELECT T1.`Examination Date` - T2.Birthday AS Age, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.HGB = (SELECT MAX(HGB) FROM Examination)
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN T1.`T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS `Total Cholesterol Status` FROM Laboratory AS T1 WHERE T1.ID = 2927464 AND T1.Date = '1995-9-4'
SELECT SEX FROM Patient WHERE ID = (SELECT ID FROM Examination WHERE Diagnosis = 'AORTITIS' ORDER BY `Examination Date` LIMIT 1)
SELECT T1.`aCL IgM` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993-11-12'
SELECT P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT = 9 AND L.Date = '1992-06-12'
SELECT SUBTRACT('1992', year(Birthday)) AS Age_at_Test FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UA = 8.4 AND L.Date = '1991-10-21'
SELECT COUNT(ID) FROM Laboratory WHERE ID IN ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND Date LIKE '1995%'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` = '1997-01-27' AND T2.Diagnosis = 'SLE'
SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'
SELECT (SUM(CASE WHEN strftime('%Y-%m', L.Date) = '1981-11' THEN L.`T-CHO` END) - SUM(CASE WHEN strftime('%Y-%m', L.Date) = '1981-12' THEN L.`T-CHO` END)) AS decrease_rate FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1959-02-18'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND YEAR(T1.Description) >= 1997 AND YEAR(T1.Description) < 1998
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T3.GPT > 30 AND T3.ALB < 4
SELECT Patient.ID FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+'
SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = 2 AND E.ANA = 'S' AND E.`aCL IgM` > (SELECT 1.2 * AVG(`aCL IgM`) FROM Examination)
SELECT SUM(CASE WHEN UA <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END) / COUNT(*) * 100 AS percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30;
SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T1.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN YEAR(T1.`First Date`) = '1981' THEN 1 ELSE 0 END) FROM Patient AS T1 WHERE YEAR(T1.`First Date`) = '1981'
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0;
SELECT COUNT(*) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE `ANA Pattern` != 'P' AND SEX = 'F' AND strftime('%Y', Birthday) BETWEEN '1980' AND '1989'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(ALB) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Patient.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1
SELECT T1.`First Date`, T1.Diagnosis FROM Patient AS T1 WHERE T1.ID = 48473
SELECT COUNT(Patient.ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'
SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L WHERE YEAR(L.Date) = '1997' AND (L.TP < 6 OR L.TP > 8.5)
SELECT CAST(SUM(CASE WHEN T1.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID
SELECT CAST(SUM(CASE WHEN YEAR(Birthday) = 1980 AND Diagnosis = 'RA' AND SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(SEX) FROM Patient;
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T2.Diagnosis = 'BEHCET' AND T1.Admission = '-'
SELECT COUNT(Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND Laboratory.WBC < 3.5
SELECT DATEDIFF(`Examination Date`, `First Date`) AS Evaluation_Start_Days FROM Examination WHERE ID = 821298
SELECT CASE WHEN SEX = 'M' AND UA > 8.0 THEN 'Above normal range' WHEN SEX = 'F' AND UA > 6.5 THEN 'Above normal range' ELSE 'Within normal range' END AS Uric_Acid_Range FROM Laboratory WHERE ID = 57266
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GOT < 60 AND STRFTIME('%Y', Laboratory.Date) = '1994'
SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT > 60;
SELECT T2.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC;
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT P.ID, SUBTRACT(year(current_timestamp), year(P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800;
SELECT T1.Admission, COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 GROUP BY T1.Admission
SELECT Patient.ID FROM Patient WHERE Birthday = '1982-04-01' SELECT ID, ALP FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1982-04-01') AND ALP < 300
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0
SELECT TP - 8.5 AS Deviation FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE SEX = 'F' AND TP > 8.5
SELECT * FROM Patient WHERE SEX = 'M' AND (ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC;
SELECT P.ID, P.Birthday, L.ALB FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.Birthday) = '1982' AND L.ALB BETWEEN 3.5 AND 5.5;
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') FROM Laboratory WHERE (UA > 8.0 AND SEX = 'M') OR (UA > 6.5 AND SEX = 'F')
SELECT AVG(UA) AS average_UA_index FROM Laboratory WHERE Date = (SELECT MAX(Date) FROM Laboratory) AND UA < 8.0 AND SEX = 'M' OR UA < 6.5 AND SEX = 'F'
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29
SELECT ID, SEX, Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE UN < 30 AND Diagnosis = 'RA')
SELECT COUNT(ID) FROM Laboratory JOIN Patient ON Laboratory.ID = Patient.ID WHERE Sex = 'M' AND CRE >= 1.5
SELECT CASE WHEN (SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5)) > (SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND ID IN (SELECT ID FROM Laboratory WHERE CRE >= 1.5)) THEN 'True' ELSE 'False' END as result;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)
SELECT Patient.SEX, SUM(Laboratory.`T-BIL`) as Total_T_BIL FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` >= 2.0 GROUP BY Patient.SEX
SELECT Patient.ID, Laboratory.`T-CHO` FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient) AND Laboratory.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory)
SELECT AVG(YEAR(date('now')) - YEAR(P.birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250;
SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300;
SELECT COUNT(*) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', Birthday)) > 50;
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND year(T1.Birthday) BETWEEN 1936 AND 1956 AND T2.CPK >= 250
SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250;
SELECT Patient.ID, Laboratory.GLU FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU < 180 AND year(Patient.Description) >= 1991
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.WBC <= 3.5 OR Laboratory.WBC >= 9.0 ORDER BY Patient.SEX, Patient.Birthday;
SELECT T1.ID, CASE WHEN T2.Birthday IS NULL THEN NULL ELSE strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', T2.Birthday) END AS age, T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RBC < 3.5;
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Admission FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) >= 50 AND (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '+'
SELECT T1.ID, T2.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.HGB < 10
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1
SELECT Patient.ID, year(current_timestamp) - year(Birthday) as Age FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) > 2 )
SELECT AVG(HCT) AS Average_Hematocrit_Level FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) FROM Laboratory
SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.Date FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.Date LIKE '1984%' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Patient.Birthday)) < 50 AND Laboratory.PLT BETWEEN 100 AND 400
SELECT SUM(IIF(PT >= 14 AND SEX = 'F', 1, 0)) / SUM(IIF(PT >= 14, 1, 0)) * 100 AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday)) > 55
SELECT T1.ID, T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE year(T1.`First Date`) > 1992 AND T2.PT < 14;
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT >= 45
SELECT COUNT(DISTINCT p.ID) AS countPatients FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.APTT > 45 AND p.Thrombosis = 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Sex = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE p.Birthday > '1980-01-01' AND l.FG < 150 OR l.FG > 450;
SELECT Diagnosis FROM Examination WHERE `U-PRO` >= 30
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` < 900 AND T1.Symptoms = 'abortion'
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` BETWEEN 900 AND 2000 AND T1.Symptoms IS NOT NULL;
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 ORDER BY T2.IGA DESC LIMIT 1
SELECT COUNT(*) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE `U-PRO` BETWEEN 80 AND 500) AND YEAR(`First Date`) >= 1990/1/1;
SELECT Diagnosis FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS P LEFT JOIN Laboratory AS L ON P.ID = L.ID WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0) AND Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN('+-', '-') AND T2.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) < 18;
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE RA IN ('-', '+-') AND KCT = '+'
SELECT Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Birthday > '1995-01-01' AND RA IN ('-', '+-')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) > 60
SELECT COUNT(*) FROM Patient AS P LEFT JOIN Laboratory AS L ON P.ID = L.ID WHERE RF < 20 AND Thrombosis = '0'
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'
SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 OR T2.HCT > 52 ORDER BY T1.`aCL IgA` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.Thrombosis = 1 AND T3.C4 > 10
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RNP = '-' OR L.RNP = '+-') AND P.Admission = '+'
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RNP NOT IN ('-', '+-') ORDER BY p.Birthday DESC LIMIT 1
SELECT COUNT(*) FROM Examination WHERE SM IN ('-', '+-') AND Thrombosis = 1
SELECT TOP 3 ID FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE SM NOT IN ('-', '+-')) ORDER BY Birthday DESC;
SELECT ID FROM Examination WHERE `Examination Date` >= '1997-01-01' AND SC170 IN ('-', '+-');
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SC170 IN ('-', '+-') AND P.SEX = 'M' AND L.Symptoms = 'vertigo'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('-', '+-') AND YEAR(T1."First Date") < 1990
SELECT MIN(`First Date`) AS ID FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE SSA NOT IN ('-', '+-'))
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('-', '+-') AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT E.ID) FROM Examination E INNER JOIN Laboratory L ON E.ID = L.ID WHERE L.SSB IN ('-', '+-') AND E.Symptoms IS NOT NULL;
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M'
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.DNA >= 8
SELECT COUNT(DISTINCT p.ID) AS patient_number FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA < 8 AND p.Description IS NULL;
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`DNA-II` > 8 AND T2.Admission = '+'
SELECT COUNT(DISTINCT T1.ID) * 100.0 / (SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T2 INNER JOIN Patient AS T3 ON T2.ID = T3.ID WHERE T2.GOT >= 60 AND T3.Diagnosis = 'SLE') FROM Laboratory AS T1 INNER JOIN Patient AS T4 ON T1.ID = T4.ID WHERE T1.GOT >= 60 AND T4.Diagnosis = 'SLE'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60
SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT >= 60)
SELECT t1.Birthday FROM Patient AS t1 INNER JOIN Laboratory AS t2 ON t1.ID = t2.ID WHERE t2.GPT < 60 ORDER BY t2.GPT DESC LIMIT 3
SELECT COUNT(p.SEX) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT < 60 AND p.SEX = 'M'
SELECT T1.ID, T2.`First Date` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.LDH < 500 ORDER BY T1.LDH DESC, T2.`First Date` ASC LIMIT 1
SELECT MAX(Date) AS latest_medical_data_recorded FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE `First Date` = (SELECT MAX(`First Date`) FROM Patient)) AND LDH >= 500;
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP >= 300 AND P.Admission = '+'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300
SELECT E.Diagnosis FROM Examination E INNER JOIN Laboratory L ON E.ID = L.ID WHERE L.TP < 6.0;
SELECT COUNT(*) FROM Examination WHERE Diagnosis = 'SJS' AND TP > 6.0 AND TP < 8.5
SELECT MAX(`Examination Date`) FROM Examination WHERE ALB > 3.5 AND ALB < 5.5
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP > 6.0 AND T2.TP < 8.5
SELECT MAX(T1.`aCL IgG`, T1.`aCL IgM`, T1.`aCL IgA`) FROM Examination AS T1 INNER JOIN ( SELECT ID FROM Patient WHERE SEX = 'F' ) AS T2 ON T1.ID = T2.ID INNER JOIN ( SELECT ID FROM Laboratory WHERE UA <= 6.50 ORDER BY UA DESC LIMIT 1 ) AS T3 ON T1.ID = T3.ID
SELECT MAX(ANA) FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE CRE < 1.5)
SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 AND T1.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination)
SELECT COUNT(*) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'
SELECT `ANA` FROM Examination WHERE `T-BIL` < 2.0 ORDER BY `T-BIL` DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T2.KCT = '-'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T2.TG IS NOT NULL AND T2.Symptoms IS NOT NULL
SELECT Diagnosis FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TG < 200 ORDER BY TG DESC LIMIT 1)
SELECT T1.ID FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID LEFT JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis = 0 AND T3.CPK < 250
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+')
SELECT Birthday FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GLU > 180 ORDER BY Birthday ASC LIMIT 1)
SELECT COUNT(*) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GLU < 180) AND ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis = 1)
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0) AND Patient.Admission = '-'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis IS NOT NULL
SELECT T2.ID, T3.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.PLT > 100 AND T3.PLT < 400 AND T1.Diagnosis = 'MCTD'
SELECT AVG(PT) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Sex = 'M' AND L.PT < 14
SELECT COUNT(Patient.ID) FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis IN (1, 2) AND Examination.PT < 14
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(*) FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.college = 'College of Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'
SELECT COUNT(*) FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women\'s Soccer' AND m.position = 'Student' AND m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club')
SELECT phone FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer'))
SELECT COUNT(m.member_id) FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE e.event_name = 'Women\'s Soccer' AND m.t_shirt_size = 'Medium'
SELECT E.event_name FROM event E INNER JOIN attendance A ON E.event_id = A.link_to_event INNER JOIN member M ON A.link_to_member = M.member_id INNER JOIN major MA ON M.link_to_major = MA.major_id WHERE MA.major_name = 'Student_Club' GROUP BY E.event_name ORDER BY COUNT(A.link_to_event) DESC LIMIT 1
SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE position = 'Vice President' AND link_to_major IS NOT NULL)
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(*) FROM attendance a JOIN event e ON a.link_to_event = e.event_id JOIN member m ON a.link_to_member = m.member_id WHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison' AND YEAR(e.event_date) = 2019;
SELECT COUNT(event_id) AS meeting_count FROM event WHERE event_id IN ( SELECT link_to_event FROM attendance WHERE link_to_member IN ( SELECT member_id FROM member WHERE link_to_major = 'Student_Club' ) GROUP BY link_to_event HAVING COUNT(link_to_member) > 10 ) AND type = 'Meeting'
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20)
SELECT CAST(COUNT(event_id) AS REAL) / COUNT(DISTINCT event_name) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020'
SELECT expense_description FROM expense WHERE cost = (SELECT MAX(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'club events'))
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
SELECT T2.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
SELECT T3.county FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'SHERRI' AND T2.last_name = 'RAMSEY'
SELECT college FROM major INNER JOIN member ON major.major_id = member.link_to_major WHERE member.first_name = 'Tyler' AND member.last_name = 'Hewitt'
SELECT SUM(amount) AS Funds_Received FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President')
SELECT SUM(b.spent) AS Total_Spent_On_Food FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Food' AND e.event_name = 'September Meeting'
SELECT T3.city, T3.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.position = 'President' AND T2.major_name = 'Student_Club'
SELECT first_name, last_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois')
SELECT SUM(spent) FROM budget WHERE category = 'Advertisement' AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Meeting')
SELECT T2.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Pierce' AND T2.last_name = 'Guidi'
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker')
SELECT expense_id, expense_description, approved FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'October Meeting' AND event_date = '2019-10-08')) ORDER BY expense_id;
SELECT AVG(cost) FROM expense WHERE link_to_member = 'Elijah Allen' AND (MONTH(expense_date) = 9 OR MONTH(expense_date) = 10)
SELECT SUM(CASE WHEN strftime('%Y', T1.event_date) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T1.event_date) = '2020' THEN T2.spent ELSE 0 END) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Student_Club'
SELECT location FROM event WHERE event_name = 'Spring Budget Review'
SELECT E.cost FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_description = 'Posters' AND EV.event_date = '2019-09-04'
SELECT T1.remaining FROM budget AS T1 WHERE T1.category = 'Food' AND T1.amount = (SELECT MAX(T2.amount) FROM budget AS T2 WHERE T2.category = 'Food')
SELECT T1.notes FROM income AS T1 WHERE T1.source = 'Fundraising' AND T1.date_received = '2019-09-14'
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT T3.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Adela' AND T1.last_name = 'O'Gallagher'
SELECT COUNT(budget_id) FROM budget WHERE event_status = 'November Meeting' AND remaining < 0;
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Speaker')
SELECT e.event_status FROM event e JOIN budget b ON e.event_id = b.link_to_event JOIN expense ex ON b.budget_id = ex.link_to_budget WHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-8-20'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE position = 'Vice President'
SELECT T3.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT m.department FROM member m WHERE m.position = 'President'
SELECT received_date FROM income WHERE source = 'Dues' AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton')
SELECT first_name, last_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE source = 'Dues' ORDER BY date_received ASC LIMIT 1
SELECT CAST(SUM(T1.amount) AS INTEGER) / CAST(SUM(T2.amount) AS INTEGER) FROM budget AS T1 INNER JOIN event AS E1 ON T1.link_to_event = E1.event_id INNER JOIN event AS E2 ON T2.link_to_event = E2.event_id WHERE T1.category = 'Advertisement' AND E1.event_name = 'Yearly Kickoff' AND T2.category = 'Advertisement' AND E2.event_name = 'October Meeting'
SELECT SUM(CASE WHEN T1.category = 'Parking' THEN T2.amount ELSE 0 END) * 100 / SUM(T2.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'
SELECT COUNT(DISTINCT T3.city) FROM zip_code AS T3 WHERE T3.county = 'Orange County' AND T3.state = 'Virginia'
SELECT major_name FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT T3.city, T3.county, T3.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN city AS T3 ON T2.city = T3.city WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
SELECT expense_description FROM expense WHERE link_to_budget = (SELECT budget_id FROM budget WHERE remaining = (SELECT MIN(remaining) FROM budget))
SELECT T2.first_name, T2.last_name FROM event AS T1 INNER JOIN attendance AS T3 ON T1.event_id = T3.link_to_event INNER JOIN member AS T2 ON T3.link_to_member = T2.member_id WHERE T1.event_name = 'October Meeting';
SELECT college FROM major JOIN member ON major.major_id = member.link_to_major GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1;
SELECT major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE phone = '809-555-3360'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.amount = (SELECT MAX(amount) FROM budget)
SELECT e.expense_description, e.cost FROM expense e JOIN member m ON e.link_to_member = m.member_id WHERE m.position = 'Vice President'
SELECT COUNT(link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer')
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'
SELECT COUNT(*) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'
SELECT COUNT(*) FROM attendance AS A INNER JOIN member AS M ON A.link_to_member = M.member_id WHERE M.phone = '954-555-6240';
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'
SELECT event_id, event_name, MAX(spent/amount) AS spend_to_budget_ratio FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE status = 'Closed' GROUP BY event_id, event_name ORDER BY spend_to_budget_ratio DESC LIMIT 1;
SELECT COUNT(*) FROM member WHERE position = 'President'
SELECT MAX(spent) FROM budget
SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND YEAR(event_date) = 2020;
SELECT SUM(spent) FROM budget WHERE category = 'Food'
SELECT T2.first_name, T2.last_name FROM member AS T2 INNER JOIN attendance AS T1 ON T1.link_to_member = T2.member_id GROUP BY T2.first_name, T2.last_name HAVING COUNT(T1.link_to_event) > 7
SELECT m.first_name, m.last_name, m.email FROM member AS m INNER JOIN major AS maj ON m.link_to_major = maj.major_id INNER JOIN attendance AS att ON m.member_id = att.link_to_member INNER JOIN event AS e ON att.link_to_event = e.event_id WHERE maj.major_name = 'Interior Design' AND e.event_name = 'Community Theater';
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
SELECT COUNT(*) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'GRANT' AND T2.last_name = 'GILMOUR'
SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.amount > 40
SELECT SUM(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff'))
SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_event JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'Yearly Kickoff'
SELECT first_name || ' ' || last_name AS full_name, source FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount = (SELECT MAX(amount) FROM income)
SELECT event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY expense.cost LIMIT 1
SELECT SUM(CASE WHEN T4.event_name = 'Yearly Kickoff' THEN T6.cost ELSE 0 END) * 100 / SUM(T6.cost) FROM event AS T4 INNER JOIN budget AS T6 ON T4.event_id = T6.link_to_event;
SELECT SUM(IIF(T2.major_name = 'Finance', 1, 0)) / SUM(IIF(T2.major_name = 'Physics', 1, 0)) AS ratio FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id;
SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1
SELECT m.first_name, m.last_name, m.email FROM member m WHERE m.position = 'Secretary'
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')
SELECT COUNT(DISTINCT T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T2.link_to_event = T1.event_id WHERE T1.event_name = 'Community Theater' AND strftime('%Y', T1.event_date) = '2019';
SELECT COUNT(T1.event_id) AS events_attended, T3.major_name AS major FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Luisa' AND T3.last_name = 'Guidi'
SELECT AVG(b.spent) FROM budget b INNER JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Food' AND e.status = 'Closed'
SELECT event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1
SELECT COUNT(T2.member_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women\'s Soccer' AND T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';
SELECT E.cost FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_name = 'September Speaker' AND E.expense_description = 'Posters';
SELECT T1.t_shirt_size FROM member AS T1 GROUP BY T1.t_shirt_size ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' AND T2.remaining < 0 ORDER BY T2.remaining ASC LIMIT 1
SELECT expense_description, SUM(cost) as total_approved_value FROM expense JOIN event ON expense.link_to_event = event.event_id WHERE event.event_name = 'October Meeting' AND expense.approved = 'Yes' GROUP BY expense_description;
SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY amount ASC;
SELECT T1.budget_id FROM budget AS T1 WHERE T1.category = 'Food' ORDER BY T1.amount DESC LIMIT 1
SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
SELECT first_name, last_name, SUM(cost) AS total_cost FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY first_name, last_name;
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison'
SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'
SELECT T2.zip FROM member AS T2 INNER JOIN expense AS T1 ON T1.link_to_member = T2.member_id WHERE T1.cost < 50;
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'
SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'
SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30
SELECT T1.category FROM event AS T1 WHERE T1.location = 'MU 215'
SELECT category FROM event WHERE event_date = '2020-03-24T12:00:00'
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President';
SELECT CAST(SUM(IIF(T1.position = 'Member' AND T2.major_name = 'Mathematics', 1, 0)) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 LEFT JOIN major AS T2 ON T1.link_to_major = T2.major_id;
SELECT T1.category FROM event AS T1 WHERE T1.location = 'MU 215'
SELECT COUNT(*) FROM income WHERE amount = 50
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
SELECT COUNT(T1.major_id) FROM major AS T1 INNER JOIN major AS T2 ON T1.college = T2.college WHERE T1.college = 'College of Agriculture and Applied Sciences' AND T1.department = 'School of Applied Sciences, Technology and Education'
SELECT m.last_name, m.department, m.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE ma.major_name = 'Environmental Engineering'
SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0
SELECT city, state FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T3.zip = 900 AND T1.location = '900 E. Washington St.'
SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Member' AND T3.event_name = 'Women''s Soccer'
SELECT COUNT(I.amount) * 100 / COUNT(M.member_id) FROM income AS I JOIN member AS M ON I.link_to_member = M.member_id WHERE M.t_shirt_size = 'Medium' AND M.position = 'Member' AND I.amount = 50
SELECT T1.country FROM zip_code AS T1 WHERE T1.type = 'PO Box' GROUP BY T1.country;
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND city = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT T1.event_name AS game FROM event AS T1 WHERE T1.type = 'Game' AND T1.status = 'Closed' AND T1.event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT T1.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 50
SELECT T1.first_name, T1.last_name, T2.link_to_event FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'true' AND T2.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT major.college FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO'
SELECT phone FROM member JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences'
SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'education' AND college = 'College of Education & Human Services') AND position = 'Member'
SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) / COUNT(event_id)) * 100 AS percentage FROM budget;
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
SELECT SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100 / COUNT(zip_code) FROM zip_code;
SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100
SELECT T2.first_name, T2.last_name, T3.major_name FROM member AS T2 INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id INNER JOIN expense AS T4 ON T2.member_id = T4.link_to_member WHERE T4.cost > 100
SELECT T3.city, T3.county FROM event AS T1 INNER JOIN zip_code AS T2 ON T1.location = T2.zip_code INNER JOIN attendance AS T3 ON T1.event_id = T3.link_to_event INNER JOIN income AS T4 ON T1.event_id = T4.link_to_event GROUP BY T1.event_id HAVING COUNT(T4.income_id) > 40
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.link_to_event IN ( SELECT link_to_event FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_event) > 1 ) GROUP BY m.member_id ORDER BY total_cost DESC LIMIT 1
SELECT AVG(cost) FROM expense WHERE link_to_member IN (SELECT member_id FROM member WHERE position != 'Member')
SELECT event_name FROM event WHERE category = 'Parking' GROUP BY event_name HAVING cost < (SELECT SUM(cost) / COUNT(event_id) FROM budget WHERE category = 'Parking')
SELECT SUM(cost) * 100 / COUNT(event_id) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE event_status = 'Game')
SELECT budget_id FROM budget WHERE budget_id = (SELECT link_to_budget FROM expense WHERE expense_description = 'Water, chips, cookies' GROUP BY link_to_budget ORDER BY SUM(cost) DESC LIMIT 1)
SELECT T2.first_name, T2.last_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id GROUP BY T2.first_name, T2.last_name ORDER BY MAX(T1.cost) DESC LIMIT 5
SELECT T2.first_name, T2.last_name, T2.phone FROM member AS T2 INNER JOIN expense AS T1 ON T1.link_to_member = T2.member_id WHERE T1.cost > (SELECT AVG(cost) FROM expense)
SELECT (SUM(CASE WHEN T1.state = 'ME' THEN 1 ELSE 0 END) * 100 / COUNT(CASE WHEN T1.position = 'Member' THEN 1 ELSE 0 END)) - (SUM(CASE WHEN T1.state = 'VT' THEN 1 ELSE 0 END) * 100 / COUNT(CASE WHEN T1.position = 'Member' THEN 1 ELSE 0 END)) FROM member AS T1
SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'
SELECT LAST_NAME, PHONE FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Elementary Education')
SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Food')
SELECT T2.first_name, T2.last_name, T1.amount FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.date_received = '9/9/2019'
SELECT category FROM budget WHERE budget_id = (SELECT link_to_budget FROM expense WHERE expense_description = 'Posters')
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'
SELECT SUM(b.spent), e.event_name FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts'
SELECT zip_code.city FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Garrett' AND member.last_name = 'Girke'
SELECT T2.first_name, T2.last_name, T2.position FROM member AS T2 INNER JOIN zip_code AS T1 ON T2.zip = T1.zip_code WHERE T1.city = 'Lincolnton' AND T1.state = 'North Carolina' AND T1.zip_code = 28092
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium gas'
SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 1.0 / COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) as ratio FROM customers;
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' ORDER BY T1.Consumption LIMIT 1;
SELECT AVG(Consumption) / 12 FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')
SELECT customers.CustomerID, customers.Segment, SUM(transactions_1k.Amount) AS TotalConsumption FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'CZK' AND transactions_1k.Date BETWEEN '201101' AND '201112' GROUP BY customers.CustomerID ORDER BY TotalConsumption DESC;
SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T2.Date BETWEEN '201201' AND '201212' AND T2.Consumption < 30000;
SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Consumption ELSE 0 END) AS Difference_in_Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date BETWEEN '201201' AND '201212'
SELECT STRFTIME('%Y', T1.Date) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR' GROUP BY STRFTIME('%Y', T1.Date) ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1
SELECT Segment FROM yearmonth GROUP BY Segment ORDER BY SUM(Consumption) LIMIT 1
SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Currency = 'CZK' GROUP BY SUBSTR(Date, 1, 4) ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUBSTR(Date, 6, 2) AS Month, SUM(Consumption) AS Total_Consumption FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2013' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY Month ORDER BY Total_Consumption DESC LIMIT 1;
SELECT (SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) / COUNT(DISTINCT T2.CustomerID) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) / COUNT(DISTINCT T2.CustomerID)) AS "SME-LAM Difference", (SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) / COUNT(DISTINCT T2.CustomerID) - SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) / COUNT(DISTINCT T2.CustomerID)) AS "LAM-KAM Difference", (SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) / COUNT(DISTINCT T2.CustomerID) - SUM(CASE WHEN T
SELECT Segment, ((SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) - SUM(CASE WHEN Date LIKE '2012%' THEN Consumption ELSE 0 END)) / SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END)) * 100 AS PercentageIncrease FROM yearmonth GROUP BY Segment ORDER BY PercentageIncrease DESC SELECT Segment, ((SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) - SUM(CASE WHEN Date LIKE '2012%' THEN Consumption ELSE 0 END)) / SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END)) * 100 AS PercentageIncrease FROM yearmonth GROUP BY Segment ORDER BY PercentageIncrease ASC
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date LIKE '2013-08%' OR Date LIKE '2013-09%' OR Date LIKE '2013-10%' OR Date LIKE '2013-11%';
SELECT COUNT(DISTINCT CASE WHEN Country = 'Czech Republic' AND Segment = 'Discount' THEN GasStationID END) - COUNT(DISTINCT CASE WHEN Country = 'Slovakia' AND Segment = 'Discount' THEN GasStationID END) AS More_Discount_Gas_Stations FROM gasstations
SELECT SUM(y1.Consumption) - SUM(y2.Consumption) AS Consumption_Difference FROM yearmonth y1 JOIN yearmonth y2 ON y1.CustomerID = 7 AND y2.CustomerID = 5 WHERE y1.Date LIKE '201304%' AND y2.Date LIKE '201304%'
SELECT COUNT(CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Czech koruna' - COUNT(CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Euro' as "Amount of more SMEs"
SELECT MAX(YM.Consumption) AS highest_consumption FROM yearmonth AS YM INNER JOIN customers AS C ON YM.CustomerID = C.CustomerID WHERE C.Segment = 'LAM' AND C.Currency = 'Euro' AND YM.Date = '201310'
SELECT customers.CustomerID, MAX(yearmonth.Consumption) AS Max_Consumption FROM customers JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' GROUP BY customers.CustomerID ORDER BY Max_Consumption DESC LIMIT 1;
SELECT SUM(ym.Consumption) AS total_consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' AND ym.Date = '201305'
SELECT (CAST(SUM(CASE WHEN T1.Segment = 'LAM' AND T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.CustomerID)) * 100 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'
SELECT Country, COUNT(GasStationID) AS TotalValueForMoneyGasStations FROM gasstations WHERE Segment = 'value for money' GROUP BY Country
SELECT ((SELECT COUNT(*) FROM customers WHERE Segment = 'KAM' AND Currency = 'Euro') / (SELECT COUNT(*) FROM customers WHERE Segment = 'KAM')) * 100 as Percentage_Euro_KAM
SELECT (CAST(COUNT(T1.CustomerID) AS REAL) / (SELECT COUNT(CustomerID) FROM customers)) * 100 FROM yearmonth AS T1 WHERE T1.Date = '201202' AND T1.Consumption > 528.3;
SELECT (CAST(COUNT(CASE WHEN Segment = 'Premium' THEN GasStationID ELSE NULL END) OVER (PARTITION BY Country) AS REAL) * 100) / COUNT(GasStationID) OVER (PARTITION BY Country) FROM gasstations WHERE Country = 'Slovakia'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;
SELECT c.Segment FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date = '201309' GROUP BY c.Segment ORDER BY SUM(y.Consumption) ASC LIMIT 1;
SELECT T1.CustomerID, MIN(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date = '201206'
SELECT MAX(Consumption) AS highest_monthly_consumption FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
SELECT MAX(SUM(consumption)/12) AS biggest_monthly_consumption FROM yearmonth AS y INNER JOIN customers AS c ON y.CustomerID = c.CustomerID WHERE c.Currency = 'euro' GROUP BY y.Date;
SELECT p.Description FROM products p JOIN transactions_1k t ON p.ProductID = t.ProductID WHERE t.Date LIKE '201309%'
SELECT DISTINCT Country FROM gasstations WHERE GasStationID IN (SELECT GasStationID FROM transactions_1k WHERE STRFTIME('%Y%m', Date) = '201306')
SELECT DISTINCT T2.ChainID FROM gasstations AS T1 INNER JOIN "transactions_1k" AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'Euro'
SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'Euro'
SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'
SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Currency = 'euro' AND T3.Consumption > 1000
SELECT p.Description FROM products p JOIN "transactions_1k" t ON p.ProductID = t.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE'
SELECT DISTINCT Time FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.ChainID = 11
SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND Date > '2012-01-01';
SELECT AVG(Price * Amount) AS AverageTotalPrice FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE'
SELECT customers.CustomerID, AVG(transactions_1k.Price) AS avg_total_price FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE customers.Currency = 'euro' GROUP BY customers.CustomerID
SELECT customers.CustomerID, SUM(transactions_1k.Amount) AS TotalAmount FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-25' GROUP BY customers.CustomerID ORDER BY TotalAmount DESC LIMIT 1;
SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY TransactionID LIMIT 1)
SELECT Currency FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE Date = '2012-08-24' AND Time = '16:25:00'
SELECT c.Segment FROM customers c JOIN transactions_1k T1 ON c.CustomerID = T1.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR')
SELECT Segment FROM customers ORDER BY CustomerID LIMIT 1
SELECT Country FROM transactions_1k T1 JOIN gasstations G ON T1.GasStationID = G.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 124.05 AND Date = '2012-08-24') AND Date LIKE '2012-01%'
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-26' AND t.Time BETWEEN '8:00' AND '9:00' AND g.Country = 'CZE'
SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Amount = 214582.17 AND T3.Date LIKE '201306%'
SELECT Country FROM gasstations WHERE GasStationID = ( SELECT GasStationID FROM transactions_1k WHERE CardID = 667467 )
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Amount = 548.4;
SELECT COUNT(DISTINCT CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date = '2012-08-25' AND Currency = 'EUR') FROM yearmonth WHERE Date = '2012-08-25'
SELECT ((Y1.Consumption - Y2.Consumption) / Y1.Consumption) AS Consumption_Decrease_Rate FROM yearmonth AS Y1 INNER JOIN yearmonth AS Y2 ON Y1.CustomerID = Y2.CustomerID WHERE Y1.Date = '2012-08-25' AND Y2.Date = '2013-08-25'
SELECT GasStationID, SUM(Amount * Price) AS Revenue FROM transactions_1k GROUP BY GasStationID ORDER BY Revenue DESC LIMIT 1
SELECT CAST(COUNT(Segment) AS REAL) * 100 / (SELECT COUNT(Segment) FROM gasstations WHERE Country = 'SVK') FROM gasstations WHERE Segment = 'premium' AND Country = 'SVK'
SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508; SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date LIKE '201201%';
SELECT Description FROM products ORDER BY (SELECT SUM(Amount) FROM transactions_1k WHERE products.ProductID = transactions_1k.ProductID) DESC LIMIT 5
SELECT T1.CustomerID, MAX(T1.total_spent), T1.Currency, AVG(T1.Price / T1.Amount) FROM ( SELECT T2.CustomerID, SUM(T2.Price) AS total_spent, T2.Currency, AVG(T2.Price / T2.Amount) AS avg_price_per_item FROM transactions_1k AS T2 GROUP BY T2.CustomerID ) AS T1 ORDER BY T1.total_spent DESC LIMIT 1
SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE ProductID = 2 ORDER BY Price DESC LIMIT 1)
SELECT c.CustomerID, y.Consumption FROM transactions_1k t JOIN customers c ON t.CustomerID = c.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND y.Date LIKE '201208%'
