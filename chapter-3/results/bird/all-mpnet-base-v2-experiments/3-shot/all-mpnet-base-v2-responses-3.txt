SELECT MAX(`Percent (%) Eligible Free (K-12)`) FROM frpm WHERE `County Name` = 'Alameda County'
SELECT TOP 3 `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' ORDER BY (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) ASC;
SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 AND T2.County = 'Fresno County Office of Education'
SELECT T2.Street, T2.City, T2.Zip, T2.State FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)
SELECT Phone FROM schools WHERE Charter = 1 AND OpenDate > '2000-01-01'
SELECT COUNT(DISTINCT T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath < 400 AND T2.Virtual = 'F'
SELECT schools.`School` FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr > 500 AND schools.Magnet = 1
SELECT Phone FROM schools WHERE CDSCode IN ( SELECT cds FROM satscores WHERE NumTstTakr = ( SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0 ) AND NumGE1500 > 0 )
SELECT T2.NumTstTakr FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)
SELECT COUNT(T1.CDSCode) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Charter'
SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)
SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500
SELECT MAX(T1.`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumGE1500 / T2.NumTstTakr > 0.3;
SELECT T2.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS FLOAT) / T2.NumTstTakr DESC LIMIT 3
SELECT NCESchool FROM schools ORDER BY (SELECT MAX(`Enrollment (Ages 5-17)`) FROM frpm) DESC LIMIT 5
SELECT T2.`District Name`, AVG(T1.AvgScrRead) AS avg_reading_score FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Active' GROUP BY T2.`District Name` ORDER BY avg_reading_score DESC LIMIT 1
SELECT COUNT(*) FROM schools WHERE County = 'Alameda' AND CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr < 100)
SELECT T2.CharterNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = 499
SELECT COUNT(schools.School) FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Contra Costa' AND schools.FundingType = 'Directly Funded' AND satscores.NumTstTakr <= 250;
SELECT T3.Phone FROM schools AS T3 INNER JOIN satscores AS T1 ON T1.cds = T3.CDSCode WHERE T1.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT COUNT(*) FROM schools WHERE County = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'
SELECT COUNT(schools.school) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.City = 'Los Angeles' AND frpm.`Free Meal Count (K-12)` > 500 AND frpm.`FRPM Count (K-12)` < 700
SELECT sname FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE County = 'Contra Costa') ORDER BY NumTstTakr DESC LIMIT 1;
SELECT s.School, s.Street FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;
SELECT T1.`School Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.NumGE1500 > 0
SELECT T2.School, T1.FundingType FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.rtype = 'S' AND T1.AvgScrMath > 400 AND T2.County = 'Riverside'
SELECT T1.School, T1.Street, T1.City, T1.Zip, T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Monterey' AND T1.StatusType = 'High School' AND T2.`FRPM Count (Ages 5-17)` > 800;
SELECT T2.`School Name`, T1.AvgScrWrite, T3.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode LEFT JOIN schools AS T3 ON T1.cds = T3.CDSCode WHERE T2.OpenDate > '1991-01-01' OR T2.ClosedDate < '2000-01-01'
SELECT T1.`School Name`, T1.DOCType FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.FundingType = 'Local' AND (`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm)
SELECT MIN(OpenDate) FROM schools WHERE StatusType = 'Active' AND GSoffered LIKE '%K-12%' ORDER BY enroll12 DESC LIMIT 1
SELECT City FROM schools ORDER BY enroll12 LIMIT 5;
SELECT (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS Eligible_Free_Rate FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 10, 2
SELECT TOP 5 schools.CDSCode, schools.`School Name`, frpm.`Percent (%) Eligible FRPM (K-12)` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.`CharterNum` = 66 ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5
SELECT T2.Website, T3.`School Name` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T2.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS Free_Rate FROM frpm WHERE `School Name` = 'Kacey Gibson'
SELECT T3.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T1.CDSCode = T3.cds WHERE T1.`Charter School (Y/N)` = 1 AND T1.`Enrollment (K-12)` = (SELECT MIN(T1.`Enrollment (K-12)`) FROM frpm AS T1 WHERE T1.`Charter School (Y/N)` = 1)
SELECT T3.AdmFName1 || ' ' || T3.AdmLName1 AS Administrator FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN ( SELECT cds, MAX(NumGE1500) AS MaxNumGE1500 FROM satscores GROUP BY cds ) AS T4 ON T2.cds = T4.cds AND T2.NumGE1500 = T4.MaxNumGE1500 INNER JOIN ( SELECT CDSCode, AdmFName1, AdmLName1 FROM schools UNION SELECT CDSCode, AdmFName2, AdmLName2 FROM schools UNION SELECT CDSCode, AdmFName3, AdmLName3 FROM schools ) AS T3 ON T1.CDSCode = T3.CDSCode
SELECT T3.Street, T3.City, T3.Zip, T3.State FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN schools AS T3 ON T1.cds = T3.CDSCode WHERE T1.NumTstTakr > 0 ORDER BY (CAST(T1.NumGE1500 AS REAL) / T1.NumTstTakr) ASC LIMIT 1
SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T1.NumTstTakr BETWEEN 2000 AND 3000
SELECT AVG(NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'
SELECT T3.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN frpm AS T3 ON T1.cds = T3.CDSCode WHERE T2.District = 'Fresno Unified' ORDER BY T1.AvgScrRead ASC LIMIT 1;
SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' ORDER BY T2.AvgScrRead DESC LIMIT 5;
SELECT T1.`Educational Option Type` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1;
SELECT T1.cname, AVG(T2.AvgScrMath) AS AvgMathScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds GROUP BY T1.cname ORDER BY (T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite) ASC LIMIT 1;
SELECT AVG(AvgScrWrite), schools.City FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500)
SELECT T3.`School Name`, AVG(T2.AvgScrWrite) AS AvgWritingScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN administrators AS T3 ON T1.AdmFName1 = T3.FirstName AND T1.AdmLName1 = T3.LastName WHERE T3.FirstName = 'Ricci' AND T3.LastName = 'Ulrich' GROUP BY T3.`School Name`;
SELECT T1.State, SUM(T2.enroll12) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.DOC = '31' GROUP BY T1.State ORDER BY SUM(T2.enroll12) DESC LIMIT 1
SELECT AVG(COUNT(T1.CDSCode)) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Alameda County' AND T1.DOC = '52' AND STRFTIME('%Y', T1.OpenDate) = '1980'
SELECT COUNT(CASE WHEN s.StatusType = 'Merged' AND s.DOC = '54' THEN 1 END) / COUNT(CASE WHEN s.StatusType = 'Merged' AND s.DOC = '52' THEN 1 END) AS Ratio FROM schools s WHERE s.County = 'Orange County'
SELECT T1.County, T2.School, T2.ClosedDate FROM schools AS T2 INNER JOIN frpm AS T1 ON T1.CDSCode = T2.CDSCode WHERE T2.StatusType = 'Closed' GROUP BY T1.County ORDER BY COUNT(T2.School) DESC LIMIT 1
SELECT T2.Street, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1 OFFSET 5
SELECT T3.MailStreet, T2.`School Name` FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN frpm AS T3 ON T1.cds = T3.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite >= 1500 AND T2.MailCity = 'Lakeport'
SELECT SUM(NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'
SELECT T1.School, T1.MailZip FROM schools AS T1 WHERE T1.AdmFName1 = 'Avetik' AND T1.AdmLName1 = 'Atoian'
SELECT COUNT(CASE WHEN County = 'Colusa' THEN 1 ELSE NULL END) / COUNT(CASE WHEN County = 'Humboldt' THEN 1 ELSE NULL END) FROM schools WHERE MailState = 'CA'
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND State = 'San Joaquin' AND StatusType = 'Active'
SELECT T3.Phone, T3.Ext FROM ( SELECT T1.CDSCode, T1.AvgScrWrite, ROW_NUMBER() OVER (ORDER BY T1.AvgScrWrite DESC) AS rn FROM satscores AS T1 ) AS T2 INNER JOIN schools AS T3 ON T2.CDSCode = T3.CDSCode WHERE T2.rn = 333;
SELECT T1.Phone, T1.Ext, T1.School FROM schools AS T1 WHERE T1.Zip = '95203-3704'
SELECT T1.Website FROM schools AS T1 WHERE T1.AdmFName1 = 'Mike' AND T1.AdmLName1 = 'Larson' OR T1.AdmFName1 = 'Dante' AND T1.AdmLName1 = 'Alvarez' OR T1.AdmFName2 = 'Mike' AND T1.AdmLName2 = 'Larson' OR T1.AdmFName2 = 'Dante' AND T1.AdmLName2 = 'Alvarez' OR T1.AdmFName3 = 'Mike' AND T1.AdmLName3 = 'Larson' OR T1.AdmFName3 = 'Dante' AND T1.AdmLName3 = 'Alvarez'
SELECT T1.Website FROM schools AS T1 WHERE T1.City = 'San Joaquin' AND T1.Virtual = 'P' AND T1.Charter = 1
SELECT COUNT(schools.CDSCode) FROM schools WHERE schools.City = 'Hickman' AND schools.DOC = '52' AND schools.Charter = 1
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.Charter = 0 AND T2.`Percent (%) Eligible Free (K-12)` < 0.18
SELECT T1.AdmFName1, T1.AdmLName1, T1.AdmFName2, T1.AdmLName2, T1.AdmFName3, T1.AdmLName3, T2.School, T2.City FROM schools AS T2 WHERE T2.Charter = 1 AND T2.CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'
SELECT CAST(COUNT(CASE WHEN s.FundingType = 'Locally Funded' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM schools s WHERE s.County = 'Santa Clara County'
SELECT COUNT(s.CDSCode) FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.County = 'Stanislaus' AND s.OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND s.FundingType = 'Directly Funded'
SELECT SUM(enroll12) FROM frpm WHERE `District Type` = 'Community College District' AND `ClosedDate` = '1989' AND City = 'San Francisco'
SELECT County, COUNT(School) AS NumOfClosures FROM schools WHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' AND SOC = '11' GROUP BY County ORDER BY NumOfClosures DESC LIMIT 1;
SELECT NCESDist FROM schools WHERE SOC = '31'
SELECT COUNT(schools.CDSCode) FROM schools WHERE schools.County = 'Alpine' AND (schools.StatusType = 'Active' OR schools.StatusType = 'Closed') AND schools.SOCType = 'District Community Day School'
SELECT DISTINCT District Code FROM frpm WHERE `School Name` IN (SELECT School FROM schools WHERE City = 'Fresno') AND `School Name` NOT IN (SELECT sname FROM satscores WHERE Magnet = 1)
SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.School = 'State Special School' AND schools.City = 'Fremont' AND frpm.`Academic Year` = '2014-2015' AND schools.EdOpsCode = 'SSS'
SELECT `Free Meal Count (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.School = 'Youth Authority School' AND schools.MailStreet = 'PO Box 1040' AND frpm.`Educational Option Type` = 'Youth Authority School' AND frpm.`Enrollment (Ages 5-17)` IS NOT NULL;
SELECT Low Grade FROM frpm WHERE `District Type` = 'SPECON' AND NCESDist = '613360'
SELECT T1.`School Name`, T1.`Educational Option Type` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = '37'
SELECT City FROM schools WHERE EILCode = 'HS' AND CharterNum = 2 AND `Low Grade` = 9 AND `High Grade` = 12 AND County = 'Merced'
SELECT T1.`School Name`, T1.`Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'
SELECT T2.`GSserved` FROM schools AS T1 WHERE T1.City = 'Adelanto' GROUP BY T2.`GSserved` ORDER BY COUNT(T2.`GSserved`) DESC LIMIT 1
SELECT County, COUNT(*) AS Num_Schools FROM schools WHERE City IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY Num_Schools DESC LIMIT 1;
SELECT T2.`School Type`, T2.School, T2.Latitude FROM schools AS T2 WHERE T2.Latitude = (SELECT MAX(Latitude) FROM schools)
SELECT T2.City, T2.`Low Grade`, T2.`School Name` FROM schools AS T2 WHERE T2.State = 'CA' AND T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA')
SELECT T1.`Low Grade`, T1.`High Grade` FROM schools AS T1 WHERE T1.Longitude = (SELECT MAX(Longitude) FROM schools)
SELECT COUNT(s.CDSCode) FROM schools AS s WHERE s.GSoffered = 'K-8' AND s.Magnet = 1 AND s.EdOpsCode = 'Multiple Provision Types' SELECT City, COUNT(s.CDSCode) FROM schools AS s WHERE s.GSoffered = 'K-8' GROUP BY City
SELECT AdmFName1, District FROM schools GROUP BY AdmFName1, District ORDER BY COUNT(*) DESC LIMIT 2
SELECT T1.`Percent (%) Eligible Free (K-12)`, T2.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
SELECT T1.AdmLName1, T2.District, T2.County, T2.School FROM schools AS T2 INNER JOIN frpm AS T3 ON T2.CDSCode = T3.CDSCode WHERE T2.CharterNum = '40'
SELECT T1.AdmEmail1 FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'San Bernardino' AND T1.District = 'San Bernardino City Unified' AND T1.OpenDate BETWEEN '1/1/2009' AND '12/31/2010' AND (T2.`School Type` = 'Intermediate/Middle Schools' OR T2.`School Type` = 'Unified Schools') AND T2.SOC = 62 AND T2.DOC = 54
SELECT T3.AdmEmail1, T3.School FROM satscores AS T1 INNER JOIN schools AS T3 ON T1.cds = T3.CDSCode WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0);
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T4.A3 = 'East Bohemia'
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'
SELECT IIF(AVG(A12) > AVG(A13), '1995', '1996') as higher_unemployment_ratio_year_percentage FROM district
SELECT COUNT(DISTINCT district_id) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE gender = 'F' GROUP BY district_id HAVING AVG(A11) > 6000 AND AVG(A11) < 10000
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000
SELECT T1.account_id, T2.birth_date, AVG(T3.A11) AS avg_salary FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.gender = 'F' GROUP BY T1.account_id, T2.birth_date ORDER BY T2.birth_date DESC, avg_salary ASC LIMIT 1 SELECT MAX(avg_salary) - MIN(avg_salary) AS salary_gap FROM ( SELECT AVG(T3.A11) AS avg_salary FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.gender = 'F' GROUP BY T1.account_id, T2.birth_date )
SELECT account_id FROM disp WHERE client_id IN ( SELECT client_id FROM client WHERE birth_date = ( SELECT MIN(birth_date) FROM client WHERE client_id IN ( SELECT client_id FROM disp GROUP BY client_id HAVING AVG(A11) = ( SELECT MAX(avg_salary) FROM ( SELECT AVG(A11) as avg_salary FROM disp GROUP BY client_id ) ) ) ) )
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'Owner'
SELECT T3.client_id, T3.gender, T3.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id WHERE T1.type = 'DISPONENT' AND T3.frequency = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1997-01-01' AND '1997-12-31' AND T2.amount = (SELECT MIN(amount) FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31') AND T1.frequency = 'POPLATEK TYDNE'
SELECT T1.account_id, MAX(T2.amount) AS highest_approved_amount FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 12 AND STRFTIME('%Y', T1.date) = '1993' GROUP BY T1.account_id
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Slokolov'
SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = (SELECT MIN(date) FROM trans WHERE date LIKE '1995%')
SELECT account_id FROM account WHERE date < '1997-01-01' AND account_id IN (SELECT account_id FROM trans WHERE amount > 3000)
SELECT client_id FROM disp INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03'
SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'
SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'
SELECT MAX(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE card_id IN (SELECT card_id FROM card WHERE issued = '1996-10-21'))
SELECT T3.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id GROUP BY T1.client_id ORDER BY T4.A11 DESC, T1.birth_date LIMIT 1
SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC LIMIT 1
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F'
SELECT T1.disp_id FROM trans AS T1 WHERE T1.amount = 5100 AND T1.date = '1998-09-02'
SELECT COUNT(account_id) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE district.A2 = 'Litomerice' AND date LIKE '1996%'
SELECT T4.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
SELECT birth_date FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM loan WHERE amount = 98832 AND date = '1996-01-03'))
SELECT T1.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T4.A3 = 'Prague' ORDER BY T3.date LIMIT 1
SELECT CAST(COUNT(CASE WHEN C.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(C.client_id) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE D.A3 = 'south Bohemia' AND D.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')
SELECT ((T2.balance - T1.balance) * 100.0 / T1.balance) AS increase_rate FROM trans AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1993-03-22' AND T2.date = '1998-12-27' AND T1.trans_id = (SELECT MIN(trans_id) FROM trans WHERE account_id = T1.account_id AND date >= '1993-07-05') AND T2.trans_id = (SELECT MIN(trans_id) FROM trans WHERE account_id = T2.account_id AND date >= '1993-07-05')
SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan
SELECT (CAST(SUM(CASE WHEN T1.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100) / COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount < 100000
SELECT T1.account_id, T2.A2 AS district_name, T2.A3 AS district_region FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T1.date = '1993' AND T3.type = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A6 = 'east Bohemia' AND T1.date >= '1995-01-01' AND T1.date <= '2000-12-31'
SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
SELECT A2, A3 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE loan_id = 4990))
SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.amount > 300000
SELECT T1.loan_id, T2.A3, AVG(T3.A11) AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60 GROUP BY T1.loan_id, T2.A3
SELECT district.A2, ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_rate_increment FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.client_id = client.client_id JOIN disp ON client.client_id = disp.client_id JOIN district ON client.district_id = district.district_id WHERE loan.status = 'D' AND client.client_id IN (SELECT client_id FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE account_id IN (SELECT account_id FROM loan WHERE status = 'D' AND account_id IN (SELECT account_id FROM account WHERE account_id IN (SELECT account_id FROM disp WHERE client_id IN (SELECT client_id FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A12 < 0)))))));
SELECT CAST(COUNT(CASE WHEN T2.A2 = 'Decin' THEN T1.account_id END) AS REAL) * 100 / COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1993'
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'
SELECT A2, COUNT(DISTINCT T1.account_id) AS Female_Account_Holders FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' GROUP BY T3.district_id ORDER BY Female_Account_Holders DESC LIMIT 10
SELECT T2.A2, SUM(T1.amount) AS total_withdrawals FROM trans AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' GROUP BY T2.A2 ORDER BY total_withdrawals DESC LIMIT 10
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id LEFT JOIN card AS T5 ON T2.disp_id = T5.disp_id WHERE T4.A3 = 'South Bohemia' AND T5.card_id IS NULL
SELECT A3 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE status = 'C' OR status = 'D')) GROUP BY A3 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(amount) AS average_loan_amount FROM loan AS L INNER JOIN disp AS D ON L.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'M'
SELECT A2, A5, A6, A7 FROM district WHERE district_id IN ( SELECT district_id FROM district WHERE A13 = ( SELECT MAX(A13) FROM district WHERE district_id IN ( SELECT district_id FROM account WHERE date BETWEEN '1996-01-01' AND '1996-12-31' ) ) )
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A16 = ( SELECT MAX(A16) FROM district WHERE district_id IN ( SELECT district_id FROM crime WHERE date LIKE '1996%' GROUP BY district_id ORDER BY COUNT(case_number) DESC LIMIT 1 ) ) )
SELECT COUNT(DISTINCT T1.account_id) AS account_number FROM trans AS T1 INNER JOIN card AS T2 ON T1.account_id = T2.disp_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T3.frequency = 'POPLATEK MESICNE'
SELECT COUNT(DISTINCT T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE' AND T1.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.status = 'approved'
SELECT COUNT(account_id) FROM loan WHERE account_id IN (SELECT account_id FROM account WHERE district_id = 1) AND status = 'C'
SELECT COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1 ) AND T1.gender = 'M'
SELECT COUNT(*) FROM card WHERE type = 'gold' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'disponent')
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek')
SELECT T2.A2, T2.A3 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount > 10000 AND STRFTIME('%Y', T1.date) = '1997'
SELECT T1.account_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A4 = 'Pisek'
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold' AND T3.type = 'junior'
SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.type = 'credit card' AND T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '2021'
SELECT T3.client_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T1.type = 'VYBER KARTOU' AND T1.date LIKE '%1998%' GROUP BY T3.client_id HAVING AVG(T1.amount) < (SELECT AVG(amount) FROM trans WHERE type = 'VYBER KARTOU' AND date LIKE '%1998%')
SELECT T3.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN account AS T4 ON T2.account_id = T4.account_id INNER JOIN loan AS T5 ON T4.account_id = T5.account_id WHERE T1.gender = 'F' AND T3.type = 'credit'
SELECT COUNT(T1.account_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'South Bohemia'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'
SELECT DISTINCT type, AVG(A11) AS avg_income FROM account INNER JOIN district ON account.district_id = district.district_id WHERE type != 'OWNER' AND A11 > 8000 AND A11 <= 9000 GROUP BY type
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'
SELECT DISTINCT A2 FROM district AS D INNER JOIN account AS A ON D.district_id = A.district_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE T.type = 'VYDAJ'
SELECT AVG(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01')
SELECT COUNT(*) AS cnt FROM card WHERE type = 'classic' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'OWNER')
SELECT COUNT(client_id) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha')
SELECT CAST(SUM(CASE WHEN type = 'Gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card
SELECT T3.client_id, T4.gender, T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.amount = (SELECT MAX(amount) FROM loan)
SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532)
SELECT T1.district_id FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333
SELECT trans_id, amount, date FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 3356) AND type = 'VYBER'
SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND account_id IN (SELECT account_id FROM loan WHERE amount < 200000)
SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.client_id = 13539
SELECT A3 FROM district WHERE district_id = (SELECT district_id FROM client WHERE client_id = 3541)
SELECT A4 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'A' GROUP BY district.district_id ORDER BY COUNT(account.account_id) DESC LIMIT 1
SELECT T1.client_id, T2.A2, T2.A3, T2.A4, T2.A5, T2.A6, T2.A7, T2.A8, T2.A9, T2.A10, T2.A11, T2.A12, T2.A13, T2.A14, T2.A15, T2.A16 FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN `order` AS T3 ON T2.account_id = T3.account_id WHERE T3.order_id = 32423
SELECT T1.trans_id, T1.date, T1.type, T1.operation, T1.amount, T1.balance, T1.k_symbol, T1.bank, T1.account FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.district_id = 5
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'
SELECT client_id FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE disp_id IN (SELECT disp_id FROM card WHERE type = 'junior' AND issued > '1997-01-01'))
SELECT COUNT(DISTINCT C.client_id) / (SELECT COUNT(DISTINCT client_id) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A11 > 10000)) * 100 FROM client AS C WHERE C.gender = 'F' AND C.district_id IN (SELECT district_id FROM district WHERE A11 > 10000)
SELECT ((SUM(CASE WHEN strftime('%Y', T2.date) = '1997' THEN T2.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.date) = '1996' THEN T2.amount ELSE 0 END)) * 1.0 / SUM(CASE WHEN strftime('%Y', T2.date) = '1996' THEN T2.amount ELSE 0 END)) * 100 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND strftime('%Y', T3.date) BETWEEN '1996' AND '1997'
SELECT COUNT(T1.trans_id) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'credit' AND T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) > '1995'
SELECT SUM(CASE WHEN T1.A3 = 'North Bohemia' THEN T1.A16 ELSE 0 END) - SUM(CASE WHEN T1.A3 = 'East Bohemia' THEN T1.A16 ELSE 0 END) FROM district AS T1 WHERE T1.A16 IS NOT NULL AND T1.A16 <> 0 AND T1.A9 = 1996
SELECT COUNT(*) AS disposition_count FROM disp WHERE account_id BETWEEN 1 AND 10
SELECT COUNT(*) AS statement_requests, SUM(amount) AS total_debit FROM trans WHERE account_id = 3 AND type = 'PRIJEM' AND k_symbol = 'VYBER'
SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130
SELECT COUNT(*) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT SUM(amount) AS total_debt, status FROM loan WHERE account_id = (SELECT account_id FROM disp WHERE client_id = 992) GROUP BY status
SELECT SUM(T1.amount) AS total_amount, T2.gender FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.trans_id = 851 AND T2.client_id = 4
SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.client_id = 9
SELECT SUM(t.amount) FROM trans t INNER JOIN disp d ON t.account_id = d.account_id INNER JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 617 AND t.date >= '1998-01-01' AND t.date <= '1998-12-31'
SELECT client_id FROM client WHERE birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'East Bohemia')
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'F' ORDER BY T4.amount DESC LIMIT 3
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T4.type = 'SIPO' AND T4.amount > 4000
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-01-01'
SELECT COUNT(*) FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN card AS ca ON d.disp_id = ca.disp_id WHERE c.gender = 'F' AND ca.type = 'junior credit card'
SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'
SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'
SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 24 AND T2.amount = (SELECT MIN(amount) FROM loan WHERE account_id = T1.account_id) AND T1.date < '1997'
SELECT account.account_id FROM account JOIN disp ON account.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' ORDER BY district.A11 ASC, client.birth_date DESC LIMIT 1;
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.A3 = 'East Bohemia'
SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'
SELECT AVG(amount) FROM loan WHERE status = 'C' AND account_id IN (SELECT account_id FROM trans WHERE k_symbol = 'POPLATEK PO OBRATU')
SELECT T1.client_id, T2.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'owner'
SELECT T1.client_id, (strftime('%Y', 'now') - strftime('%Y', T1.birth_date)) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold' AND T1.client_id IN (SELECT account_id FROM loan)
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1
SELECT COUNT(DISTINCT Molecule.molecule_id) FROM Molecule INNER JOIN Atom ON Molecule.molecule_id = Atom.molecule_id WHERE Molecule.label = '-' AND Atom.element = 'cl'
SELECT AVG(CASE WHEN b.bond_type = '-' AND a.element = 'o' THEN 1 ELSE 0 END) FROM atom a JOIN molecule m ON a.molecule_id = m.molecule_id JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 GROUP BY m.molecule_id
SELECT AVG(CASE WHEN T4.label = '+' AND T3.bond_type = '-' THEN 1 ELSE 0 END) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.molecule_id = T2.bond_id INNER JOIN molecule AS T4 ON T4.molecule_id = T3.molecule_id
SELECT COUNT(*) FROM atom WHERE element = 'na' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-')
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'
SELECT CAST((SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = '
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM atom WHERE element != 'br'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'si'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR004_8_9'
SELECT DISTINCT element FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = '
SELECT label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'h' GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1
SELECT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T1.bond_id = T4.bond_id INNER JOIN molecule AS T5 ON T3.molecule_id = T5.molecule_id WHERE T5.label = '-'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20'
SELECT DISTINCT label FROM molecule WHERE molecule_id IN ( SELECT molecule_id FROM atom WHERE element != 'sn' )
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE (T1.element = 'i' OR T1.element = 's') AND T2.bond_type = '-'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT T1.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR181'
SELECT CAST(COUNT(CASE WHEN T1.element != 'f' THEN 1 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_2_6' AND T2.bond_id = 'TR001_2_6'
SELECT COUNT(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) - COUNT(CASE WHEN T1.label = '-' THEN 1 ELSE 0 END) AS diff FROM molecule AS T1
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR_000_2_5'
SELECT T2.bond_id FROM connected AS T1 INNER JOIN connected AS T2 ON T1.atom_id2 = T2.atom_id2 WHERE T1.atom_id = 'TR000_2'
SELECT T2.label FROM molecule AS T2 INNER JOIN bond AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.bond_type = ' = ' ORDER BY T2.label LIMIT 5
SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) AS percent FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR008'
SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(molecule_id) * 100 as percent FROM molecule
SELECT SUM(IF(T1.element = 'h', 1, 0)) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 WHERE T1.molecule_id = 'TR206'
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000'
SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'
SELECT T2.bond_type, CASE WHEN T1.label = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS carcinogenic_status FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR018' GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_type) DESC LIMIT 1
SELECT T3.label FROM molecule AS T3 INNER JOIN bond AS T1 ON T3.molecule_id = T1.molecule_id INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-' AND T3.label = '-' GROUP BY T3.label ORDER BY COUNT(T3.label) DESC LIMIT 3
SELECT bond_type FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_type LIMIT 2
SELECT COUNT(*) FROM connected WHERE bond_id LIKE 'TR009_%' AND (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT T2.bond_type, T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(bond_id) FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR004'
SELECT COUNT(*) FROM molecule WHERE label = '-'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTRING(T1.atom_id, 7, 2) BETWEEN 21 AND 25 AND T2.label = '+'
SELECT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' OR T1.element = 'n' GROUP BY T3.bond_id
SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT CAST(COUNT(T3.bond_id) AS REAL) / COUNT(T1.atom_id) AS average FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'i'
SELECT T2.bond_type, T2.bond_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'atom_45'
SELECT T1.element FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.atom_id IS NULL
SELECT T1.atom_id, T2.element FROM connected AS T3 INNER JOIN atom AS T1 ON T3.atom_id = T1.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T2.bond_type = '#' AND T2.molecule_id = 'TR447'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR144_8_19'
SELECT T2.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'
SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'
SELECT CAST(COUNT(b.bond_id) AS FLOAT) * 100 / (SELECT COUNT(a.atom_id) FROM atom a GROUP BY a.element ORDER BY COUNT(a.atom_id) DESC LIMIT 1) AS "percentage" FROM bond b JOIN connected c ON b.molecule_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id GROUP BY b.bond_id;
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h')
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'
SELECT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'sn'
SELECT COUNT(DISTINCT element) FROM atom INNER JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN connected AS T4 ON T1.atom_id = T4.atom_id2 WHERE (T2.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br'))
SELECT bond_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'
SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.atom_id END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'
SELECT T1.label FROM molecule AS T1 WHERE T1.molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
SELECT COUNT(bond_id) FROM atom WHERE element = 'i'
SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Ca' GROUP BY T1.label ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_1_8' AND (atom.element = 'cl' OR atom.element = 'c') GROUP BY bond.bond_id HAVING COUNT(DISTINCT atom.element) = 2
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-' AND T2.element = 'c' LIMIT 2
SELECT CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.molecule_id END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.label = '+'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'
SELECT T1.molecule_id FROM bond AS T1 WHERE T1.bond_type = ' = '
SELECT T1.atom_id, T2.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id INNER JOIN atom AS T1 ON connected.atom_id = T1.atom_id INNER JOIN atom AS T2 ON connected.atom_id2 = T2.atom_id WHERE bond.bond_type = '#'
SELECT T1.element FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR005_16_26'
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'
SELECT Bond.bond_id, CASE WHEN Molecule.label = '+' THEN 'Carcinogenic' WHEN Molecule.label = '-' THEN 'Non-carcinogenic' END AS Carcinogenicity FROM Bond JOIN Molecule ON Bond.molecule_id = Molecule.molecule_id WHERE Bond.bond_type = '#'
SELECT T2.element, COUNT(T2.element) AS element_count FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4' AND T2.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY T2.element
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element), T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'
SELECT CASE WHEN T1.label = '+' THEN 'Carcinogenic' WHEN T1.label = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS Carcinogenicity FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'ca'
SELECT T3.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T1.element = 'te'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
SELECT (COUNT(DISTINCT molecule_id) / (SELECT COUNT(DISTINCT molecule_id) FROM bond)) * 100 AS PercentTripleBond FROM bond WHERE bond_type = '#'
SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR047'
SELECT CASE WHEN T2.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS Carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM molecule WHERE molecule_id = 'TR151'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR151'
SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+'
SELECT atom_id FROM atom WHERE molecule_id BETWEEN 'TR010' AND 'TR050' AND element = 'c'
SELECT COUNT(atom_id) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = ' = '
SELECT COUNT(atom_id) FROM atom WHERE element = 'h' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT T2.molecule_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR00_1' AND T2.bond_type = 'TR00_1_2'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'carbon' AND T2.label = '-'
SELECT CAST(COUNT(DISTINCT T1.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule) AS REAL) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' AND T2.label = '+'
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM molecule WHERE molecule_id = 'TR124'
SELECT T1.atom_id FROM connected AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR186'
SELECT T2.bond_type FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.label = 'TR007_4_19'
SELECT T.element FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_id = 'TR001_2_4'
SELECT COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = ' = ' AND T2.molecule_id = 'TR006'
SELECT T1.label, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND (T2.element = 'cl' OR T2.element = 'c' OR T2.element = 'h' OR T2.element = 'o' OR T2.element = 's' OR T2.element = 'n' OR T2.element = 'p' OR T2.element = 'na' OR T2.element = 'br' OR T2.element = 'f' OR T2.element = 'i' OR T2.element = 'sn' OR T2.element = 'pb' OR T2.element = 'te' OR T2.element = 'ca')
SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.molecule_id = T2.bond_id WHERE T1.bond_type = '-'
SELECT T2.label, T1.element FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR000_2_3'
SELECT COUNT(bond_id) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl'
SELECT T1.atom_id, COUNT(T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = ' = ' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element != 's' OR b.bond_type != ' = ';
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4' AND T2.label = '+'
SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR005'
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'
SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '+'
SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'c' AND T1.label = '-'
SELECT SUM(CASE WHEN M.label = '+' AND A.element = 'Cl' THEN 1 ELSE 0 END) / COUNT(M.molecule_id) AS percentage FROM molecule AS M JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE A.element = 'Cl'
SELECT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_1_7'
SELECT COUNT(element) FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_3_4' )
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_2' OR T1.atom_id = 'TR000_4'
SELECT T1.element FROM atom AS T1 WHERE T1.atom_id = 'TR000_1' AND T1.element = 'cl'
SELECT CASE WHEN label = '+' THEN 'Carcinogenic' ELSE 'Non-carcinogenic' END AS Carcinogenic_Status FROM molecule WHERE molecule_id = 'TR000'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'
SELECT T2.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'Sulphur' AND T2.bond_type = ' = '
SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING COUNT(atom_id) > 5
SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '=' AND T1.molecule_id = 'TR024'
SELECT T2.label FROM molecule AS T2 INNER JOIN atom AS T1 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1
SELECT SUM(CASE WHEN T3.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT T3.molecule_id) AS percentage FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.element = 'h' AND T2.bond_type = '#'
SELECT COUNT(*) FROM molecule WHERE label = '+'
SELECT COUNT(*) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE m.molecule_id BETWEEN 'TR004' AND 'TR010' AND b.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-' AND T1.element NOT IN ('cl', 'pb', 'te')
SELECT COUNT(DISTINCT m.molecule_id) FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id JOIN connected c ON a.atom_id = c.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id JOIN bond b2 ON a2.molecule_id = b2.molecule_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE a.element = 'o' AND b.bond_type = ' = ' AND a2.element = 'o' AND b2.bond_type = ' = '
SELECT COUNT(DISTINCT T3.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'
SELECT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.bond_type = ' = ' AND T1.molecule_id = 'TR012'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE convertedManaCost > faceConvertedManaCost;
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'
SELECT T1.* FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'
SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'
SELECT T1.asciiName, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Sublime Epiphany' AND T2.number = '74s'
SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name, T1.artist, T1.isPromo ORDER BY COUNT(T2.uuid) DESC LIMIT 1
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM foreign_data AS T2 INNER JOIN cards AS T1 ON T1.uuid = T2.uuid
SELECT T1.name, T2.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT T1.type) FROM cards AS T1 WHERE T1.artist = 'Aaron Boyd'
SELECT T1.keywords FROM cards AS T1 WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(id) FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor\'s Chosen';
SELECT originalType FROM cards WHERE name = 'Ancestor\'s Chosen'
SELECT T2.language FROM cards AS T1 INNER JOIN sets AS T3 ON T1.setCode = T3.code INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(c.id) FROM cards c INNER JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'restricted' AND c.isTextless = 0
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'
SELECT COUNT(cards.id) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle';
SELECT T1.type FROM cards AS T1 WHERE T1.name = 'Benalish Knight'
SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight';
SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Phyrexian')
SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards
SELECT COUNT(*) FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'German' AND cards.isReprint = 1
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.isStorySpotlight = 1;
SELECT COUNT(id) FROM cards WHERE toughness = '99'
SELECT cards.name FROM cards WHERE cards.artist = 'Aaron Boyd'
SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT id FROM cards WHERE convertedManaCost = 0
SELECT T1.layout FROM cards AS T1 WHERE T1.keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT DISTINCT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Chinese Simplified')
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'
SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white'
SELECT T1.uuid, T2.language FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T2.uuid = T3.uuid WHERE T1.format = 'legacy'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
SELECT COUNT(*) AS num_cards, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal'
SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'OGW'
SELECT T1.name, T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20
SELECT name FROM cards WHERE originalType = 'Artifact' AND colors = 'B' AND EXISTS ( SELECT 1 FROM foreign_data WHERE foreign_data.uuid = cards.uuid )
SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND hasFoil = 1 AND cardKingdomFoilId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT T1.manaCost FROM cards AS T1 WHERE T1.layout = 'normal' AND T1.frameVersion = '2003' AND T1.borderColor = 'black' AND T1.availability IN ('paper', 'mtgo')
SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'
SELECT T.types, T.subtypes, T.supertypes FROM cards AS T WHERE T.availability = 'arena'
SELECT sets.code FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish'
SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary'
SELECT CAST(SUM(CASE WHEN T1.isStorySpotlight = 1 AND T1.isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.id FROM cards AS T1 WHERE T1.isStorySpotlight = 1 GROUP BY T1.id HAVING T1.isTextless = 0;
SELECT CAST(SUM(CASE WHEN T2.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Spanish' GROUP BY T1.name
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
SELECT COUNT(*) FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE ST.language = 'Portuguese (Brasil)' AND S.block = 'Commander'
SELECT cards.id FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types LIKE '%Creature%' AND legalities.status = 'legal'
SELECT DISTINCT T1.subtypes AS card_type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL UNION SELECT DISTINCT T1.supertypes AS card_type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.supertypes IS NOT NULL
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%' OR power IS NULL OR power = '*' AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards WHERE uuid IN (SELECT uuid FROM legalities WHERE format = 'pre-modern') AND uuid IN (SELECT uuid FROM rulings WHERE text = 'This is a triggered mana ability') AND side IS NULL;
SELECT T1.id FROM cards AS T1 WHERE T1.artist = 'Erica Yang' AND T1.availability = 'paper' AND T1.id IN (SELECT T2.uuid FROM legalities AS T2 WHERE T2.format = 'pauper')
SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.text = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Creature' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson' AND T2.language = 'French'
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10';
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'
SELECT CAST(COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'
SELECT CAST(SUM(CASE WHEN T2.language = 'French' AND (T1.power IS NULL OR T1.power = '*') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T1.power IS NULL OR T1.power = '*' THEN 1 ELSE 0 END) FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' AND T2.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.language) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code
SELECT T1.availability FROM cards AS T1 WHERE T1.artist = 'Daren Bader'
SELECT COUNT(id) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000
SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3;
SELECT F.language FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE F.multiverseid = 149934
SELECT T1.id FROM cards AS T1 WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId, T1.cardKingdomId LIMIT 3
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) / COUNT(isTextless) * 100 FROM cards
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND name NOT IN (SELECT name FROM cards WHERE side IS NOT NULL)
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name LIMIT 3;
SELECT language FROM set_translations WHERE setCode = 'ARC' AND mcmName = 'Archenemy'
SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5
SELECT language, type FROM sets WHERE id = 206
SELECT T1.id, T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.name LIMIT 2
SELECT T2.id FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'
SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' AND T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid;
SELECT COUNT(*) FROM sets WHERE isOnlineOnly = 0 AND isForeignOnly = 1 AND language = 'Japanese' AND (mtgoCode IS NULL OR mtgoCode = '')
SELECT COUNT(id) FROM cards WHERE borderColor = 'black'
SELECT COUNT(id) AS total_cards, id FROM cards WHERE frameEffects = 'extendedart'
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 174
SELECT name FROM sets WHERE code = 'ALL'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'A Pedra Fellwar';
SELECT code FROM sets WHERE releaseDate = '2007-07-13'
SELECT T1.baseSetSize, T1.code FROM sets AS T1 WHERE T1.block = 'Masques' OR T1.block = 'Mirage'
SELECT code FROM sets WHERE type = 'expansion'
SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'Boros'
SELECT T2.language, T2.flavorText, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie'
SELECT CAST(SUM(IIF(T1.convertedManaCost = 10, 1, 0)) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'
SELECT code FROM sets WHERE type = 'expansion commander'
SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'abzan'
SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'Azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen';
SELECT COUNT(id) FROM cards WHERE borderColor = 'White' AND (power = '*' OR power IS NULL)
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT T1.subtypes, T1.supertypes FROM cards AS T1 WHERE T1.name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'Black' AND availability LIKE '%arena,mtgo%'
SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor\'s Chosen' AND T2.language = 'Italian'
SELECT COUNT(translation) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE id IN (SELECT id FROM cards WHERE name = 'Angel of Mercy'))
SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor's Chosen' AND T2.language = 'Korean'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.code WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'
SELECT baseSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE translation = 'Hauptset Zehnte Edition'
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Simplified Chinese';
SELECT T1.name, T2.mtgoCode FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy' AND T2.mtgoCode IS NOT NULL;
SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen')
SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT s.name FROM cards AS c JOIN sets AS s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie' AND s.isForeignOnly = 1;
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T2.translation IS NOT NULL AND T1.baseSetSize < 10
SELECT COUNT(id) FROM cards WHERE setCode = 'CSP' AND borderColor = 'black'
SELECT name FROM cards WHERE setCode = 'CSP' ORDER BY convertedManaCost DESC LIMIT 1
SELECT artist FROM cards WHERE name = 'Coldsnap' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')
SELECT * FROM cards WHERE name = 'Coldsnap' AND number = 4;
SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power = '*' OR T1.power IS NULL)
SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'
SELECT language FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND flavorText IS NOT NULL;
SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.name = 'Ancestor''s Chosen'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code INNER JOIN set_translations AS T4 ON T3.code = T4.setCode WHERE T3.name = 'Coldsnap' AND T4.language = 'Italian'
SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = 'Coldsnap' AND T2.language = 'Italian' ORDER BY T1.convertedManaCost DESC LIMIT 1;
SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.name = 'Coldsnap' THEN 1 ELSE 0 END) FROM cards AS T1 WHERE T1.name = 'Coldsnap'
SELECT T1.code FROM sets AS T1 WHERE T1.releaseDate = '2017-07-14'
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT T1.mcmName FROM sets AS T1 WHERE T1.releaseDate = '2017-06-09'
SELECT T.type FROM sets AS T WHERE T.name LIKE '%From the Vault: Lore%'
SELECT T2.parentCode FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Commander 2014 Oversized'
SELECT T1.name, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'
SELECT releaseDate FROM sets WHERE code = (SELECT setCode FROM cards WHERE name = 'Evacuation')
SELECT baseSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE translation = 'Rinascita di Alara'
SELECT T2.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'HuitiÃ¨me Ã©dition'
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = "Tendo Ice Bridge" AND T2.language = 'French'
SELECT COUNT(translation) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011') AND translation IS NOT NULL;
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese'
SELECT name FROM cards WHERE setCode = 'JOU' ORDER BY convertedManaCost DESC LIMIT 1
SELECT releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de frío'
SELECT sets.type FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards WHERE name = 'World Championship Decks 2004' AND convertedManaCost = 3;
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Chinese Simplified' AND T1.name = 'Mirrodin'
SELECT CAST(SUM(CASE WHEN T2.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.language = 'Japanese' THEN 1 ELSE 0 END) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)'
SELECT DISTINCT T1.availability FROM cards AS T1 WHERE T1.artist = 'Aleksi Briclot' AND T1.isTextless = 1
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);
SELECT T1.artist FROM cards AS T1 WHERE T1.side IS NULL ORDER BY T1.convertedManaCost DESC LIMIT 1
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(id) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'A'
SELECT T1.id FROM sets AS T1 WHERE T1.type = 'commander' AND T1.totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander' AND name NOT LIKE '%Alchemy%')
SELECT name FROM cards WHERE format = 'duel' ORDER BY convertedManaCost DESC LIMIT 10
SELECT MIN(c.originalReleaseDate) AS Oldest_Release_Date, c.name AS Card_Name, l.format AS Legal_Play_Format FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' ORDER BY c.originalReleaseDate ASC LIMIT 1
SELECT COUNT(t1.id) FROM cards AS t1 INNER JOIN foreign_data AS t2 ON t1.uuid = t2.uuid WHERE t1.artist = 'Volkan Baga' AND t2.language = 'French'
SELECT COUNT(*) FROM cards WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND id IN (SELECT id FROM legalities WHERE format = 'play' AND status = 'Legal')
SELECT L.format, C.name FROM legalities AS L INNER JOIN cards AS C ON L.uuid = C.uuid WHERE L.status = 'banned' GROUP BY L.format ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond'
SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid GROUP BY T1.artist ORDER BY COUNT(T1.artist) ASC LIMIT 1
SELECT T1.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND (T1.hasContentWarning = 1 OR T1.publisher_name = 'Wizards of the Coast') AND T2.format = 'legacy'
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned'
SELECT AVG(id), MAX(COUNT(language)) FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
SELECT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'
SELECT T1.uuid FROM legalities AS T1 WHERE T1.format = 'oldschool' AND (T1.status = 'banned' OR T1.status = 'restricted')
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Kev Walker' ORDER BY T1.date DESC
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Hour of Devastation' AND T2.status = 'legal'
SELECT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language NOT LIKE '%Japanese%' AND T2.language = 'Korean'
SELECT T1.frameVersion, T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' UNION SELECT T1.frameVersion, T2.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'banned'
SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1
SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013'
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT T1.DisplayName FROM posts AS T2 INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id WHERE T2.Title = 'Eliciting priors from experts'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.FavoriteCount DESC LIMIT 1
SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT MAX(p.AnswerCount) AS MaxAnswerCount FROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Title = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL;
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL;
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20
SELECT T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Eliciting priors from experts'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'
SELECT T1.Body FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId ORDER BY T2.Count DESC LIMIT 1;
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011'
SELECT U.DisplayName FROM users U INNER JOIN badges B ON U.Id = B.UserId GROUP BY U.Id ORDER BY COUNT(B.Id) DESC LIMIT 1
SELECT AVG(p.Score) FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie'
SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T1.DisplayName) AS average_badges FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Views > 200;
SELECT COUNT(CASE WHEN T1.Age > 65 THEN 1 ELSE NULL END) * 100 / COUNT(T2.Id) AS Percentage FROM posts AS T2 INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id WHERE T2.Score > 20;
SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'
SELECT T2.Title FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId ORDER BY T2.Score DESC LIMIT 1;
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910
SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 3025 AND T2.CreationDate = '2014-04-23 20:29:39.0'
SELECT Text FROM comments WHERE PostId = 107829 AND CommentCount = 1
SELECT T1.ClosedDate FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = '23853' AND T2.CreationDate = '2013-07-12 09:08:18.0'
SELECT T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 65041
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM votes WHERE Id = 6347)
SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%data visualization%'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT COUNT(DISTINCT post.Id) / COUNT(DISTINCT votes.Id) AS times FROM posts AS post INNER JOIN users AS user ON post.OwnerUserId = user.Id INNER JOIN votes AS votes ON post.Id = votes.PostId WHERE user.Id = 24;
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT Text FROM comments WHERE Score = 17 
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'
SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM comments WHERE Text = 'thank you user93!')
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'A Lion'
SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'
SELECT DisplayName FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Necromancer') LIMIT 10;
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT T2.Title FROM posts AS T2 INNER JOIN users AS T1 ON T2.LastEditorUserId = T1.Id WHERE T1.DisplayName = 'Vebjorn Ljosa'
SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'
SELECT T2.Text FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.UserId = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
SELECT SUM(T1.BountyAmount) FROM posts AS T1 WHERE T1.Title LIKE '%data%'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T2.BountyAmount = 50 AND T3.Title LIKE '%variance%'
SELECT AVG(T1.ViewCount), T2.Title, T2.Score, T3.Text FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId LEFT JOIN comments AS T3 ON T1.Id = T3.PostId WHERE T2.TagName = 'humor'
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1
SELECT T1.Id FROM users AS T1 ORDER BY T1.Views ASC LIMIT 1
SELECT COUNT(UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'
SELECT COUNT(UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5
SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'New York' AND B.Name IN ('Supporter', 'Teacher')
SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 1
SELECT UserId FROM postHistory INNER JOIN posts ON postHistory.PostId = posts.Id WHERE posts.ViewCount >= 1000 GROUP BY UserId HAVING COUNT(DISTINCT postHistory.PostId) = 1;
SELECT U.UserId, B.Name FROM comments AS C JOIN badges AS B ON C.UserId = B.UserId GROUP BY C.UserId ORDER BY COUNT(C.Id) DESC LIMIT 1;
SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher'
SELECT ((CAST(SUM(CASE WHEN strftime('%Y', Date) = '2010' AND Name = 'Students' THEN 1 ELSE 0 END) AS REAL) / COUNT(Name)) - (CAST(SUM(CASE WHEN strftime('%Y', Date) = '2011' AND Name = 'Students' THEN 1 ELSE 0 END) AS REAL) / COUNT(Name))) * 100 FROM badges
SELECT DISTINCT PostHistoryTypeId FROM postHistory WHERE PostId = 3720 SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720
SELECT posts.Id, posts.Title, posts.ViewCount FROM postLinks JOIN posts ON postLinks.PostId = posts.Id WHERE postLinks.RelatedPostId = 61217 
SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395
SELECT T1.Id AS PostID, T1.OwnerUserId AS UserID FROM posts AS T1 WHERE T1.Score > 60
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreationDate) = '2011'
SELECT SUM(UpVotes) / COUNT(UserId), SUM(Age) / COUNT(UserId) FROM users WHERE Id IN (SELECT UserId FROM posts GROUP BY UserId HAVING COUNT(UserId) > 10)
SELECT COUNT(UserId) FROM badges WHERE Name = 'Announcer'
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'
SELECT COUNT(Id) FROM posts WHERE Score = 10
SELECT b.Name FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'
SELECT b.Date FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Location = 'Rochester, NY'
SELECT COUNT(T1.UserId) * 100 / COUNT(T2.Id) AS percentage FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Teacher'
SELECT COUNT(CASE WHEN T1.Age BETWEEN 13 AND 18 THEN 1 END) * 100 / COUNT(T1.Id) AS percentage FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer'
SELECT T2.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreaionDate = '2010-07-19 19:19:56.0'
SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CreaionDate = '2010-07-19 19:37:33.0')
SELECT Age FROM users WHERE Location = 'Vienna, Austria'
SELECT COUNT(b.Id) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT SUM(views) FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Date = '2010-07-19 19:39:08.0')
SELECT Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users));
SELECT b.Name FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'Sharpie'
SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'
SELECT DisplayName FROM users WHERE Id = 30
SELECT COUNT(*) FROM users WHERE Location = 'New York'
SELECT COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2010
SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN 1 END) AS REAL) / COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN 1 END) FROM votes;
SELECT TagName FROM tags WHERE Id IN ( SELECT DISTINCT ExcerptPostId FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'John Stauffer' ) )
SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Daniel Vassallo'
SELECT COUNT(*) FROM votes AS v INNER JOIN users AS u ON v.UserId = u.Id WHERE u.DisplayName = 'Harlan'
SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1
SELECT MAX(SUM(ViewCount)) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder') GROUP BY OwnerUserId
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Matt Parker') AND Id IN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(*) > 4)
SELECT COUNT(C1.Id) FROM comments AS C1 INNER JOIN users AS U1 ON C1.UserId = U1.Id WHERE U1.DisplayName = 'Neil McGuigan' AND C1.Score < 60
SELECT T2.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId LEFT JOIN comments AS T3 ON T2.Id = T3.PostId INNER JOIN tags AS T4 ON T2.Tags LIKE '%' || T4.TagName || '%' WHERE T1.DisplayName = 'Mark Meckes' AND T3.Id IS NULL;
SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'
SELECT CAST(SUM(CASE WHEN T2.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PostId) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Community')
SELECT SUM(CASE WHEN T1.OwnerDisplayName = 'Mornington' THEN T2.ViewCount ELSE 0 END) - SUM(CASE WHEN T1.OwnerDisplayName = 'Amos' THEN T2.ViewCount ELSE 0 END) AS Difference FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id;
SELECT COUNT(DISTINCT b.UserId) FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE b.Name = 'commentator' AND year(b.Date) = 2014;
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT T1.DisplayName, T1.Age FROM users AS T1 WHERE T1.Views = (SELECT MAX(Views) FROM users)
SELECT P.LastEditDate, P.LastEditorUserId FROM posts AS P WHERE P.Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60
SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.Location = 'North Pole'
SELECT U.DisplayName, U.WebsiteUrl FROM posts P JOIN users U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount > 150;
SELECT COUNT(*) AS post_history_counts, MAX(CreationDate) AS last_edit_date FROM postHistory WHERE PostId = (SELECT Id FROM posts WHERE Title = 'What is the best introductory Bayesian statistics textbook?')
SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers'
SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'
SELECT T1.Id AS PostID, T2.Name AS BadgeName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Samuel' AND YEAR(T1.CreationDate) = 2013 AND YEAR(T2.Date) = 2013;
SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)
SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.Id WHERE T3.TagName = 'hypothesis-testing'
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T2.Title = 'What are principal component scores?'
SELECT OwnerDisplayName FROM posts WHERE Id = (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL))
SELECT U.DisplayName, U.WebsiteUrl FROM users AS U INNER JOIN votes AS V ON U.Id = V.UserId WHERE V.VoteTypeId = 8 AND V.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;
SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT MAX(Age) FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(DISTINCT p.Id) FROM posts p JOIN votes v ON p.Id = v.PostId WHERE YEAR(v.CreationDate) = 2011 AND v.BountyAmount = 50;
SELECT Id FROM users ORDER BY Age ASC LIMIT 1
SELECT T1.Score FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' ORDER BY T2.Count DESC LIMIT 1
SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE YEAR(T1.CreationDate) = 2010 AND T2.AnswerCount <= 2
SELECT MAX(FavoriteCount) FROM posts WHERE Id IN (SELECT PostId FROM votes WHERE UserId = 1465)
SELECT T6.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id INNER JOIN posts AS T4 ON T1.PostId = T4.Id INNER JOIN posts AS T5 ON T1.RelatedPostId = T5.Id INNER JOIN posts AS T6 ON T1.PostId = T6.Id ORDER BY T1.CreationDate LIMIT 1
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.Id ORDER BY COUNT(T2.Name) DESC LIMIT 1
SELECT MIN(V.CreationDate) FROM votes AS V INNER JOIN users AS U ON V.UserId = U.Id WHERE U.DisplayName = 'chl'
SELECT MIN(posts.CreaionDate) AS First_Post_Date FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId ORDER BY users.Age LIMIT 1
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' ORDER BY T2.Date LIMIT 1
SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4
SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND YEAR(CreationDate) = 2010
SELECT posts.Id, posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1
SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.Score DESC LIMIT 1
SELECT AVG(P.Score) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Stephen Turner'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ViewCount > 20000 AND STRFTIME('%Y', T2.CreationDate) = '2011'
SELECT T1.Id, T1.OwnerDisplayName FROM posts AS T1 WHERE year(T1.CreationDate) = 2010 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T1.CreationDate = '2011' AND T2.Reputation > 1000 THEN T1.Id ELSE NULL END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id
SELECT CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(Id) FROM users;
SELECT SUM(ViewCount) AS TotalViews, T1.DisplayName FROM posts AS T1 WHERE T1.Title = 'Computer Game Datasets' ORDER BY T1.LastEditDate DESC LIMIT 1
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
SELECT DisplayName, Location FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Id = 183)
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') ORDER BY Date DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT strftime('%J', b.Date) - strftime('%J', u.CreationDate) AS TimeToGetBadge FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'Zolomon'
SELECT COUNT(posts.Id) AS num_posts, COUNT(comments.Id) AS num_comments FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId LEFT JOIN comments ON users.Id = comments.UserId WHERE CreationDate = (SELECT MAX(CreationDate) FROM users)
SELECT C.Text, C.UserDisplayName FROM posts P JOIN comments C ON P.Id = C.PostId WHERE P.Title = 'Analysing wind data with R' AND C.CreationDate = (SELECT MAX(CreationDate) FROM comments WHERE PostId = P.Id)
SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol'
SELECT COUNT(*) FROM posts WHERE Id IN (SELECT Id FROM tags WHERE TagName = 'careers')
SELECT Reputation, ViewCount FROM users WHERE DisplayName = 'Jarrod Dixon'
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') UNION SELECT COUNT(*) FROM posts WHERE ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data' AND PostTypeId = 2)
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
SELECT COUNT(Id) FROM votes WHERE BountyAmount >= 30
SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(T2.Id) FROM Posts AS T2 INNER JOIN Users AS T3 ON T2.OwnerUserId = T3.Id WHERE T3.Reputation = (SELECT MAX(Reputation) FROM Users)) FROM Posts AS T1 INNER JOIN Users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Reputation = (SELECT MAX(Reputation) FROM Users) AND T1.Score >= 50
SELECT COUNT(Id) FROM posts WHERE Score < 20;
SELECT COUNT(Id) FROM tags WHERE Id < 15 AND Count <= 20
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
SELECT T1.Reputation, T1.UpVotes FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'fine, you win :)'
SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'How can I adapt ANOVA for binary data?'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150 ORDER BY T2.Score DESC LIMIT 1
SELECT U.CreationDate, U.Age FROM users U INNER JOIN comments C ON U.Id = C.UserId WHERE C.Text LIKE '%http%'
SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5;
SELECT COUNT(T2.Score) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.CommentCount = 1 AND T2.Score = 0
SELECT COUNT(DISTINCT T3.Id) FROM Products AS T1 INNER JOIN Comments AS T2 ON T1.Id = T2.PostId INNER JOIN Users AS T3 ON T2.UserId = T3.Id WHERE T2.Score = 0 AND T3.Age = 40
SELECT T1.Id AS PostID, T2.Text AS Comment FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item'
SELECT U.UpVotes FROM users U JOIN comments C ON U.Id = C.UserId WHERE C.Text = 'R is also lazy evaluated.'
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
SELECT UserDisplayName FROM comments WHERE Score BETWEEN 1 AND 5 AND UserId IN (SELECT Id FROM users WHERE DownVotes = 0)
SELECT SUM(CASE WHEN T1.UpVotes = 0 THEN 1.0 ELSE 0 END) / COUNT(T2.UserId) AS percentage FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 5 AND 10
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength') AND T1.height_cm > 200
SELECT full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY full_name HAVING COUNT(full_name) > 15
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T1.superhero_name = 'Apocalypse'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN superpower AS T4 ON T1.id = T4.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond' AND T4.power_name = 'Agility'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT s.full_name FROM superhero s INNER JOIN publisher p ON s.publisher_id = p.id WHERE s.height_cm = (SELECT MAX(height_cm) FROM superhero) AND p.publisher_name = 'Marvel Comics'
SELECT P.publisher_name FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE S.superhero_name = 'Sauron'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'
SELECT AVG(height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics';
SELECT CAST(SUM(IIF(T3.power_name = 'Super Strength', 1, 0)) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT P.publisher_name FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE A.attribute_name = 'Speed' ORDER BY HA.attribute_value ASC LIMIT 1
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(*) FROM superhero AS s INNER JOIN colour AS c ON s.hair_colour_id = c.id WHERE c.colour = 'Blond'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1
SELECT race.race FROM superhero JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(T1.hero_id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100
SELECT T.superhero_name FROM (SELECT T1.superhero_name, COUNT(T2.power_id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1) T
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT CAST(SUM(CASE WHEN T1.alignment = 'Bad' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT ABS(SUM(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS difference FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' OR T2.publisher_name = 'DC Comics'
SELECT T1.id FROM publisher AS T1 WHERE T1.publisher_name = 'Star Trek'
SELECT AVG(attribute_value) FROM hero_attribute
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T4.gender = 'Male' LIMIT 5;
SELECT superhero_name FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1
SELECT sp.power_name FROM superhero AS s INNER JOIN hero_power AS hp ON s.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE s.id = 56;
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169
SELECT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'human'
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)
SELECT CAST(COUNT(CASE WHEN T1.publisher_id = 13 THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM superhero AS T2 INNER JOIN publisher AS T1 ON T2.publisher_id = T1.id WHERE T2.height_cm BETWEEN 150 AND 180;
SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'M' AND T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'M'))
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T1.power_id ORDER BY COUNT(T1.power_id) DESC LIMIT 1
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Abomination'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.id = 1
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'stealth'
SELECT T2.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT CAST(COUNT(T1.id) AS REAL) / SUM(CASE WHEN T1.skin_colour_id IS NULL THEN 1 ELSE 0 END) FROM superhero AS T1
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'durability' AND T2.publisher_name = 'Dark Horse Comics' GROUP BY T1.superhero_name ORDER BY MAX(T3.attribute_value) DESC LIMIT 1
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'
SELECT T1.superhero_name, T2.colour AS eye_colour, T3.colour AS hair_colour, T4.colour AS skin_colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN colour AS T4 ON T1.skin_colour_id = T4.id INNER JOIN gender AS T5 ON T1.gender_id = T5.id INNER JOIN publisher AS T6 ON T1.publisher_id = T6.id WHERE T5.gender = 'Female' AND T6.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
SELECT T1.race FROM superhero AS T1 WHERE T1.superhero_name = 'A-Bomb'
SELECT CAST(SUM(CASE WHEN T3.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.gender = 'Female'
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
SELECT superhero_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE power_name = 'Adaptation'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Hunter Zolomon'
SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Vampire'
SELECT superhero_name FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))
SELECT T3.race, T4.alignment FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Cameron Hicks'
SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' AND T4.publisher_name = 'Marvel Comics' THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN T4.publisher_name = 'Marvel Comics' THEN 1 END) FROM superhero AS T1 INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')
SELECT SUM(CASE WHEN T1.full_name = 'Emil Blonsky' THEN T1.weight_kg ELSE 0 END) - SUM(CASE WHEN T1.full_name = 'Charles Chandler' THEN T1.weight_kg ELSE 0 END) FROM superhero AS T1
SELECT superhero.superhero_name, AVG(superhero.height_cm) FROM superhero GROUP BY superhero.superhero_name;
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3
SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'blue' AND T3.colour = 'brown'
SELECT T1.publisher_name FROM superhero AS T2 INNER JOIN publisher AS T1 ON T2.publisher_id = T1.id WHERE T2.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(id) FROM superhero WHERE publisher_id IS NULL OR publisher_id = 1
SELECT CAST(COUNT(CASE WHEN T2.colour = 'blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id
SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero
SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1
SELECT id FROM superpower WHERE power_name = 'cryokinesis'
SELECT T.superhero_name FROM superhero AS T WHERE T.id = 294
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL;
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Karen Beecher-Duncan'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr';
SELECT T1.race FROM superhero AS T1 WHERE T1.weight_kg = 108 AND T1.height_cm = 188
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38
SELECT Race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)
SELECT A.alignment, B.power_name FROM superhero AS A INNER JOIN alignment AS C ON A.alignment_id = C.id INNER JOIN hero_power AS D ON A.id = D.hero_id INNER JOIN superpower AS B ON D.power_id = B.id WHERE A.superhero_name = 'Atom IV'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN (SELECT id FROM superhero WHERE alignment_id = 3)
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE HA.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2
SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.colour = 'blue' AND T3.gender = 'male'
SELECT CAST(SUM(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM superhero WHERE alignment_id = 2;
SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC;
SELECT G.gender FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE SP.power_name = 'Phoenix Force'
SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') ORDER BY weight_kg DESC LIMIT 1;
SELECT AVG(height_cm) FROM superhero WHERE race_id <> (SELECT id FROM race WHERE race = 'Human') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')
SELECT COUNT(T1.hero_id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = 100
SELECT (SUM(CASE WHEN T.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS superhero_difference FROM superhero AS S INNER JOIN publisher AS T ON S.publisher_id = T.id;
SELECT T2.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.height_cm DESC LIMIT 1
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T4.publisher_name) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'George Lucas'
SELECT COUNT(CASE WHEN T1.alignment = 'Good' THEN 1 ELSE NULL END) * 100.0 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)
SELECT full_name FROM superhero WHERE superhero_name = 'Alien'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'brown'
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40;
SELECT AVG(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')
SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T1.superhero_name = 'Blackwulf'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm > 0.8 * (SELECT AVG(height_cm) FROM superhero)
SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 18 AND T1.q1 = (SELECT MAX(q1) FROM qualifying WHERE raceId = 18 LIMIT 5)
SELECT D.surname FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverId = Q.driverId WHERE Q.raceId = 19 AND Q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)
SELECT T4.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany';
SELECT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = 'Renault'
SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.country NOT IN ('Asia', 'Europe')
SELECT T4.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'
SELECT lat, lng FROM circuits WHERE country = 'Australia' AND name = 'Australian Grand Prix';
SELECT T1.url FROM circuits AS T1 WHERE T1.name = 'Sepang International Circuit'
SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit';
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix'
SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 24 AND T1.points = 1
SELECT q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354
SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 355 AND q2 = '0:01:40')
SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 = '0:01:54'
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL
SELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1
SELECT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time = '0:01:27'
SELECT d.nationality FROM results AS r INNER JOIN drivers AS d ON r.driverId = d.driverId WHERE r.raceId = 933 AND r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933)
SELECT location, lat, lng FROM circuits WHERE name = 'Malaysian Grand Prix'
SELECT T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = (SELECT MAX(points) FROM constructorStandings WHERE raceId = 9)
SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi')
SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '0:01:15' AND T1.raceId = 347
SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 45 AND T1.q3 = '0:01:33'
SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Bruce' AND T2.surname = 'McLaren' AND T1.raceId = 743;
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'San Marino Grand Prix' AND T3.year = 2006 AND T1.position = 2
SELECT T2.year FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901
SELECT COUNT(driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND position IS NOT NULL
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1
SELECT drivers.forename || ' ' || drivers.surname AS "Driver Name" FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.raceId = 348 ORDER BY lapTimes.time LIMIT 1
SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT CAST((T1.fastestLapSpeed - T2.fastestLapSpeed) * 100 / T1.fastestLapSpeed AS REAL) FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = 853 AND T2.raceId = 854 WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')
SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T1.driverId END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'
SELECT MIN(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Singapore')
SELECT COUNT(raceId) FROM races WHERE year = 2005; SELECT name FROM races WHERE year = 2005 ORDER BY raceId DESC;
SELECT races.name FROM races WHERE date = (SELECT MIN(date) FROM races) OR (YEAR(date) = (SELECT YEAR(MIN(date)) FROM races) AND MONTH(date) = (SELECT MONTH(MIN(date)) FROM races))
SELECT T1.name, T1.date FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T2.year = 1999 ORDER BY T1.round DESC LIMIT 1
SELECT year FROM seasons WHERE year = (SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1);
SELECT T1.name FROM races AS T1 WHERE T1.year = 2017 AND T1.name NOT IN (SELECT T2.name FROM races AS T2 WHERE T2.year = 2000)
SELECT T2.country, T1.name, T1.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix' ORDER BY T1.year LIMIT 1
SELECT MAX(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Brands Hatch' AND T1.name = 'British Grand Prix'
SELECT COUNT(T1.year) AS Seasons_hosted FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name = 'British Grand Prix'
SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2010 ORDER BY T1.position;
SELECT D.forename || ' ' || D.surname AS full_name FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId GROUP BY D.driverId ORDER BY SUM(R.points) DESC LIMIT 1;
SELECT T2.forename, T2.surname, T1.points FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2017 AND T3.name = 'Chinese Grand Prix' ORDER BY T1.points DESC LIMIT 3
SELECT T2.forename, T2.surname, T3.name, T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.time = (SELECT MIN(time) FROM lapTimes)
SELECT AVG(milliseconds) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Sebastian' AND surname = 'Vettel') AND raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Chinese Grand Prix')
SELECT CAST(COUNT(CASE WHEN T2.surname = 'Hamilton' AND T1.year >= 2010 AND T3.position > 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN T2.surname = 'Hamilton' AND T1.year >= 2010 THEN 1 ELSE NULL END) FROM races AS T1 INNER JOIN drivers AS T2 ON T1.raceId = T2.driverId INNER JOIN results AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T1.year >= 2010
SELECT D.forename, D.surname, D.nationality, AVG(DS.points) AS avg_points FROM drivers AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId GROUP BY D.driverId ORDER BY COUNT(DS.wins) DESC LIMIT 1
SELECT MAX(2022 - STRFTIME('%Y', dob) + 1) AS Age, forename || ' ' || surname AS Name FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
SELECT T1.name FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year BETWEEN 1990 AND 2000 GROUP BY T1.name HAVING COUNT(T2.raceId) = 4;
SELECT T2.name AS circuit_name, T2.location AS circuit_location, T3.name AS race_name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T1.year = T3.year WHERE T2.country = 'USA' AND T1.year = 2006
SELECT T2.name AS race_name, T3.name AS circuit_name, T3.location FROM races AS T1 INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE strftime('%m', T1.date) = '09' AND strftime('%Y', T1.date) = '2005';
SELECT T2.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Alex' AND T1.surname = 'Yoong' AND T2.position < 10;
SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN drivers AS T4 ON T1.driverId = T4.driverId WHERE T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T1.position = 1 AND T3.name = 'Sepang International Circuit'
SELECT T1.name, T2.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') ORDER BY T2.milliseconds LIMIT 1;
SELECT CAST(SUM(T1.points) AS REAL) / COUNT(T1.resultId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Eddie' AND T2.surname = 'Irvine' AND T1.raceId IN (SELECT raceId FROM races WHERE year = 2000)
SELECT T4.name, T3.points FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T3.year LIMIT 1;
SELECT races.name, circuits.country FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date;
SELECT MAX(T1.laps) AS most_laps, T2.name AS race_name, T2.year, T3.location AS circuit_location FROM races AS T2 INNER JOIN results AS T1 ON T2.raceId = T1.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId GROUP BY T2.name, T2.year, T3.location ORDER BY most_laps DESC LIMIT 1
SELECT CAST(SUM(IIF(T1.country = 'Germany', 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany' AND T1.name = 'European Grand Prix'
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
SELECT name FROM circuits WHERE lat = (SELECT MAX(lat) FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring'))
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)
SELECT COUNT(driverId) FROM drivers WHERE code IS NULL
SELECT T1.nationality FROM drivers AS T1 WHERE T1.dob = (SELECT MIN(dob) FROM drivers)
SELECT surname FROM drivers WHERE nationality = 'Italian'
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'
SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';
SELECT r.url FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE c.name = 'Silverstone Circuit'
SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year >= 2010 AND T1.year < 2020 AND T2.location = 'Abu Dhabi';
SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy' AND T1.name = 'Formula_1'
SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Barcelona-Catalunya'
SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T2.year = T3.year WHERE T2.name = 'Spanish Grand Prix' AND T3.year = 2009
SELECT MIN(fastestLapTime) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE fastestLapSpeed != '')
SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.position = 1
SELECT T4.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1
SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT T2.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT T1.positionOrder FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT forename, surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.grid = 4
SELECT COUNT(driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL;
SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 2;
SELECT T2.forename, T2.surname, T2.url FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.position = 1 AND T1.time LIKE '__:__:__.___'
SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix';
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T1.time IS NOT NULL
SELECT SUM(points) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT AVG(SUBSTR(fastestLapTime, 1, 2) * 60 + SUBSTR(fastestLapTime, 4, 2) + SUBSTR(fastestLapTime, 7) / 1000) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT CAST(COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE NULL END) AS REAL) / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix';
SELECT (CAST((j.milliseconds - i.milliseconds) AS REAL) / i.milliseconds) * 100 FROM results i JOIN results j ON i.raceId = j.raceId WHERE i.position = 1 AND j.position = (SELECT MAX(position) FROM results WHERE raceId = i.raceId) AND i.time IS NOT NULL AND j.time IS NOT NULL AND i.raceId IN (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'
SELECT lat, lng FROM circuits WHERE country = 'USA'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND SUBSTR(dob, 1, 4) > 1980
SELECT AVG(points) FROM constructorResults JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE nationality = 'British'
SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1
SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0
SELECT COUNT(T1.constructorId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'Japanese' AND T1.points = 0 GROUP BY T1.constructorId HAVING COUNT(T1.raceId) = 2
SELECT T2.name AS constructorName FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1;
SELECT COUNT(DISTINCT constructorId) FROM constructors INNER JOIN results ON constructors.constructorId = results.constructorId INNER JOIN races ON results.raceId = races.raceId INNER JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE constructors.nationality = 'French' AND lapTimes.lap > 50;
SELECT CAST(SUM(CASE WHEN T2.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009 AND T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year BETWEEN 2007 AND 2009
SELECT T1.year, AVG(strftime('%s', T2.time)) FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T3.position = 1 AND T3.time IS NOT NULL GROUP BY T1.year
SELECT forename, surname FROM drivers WHERE year(dob) > 1975 AND driverId IN (SELECT driverId FROM results WHERE position = 2)
SELECT COUNT(driverId) FROM results WHERE driverId IN (SELECT driverId FROM drivers WHERE nationality = 'Italian') AND time IS NULL;
SELECT forename, surname FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE fastestLap = 1 ORDER BY milliseconds ASC LIMIT 1)
SELECT T2.fastestLap FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 AND T1.year = 2009;
SELECT AVG(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT races.name, seasons.year FROM races JOIN seasons ON races.year = seasons.year JOIN results ON races.raceId = results.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds LIMIT 1;
SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', dob) < '1985' AND laps > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(driverId) FROM drivers WHERE STRFTIME('%Y', dob) < '1985' AND STRFTIME('%Y', dob) BETWEEN '2000' AND '2005';
SELECT COUNT(driverId) FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId WHERE D.nationality = 'French' AND L.milliseconds < 120000
SELECT driverRef FROM drivers WHERE nationality = 'America'
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18
SELECT T1.driverId, T1.forename, T1.surname, T1.dob, T1.nationality FROM drivers AS T1 ORDER BY T1.dob DESC LIMIT 3 SELECT COUNT(T1.driverId) FROM drivers AS T1 WHERE T1.nationality = 'Netherlandic' AND T1.driverId IN (SELECT T1.driverId FROM drivers AS T1 ORDER BY T1.dob DESC LIMIT 3)
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Australian' AND strftime('%Y', dob) = '1980'
SELECT forename, surname, MIN(time) FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY forename, surname ORDER BY MIN(time) LIMIT 3
SELECT T1.driverRef FROM drivers AS T1 WHERE T1.nationality = 'German' ORDER BY T1.dob LIMIT 1
SELECT driverId, code FROM drivers WHERE STRFTIME('%Y', dob) = '1971' AND driverId IN (SELECT driverId FROM results WHERE fastestLapTime IS NOT NULL)
SELECT forename, surname FROM drivers WHERE nationality = 'Spanish' AND year(dob) < 1982 ORDER BY time DESC LIMIT 10
SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.milliseconds DESC LIMIT 1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5
SELECT COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.statusId = 2 AND T1.time IS NOT NULL AND T2.raceId > 50 AND T2.raceId < 100
SELECT COUNT(circuitId), location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng
SELECT T1.round FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL GROUP BY T1.round ORDER BY COUNT(T2.resultId) DESC LIMIT 1
SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 23 AND T2.q2 IS NOT NULL
SELECT T1.name, T2.date, T2.time FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MAX(year(dob)) FROM drivers) ORDER BY T2.raceId LIMIT 1
SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'American' AND T2.statusId = 2;
SELECT T2.name, T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Italian' ORDER BY T1.points DESC LIMIT 1
SELECT T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.wins = (SELECT MAX(wins) FROM constructorStandings)
SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.name = 'French Grand Prix' AND T2.laps >= 3 ORDER BY T2.time DESC LIMIT 1
SELECT T2.name AS race_name, T1.fastestLapTime AS fastest_lap_time_milliseconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLap = 1 ORDER BY T1.milliseconds ASC LIMIT 1
SELECT AVG(CAST(REPLACE(SUBSTR(T1.fastestLapTime, 1, INSTR(T1.fastestLapTime, '\\') - 1), ':', '') AS REAL)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank < 11
SELECT T2.forename, T2.surname FROM (SELECT driverId, AVG(duration) AS avg_duration FROM pitStops WHERE driverId IN (SELECT driverId FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1980-01-01' AND '1985-12-31') GROUP BY driverId ORDER BY avg_duration ASC LIMIT 5) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId
SELECT T2.forename, T2.surname, T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2008 AND T1.position = 1;
SELECT C.constructorRef, C.url FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId INNER JOIN races AS R ON CR.raceId = R.raceId INNER JOIN results AS RS ON R.raceId = RS.raceId WHERE R.name = 'Singapore Grand Prix' AND R.year = 2009 ORDER BY RS.time DESC LIMIT 1;
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991'
SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'
SELECT T2.name, T2.nationality, SUM(T1.points) AS TotalPoints FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T1.constructorId ORDER BY TotalPoints DESC LIMIT 1
SELECT AVG(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
SELECT AVG(COUNT(raceId)) FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
SELECT Nationality FROM drivers GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
SELECT COUNT(*) FROM results WHERE positionOrder = 91
SELECT races.name FROM races INNER JOIN results ON races.raceId = results.raceId WHERE results.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT c.name || ', ' || c.location || ', ' || c.country AS full_location FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId WHERE r.date = (SELECT MAX(date) FROM races)
SELECT T2.forename || ' ' || T2.surname AS full_name FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.position = 1 AND T1.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = T1.raceId AND q3 IS NOT NULL) AND T3.year = 2008 AND T4.name = 'Marina Bay Street Circuit'
SELECT forename || ' ' || surname AS full_name, nationality, races.name FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE dob = (SELECT MAX(dob) FROM drivers)
SELECT COUNT(*) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE RA.name = 'Canadian Grand Prix' AND D.driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1) AND R.statusId = 3
SELECT T1.forename || ' ' || T1.surname AS full_name, COUNT(T2.wins) AS total_wins FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) GROUP BY T1.forename, T1.surname;
SELECT MAX(duration) FROM pitStops
SELECT MIN(milliseconds) AS FastestLapTime FROM lapTimes
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT T1.lap FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.year = 2011 AND T2.name = 'Australian Grand Prix'
SELECT T1.driverId, T2.forename, T2.surname, T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2011;
SELECT T2.time FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name LIKE '%Formula_1%' ORDER BY T2.milliseconds ASC LIMIT 1
SELECT drivers.forename || ' ' || drivers.surname AS DriverName FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes)
SELECT circuits.name, results.position FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND results.fastestLapTime = (SELECT MIN(results.fastestLapTime) FROM results WHERE results.fastestLapTime IS NOT NULL);
SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix Circuit' ORDER BY T1.milliseconds LIMIT 1;
SELECT T1.name, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 'Italy' ORDER BY T3.time ASC LIMIT 1
SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix Circuit' ORDER BY T2.milliseconds ASC LIMIT 1
SELECT P.duration FROM pitStops AS P INNER JOIN races AS R ON P.raceId = R.raceId INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name = 'Austrian Grand Prix Circuit' AND P.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = R.raceId)
SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T3.fastestLapTime = '1:29.488'
SELECT AVG(milliseconds) FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId INNER JOIN results ON pitStops.raceId = results.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT AVG(milliseconds) FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy'
SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1
SELECT T2.player_name, T1.height FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.height DESC LIMIT 1
SELECT T1.preferred_foot FROM Player_Attributes AS T1 WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes)
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'
SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.season = '2015/2016' AND (T2.home_team_goal - T2.away_team_goal) < 0 GROUP BY T1.team_long_name ORDER BY COUNT(*) ASC LIMIT 1
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.penalties DESC LIMIT 10
SELECT T2.team_long_name AS Away_Team FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T1.league_id = T3.id WHERE T3.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND (T1.away_team_goal - T1.home_team_goal) > 0 GROUP BY T1.away_team_api_id ORDER BY COUNT(T1.away_team_api_id) DESC LIMIT 1
SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 4
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1;
SELECT DATETIME('now') - T1.birthday AS age FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date >= '2013-01-01 00:00:00' AND T2.date <= '2015-12-31 00:00:00'
SELECT L.name AS League_Name, COUNT(M.id) AS Matches_Played FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY COUNT(M.id) DESC LIMIT 1;
SELECT SUM(height) / COUNT(id) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'
SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') AND substr(date,1,4) = '2010' ORDER BY T1.overall_rating DESC;
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL) AND strftime('%Y', T2.date) = '2012'
SELECT CAST(SUM(CASE WHEN T1.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.player_fifa_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT L.name AS League_Name, SUM(M.home_team_goal + M.away_team_goal) AS Total_Goals FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id GROUP BY L.name ORDER BY Total_Goals ASC LIMIT 5
SELECT CAST(SUM(PA.long_shots) AS REAL) / COUNT(PA.player_fifa_api_id) FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_fifa_api_id = P.player_fifa_api_id WHERE P.player_name = 'Ahmed Samir Farag'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY AVG(T2.heading_accuracy) DESC LIMIT 10
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-01-31 00:00:00' GROUP BY T2.team_long_name HAVING AVG(T1.chanceCreationPassing) > (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE buildUpPlayDribblingClass = 'Normal' AND date >= '2014-01-01 00:00:00' AND date <= '2014-01-31 00:00:00') ORDER BY AVG(T1.chanceCreationPassing) DESC;
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'
SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Franco Zennaro'
SELECT T1.buildUpPlayPositioningClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'ADO Den Haag'
SELECT heading_accuracy, finishing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00'
SELECT T1.overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Gabriel Tamas' AND STRFTIME('%Y', T1.date) = '2011'
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League')
SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday DESC LIMIT 1
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE potential = ( SELECT MAX(potential) FROM Player_Attributes ) )
SELECT COUNT(T1.id) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight < 130 AND T2.preferred_foot = 'left'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Risky'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'David Wilson'
SELECT birthday FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands')
SELECT AVG(home_team_goal) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE League.name = 'Poland' AND Match.season = '2010/2011'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height = (SELECT MAX(height) FROM Player) OR Player.height = (SELECT MIN(height) FROM Player) GROUP BY Player.player_name ORDER BY AVG(Player_Attributes.finishing) DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180
SELECT COUNT(player_api_id) FROM Player WHERE strftime('%Y', birthday) > '1990'
SELECT COUNT(T1.player_name) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name LIKE 'Adam%' AND T1.weight > 170
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating > 80 AND strftime('%Y', T1.date) BETWEEN '2008' AND '2010';
SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Doran';
SELECT player_name FROM Player WHERE preferred_foot = 'left'
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'
SELECT team_short_name FROM Team_Attributes INNER JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id WHERE buildUpPlayPassing > 70
SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', date) BETWEEN '2010' AND '2015' AND height > 170
SELECT T2.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.height ASC LIMIT 1
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran')
SELECT COUNT(id) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.home_team_goal = 10
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND T2.potential = 61;
SELECT AVG(T1.ball_control) - AVG(T2.ball_control) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Abdou Diallo' OR T2.player_name = 'Aaron Appindangoye'
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'
SELECT player_name FROM Player WHERE player_name = 'Aaron Lennon' OR player_name = 'Abdelaziz Barrada' ORDER BY birthday LIMIT 1;
SELECT T1.player_name FROM Player AS T1 ORDER BY T1.height DESC LIMIT 1
SELECT COUNT(id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'
SELECT L.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Germany'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1
SELECT COUNT(Player.player_api_id) FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', birthday)<'1986' AND defensive_work_rate = 'high'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY T2.crossing DESC LIMIT 1
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')
SELECT COUNT(DISTINCT T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.height > 180 AND T1.volleys > 70;
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70;
SELECT COUNT(*) FROM Match AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Belgium' AND T1.season = '2008/2009'
SELECT T1.long_passing FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday LIMIT 1
SELECT COUNT(*) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Belgium Jupiler League' AND STRFTIME('%Y', T1.date) = '2009' AND STRFTIME('%m', T1.date) = '04'
SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986'
SELECT CAST((SUM(CASE WHEN T1.player_name = 'Ariel Borysiuk' THEN T1.overall_rating ELSE 0 END) - SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T1.overall_rating ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.player_name = 'Paulin Puel' THEN T1.overall_rating ELSE 0 END) FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id
SELECT AVG(T1.buildUpPlaySpeed) FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Heart of Midlothian'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'
SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax' GROUP BY T2.chanceCreationPassingClass
SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Abdou Diallo'
SELECT MAX(overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'
SELECT CAST(AVG(away_team_goal) AS REAL) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id WHERE T.team_long_name = 'Parma' AND M.country_id = (SELECT id FROM Country WHERE name = 'Italy')
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = 77 AND T1.date = '2016-06-23' ORDER BY T2.birthday LIMIT 1
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy') AND date = '2016-02-04 00:00:00'
SELECT overall_rating FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Berigaud' AND T1.date = '2013-02-22 00:00:00'
SELECT T2.date FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Kevin Constant' AND T2.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = T1.player_api_id)
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2012-02-22 00:00:00'
SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date = '2010-02-22'
SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'
SELECT T1.chanceCreationCrossingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'
SELECT T2.defenceAggressionClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00'
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Marko Arnautovic') AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT CAST((MAX(CASE WHEN T1.player_name = 'Landon Donovan' THEN T1.overall_rating ELSE 0 END) - MAX(CASE WHEN T1.player_name = 'Jordan Bowery' THEN T1.overall_rating ELSE 0 END) AS REAL) * 100 / MAX(CASE WHEN T1.player_name = 'Landon Donovan' THEN T1.overall_rating ELSE 0 END) FROM Player_Attributes AS T1 WHERE T1.date = '2013-07-12'
SELECT Player.player_name FROM Player ORDER BY Player.height DESC LIMIT 5;
SELECT T1.player_api_id FROM Player AS T1 ORDER BY T1.weight DESC LIMIT 10
SELECT player_name FROM Player WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', birthday) > 34
SELECT SUM(CASE WHEN T2.player_name = 'Aaron Lennon' THEN T1.home_team_goal ELSE 0 END) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id
SELECT SUM(M.away_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.away_player_1 = P.player_api_id OR M.away_player_2 = P.player_api_id OR M.away_player_3 = P.player_api_id OR M.away_player_4 = P.player_api_id OR M.away_player_5 = P.player_api_id OR M.away_player_6 = P.player_api_id OR M.away_player_7 = P.player_api_id OR M.away_player_8 = P.player_api_id OR M.away_player_9 = P.player_api_id OR M.away_player_10 = P.player_api_id OR M.away_player_11 = P.player_api_id WHERE P.player_name = 'Daan Smith' OR P.player_name = 'Filipe Ferreira'
SELECT SUM(T1.home_team_goal) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_2 = T2.player_api_id OR T1.home_player_3 = T2.player_api_id OR T1.home_player_4 = T2.player_api_id OR T1.home_player_5 = T2.player_api_id OR T1.home_player_6 = T2.player_api_id OR T1.home_player_7 = T2.player_api_id OR T1.home_player_8 = T2.player_api_id OR T1.home_player_9 = T2.player_api_id OR T1.home_player_10 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.birthday) < 31
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 10
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.potential DESC LIMIT 1
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.finishing = 1 ORDER BY strftime('%Y-%m-%d', 'now') - strftime('%Y-%m-%d', Player.birthday) DESC LIMIT 1
SELECT Player.player_name FROM Player INNER JOIN Country ON Player.country_id = Country.id WHERE Country.name = 'Belgium'
SELECT Player.player_name, Country.name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id JOIN Country ON Player.country_id = Country.id WHERE Player_Attributes.vision > 89;
SELECT T1.name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.id = T2.country_id GROUP BY T1.name ORDER BY AVG(T2.weight) DESC LIMIT 1
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow'
SELECT T2.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'
SELECT AVG(T2.height) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'
SELECT (T1.jumping - T2.jumping) AS diff FROM Player_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = 6 AND T2.id = 23
SELECT T1.player_api_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes) AND T1.preferred_foot = 'right' ORDER BY T1.potential ASC LIMIT 3
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';
SELECT (CAST(SUM(CASE WHEN T1.stamina > 80 AND T1.strength > 80 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 FROM Player_Attributes AS T1;
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa'
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')
SELECT T1.sprint_speed, T1.agility, T1.acceleration FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Alexis Blin'
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge'
SELECT COUNT(*) FROM `Match` WHERE season = '2015/2016' AND league_id = (SELECT id FROM `League` WHERE name = 'Italian Serie A')
SELECT MAX(home_team_goal) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Netherlands Eredivisie')
SELECT finishing, curve FROM Player_Attributes WHERE weight = (SELECT MAX(weight) FROM Player)
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN ( SELECT T2.league_id, COUNT(T2.id) AS num_games FROM Match AS T2 WHERE T2.season = '2015/2016' GROUP BY T2.league_id ORDER BY num_games DESC LIMIT 1 ) AS T3 ON T1.id = T3.league_id
SELECT T2.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.away_team_api_id ORDER BY T2.away_team_goal DESC LIMIT 1
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.strength DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T2.height < 180 AND T1.strength > 70 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id
SELECT COUNT(CASE WHEN P.SEX = 'M' AND P.Admission = '+' THEN P.ID END) AS InPatient_Male, COUNT(CASE WHEN P.SEX = 'M' AND P.Admission = '-' THEN P.ID END) AS OutPatient_Male, ABS(COUNT(CASE WHEN P.SEX = 'M' AND P.Admission = '+' THEN P.ID END) - COUNT(CASE WHEN P.SEX = 'M' AND P.Admission = '-' THEN P.ID END)) AS Deviation FROM Patient AS P
SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND SUBSTR(Birthday, 1, 4) > '1930' THEN 1 END) AS REAL) * 100 / COUNT(ID) FROM Patient;
SELECT COUNT(DISTINCT T1.ID) * 100 / (SELECT COUNT(DISTINCT ID) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940') AS Percentage FROM Patient AS T1 WHERE strftime('%Y', T1.Birthday) BETWEEN '1930' AND '1940' AND Admission = '+'
SELECT CAST(SUM(CASE WHEN T1.Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.Admission = '-' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE'
SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
SELECT SEX, Birthday, `Examination Date`, Symptoms FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.ID = 163109
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500
SELECT Patient.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Patient.Birthday) AS age FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.RVVT = '+'
SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2;
SELECT P.ID, P.SEX, P.Birthday, L.`T-CHO` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE YEAR(P.Birthday) = 1937 AND L.`T-CHO` >= 250;
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5
SELECT COUNT(DISTINCT T1.ID) * 100 / COUNT(DISTINCT T2.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5)
SELECT AVG(`aCL IgG`) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50;
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'F' AND strftime('%Y', T1.Description) = '1997' AND T1.Admission = '-'
SELECT MIN(STRFTIME('%Y', P.Birthday) - STRFTIME('%Y', P.`First Date`)) AS Age FROM Patient AS P
SELECT COUNT(DISTINCT T2.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T2.SEX = 'F' AND strftime('%Y', T1.`Examination Date`) = '1997'
SELECT MAX(STRFTIME('%Y', Birthday)) - MIN(STRFTIME('%Y', Birthday)) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE TG >= 200)
SELECT Symptoms, Diagnosis FROM Examination WHERE ID = (SELECT ID FROM Patient ORDER BY Birthday ASC LIMIT 1)
SELECT CAST(COUNT(DISTINCT L.ID) AS REAL) / 12 FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.Date BETWEEN '1998-01-01' AND '1998-12-31'
SELECT MAX(T1.Birthday) AS OldestPatientBirthday, T2.Date AS LabWorkCompletionDate, STRFTIME('%Y', T1.`First Date`) - STRFTIME('%Y', T1.Birthday) AS AgeAtHospitalArrival FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday DESC LIMIT 1
SELECT SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) / SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.UA IS NOT NULL;
SELECT COUNT(DISTINCT ID) FROM Patient WHERE ID NOT IN (SELECT ID FROM Examination WHERE strftime('%Y', `Examination Date`) - strftime('%Y', `First Date`) >= 1)
SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE year(P.Birthday) < 18 AND `Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0
SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1
SELECT AVG(SUBTRACT('1991', year(Birthday))) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-30')
SELECT YEAR(`Examination Date`) - YEAR(Birthday) AS age, Diagnosis FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE HGB = (SELECT MAX(HGB) FROM Examination)
SELECT T1.ANA FROM Examination AS T1 WHERE T1.ID = 3605340 AND T1.`Examination Date` = '1996-12-02'
SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'AORTITIS' ORDER BY T2.`Examination Date` ASC LIMIT 1
SELECT T1.`aCL IgM` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993-11-12'
SELECT SEX FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GPT = 9 AND Date = '1992-06-12' )
SELECT SUBTRACT('1992', strftime('%Y', Birthday)) AS age_at_time FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'
SELECT COUNT(ID) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS') AND strftime('%Y', Date) = '1995'
SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` = '1997-01-27' AND T2.Diagnosis = 'SLE' AND T2.`First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE ID = T1.ID)
SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'
SELECT CAST((SUM(CASE WHEN T1.Birthday = '1959-02-18' AND strftime('%Y-%m', T2.Date) = '1981-11' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Birthday = '1959-02-18' AND strftime('%Y-%m', T2.Date) = '1981-12' THEN T2.`T-CHO` ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Birthday = '1959-02-18' AND strftime('%Y-%m', T2.Date) = '1981-11' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND STRFTIME('%Y', T1.Description) >= '1997' AND STRFTIME('%Y', T1.Description) < '1998'
SELECT Patient.ID FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Laboratory.Date BETWEEN '1987-07-06' AND '1996-01-31' AND Laboratory.GPT > 30 AND Laboratory.ALB < 4;
SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND YEAR(Birthday) = 1964 AND Admission = '+';
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2 AND T1.ANA = 'S' AND T1.`aCL IgM` > (SELECT 1.2 * AVG(T3.`aCL IgM`) FROM Examination AS T3)
SELECT CAST(SUM(CASE WHEN UA <= 6.5 AND `U-PRO` > 0 AND `U-PRO` < 30 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30
SELECT CAST(SUM(CASE WHEN T2.SEX = 'M' AND YEAR(T1.`First Date`) = 1981 AND T1.Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN YEAR(T1.`First Date`) = 1981 THEN 1 END) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID
SELECT T1.ID, T1.SEX, T1.Birthday, T1.Description, T1.`First Date`, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0;
SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Birthday BETWEEN '1980-01-01' AND '1989-12-31' AND ID NOT IN (SELECT ID FROM Examination WHERE `ANA Pattern` = 'P')
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(ALB) AS average_albumin_level FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.PLT > 400 AND T2.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.`First Date`, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 48473 ORDER BY T1.`First Date` ASC LIMIT 1
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'
SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L WHERE YEAR(L.Date) = '1997' AND (L.TP < 6 OR L.TP > 8.5)
SELECT CAST(SUM(CASE WHEN T1.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) FROM Examination AS T1
SELECT CAST(COUNT(CASE WHEN T2.SEX = 'F' THEN 1 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1980' AND T2.Diagnosis = 'RA'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`Examination Date` BETWEEN '1995' AND '1997' AND T2.Diagnosis = 'BEHCET' AND T1.Admission = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5
SELECT DATEDIFF(`Examination Date`, `First Date`) AS evaluation_delay FROM Examination WHERE ID = 821298;
SELECT CASE WHEN P.SEX = 'M' AND L.UA > 8.0 THEN 'Abnormal' WHEN P.SEX = 'F' AND L.UA > 6.5 THEN 'Abnormal' ELSE 'Normal' END AS UricAcidStatus FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 57266
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.GOT < 60 AND year(L.Date) = 1994
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60;
SELECT T2.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT P.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800
SELECT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 GROUP BY T1.ID, T1.Admission
SELECT T1.ID FROM Patient AS T1 WHERE T1.Birthday = '1982-04-01' AND EXISTS (SELECT * FROM Laboratory AS T2 WHERE T1.ID = T2.ID AND T2.ALP < 300)
SELECT ID, SEX, Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE TP < 6.0
SELECT ABS(TP - 8.5) AS Deviation_TP FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE SEX = 'F') AND TP > 8.5
SELECT * FROM Patient WHERE SEX = 'M' AND (ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC 
SELECT T1.ID, T1.ALB, CASE WHEN T1.ALB BETWEEN 3.5 AND 5.5 THEN 'Normal Range' ELSE 'Not in Normal Range' END AS Albumin_Status FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Birthday) = '1982'
SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS Percentage FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (T1.UA > 8.0 AND T2.SEX = 'M') OR (T1.UA > 6.5 AND T2.SEX = 'F')
SELECT AVG(UA) FROM Laboratory WHERE ID IN ( SELECT ID FROM Patient WHERE SEX = 'M' AND ID IN ( SELECT ID FROM Laboratory WHERE UA < 8.0 GROUP BY ID HAVING Date = MAX(Date) ) OR SEX = 'F' AND ID IN ( SELECT ID FROM Laboratory WHERE UA < 6.5 GROUP BY ID HAVING Date = MAX(Date) ) )
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA' AND T2.UN < 30
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5
SELECT CASE WHEN SUM(CASE WHEN SEX = 'M' AND CRE >= 1.5 THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' AND CRE >= 1.5 THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE `T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)
SELECT P.SEX, SUM(L.T-BIL) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.T-BIL >= 2.0 GROUP BY P.SEX
SELECT Patient.ID, MAX(Laboratory.`T-CHO`) AS T_CHO FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday = (SELECT MIN(Birthday) FROM Patient) GROUP BY Patient.ID ORDER BY T_CHO DESC LIMIT 1
SELECT SUM(YEAR(date('now')) - YEAR(T1.Birthday)) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-CHO` >= 250
SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE TG >= 200 AND (strftime('%Y', current_timestamp) - strftime('%Y', T1.Birthday)) > 50
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE YEAR(T1.Birthday) BETWEEN 1936 AND 1956 AND T1.SEX = 'M' AND T2.CPK >= 250
SELECT T1.ID, T1.SEX, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250
SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU < 180 AND strftime('%Y', T1.`First Date`) = '1991'
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 ORDER BY T1.SEX, T1.Birthday;
SELECT T1.ID, T2.Diagnosis, strftime('%Y', current_timestamp) - strftime('%Y', T2.Birthday) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RBC < 3.5
SELECT T2.ID, T2.SEX, T2.Birthday, T2.Admission FROM Patient AS T2 INNER JOIN Laboratory AS T1 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND (T1.RBC <= 3.5 OR T1.RBC >= 6.0) AND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) >= 50;
SELECT T1.ID, T2.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.HGB < 10
SELECT Patient.ID, Patient.SEX FROM Patient JOIN Examination ON Patient.ID = Examination.ID WHERE Diagnosis = 'SLE' AND HGB > 10 AND HGB < 17 ORDER BY Birthday DESC LIMIT 1
SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.Birthday) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T1.ID) >= 2
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT COUNT(*) AS LowerThanNormal, (SELECT COUNT(*) FROM Laboratory WHERE PLT > 400) AS HigherThanNormal FROM Laboratory WHERE PLT < 100
SELECT T2.ID, T2.SEX, T2.Birthday, T2.`First Date`, T2.Admission, T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date LIKE '1984%' AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.Birthday)) < 50 AND T1.PLT BETWEEN 100 AND 400
SELECT SUM(CASE WHEN T2.SEX = 'F' AND T1.PT >= 14 THEN 1 ELSE 0 END) * 100.0 / SUM(CASE WHEN T1.PT >= 14 THEN 1 ELSE 0 END) AS percentage FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.Birthday) < strftime('%Y', 'now') - 55
SELECT T1.ID, T1.SEX, T1.Birthday, T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE year(`First Date`) > 1992 AND T2.PT < 14;
SELECT COUNT(ID) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.APTT > 45 AND T1.Thrombosis = 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND L.FG NOT BETWEEN 150 AND 450;
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`aCL IgG` < 900 AND T1.Symptoms = 'abortion'
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.IGG BETWEEN 900 AND 2000 AND T1.Symptoms IS NOT NULL
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`IGA` BETWEEN 80 AND 500 ORDER BY T2.`IGA` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND T1.`First Date` > '1990-01-01'
SELECT Diagnosis FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT COUNT(P.ID) FROM Patient AS P LEFT JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0 OR L.CRP IS NULL) AND P.Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN('+-', '-') AND T2.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) < 18
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE RA IN ('-', '+-') AND KCT = '+'
SELECT T2.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1995-01-01' AND T2.RA IN ('-', '+-')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday)) > 60
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 LEFT JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = '0'
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT NOT BETWEEN 29 AND 52 ORDER BY T2.`aCL IgA` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis = 1 AND T3.C4 > 10
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (T1.RNP = '-' OR T1.RNP = '+-') AND T2.Admission = '+'
SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN ('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('-', '+-') AND T2.Thrombosis = '1'
SELECT TOP 3 ID FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE SM NOT IN ('-', '+-')) ORDER BY Birthday DESC LIMIT 3;
SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` >= '1997-01-01' AND T2.SC170 IN ('-', '+-')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('-', '+-') AND T1.SEX = 'M' AND T2.Symptoms = 'vertigo'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('-', '+-') AND strftime('%Y', T1.`First Date`) < '1990'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('-', '+-') ORDER BY T1.`First Date` LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('-', '+-') AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.SSB IN ('-', '+-') AND E.Symptoms IS NOT NULL
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.DNA >= 8
SELECT COUNT(DISTINCT ID) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE DNA < 8 AND Description IS NULL)
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`DNA-II` >= 8 AND T2.Admission = '+'
SELECT CAST(SUM(CASE WHEN T2.GOT >= 60 AND T1.Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Sex = 'M' AND T2.GOT < 60
SELECT MIN(Birthday) AS youngest_birthdate FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT >= 60)
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'
SELECT MIN(`First Date`) FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE LDH < 500 ORDER BY LDH DESC LIMIT 1)
SELECT MAX(`First Date`) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE LDH >= 500)
SELECT COUNT(Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALP >= 300 AND Patient.Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300
SELECT Diagnosis FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE TP < 6.0)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5
SELECT T1.`Examination Date` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB > 3.5 AND T2.ALB < 5.5 ORDER BY T2.ALB DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP > 6.0 AND T2.TP < 8.5
SELECT `aCL IgG`, `aCL IgM`, `aCL IgA` FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE SEX = 'F' AND ID IN (SELECT ID FROM Laboratory WHERE UA = (SELECT MAX(UA) FROM Laboratory WHERE UA <= 6.50)))
SELECT MAX(ANA) FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE CRE < 1.5)
SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 AND T2."aCL IgA" = (SELECT MAX("aCL IgA") FROM Examination)
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2.0 AND T3.`ANA Pattern` LIKE '%P%'
SELECT ANA FROM Examination WHERE ID = (SELECT ID FROM Laboratory WHERE `T-BIL` < 2.0 ORDER BY `T-BIL` DESC LIMIT 1)
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T2.KCT = '-'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` < 250 AND T3.`ANA Pattern` = 'P'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T2.Symptoms IS NOT NULL
SELECT Diagnosis FROM Patient WHERE ID = ( SELECT ID FROM Laboratory WHERE TG < 200 ORDER BY TG DESC LIMIT 1 )
SELECT T1.ID FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID LEFT JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis = 0 AND T3.CPK < 250
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+')
SELECT MIN(Patient.Birthday) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.GLU > 180 ORDER BY Patient.Birthday LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU < 180 AND T1.ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis = 1)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC >= 3.5 AND T2.WBC <= 9.0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.Diagnosis = 'SLE' AND T3.WBC >= 3.5 AND T3.WBC <= 9.0
SELECT DISTINCT Patient.ID FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE (RBC <= 3.5 OR RBC >= 6.0) AND Admission = '-'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL
SELECT T1.ID, T1.PLT FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis = 'MCTD'
SELECT AVG(PT) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Sex = 'M' AND L.PT < 14
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T1.Thrombosis = 2 OR T1.Thrombosis = 1) AND T2.PT < 14
SELECT major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Angela' AND last_name = 'Sanders'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'
SELECT COUNT(link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer') AND link_to_member IN (SELECT member_id FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club'))
SELECT phone FROM member WHERE member_id IN ( SELECT link_to_member FROM attendance WHERE link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer' ) )
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.link_to_major = 'Student_Club' AND T3.event_name = "Women's Soccer" AND T1.t_shirt_size = 'Medium'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id INNER JOIN major AS T4 ON T3.link_to_major = T4.major_id WHERE T4.department = 'Student_Club' GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President' AND major.major_name = 'Student_Club'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(*) FROM attendance AS A JOIN event AS E ON A.link_to_event = E.event_id JOIN member AS M ON A.link_to_member = M.member_id WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison' AND YEAR(E.event_date) = 2019
SELECT COUNT(*) FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 10) AND type = 'Meeting'
SELECT event_name FROM event WHERE type = 'Student_Club' AND event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20)
SELECT AVG(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020' GROUP BY event_name) as subquery
SELECT T1.expense_description FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.event_status = 'club events' ORDER BY T1.cost DESC LIMIT 1
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
SELECT T3.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt')
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
SELECT SUM(B.spent) FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE B.category = 'Food' AND E.event_name = 'September Meeting'
SELECT zip.city, zip.state FROM member AS m INNER JOIN zip_code AS zip ON m.zip = zip.zip_code WHERE m.position = 'President' AND m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club')
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'
SELECT T2.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Pierce' AND T2.last_name = 'Guidi'
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker')
SELECT E.expense_id, E.expense_description, E.approved FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_name = 'October Meeting' AND EV.event_date = '2019-10-08'
SELECT SUM(cost) / 2 AS total_average_cost FROM expense WHERE MONTH(expense_date) IN (9, 10) AND link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen')
SELECT SUM(CASE WHEN strftime('%Y', T1.event_date) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T1.event_date) = '2020' THEN T2.spent ELSE 0 END) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Student_Club'
SELECT location FROM event WHERE event_name = 'Spring Budget Review'
SELECT E.cost FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_description = 'Posters' AND EV.event_date = '2019-09-04';
SELECT remaining FROM budget WHERE category = 'Food' AND amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14';
SELECT COUNT(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT T1.phone FROM member AS T1 WHERE T1.first_name = 'Carlo' AND T1.last_name = 'Jacobs'
SELECT T3.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O\'Gallagher'
SELECT COUNT(budget_id) FROM budget WHERE event_status = 'November Meeting' AND remaining < 0
SELECT SUM(amount) FROM budget WHERE event_status = 'September Speaker'
SELECT T1.event_status FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T3.link_to_budget = T2.budget_id WHERE T3.expense_description = 'Post Cards, Posters' AND T3.expense_date = '2019-8-20'
SELECT major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Brent' AND last_name = 'Thomason'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'
SELECT T3.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN member AS T3 ON T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT department FROM major WHERE major_id = ( SELECT link_to_major FROM member WHERE position = 'President' )
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues'
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.category = 'Advertisement' AND T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.category = 'Advertisement' AND T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id
SELECT CAST(SUM(CASE WHEN T2.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.event_name = 'November Speaker' THEN 1 ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description = 'Pizza'
SELECT COUNT(DISTINCT T1.city) FROM zip_code AS T1 WHERE T1.county = 'Orange County' AND T1.state = 'Virginia'
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
SELECT expense_description FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget ORDER BY remaining LIMIT 1 )
SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting'
SELECT T.college, COUNT(T.link_to_major) AS num_members FROM major AS T INNER JOIN member AS M ON T.major_id = M.link_to_major GROUP BY T.college ORDER BY num_members DESC LIMIT 1
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event ORDER BY budget.amount DESC LIMIT 1
SELECT E.expense_description FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE M.position = 'Vice President'
SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women\'s Soccer'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'
SELECT COUNT(link_to_event) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240')
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.spent / T2.amount DESC LIMIT 1
SELECT COUNT(member_id) FROM member WHERE position = 'President'
SELECT MAX(spent) AS highest_budget_spend FROM budget
SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'
SELECT SUM(spent) FROM budget WHERE category = 'Food'
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7
SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T3.link_to_member = T2.member_id INNER JOIN event AS T4 ON T4.event_id = T3.link_to_event WHERE T1.major_name = 'Interior Design' AND T4.event_name = 'Community Theater'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
SELECT COUNT(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40;
SELECT SUM(cost) FROM expense WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff')
SELECT T2.first_name, T2.last_name FROM member AS T1 INNER JOIN budget AS T3 ON T1.member_id = T3.link_to_event INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Yearly Kickoff' AND T1.position = 'Budget Manager'
SELECT T2.first_name || ' ' || T2.last_name AS full_name, T1.source FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id ORDER BY T1.amount DESC LIMIT 1
SELECT event_name FROM event ORDER BY cost LIMIT 1;
SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) AS REAL) * 100 / SUM(T2.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event
SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major;
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY amount DESC LIMIT 1
SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
SELECT COUNT(T2.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND YEAR(T2.event_date) = 2019
SELECT COUNT(T1.link_to_event), T2.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
SELECT AVG(T2.spent) FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.category = 'Food' AND T1.event_status = 'Closed'
SELECT T1.event_name FROM budget AS T1 WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1
SELECT CASE WHEN EXISTS (SELECT * FROM attendance AS A INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN member AS M ON A.link_to_member = M.member_id WHERE M.first_name = 'Maya' AND M.last_name = 'Mclean' AND E.event_name = 'Women\'s Soccer') THEN 'Yes' ELSE 'No' END as attended_event
SELECT SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100 / COUNT(event_id) FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT E.cost FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_name = 'September Speaker' AND E.expense_description = 'Posters';
SELECT T1.t_shirt_size FROM member AS T1 GROUP BY T1.t_shirt_size ORDER BY COUNT(T1.t_shirt_size) DESC LIMIT 1
SELECT event_name FROM event WHERE status = 'Closed' AND event_id IN ( SELECT link_to_event FROM budget WHERE remaining < 0 ORDER BY remaining ASC LIMIT 1 )
SELECT e.expense_description, SUM(e.cost) FROM expense e INNER JOIN budget b ON e.link_to_budget = b.budget_id INNER JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' GROUP BY e.expense_description
SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC;
SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1
SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3;
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
SELECT T1.first_name, T1.last_name, SUM(T3.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN budget AS T3 ON T2.link_to_budget = T3.budget_id WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name
SELECT DISTINCT T1.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'
SELECT zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE cost < 50
SELECT major.major_name FROM member JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Phillip' AND member.last_name = 'Cullen'
SELECT position FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business')
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
SELECT type FROM budget WHERE remaining > 30
SELECT T1.type FROM event AS T1 WHERE T1.location = 'MU 215'
SELECT T1.category FROM event AS T1 WHERE T1.event_date = '2020-03-24T12:00:00';
SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE position = 'Vice President')
SELECT CAST(SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id
SELECT T1.category FROM event AS T1 WHERE T1.location = 'MU 215'
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
SELECT COUNT(major_name) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'
SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0
SELECT T3.city, T3.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T2.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id INNER JOIN major AS T4 ON T3.link_to_major = T4.major_id INNER JOIN zip_code AS T5 ON T3.zip = T5.zip_code WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T5.city = '900 E. Washington St.'
SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Pizza' AND T2.expense_date = '2019-09-10'
SELECT T1.last_name FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Member' AND T3.event_name = 'Women\'s Soccer'
SELECT CAST(COUNT(CASE WHEN T1.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'Medium' AND T2.position = 'Member'
SELECT T2.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.type = 'PO Box'
SELECT T2.zip_code FROM zip_code AS T2 WHERE T2.city = 'San Juan Municipio' AND T2.state = 'Puerto Rico' AND T2.type = 'PO Box'
SELECT T1.event_name FROM event AS T1 WHERE T1.type = 'Game' AND T1.status = 'Closed' AND T1.event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT T1.link_to_event FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.amount > 50;
SELECT T1.first_name, T1.last_name, T2.link_to_event FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.approved = 'true' AND T2.expense_date BETWEEN '2019-01-10' AND '2019-11-19';
SELECT college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Katy' AND link_to_major = 'rec1N0upiVLy5esTO'
SELECT phone FROM member AS m INNER JOIN major AS maj ON m.link_to_major = maj.major_id WHERE maj.major_name = 'Business' AND maj.college = 'College of Agriculture and Applied Sciences'
SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services'
SELECT CAST(COUNT(CASE WHEN remaining < 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(event_id) FROM budget WHERE event_status = 'Completed'
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50;
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code;
SELECT event_name, location FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 0
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.expense_description = 'Pizza' AND T2.cost > 50 AND T2.cost < 100
SELECT T2.first_name, T2.last_name, T3.major_name FROM member AS T2 INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id INNER JOIN expense AS T1 ON T1.link_to_member = T2.member_id WHERE T1.cost > 100
SELECT E.location, Z.city, Z.state FROM event AS E INNER JOIN zip_code AS Z ON E.location = Z.zip_code WHERE E.event_id IN (SELECT link_to_event FROM income GROUP BY link_to_event HAVING COUNT(*) > 40)
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(DISTINCT T2.link_to_event) > 1 ORDER BY SUM(T2.cost) DESC LIMIT 1
SELECT AVG(T1.cost) AS avg_amount_paid FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking' AND T2.cost < (SELECT AVG(T2.cost) FROM expense AS T2 WHERE T2.category = 'Parking')
SELECT SUM(cost) * 100 / COUNT(event_id) FROM expense WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'Game')
SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description IN ('Water', 'Chips', 'Cookies') ORDER BY T2.cost DESC LIMIT 1
SELECT T2.first_name, T2.last_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id ORDER BY T1.cost DESC LIMIT 5
SELECT T2.first_name, T2.last_name, T2.phone FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > (SELECT AVG(cost) FROM expense)
SELECT ((SUM(CASE WHEN T1.state = 'Maine' THEN 1 ELSE 0 END) / COUNT(CASE WHEN T1.position = 'Member' THEN 1 ELSE 0 END)) - (SUM(CASE WHEN T1.state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(CASE WHEN T1.position = 'Member' THEN 1 ELSE 0 END))) AS DIFFERENCE FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code;
SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'
SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'
SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'
SELECT event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food'
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '9/9/2019'
SELECT T1.category FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Posters'
SELECT T1.first_name, T1.last_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'
SELECT SUM(b.spent), e.event_name FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.category = 'Speaker Gifts'
SELECT city FROM member WHERE first_name = 'Garrett' AND last_name = 'Girke'
SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092
SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium gas'
SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS ratio FROM customers
SELECT CustomerID FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND Segment = 'LAM' ORDER BY Consumption LIMIT 1
SELECT AVG(Consumption) FROM yearmonth WHERE Date BETWEEN '201301' AND '201312' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')
SELECT c.CustomerID, SUM(t.Amount) AS TotalConsumption FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID WHERE c.Currency = 'CZK' AND t.Date BETWEEN '201101' AND '201112' GROUP BY c.CustomerID ORDER BY TotalConsumption DESC LIMIT 1
SELECT COUNT(CustomerID) FROM customers WHERE Segment = 'KAM' AND CustomerID IN (SELECT CustomerID FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND Consumption < 30000)
SELECT SUM(CASE WHEN c.Currency = 'CZK' THEN y.Consumption ELSE 0 END) - SUM(CASE WHEN c.Currency = 'EUR' THEN y.Consumption ELSE 0 END) AS Difference FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date BETWEEN '201201' AND '201212'
SELECT STRFTIME('%Y', T1.Date) AS Year FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY Year ORDER BY SUM(T1.Amount) DESC LIMIT 1
SELECT Segment FROM yearmonth GROUP BY Segment ORDER BY SUM(Consumption) ASC LIMIT 1
SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Currency = 'CZK' GROUP BY SUBSTR(Date, 1, 4) ORDER BY TotalConsumption DESC LIMIT 1
SELECT Date, MAX(Consumption) FROM yearmonth WHERE Date LIKE '2013%' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY SUBSTR(Date, 6, 2) ORDER BY MAX(Consumption) DESC LIMIT 1
SELECT (SUM(T1.Consumption) / COUNT(T1.CustomerID)) - (SUM(T2.Consumption) / COUNT(T2.CustomerID) AS SME_LAM_Difference, (SUM(T2.Consumption) / COUNT(T2.CustomerID)) - (SUM(T3.Consumption) / COUNT(T3.CustomerID) AS LAM_KAM_Difference, (SUM(T3.Consumption) / COUNT(T3.CustomerID)) - (SUM(T1.Consumption) / COUNT(T1.CustomerID) AS KAM_SME_Difference FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T2.CustomerID = T3.CustomerID WHERE SUBSTR(T1.Date, 1, 4) = '2013' AND SUBSTR(T2.Date, 1, 4) = '2013' AND SUBSTR(T3
SELECT Segment, MAX((SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) / SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) * 100) AS Max_Increase_Percentage, MIN((SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) / SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) * 100) AS Min_Increase_Percentage FROM yearmonth WHERE Segment IN ('SME', '
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date LIKE '2013-08%' OR Date LIKE '2013-09%' OR Date LIKE '2013-10%' OR Date LIKE '2013-11%';
SELECT COUNT(*) AS CzechDiscountGasStations, (SELECT COUNT(*) FROM gasstations WHERE Country = 'Czech Republic' AND Segment = 'discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'Slovakia' AND Segment = 'discount') AS MoreDiscountGasStations FROM gasstations WHERE Country IN ('Czech Republic', 'Slovakia')
SELECT SUM(y1.Consumption) - SUM(y2.Consumption) AS Consumption_Difference FROM yearmonth AS y1 JOIN yearmonth AS y2 ON y1.CustomerID = 7 AND y2.CustomerID = 5 WHERE y1.Date LIKE '201304%' AND y2.Date LIKE '201304%'
SELECT COUNT(*) AS TotalSMEsCzechKoruna, (SELECT COUNT(*) FROM customers WHERE Currency = 'Czech koruna' AND Segment = 'SME') - (SELECT COUNT(*) FROM customers WHERE Currency = 'Euro' AND Segment = 'SME') AS AmountMoreSMEsCzechKorunaThanEuro FROM customers WHERE Segment = 'SME'
SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'Euro' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1
SELECT T1.CustomerID, MAX(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID
SELECT SUM(ym.Consumption) AS Total_Consumption FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE STRFTIME('%Y%m', ym.Date) = '201305' AND c.Segment = 'KAM'
SELECT CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'
SELECT Country, COUNT(GasStationID) AS Total_Value_For_Money_GasStations FROM gasstations WHERE Segment = 'value for money' GROUP BY Country
SELECT ((SELECT COUNT(*) FROM customers WHERE Segment = 'KAM' AND Currency = 'Euro') / (SELECT COUNT(*) FROM customers WHERE Segment = 'KAM')) * 100 AS percentage_euro
SELECT CAST(COUNT(CASE WHEN Consumption > 528.3 THEN CustomerID ELSE NULL END) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'
SELECT (CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 FROM gasstations WHERE Country = 'Slovakia'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1
SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1
SELECT MAX(Consumption) AS highest_monthly_consumption FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
SELECT MAX(SUM(T1.Consumption)/12) AS BiggestMonthlyConsumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'Euro'
SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE SUBSTR(T1.Date, 1, 6) = '201309'
SELECT DISTINCT Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE SUBSTR(T2.Date, 1, 6) = '201306'
SELECT ChainID FROM gasstations WHERE Country IN (SELECT Country FROM transactions_1k WHERE Currency = 'Euro')
SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'Euro'
SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'
SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Currency = 'Euro' AND T3.Consumption > 1000
SELECT P.Description FROM products P INNER JOIN transactions_1k T ON P.ProductID = T.ProductID INNER JOIN gasstations G ON T.GasStationID = G.GasStationID WHERE G.Country = 'CZE'
SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
SELECT COUNT(TransactionID) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Price > 1000
SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Date > '2012-01-01'
SELECT AVG(Price) AS AverageTotalPrice FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE'
SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'Euro'
SELECT t1.CustomerID FROM transactions_1k AS t1 WHERE t1.Date = '2012-08-25' ORDER BY t1.Amount DESC LIMIT 1
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.TransactionID ASC LIMIT 1
SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'
SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'
SELECT COUNT(TransactionID) FROM transactions_1k WHERE Currency = 'EUR' AND Date = '2012-08-26' AND Time < '13:00:00'
SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers)
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT T1.ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT SUM(T2.Consumption) AS Total_Expenses, T1.Date AS Date FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 124.05 AND Date = '2012-08-24') AND strftime('%Y-%m', T1.Date) = '2012-01'
SELECT COUNT(*) FROM transactions_1k WHERE Time BETWEEN '08:00' AND '09:00' AND Date = '2012-08-26' AND GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE');
SELECT c.Currency FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE y.Date LIKE '201306%' AND t.Amount = 214582.17
SELECT T2.Country FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CardID = 667467
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Amount = 548.4 AND T1.Date = '2012-08-24'
SELECT (CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / COUNT(CustomerID)) * 100 FROM customers WHERE CustomerID IN (SELECT CustomerID FROM yearmonth WHERE Date = '2012-08-25')
SELECT ((T2.Consumption - T1.Consumption) / T2.Consumption) * 100 FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T2.Date = '2013-08-24'
SELECT T1.GasStationID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID GROUP BY T1.GasStationID ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM gasstations WHERE Segment = 'premium' AND Country = 'SVK') AS Percentage FROM gasstations WHERE Segment = 'premium' AND Country = 'SVK'
SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 38508; SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 38508 AND Date LIKE '201201%';
SELECT Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k GROUP BY ProductID ORDER BY SUM(Amount) DESC LIMIT 5)
SELECT T1.CustomerID, T2.FirstName, T2.LastName, AVG(T1.Price / T1.Amount) AS AvgPricePerItem, T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Amount * T1.Price) DESC LIMIT 1
SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE ProductID = 2 ORDER BY Price DESC LIMIT 1)
SELECT T1.CustomerID, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.ProductID = 5 AND T1.Price / T1.Amount > 29.00 AND T2.Date LIKE '%201208%'
