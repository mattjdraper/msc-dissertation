SELECT MAX(`Percent (%) Eligible Free (K-12)`) FROM frpm WHERE `County Name` = 'Alameda County'
SELECT TOP 3 `Percent (%) Eligible Free (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' ORDER BY (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) ASC;
SELECT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.County = 'Fresno County Office of Education'
SELECT MailStreet, MailCity, MailZip, MailState FROM schools WHERE CDSCode = ( SELECT CDSCode FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm ) )
SELECT T1.Phone FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Charter Funding Type = 'Charter' AND T2.OpenDate > '2000-01-01'
SELECT COUNT(DISTINCT s.CDSCode) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.AvgScrMath < 400 AND sc.Virtual = 'F'
SELECT s.School FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.NumTstTakr > 500 AND s.Magnet = 1;
SELECT schools.Phone FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 > 0)
SELECT SUM(satscores.NumTstTakr) FROM satscores INNER JOIN frpm ON satscores.cds = frpm.CDSCode WHERE frpm.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)
SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrMath > 560 AND T1.FundingType = 'Charter'
SELECT frpm.`FRPM Count (Ages 5-17)` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode INNER JOIN satscores ON frpm.CDSCode = satscores.cds WHERE satscores.AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores)
SELECT T1.CDSCode FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE (T1.`Enrollment (K-12)` + T1.`Enrollment (Ages 5-17)`) > 500
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm WHERE CDSCode IN ( SELECT cds FROM satscores WHERE NumGE1500 / NumTstTakr > 0.3 )
SELECT t1.Phone FROM schools AS t1 INNER JOIN satscores AS t2 ON t1.CDSCode = t2.cds ORDER BY CAST(t2.NumGE1500 AS FLOAT) / t2.NumTstTakr DESC LIMIT 3
SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5
SELECT T1.`District Name` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds INNER JOIN schools AS T3 ON T1.CDSCode = T3.CDSCode WHERE T3.StatusType = 'Active' GROUP BY T1.`District Name` ORDER BY AVG(T2.AvgScrRead) DESC LIMIT 1;
SELECT COUNT(*) FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode INNER JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE s.County = 'Alameda' AND ss.NumTstTakr < 100;
SELECT T2.CharterNum FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrWrite = 499
SELECT COUNT(*) FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.County = 'Contra Costa' AND s.FundingType = 'Directly Funded' AND ss.NumTstTakr <= 250;
SELECT T3.Phone FROM schools AS T3 INNER JOIN satscores AS T4 ON T3.CDSCode = T4.cds WHERE T4.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT COUNT(*) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'
SELECT COUNT(*) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`County Name` = 'Los Angeles' AND T1.`Free Meal Count (K-12)` > 500 AND T1.`FRPM Count (K-12)` < 700;
SELECT satscores.sname FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Contra Costa' ORDER BY satscores.NumTstTakr DESC LIMIT 1;
SELECT s.School, s.Street FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30;
SELECT s.School FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN satscores ss ON f.CDSCode = ss.cds WHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND ss.NumGE1500 >= 1;
SELECT School, FundingType FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Riverside' GROUP BY schools.School HAVING AVG(satscores.AvgScrMath) > 400;
SELECT s.School, s.Street || ', ' || s.City || ', ' || s.State || ', ' || s.Zip AS Full_Address FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE s.GSoffered = 'High' AND s.County = 'Monterey' AND f.`FRPM Count (Ages 5-17)` > 800;
SELECT s.School, s.Phone, AVG(ss.AvgScrWrite) AS AvgWritingScore FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-12-31' GROUP BY s.School, s.Phone;
SELECT SchoolName, DOCType FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`School Type` = 'Locally Funded' AND (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM frpm)
SELECT MIN(OpenDate) FROM schools WHERE GSoffered LIKE '%K-12%' ORDER BY Enrollment DESC LIMIT 1
SELECT City FROM schools ORDER BY enroll12 LIMIT 5;
SELECT (`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS `Eligible Free Rate` FROM frpm WHERE `Educational Option Type` = 'K-12' ORDER BY `Enrollment (K-12)` DESC LIMIT 10, 2
SELECT TOP 5 schools.CDSCode, schools.`School Name`, schools.`County Name`, schools.`District Name`, schools.`Enrollment (K-12)`, schools.`FRPM Count (K-12)`, schools.`Percent (%) Eligible FRPM (K-12)` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`Charter School Number` = 66 ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5;
SELECT T1.`School Name`, T2.Website FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` >= 1900 AND T1.`Free Meal Count (Ages 5-17)` <= 2000;
SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS FreeRate FROM frpm WHERE `School Name` = 'Kacey Gibson'
SELECT t3.AdmEmail1 FROM schools AS t3 INNER JOIN frpm AS t1 ON t3.CDSCode = t1.CDSCode WHERE t1.`Charter School (Y/N)` = 1 ORDER BY t1.`Enrollment (K-12)` LIMIT 1
SELECT AdmFName1 || ' ' || AdmLName1 AS Administrator FROM schools WHERE CDSCode = ( SELECT cds FROM satscores WHERE NumGE1500 = ( SELECT MAX(NumGE1500) FROM satscores ) )
SELECT T3.Street, T3.City, T3.Zip, T3.State FROM schools AS T3 INNER JOIN satscores AS T2 ON T3.CDSCode = T2.cds WHERE T2.NumGE1500 / T2.NumTstTakr = (SELECT MIN(NumGE1500 / NumTstTakr) FROM satscores)
SELECT Website FROM schools WHERE County = 'Los Angeles' AND CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr BETWEEN 2000 AND 3000)
SELECT AVG(NumTstTakr) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Fresno' AND schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'
SELECT schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead LIMIT 1;
SELECT s.School, s.AvgScrRead FROM satscores s INNER JOIN schools sch ON s.cds = sch.CDSCode WHERE sch.Virtual = 'F' ORDER BY s.AvgScrRead DESC LIMIT 0, 5
SELECT s.`School Type` FROM frpm AS f INNER JOIN satscores AS s ON f.CDSCode = s.cds WHERE s.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT AVG(s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite) AS AverageScore, sc.County FROM satscores s INNER JOIN schools sc ON s.cds = sc.CDSCode WHERE s.AvgScrMath + s.AvgScrRead + s.AvgScrWrite = ( SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite) FROM satscores )
SELECT AVG(AvgScrWrite), City FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1500) AND NumGE1500 >= 1500;
SELECT T1.`School Name`, AVG(T2.AvgScrWrite) AS AverageWritingScore FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`AdmFName1` = 'Ricci' AND T1.`AdmLName1` = 'Ulrich' GROUP BY T1.`School Name`
SELECT T1.School, T1.State, SUM(T2.enroll12) AS Total_Enrollment FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.DOC = '31' AND T2.rtype = 'K-12' GROUP BY T1.School, T1.State ORDER BY Total_Enrollment DESC;
SELECT COUNT(*) / 12 FROM schools WHERE County = 'Alameda' AND DOC = '52' AND strftime('%Y', OpenDate) = '1980'
SELECT COUNT(DISTINCT s1.CDSCode) / COUNT(DISTINCT s2.CDSCode) AS Ratio FROM schools AS s1 JOIN frpm AS f ON s1.CDSCode = f.CDSCode JOIN schools AS s2 ON s1.County = s2.County WHERE s1.DOC = 54 AND s2.DOC = 52
SELECT schools.School, schools.ClosedDate, schools.County FROM schools WHERE schools.StatusType = 'Closed' GROUP BY schools.County ORDER BY COUNT(schools.School) DESC LIMIT 1;
SELECT T1.Street FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1 OFFSET 5;
SELECT T1.MailStreet, T2.SchoolName FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(s.CDSCode) FROM satscores s JOIN schools sc ON s.cds = sc.CDSCode WHERE s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite >= 1500 AND sc.MailCity = 'Lakeport';
SELECT SUM(NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.MailCity = 'Fresno'
SELECT T2.School, T2.MailZip FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.AdmFName1 = 'Avetik' AND T1.AdmLName1 = 'Atoian'
SELECT COUNT(CASE WHEN T1.County = 'Colusa' THEN 1 END) * 1.0 / COUNT(CASE WHEN T1.County = 'Humboldt' THEN 1 END) FROM schools AS T1 WHERE T1.MailState = 'California'
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active'
SELECT T3.Phone, T3.Ext FROM ( SELECT T1.Phone, T1.Ext, T2.AvgScrWrite, ROW_NUMBER() OVER (ORDER BY T2.AvgScrWrite DESC) AS Rank FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ) AS T3 WHERE T3.Rank = 333;
SELECT T1.Phone, T1.Ext, T1.School FROM schools AS T1 WHERE T1.Zip = '95203-3704'
SELECT T1.Website FROM schools AS T1 WHERE T1.AdmFName1 = 'Mike' AND T1.AdmLName1 = 'Larson' OR T1.AdmFName1 = 'Dante' AND T1.AdmLName1 = 'Alvarez' OR T1.AdmFName2 = 'Mike' AND T1.AdmLName2 = 'Larson' OR T1.AdmFName2 = 'Dante' AND T1.AdmLName2 = 'Alvarez' OR T1.AdmFName3 = 'Mike' AND T1.AdmLName3 = 'Larson' OR T1.AdmFName3 = 'Dante' AND T1.AdmLName3 = 'Alvarez'
SELECT Website FROM schools WHERE Charter = 1 AND Virtual = 'P' AND County = 'San Joaquin'
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = '52'
SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Los Angeles' AND T1.Charter = 0 AND T2.`Percent (%) Eligible Free (K-12)` < 0.18
SELECT s.School, s.City, s.AdmFName1 || ' ' || s.AdmLName1 AS Administrator1, s.AdmFName2 || ' ' || s.AdmLName2 AS Administrator2, s.AdmFName3 || ' ' || s.AdmLName3 AS Administrator3 FROM schools s WHERE s.Charter = 1 AND s.CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'
SELECT (CAST(SUM(CASE WHEN FundingType = 'Locally Funded' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100) AS Ratio FROM schools WHERE County = 'Santa Clara'
SELECT COUNT(*) FROM schools WHERE OpenDate >= '2000-01-01' AND OpenDate <= '2005-12-31' AND County = 'Stanislaus' AND FundingType = 'Directly Funded';
SELECT SUM(frpm.`Enrollment (K-12)`) FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`Academic Year` = '1989' AND schools.City = 'San Francisco' AND schools.StatusType = 'Closed' AND schools.District = 'Community College District'
SELECT COUNT(s.CDSCode), s.County FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.SOC = '11' AND f.ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY s.County ORDER BY COUNT(s.CDSCode) DESC LIMIT 1;
SELECT NCESDist FROM schools WHERE SOC = '31'
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND (StatusType = 'Active' OR StatusType = 'Closed') AND (EdOpsName = 'District Community Day School')
SELECT DISTINCT frpm.`District Code` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.City = 'Fresno' AND schools.Magnet = 0;
SELECT SUM(`Enrollment (Ages 5-17)`) AS total_students FROM frpm WHERE `School Name` = 'State Special School' AND `City` = 'Fremont' AND `Academic Year` = '2014-2015' AND EdOpsCode = 'SSS'
SELECT FRPMCount_Ages5_17 FROM frpm WHERE SchoolName = 'Youth Authority School' AND MailStreet = 'PO Box 1040'
SELECT MIN(`Low Grade`) FROM frpm WHERE `District Type` = 'SPECON' AND `NCESDist` = '613360'
SELECT schools.`School`, schools.`EdOpsName` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.`County Code` = '37' AND frpm.`NSLP Provision Status` = 'Breakfast Provision 2'
SELECT s.City FROM schools s INNER JOIN frpm f ON s.CDSCode = f.CDSCode WHERE f.`Educational Option Type` = 'Lunch Provision 2' AND f.`Low Grade` = '9' AND f.`High Grade` = '12' AND s.County = 'Merced' AND s.EILCode = 'HS'
SELECT T1.`School Name`, T1.`Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Low Grade` = 'K' AND T1.`High Grade` = '9' AND T2.County = 'Los Angeles'
SELECT T1.`School Type` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Adelanto' GROUP BY T1.`School Type` ORDER BY COUNT(T1.`School Type`) DESC LIMIT 1
SELECT T1.County, COUNT(T1.CDSCode) AS Num_Schools FROM schools AS T1 WHERE T1.City IN ('San Diego', 'Santa Barbara') AND T1.Virtual = 'F' GROUP BY T1.County ORDER BY COUNT(T1.CDSCode) DESC LIMIT 1
SELECT School.`School Type`, School.School, School.Latitude FROM schools School WHERE School.Latitude = (SELECT MAX(Latitude) FROM schools)
SELECT T3.City, T3.School, T3.`Low Grade` FROM schools AS T3 WHERE T3.State = 'CA' ORDER BY T3.Latitude ASC LIMIT 1;
SELECT T1.`Low Grade`, T1.`High Grade` FROM schools AS T1 WHERE T1.Longitude = (SELECT MAX(Longitude) FROM schools)
SELECT COUNT(DISTINCT T1.CDSCode) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSoffered = 'K-8' AND T1.Magnet = 1 AND T2.`Charter Funding Type` = 'Multiple Provision Types' SELECT T1.City, COUNT(T1.CDSCode) FROM schools AS T1 WHERE T1.GSoffered = 'K-8' GROUP BY T1.City
SELECT AdmFName1, District FROM schools GROUP BY AdmFName1, District ORDER BY COUNT(AdmFName1) DESC LIMIT 2
SELECT T1.`Percent (%) Eligible Free (K-12)`, T2.`District Code` FROM `frpm` AS T1 INNER JOIN `schools` AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
SELECT schools.AdmLName1, schools.District, schools.County, schools.School FROM schools WHERE schools.CharterNum = 40
SELECT T1.AdmEmail1 FROM schools AS T1 WHERE T1.County = 'San Bernardino' AND T1.District = 'San Bernardino City Unified' AND T1.OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (T1.SOC = '62' OR T1.DOC = '54')
SELECT s.AdmEmail1, s.School FROM satscores ss JOIN schools s ON ss.cds = s.CDSCode WHERE ss.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores) LIMIT 1;
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T2.type = 'POPLATEK PO OBRATU' AND T4.A3 = 'East Bohemia'
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'
SELECT MAX((SELECT AVG(A12) FROM district) / (SELECT AVG(A13) FROM district)) as higher_percentage;
SELECT COUNT(T1.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T1.district_id HAVING AVG(T2.A11) > 6000 AND AVG(T2.A11) < 10000
SELECT COUNT(*) FROM client AS c INNER JOIN district AS d ON c.district_id = d.district_id WHERE c.gender = 'M' AND d.A3 = 'North Bohemia' GROUP BY c.client_id HAVING AVG(d.A11) > 8000
SELECT T1.account_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' AND T2.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F' AND birth_date = (SELECT MAX(birth_date) FROM client WHERE gender = 'F')) AND T3.A11 = (SELECT MIN(A11) FROM district) UNION SELECT T1.account_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' AND T2.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F' AND birth_date = (SELECT MAX(birth_date
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id GROUP BY T1.account_id HAVING T3.birth_date = (SELECT MIN(birth_date) FROM client) ORDER BY AVG(A11) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'Owner'
SELECT T2.client_id, T2.gender, T2.birth_date FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id WHERE T1.type = 'DISPONENT' AND T1.type = 'POPLATEK PO OBRATU'
SELECT MIN(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date LIKE '1997%' AND T2.frequency = 'POPLATEK TYDNE'
SELECT MAX(amount) FROM loan WHERE duration > 12 AND account_id IN (SELECT account_id FROM account WHERE date >= '1993-01-01' AND date <= '1993-12-31')
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Slokolov'
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE date LIKE '1995%')
SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.balance > 3000
SELECT client_id FROM disp JOIN card ON disp.disp_id = card.disp_id WHERE card.issued = '1994-03-03'
SELECT MIN(date) FROM account WHERE account_id IN (SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14')
SELECT d.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.date = '1994-08-25'
SELECT MAX(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE card_id IN (SELECT card_id FROM card WHERE issued = '1996-10-21'))
SELECT C.gender FROM client AS C INNER JOIN account AS A ON C.client_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A11 = (SELECT MAX(A11) FROM district) ORDER BY C.birth_date ASC LIMIT 1;
SELECT T2.first_name, T2.last_name, T3.amount FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T4.amount = (SELECT MAX(amount) FROM loan) ORDER BY T3.date ASC LIMIT 1
SELECT COUNT(C.client_id) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE D.A2 = 'Jesenik' AND C.gender = 'F'
SELECT t1.disp_id FROM trans AS t1 INNER JOIN disp AS t2 ON t1.account_id = t2.account_id WHERE t1.amount = 5100 AND t1.date = '1998-09-02'
SELECT COUNT(account_id) FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Litomerice') AND date >= '1996-01-01' AND date <= '1996-12-31'
SELECT T1.A2 FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T4.amount = 98832 AND T4.date = '1996-01-03'
SELECT account_id FROM disp JOIN client ON disp.client_id = client.client_id JOIN district ON client.district_id = district.district_id WHERE district.A3 = 'Prague' ORDER BY disp_id ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN T3.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'south Bohemia' AND T3.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'south Bohemia')
SELECT C.client_id, ((T1.balance - T2.balance) / T2.balance) * 100 AS increase_rate FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN trans AS T1 ON A.account_id = T1.account_id INNER JOIN trans AS T2 ON A.account_id = T2.account_id WHERE T1.date = '1993-07-05' AND T2.date = '1993-03-22' AND T1.date = '1998-12-27'
SELECT SUM(amount) / (SELECT SUM(amount) FROM loan WHERE status = 'A') * 100 FROM loan WHERE status = 'A'
SELECT ( SELECT ( COUNT(*) * 100.0 / ( SELECT COUNT(*) FROM loan WHERE amount < 100000 ) ) FROM loan WHERE amount < 100000 AND status = 'C' ) AS percentage_accounts_running_without_issue
SELECT a.account_id, d.A2 as district_name, d.A3 as district_region FROM account a JOIN disp ON a.account_id = disp.account_id JOIN client ON disp.client_id = client.client_id JOIN district d ON client.district_id = d.district_id JOIN card ON disp.disp_id = card.disp_id WHERE card.issued > a.date AND a.frequency = 'POPLATEK PO OBRATU' AND a.date = '1993'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A6 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31'
SELECT account_id, date FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A2 = 'Prachatice')
SELECT A2, A3 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE loan_id = 4990))
SELECT T1.account_id, T2.A2 AS district, T2.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount > 300000
SELECT loan.loan_id, district.A3, district.A11 FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.district_id = client.district_id JOIN district ON client.district_id = district.district_id WHERE loan.duration = 60;
SELECT T1.A4, ((T1.A13 - T1.A12) / T1.A12) * 100 AS unemployment_increment_rate FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'D' AND T3.date < '1996-01-01'
SELECT COUNT(account_id) * 100.0 / (SELECT COUNT(account_id) FROM account WHERE date >= '1993-01-01' AND date <= '1993-12-31') FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Decin') AND date >= '1993-01-01' AND date <= '1993-12-31';
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'
SELECT T1.A2 AS District, COUNT(T2.client_id) AS Female_Account_Holders FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' GROUP BY T1.A2 ORDER BY COUNT(T2.client_id) DESC LIMIT 10
SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawal FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%' GROUP BY d.A2 ORDER BY total_withdrawal DESC LIMIT 10;
SELECT COUNT(DISTINCT c.client_id) FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dis ON c.district_id = dis.district_id LEFT JOIN card ca ON d.disp_id = ca.disp_id WHERE dis.A3 = 'South Bohemia' AND ca.card_id IS NULL;
SELECT A3 FROM district WHERE district_id IN ( SELECT district_id FROM client WHERE client_id IN ( SELECT client_id FROM disp WHERE account_id IN ( SELECT account_id FROM loan WHERE status = 'C' ) ) ) GROUP BY A3 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T4.gender = 'M'
SELECT district.A2 AS district_name, district.A5 AS branch_location FROM district WHERE district.district_id IN ( SELECT district_id FROM ( SELECT district_id, A13 FROM district WHERE A13 = ( SELECT MAX(A13) FROM district WHERE A11 = 1996 ) ) AS T )
SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE A16 = ( SELECT MAX(A16) FROM district WHERE A9 = 1996 ) )
SELECT COUNT(account_id) FROM account JOIN disp ON account.account_id = disp.account_id JOIN card ON disp.disp_id = card.disp_id JOIN trans ON account.account_id = trans.account_id WHERE trans.balance < 0 AND trans.operation = 'VYBER KARTOU' AND account.frequency = 'POPLATEK MESICNE'
SELECT COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE' AND T1.status = 'approved' AND T1.date BETWEEN '1995-01-01' AND '1997-12-31'
SELECT COUNT(account_id) FROM loan WHERE status = 'C' AND account_id IN (SELECT account_id FROM account WHERE district_id = 1)
SELECT COUNT(T1.client_id) FROM client T1 INNER JOIN district T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1 ) AND T1.gender = 'M'
SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'disponent'
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek')
SELECT district.A2, district.A3 FROM district INNER JOIN account ON district.district_id = account.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.amount > 10000 AND trans.date BETWEEN '1997-01-01' AND '1997-12-31'
SELECT T1.account_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A4 = 'Pisek'
SELECT account_id FROM disp WHERE type = 'gold' AND account_id IN (SELECT account_id FROM disp WHERE type = 'junior')
SELECT AVG(amount) FROM trans WHERE type = 'credit card' AND operation = 'VYBER KARTOU' AND date >= '2021/01/01' AND date <= '2021/12/31'
SELECT disp.client_id FROM disp JOIN card ON disp.disp_id = card.disp_id JOIN trans ON disp.account_id = trans.account_id WHERE trans.type = 'VYBER KARTOU' AND YEAR(trans.date) = 1998 GROUP BY disp.client_id HAVING SUM(trans.amount) / COUNT(DISTINCT MONTH(trans.date)) < (SELECT AVG(trans.amount) FROM trans WHERE YEAR(trans.date) = 1998 AND trans.type = 'VYBER KARTOU')
SELECT DISTINCT T3.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F' AND T3.type = 'credit'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T1.gender = 'F' AND T4.A3 = 'South Bohemia'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'
SELECT DISTINCT T2.type FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.type != 'OWNER' AND T2.A11 > 8000 AND T2.A11 <= 9000
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'
SELECT district.A2 FROM district INNER JOIN client ON district.district_id = client.district_id INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE trans.type = 'VYDAJ';
SELECT AVG(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01')
SELECT COUNT(*) FROM card WHERE type = 'classic' AND disp_id IN (SELECT disp_id FROM disp WHERE type = 'OWNER')
SELECT COUNT(client_id) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district WHERE A2 = 'Hl.m. Praha')
SELECT ( SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card)) FROM card WHERE type = 'gold' AND STRFTIME('%Y', issued) < '1998' ) AS percentage_of_gold_cards_prior_to_1998
SELECT T2.client_id, T2.gender FROM loan AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN disp AS T2 ON T3.account_id = T2.account_id WHERE T1.amount = (SELECT MAX(amount) FROM loan)
SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532)
SELECT T1.district_id FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 33333
SELECT t.trans_id, t.date, t.amount FROM trans t JOIN disp d ON t.account_id = d.account_id JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 3356 AND t.type = 'VYBER'
SELECT COUNT(*) FROM account WHERE frequency = 'POPLATEK TYDNE' AND account_id IN (SELECT account_id FROM loan WHERE amount < 200000)
SELECT T2.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.client_id = 13539
SELECT A3 FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.client_id = 3541
SELECT T1.A4 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id INNER JOIN account AS T4 ON T3.account_id = T4.account_id INNER JOIN loan AS T5 ON T4.account_id = T5.account_id WHERE T5.status = 'A' GROUP BY T1.A4 ORDER BY COUNT(T4.account_id) DESC LIMIT 1
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN `order` AS T4 ON T3.account_id = T4.account_id WHERE T4.order_id = 32423
SELECT T1.* FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.district_id = 5;
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik')
SELECT client_id FROM client WHERE client_id IN (SELECT client_id FROM disp WHERE type = 'junior card' AND disp_id IN (SELECT disp_id FROM card WHERE type = 'credit card' AND issued > '1996-01-01'))
SELECT COUNT(CASE WHEN T3.gender = 'F' THEN 1 END) * 100.0 / COUNT(*) AS Percentage FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A11 > 10000 GROUP BY T3.district_id
SELECT (SUM(CASE WHEN T2.gender = 'M' AND T3.date BETWEEN '1996-01-01' AND '1996-12-31' THEN T4.amount ELSE 0 END) - SUM(CASE WHEN T2.gender = 'M' AND T3.date BETWEEN '1997-01-01' AND '1997-12-31' THEN T4.amount ELSE 0 END)) / SUM(CASE WHEN T2.gender = 'M' AND T3.date BETWEEN '1996-01-01' AND '1996-12-31' THEN T4.amount ELSE 0 END) * 100 FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id;
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-01-01'
SELECT SUM(CASE WHEN T1.A3 = 'North Bohemia' AND strftime('%Y', T1.date) = '1996' THEN T1.A16 ELSE 0 END) - SUM(CASE WHEN T1.A3 = 'East Bohemia' AND strftime('%Y', T1.date) = '1996' THEN T1.A16 ELSE 0 END) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10
SELECT COUNT(*) FROM `order` WHERE account_id = 3 AND k_symbol = 'SIPO' SELECT SUM(amount) FROM `order` WHERE k_symbol = 'SIPO'
SELECT T2.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130
SELECT COUNT(T1.account_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'OWNER' AND T2.frequency = 'POPLATEK PO OBRATU'
SELECT SUM(amount) AS total_debt, status FROM loan WHERE account_id = (SELECT account_id FROM disp WHERE client_id = 992) GROUP BY status
SELECT SUM(balance) AS total_balance, T2.gender AS account_owner_gender FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.trans_id = 851 AND T2.client_id = 4
SELECT C.type FROM client AS A INNER JOIN disp AS B ON A.client_id = B.client_id INNER JOIN card AS C ON B.disp_id = C.disp_id WHERE A.client_id = 9;
SELECT SUM(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 617) AND date BETWEEN '1998-01-01' AND '1998-12-31'
SELECT c.client_id, c.birth_date FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id JOIN district dis ON c.district_id = dis.district_id WHERE c.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND dis.A6 = 'East Bohemia'
SELECT client_id FROM client WHERE gender = 'F' ORDER BY client_id DESC LIMIT 3
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T4.type = 'SIPO' AND T4.amount > 4000;
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-01-01'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior credit card'
SELECT CAST(SUM(IIF(T3.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T3.client_id) FROM disp AS T1 INNER JOIN client AS T3 ON T1.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague'
SELECT (COUNT(CASE WHEN C1.gender = 'M' THEN 1 END) / COUNT(C1.client_id)) * 100 AS percentage FROM client AS C1 INNER JOIN disp AS D1 ON C1.client_id = D1.client_id INNER JOIN account AS A1 ON D1.account_id = A1.account_id WHERE A1.frequency = 'POPLATEK TYDNE'
SELECT COUNT(*) FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN account AS a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND c.gender = 'User'
SELECT MIN(amount) FROM loan WHERE duration > 24 AND account_id IN ( SELECT account_id FROM account WHERE date < '1997-01-01' )
SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'F' GROUP BY account.account_id ORDER BY client.birth_date ASC, district.A11 ASC LIMIT 1
SELECT COUNT(*) FROM client c JOIN district d ON c.district_id = d.district_id WHERE c.birth_date LIKE '%1920%' AND d.A3 = 'east Bohemia'
SELECT COUNT(*) FROM loan AS l INNER JOIN account AS a ON l.account_id = a.account_id WHERE l.duration = 24 AND a.frequency = 'POPLATEK TYDNE'
SELECT AVG(amount) AS average_loan_amount FROM loan WHERE status IN ('C', 'D') AND account_id IN ( SELECT account_id FROM trans WHERE k_symbol = 'POPLATEK PO OBRATU' )
SELECT c.client_id, c.district_id FROM client c JOIN disp d ON c.client_id = d.client_id JOIN account a ON d.account_id = a.account_id WHERE d.type = 'OWNER'
SELECT T1.client_id, DATEDIFF(CURDATE(), T2.birth_date) AS age FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN card AS T4 ON T1.disp_id = T4.disp_id INNER JOIN loan AS T5 ON T3.account_id = T5.account_id WHERE T4.type = 'gold' AND T5.status = 'eligible' ORDER BY age DESC LIMIT 1
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.molecule_id) AS NonCarcinogenic_with_Chlorine FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'
SELECT AVG(CASE WHEN T1.element = 'o' AND T2.bond_type = '-' THEN 1 ELSE 0 END) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o'
SELECT AVG(CAST(COUNT(CASE WHEN T4.label = '+' AND T3.bond_type = '-' THEN T3.bond_id END) AS REAL) / COUNT(T3.atom_id)) FROM molecule AS T4 INNER JOIN bond AS T3 ON T3.molecule_id = T4.molecule_id
SELECT COUNT(*) FROM atom WHERE element = 'na' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '-')
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'
SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = '
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM atom WHERE element != 'br'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'si'
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR004_8_9' )
SELECT element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = ' = '
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1
SELECT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'
SELECT A.atom_id, C.atom_id FROM connected AS A INNER JOIN bond AS B ON A.bond_id = B.bond_id INNER JOIN connected AS C ON A.atom_id = C.atom_id WHERE B.bond_type = '-'
SELECT a.atom_id, c.atom_id2 FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-'
SELECT element, COUNT(*) AS num_elements FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY element ORDER BY num_elements LIMIT 1;
SELECT T2.bond_type FROM bond AS T2 INNER JOIN connected AS T1 ON T1.bond_id = T2.bond_id WHERE (T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20') OR (T1.atom_id = 'TR004_20' AND T1.atom_id2 = 'TR004_8')
SELECT DISTINCT T3.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element != 'sn' AND T1.label NOT IN ('+', '-')
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element IN ('i', 's') AND T3.bond_type = '-'
SELECT a.atom_id, b.atom_id AS connected_atom FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN atom a ON connected.atom_id = a.atom_id JOIN atom b ON connected.atom_id2 = b.atom_id WHERE bond.bond_type = '#'
SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR181'
SELECT CAST(SUM(CASE WHEN element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) as percent FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT CAST(SUM(CASE WHEN T2.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T2.molecule_id = T1.molecule_id WHERE T1.label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3;
SELECT T1.atom_id, T2.atom_id FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_2_6' AND T1.atom_id != T2.atom_id
SELECT SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.label = '-' THEN 1 ELSE 0 END) AS difference FROM molecule AS T1
SELECT connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' ORDER BY m.label LIMIT 5
SELECT (CAST(SUM(bond_type = ' = ') AS REAL) / COUNT(bond_id)) * 100 AS percentage FROM bond WHERE molecule_id = 'TR008'
SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1
SELECT (CAST((SUM(CASE WHEN A.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(A.atom_id)) * 100 AS percent FROM atom A JOIN molecule M ON A.molecule_id = M.molecule_id WHERE M.molecule_id = 'TR206';
SELECT T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000'
SELECT element, label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060'
SELECT MAX(bond_type) AS majority_bond_type, CASE WHEN M.label = '+' THEN 'carcinogenic' WHEN M.label = '-' THEN 'non-carcinogenic' END AS carcinogenic_status FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.molecule_id = 'TR018' GROUP BY B.bond_type, M.label ORDER BY COUNT(B.bond_type) DESC LIMIT 1;
SELECT m.label FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-' GROUP BY m.molecule_id HAVING COUNT(*) = 1 ORDER BY m.label ASC LIMIT 3;
SELECT b.bond_type, COUNT(*) AS bond_count FROM bond AS b INNER JOIN molecule AS m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR006' GROUP BY b.bond_type ORDER BY b.bond_type LIMIT 2;
SELECT COUNT(*) FROM connected WHERE bond_id LIKE 'TR009_%' AND (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond JOIN connected ON bond.molecule_id = connected.bond_id WHERE bond.molecule_id = 'TR001_6_9'
SELECT T2.label, CASE WHEN T2.label = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS Carcinogenicity FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM connected WHERE atom_id = 'TR%_19' OR atom_id2 = 'TR%_19'
SELECT element FROM atom WHERE molecule_id = 'TR004'
SELECT COUNT(*) FROM molecule WHERE label = '-'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTRING(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T2.label = '+';
SELECT B.bond_id FROM bond AS B JOIN connected AS C ON B.bond_id = C.bond_id JOIN atom AS A1 ON C.atom_id = A1.atom_id JOIN atom AS A2 ON C.atom_id2 = A2.atom_id WHERE A1.element = 'p' AND A2.element = 'n';
SELECT m.label, COUNT(b.bond_id) AS num_double_bonds FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id ORDER BY num_double_bonds DESC LIMIT 1;
SELECT CAST(COUNT(T3.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'i'
SELECT bond.bond_type, bond.bond_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id WHERE SUBSTR(atom.atom_id, 7, 2) + 0 = 45
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected)
SELECT a.atom_id FROM atom a JOIN bond b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND a.molecule_id = 'TR447'
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR144_8_19' )
SELECT molecule_id, COUNT(*) AS num_double_bonds FROM molecule JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE label = '+' AND bond_type = ' = ' GROUP BY molecule_id ORDER BY num_double_bonds DESC LIMIT 1;
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IS NOT NULL AND T1.element = 'pb'
SELECT element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '#';
SELECT (COUNT(bond_id) / (SELECT COUNT(atom_id) FROM atom GROUP BY element ORDER BY COUNT(element) DESC LIMIT 1)) * 100 FROM bond JOIN connected ON bond.molecule_id = connected.bond_id JOIN atom ON connected.atom_id = atom.atom_id GROUP BY atom.element ORDER BY COUNT(atom.element) DESC LIMIT 1;
SELECT SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) / COUNT(B.bond_id) AS proportion FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h')
SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'
SELECT bond.bond_type FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'sn'
SELECT COUNT(element) FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE bond.bond_type = '-'
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')
SELECT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT molecule_id FROM bond JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond_type = '-' AND label = '-'
SELECT SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) / COUNT(T1.atom_id) * 100 as percent FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'
SELECT T1.label FROM molecule AS T1 WHERE T1.molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(DISTINCT T4.molecule_id) FROM molecule AS T4 INNER JOIN atom AS T1 ON T1.molecule_id = T4.molecule_id INNER JOIN bond AS T2 ON T2.molecule_id = T4.molecule_id INNER JOIN connected AS T3 ON T3.atom_id = T1.atom_id OR T3.atom_id2 = T1.atom_id WHERE T4.label = '+' AND T4.molecule_id BETWEEN 'TR000' AND 'TR030'
SELECT B.bond_type FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE M.molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR001_10_11'
SELECT COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'i'
SELECT MAX(label) FROM molecule WHERE element = 'Ca'
SELECT COUNT(*) FROM connected JOIN atom ON connected.atom_id = atom.atom_id JOIN atom AS atom2 ON connected.atom_id2 = atom2.atom_id WHERE connected.bond_id = 'TR001_1_8' AND (atom.element = 'cl' OR atom2.element = 'cl') AND (atom.element = 'c' OR atom2.element = 'c')
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-' AND T2.element = 'c' LIMIT 2;
SELECT (CAST(COUNT(CASE WHEN T1.element = 'cl' THEN T1.atom_id END) AS REAL) * 100 / COUNT(T1.molecule_id)) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'
SELECT `molecule_id` FROM `bond` WHERE `bond_type` = ' = '
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN bond AS T3 ON T1.bond_id = T3.bond_id WHERE T3.bond_type = '#'
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR005_16_26' )
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '-' AND m.label = '-'
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'
SELECT T2.bond_id FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.bond_type = '#' AND (T1.label = '+' OR T1.label = '-')
SELECT T2.element FROM molecule AS T1 JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id JOIN connected AS T3 ON T2.atom_id = T3.atom_id WHERE T1.label = '+' AND substr(T2.atom_id, 7, 1) = 4 AND T2.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT T2.label, CAST(SUM(IIF(T1.element = 'h', 1, 0)) AS REAL) / COUNT(T1.element) AS Hydrogen_Ratio FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006' GROUP BY T2.label
SELECT CASE WHEN T1.label = '+' THEN 'Carcinogenic' WHEN T1.label = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS Carcinogenicity FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'ca'
SELECT DISTINCT B.`bond_type` FROM `atom` A JOIN `bond` B ON A.`molecule_id` = B.`molecule_id` WHERE A.`element` = 'te'
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11' )
SELECT (COUNT(DISTINCT molecule_id) / (SELECT COUNT(DISTINCT molecule_id) FROM bond)) * 100 FROM bond WHERE bond_type = '#'
SELECT DIVIDE(SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END), COUNT(bond_id)) * 100 AS percent FROM bond WHERE molecule_id = 'TR047'
SELECT M.label FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE A.atom_id = 'TR001_1' AND M.label = '+';
SELECT label FROM molecule WHERE molecule_id = 'TR151' AND label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR151' AND element = 'cl'
SELECT COUNT(*) FROM molecule WHERE label = '+'
SELECT A.atom_id FROM atom A JOIN molecule M ON A.molecule_id = M.molecule_id WHERE A.element = 'c' AND substr(M.molecule_id, 3, 3) > 10 AND substr(M.molecule_id, 3, 3) < 50;
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.label = '+'
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE element = 'h' AND label = '+')
SELECT molecule_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = 'TR00_1_2' AND atom.element = 'TR00_1';
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT (CAST((SUM(CASE WHEN M.label = '+' AND A.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT M.molecule_id)) * 100.0) AS percentage FROM molecule AS M JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE M.molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'h') AND M.label = '+';
SELECT m.label FROM molecule AS m WHERE m.molecule_id = 'TR124' AND m.label = '+';
SELECT T1.atom_id FROM connected AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR186'
SELECT bond_type FROM bond WHERE molecule_id = 'TR007_4_19'
SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4' )
SELECT COUNT(T3.bond_id) AS double_bonds, T4.label AS carcinogenic FROM molecule AS T4 INNER JOIN bond AS T1 ON T4.molecule_id = T1.molecule_id INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T4.molecule_id = 'TR006' AND T1.bond_type = ' = '
SELECT m.label, a.element FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND (a.element = 'cl' OR a.element = 'c' OR a.element = 'h' OR a.element = 'o' OR a.element = 's' OR a.element = 'n' OR a.element = 'p' OR a.element = 'na' OR a.element = 'br' OR a.element = 'f' OR a.element = 'i' OR a.element = 'sn' OR a.element = 'pb' OR a.element = 'te' OR a.element = 'ca')
SELECT b.bond_id, c.atom_id, c.atom_id2 FROM bond b JOIN connected c ON b.bond_id = c.bond_id WHERE b.bond_type = '-'
SELECT m.label, a.element FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN atom a ON m.molecule_id = a.molecule_id WHERE b.bond_type = '#' AND (a.element = 'cl' OR a.element = 'c' OR a.element = 'h' OR a.element = 'o' OR a.element = 's' OR a.element = 'n' OR a.element = 'p' OR a.element = 'na' OR a.element = 'br' OR a.element = 'f' OR a.element = 'i' OR a.element = 'sn' OR a.element = 'pb' OR a.element = 'te' OR a.element = 'ca')
SELECT element FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_id = 'TR000_2_3'
SELECT COUNT(*) FROM bond JOIN atom ON bond.molecule_id = atom.molecule_id WHERE atom.element = 'cl'
SELECT atom_id FROM atom WHERE molecule_id = 'TR346'; SELECT COUNT(DISTINCT bond_type) AS num_bond_types FROM bond WHERE molecule_id = 'TR346';
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.label = '+'
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN bond b ON m.molecule_id = b.molecule_id WHERE a.element != 's' OR b.bond_type != ' = '
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4' AND T2.label = '+'
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005'
SELECT COUNT(*) FROM bond WHERE bond_type = '-'
SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element LIKE '%cl%' AND T1.label = '+';
SELECT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT (CAST(COUNT(CASE WHEN T4.label = '+' AND T2.element = 'Chlorine' THEN T1.molecule_id END) AS REAL) / COUNT(T1.molecule_id)) * 100 AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T2.molecule_id = T1.molecule_id INNER JOIN connected AS T3 ON T3.atom_id = T2.atom_id INNER JOIN bond AS T4 ON T4.molecule_id = T1.molecule_id WHERE T2.element = 'Chlorine' AND T4.label = '+'
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(element) FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_3_4' )
SELECT b.bond_type FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE (a1.atom_id = 'TR000_1' AND a2.atom_id = 'TR000_2') OR (a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_1')
SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.atom_id = "TR000_2" OR T1.atom_id = "TR000_4"
SELECT element FROM atom WHERE atom_id = 'TR000_1'
SELECT CASE WHEN T1.label = '+' THEN 'Carcinogenic' WHEN T1.label = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS Carcinogenic_Status FROM molecule AS T1 WHERE T1.molecule_id = 'TR000';
SELECT 100.0 * SUM(CASE WHEN B.bond_type = '-' THEN 1 ELSE 0 END) / COUNT(B.bond_id) FROM bond AS B
SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'
SELECT molecule_id FROM atom WHERE element = 's' AND atom_id IN ( SELECT atom_id FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE bond_type = ' = ' )
SELECT molecule_id FROM molecule WHERE label = '-' GROUP BY molecule_id HAVING COUNT(atom_id) > 5;
SELECT element FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE bond.bond_type = '=' AND molecule.label = 'TR024'
SELECT T2.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T2.atom_id) DESC LIMIT 1
SELECT (CAST((SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT M.molecule_id)) * 100.0 FROM molecule AS M JOIN atom AS A ON M.molecule_id = A.molecule_id JOIN bond AS B ON M.molecule_id = B.molecule_id JOIN connected AS C ON A.atom_id = C.atom_id OR A.atom_id = C.atom_id2 WHERE A.element = 'h' AND B.bond_type = '#';
SELECT COUNT(*) FROM molecule WHERE label = '+'
SELECT COUNT(*) FROM bond WHERE bond_type = '-' AND molecule_id BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-' AND T1.element != 'cl'
SELECT COUNT(DISTINCT molecule_id) FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE element = 'o' AND bond_type = ' = ';
SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND m.label = '-'
SELECT element, bond_type FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'c' AND T3.bond_type = ' = ' AND T2.label = 'TR012'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT T1.name FROM cards AS T1 WHERE T1.borderColor = 'borderless' AND T1.cardKingdomFoilId IS NULL AND T1.cardKingdomId IS NOT NULL
SELECT name, faceConvertedManaCost FROM cards ORDER BY faceConvertedManaCost DESC;
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'Banned' AND legalities.format = 'gladiator'
SELECT T1.name, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'
SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal';
SELECT cards.asciiName, rulings.text, cards.hasContentWarning FROM cards JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniel' AND cards.hasContentWarning = 1;
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s')
SELECT cards.name, cards.artist, cards.isPromo FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.name, cards.artist, cards.isPromo ORDER BY COUNT(rulings.uuid) DESC LIMIT 1;
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT CAST(COUNT(T1.id) * 100.0 / (SELECT COUNT(*) FROM cards) AS REAL) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT T1.name AS set_name, T2.totalSetSize AS total_cards FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT T1.type) FROM cards AS T1 WHERE T1.artist = 'Aaron Boyd'
SELECT T3.keyword_name FROM cards AS T1 INNER JOIN card_keywords AS T2 ON T1.uuid = T2.uuid INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(*) FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor\'s Chosen';
SELECT T1.originalType FROM cards AS T1 WHERE T1.name = 'Ancestor\'s Chosen'
SELECT language FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Angel of Mercy')
SELECT COUNT(c.uuid) FROM legalities l JOIN cards c ON l.uuid = c.uuid WHERE l.status = 'restricted' AND c.isTextless = 0
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Condemn'
SELECT COUNT(cards.id) FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle';
SELECT T1.type FROM cards AS T1 WHERE T1.name = 'Benalish Knight'
SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'
SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Phyrexian')
SELECT CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN id END) AS REAL) * 100 / COUNT(id) FROM cards
SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT (COUNT(T1.id) * 100.0 / (SELECT COUNT(T2.id) FROM cards AS T2 WHERE T2.isStorySpotlight = 1)) AS percentage FROM cards AS T1 WHERE T1.language = 'French' AND T1.isStorySpotlight = 1;
SELECT COUNT(id) FROM cards WHERE toughness = '99'
SELECT name FROM cards WHERE artist = 'Aaron Boyd'
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT DISTINCT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified';
SELECT * FROM cards WHERE availability = 'paper' AND uuid IN (SELECT uuid FROM foreign_data WHERE language = 'Japanese')
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND id IN (SELECT id FROM legalities WHERE status = 'Banned')
SELECT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality')
SELECT COUNT(*) AS num_cards, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal' GROUP BY T2.status;
SELECT c.name, c.colors FROM cards AS c INNER JOIN sets AS s ON c.setCode = s.code WHERE s.code = 'OGW'
SELECT T1.name, T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5;
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT colors, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.id BETWEEN 1 AND 20;
SELECT cards.name FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact' AND cards.colors = 'B' AND foreign_data.language <> 'English';
SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3;
SELECT COUNT(T1.id) FROM cards AS T1 WHERE T1.artist = 'John Avon' AND T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NULL
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(id) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability IN ('paper', 'mtgo')
SELECT SUM(convertedManaCost) FROM cards WHERE artist = 'Rob Alexander'
SELECT DISTINCT cards.subtypes, cards.supertypes FROM cards WHERE cards.availability = 'arena'
SELECT T2.setCode FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Spanish'
SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary'
SELECT CAST(SUM(CASE WHEN T1.isStorySpotlight = 1 AND T1.isTextless = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS Percentage, T1.id FROM cards AS T1 GROUP BY T1.id HAVING T1.isStorySpotlight = 1
SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish' GROUP BY cards.name SELECT COUNT(cards.id) * 100 / (SELECT COUNT(cards.id) FROM cards) as percentage FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Spanish'
SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE baseSetSize = 309)
SELECT COUNT(T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Portuguese (Brasil)' AND T2.block = 'Commander'
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Creature' AND T1.subtypes LIKE '%Goblin%' AND T2.status = 'legal';
SELECT DISTINCT types FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'German') AND subtypes IS NOT NULL AND supertypes IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%' OR power IS NULL OR power = '*' AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid INNER JOIN rulings AS r ON c.uuid = r.uuid WHERE l.format = 'pre-modern' AND r.text = 'This is a triggered mana ability' AND c.side IS NULL;
SELECT c.id FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE c.artist = 'Erica Yang' AND l.format = 'pauper' AND c.availability = 'paper'
SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT t1.name FROM cards AS t1 INNER JOIN foreign_data AS t2 ON t1.uuid = t2.uuid WHERE t1.type LIKE '%Creature%' AND t1.layout = 'normal' AND t1.borderColor = 'black' AND t1.artist = 'Matthew D. Wilson' AND t2.language = 'French'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'
SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'
SELECT (COUNT(CASE WHEN language = 'French' AND (power IS NULL OR power = '*') THEN 1 END) / COUNT(CASE WHEN power IS NULL OR power = '*' THEN 1 END)) * 100 AS percentage FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE language = 'French'
SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' AND T1.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code;
SELECT T1.availability FROM cards AS T1 WHERE T1.artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000
SELECT COUNT(id) FROM cards WHERE isOversized = 1 OR isReprint = 1 OR isPromo = 1
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.multiverseid = '149934'
SELECT T1.id FROM cards AS T1 WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId, T1.cardKingdomId LIMIT 3
SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND name NOT IN (SELECT name FROM cards WHERE side IS NOT NULL)
SELECT sets.name FROM sets WHERE sets.mtgoCode IS NULL OR sets.mtgoCode = '' ORDER BY sets.name LIMIT 3;
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Archenemy' AND T1.code = 'ARC'
SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5
SELECT T2.language, T3.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode INNER JOIN "sets" AS T3 ON T1.id = T3.id WHERE T1.id = 206
SELECT T1.code, T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'italian' AND T1.block = 'Shadowmoor' ORDER BY T1.name LIMIT 2;
SELECT T2.id FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode INNER JOIN foreign_data AS T3 ON T2.uuid = T3.uuid WHERE T1.isForeignOnly = 1 AND T1.isFoilOnly = 1 AND T3.language = 'Japanese'
SELECT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Russian' ORDER BY sets.baseSetSize DESC LIMIT 1;
SELECT CAST(SUM(CASE WHEN language = 'Chinese Simplified' AND isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(isOnlineOnly) FROM foreign_data
SELECT COUNT(T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
SELECT COUNT(id) AS num_black_border_cards, id FROM cards WHERE borderColor = 'black'
SELECT COUNT(id) FROM cards WHERE frameEffects = 'extendedart'; SELECT id FROM cards WHERE frameEffects = 'extendedart';
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 174
SELECT name FROM sets WHERE code = 'ALL'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'A Pedra Fellwar'
SELECT S.code FROM sets AS S WHERE S.releaseDate = '2007-07-13'
SELECT T1.baseSetSize, T1.code FROM sets AS T1 WHERE T1.block = 'Masques' OR T1.block = 'Mirage'
SELECT code FROM sets WHERE type = 'expansion'
SELECT T2.name AS foreign_name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'Boros'
SELECT T2.language, T1.flavorText, T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'colorpie'
SELECT (COUNT(CASE WHEN T1.convertedManaCost = 10 THEN 1 END) / COUNT(T1.convertedManaCost)) * 100 AS percentage FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'
SELECT code FROM sets WHERE type = 'expansion commander'
SELECT F.name AS foreign_name, C.type FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.watermark = 'Abzan'
SELECT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'Azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name FROM cards WHERE isTextless = 0;
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen'
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL)
SELECT T1.name FROM cards AS T1 WHERE T1.isPromo = 1 AND T1.side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
SELECT COUNT(DISTINCT T1.artist) FROM cards AS T1 WHERE T1.borderColor = 'black' AND T1.availability LIKE '%arena%' AND T1.availability LIKE '%mtgo%'
SELECT CASE WHEN (SELECT convertedManaCost FROM cards WHERE name = 'Serra Angel') > (SELECT convertedManaCost FROM cards WHERE name = 'Shrine Keeper') THEN 'Serra Angel' ELSE 'Shrine Keeper' END as card_with_higher_converted_mana_cost;
SELECT T1.artist FROM cards AS T1 WHERE T1.flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3;
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor\'s Chosen' AND T2.language = 'Italian';
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE id IN (SELECT id FROM cards WHERE name = 'Angel of Mercy'))
SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor\'s Chosen' AND T2.language = 'Korean';
SELECT COUNT(*) FROM cards JOIN set_translations ON cards.setCode = set_translations.code WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'
SELECT baseSetSize FROM sets WHERE name = 'Hauptset Zehnte Edition'
SELECT translation FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition') AND language = 'Simplified Chinese'
SELECT s.name FROM cards AS c INNER JOIN sets AS s ON c.setCode = s.code WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL;
SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen';
SELECT type FROM sets WHERE name = 'Hauptset Zehnte Edition'
SELECT COUNT(DISTINCT T1.setCode) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT CASE WHEN sets.isForeignOnly = 1 THEN 'Yes' ELSE 'No' END AS is_available_outside_US FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Adarkar Valkyrie';
SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Italian' AND translation IS NOT NULL) AND baseSetSize < 10;
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')
SELECT cards.name FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' ORDER BY cards.convertedManaCost DESC LIMIT 1;
SELECT DISTINCT artist FROM cards WHERE setCode = 'CSP' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')
SELECT * FROM cards WHERE setCode = 'CSP' AND number = '4'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T2.name = 'Coldsnap' AND (T1.power = '*' OR T1.power IS NULL)
SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian';
SELECT T.language FROM foreign_data T INNER JOIN cards C ON T.uuid = C.uuid WHERE C.name = 'Ancestor''s Chosen' AND T.flavorText IS NOT NULL;
SELECT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.name = 'Ancestor''s Chosen'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setCode = T3.code INNER JOIN set_translations AS T4 ON T3.code = T4.setCode WHERE T4.language = 'Italian' AND T3.name = 'Coldsnap'
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian' ORDER BY T1.convertedManaCost DESC LIMIT 1;
SELECT t1.date FROM rulings AS t1 INNER JOIN cards AS t2 ON t1.uuid = t2.uuid WHERE t2.name = 'Reminisce'
SELECT (SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) / SUM(CASE WHEN T1.convertedManaCost IS NOT NULL THEN 1 ELSE 0 END)) * 100 FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap';
SELECT CAST(COUNT(CASE WHEN T2.cardKingdomFoilId = T2.cardKingdomId AND T2.cardKingdomId IS NOT NULL THEN T2.cardKingdomFoilId END) AS REAL) * 100 / COUNT(CASE WHEN T1.name = 'Coldsnap' THEN T1.name END) FROM sets AS T1 INNER JOIN cards AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Coldsnap'
SELECT T2.code FROM sets AS T2 WHERE T2.releaseDate = '2017-07-14'
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2'
SELECT T2.mcmName FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate = '2017-06-09'
SELECT T2.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation LIKE '%From the Vault: Lore%'
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'
SELECT T1.name AS CardName, T2.text AS RulingText, CASE WHEN T1.hasContentWarning = 1 THEN 'Missing or degraded properties and values' ELSE 'No missing or degraded properties and values' END AS PropertyStatus FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'
SELECT s.releaseDate FROM sets s JOIN cards c ON s.code = c.setCode WHERE c.name = 'Evacuation'
SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'
SELECT T2.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'HuitiÃ¨me Ã©dition'
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French'
SELECT COUNT(translation) FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Salvat 2011') AND translation IS NOT NULL;
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese'
SELECT cards.asciiName FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Journey into Nyx Hero''s Path' ORDER BY cards.convertedManaCost DESC LIMIT 1
SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Ola de frío'
SELECT T4.`type` FROM cards AS T1 INNER JOIN sets AS T2 ON T1.`setCode` = T2.`code` WHERE T1.`name` = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') AND convertedManaCost = 3;
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified';
SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' AND T1.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode
SELECT (SUM(T1.isOnlineOnly = 1) / SUM(T2.language = 'Portuguese (Brazil)')) * 100 FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Portuguese (Brazil)'
SELECT T1.availability FROM cards AS T1 WHERE T1.artist = 'Aleksi Briclot' AND T1.isTextless = 1
SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets)
SELECT c.artist FROM cards c WHERE c.side IS NULL ORDER BY c.convertedManaCost DESC LIMIT 1
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'A'
SELECT T1.id FROM sets AS T1 WHERE T1.type = 'Commander' AND T1.totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'Commander' AND name NOT LIKE '%Alchemy%')
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.convertedManaCost DESC LIMIT 10;
SELECT MIN(c.originalReleaseDate) AS Oldest_Release_Date, c.name AS Card_Name, l.format AS Legal_Play_Format FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE c.rarity = 'mythic' AND l.status = 'legal' GROUP BY c.name ORDER BY Oldest_Release_Date ASC LIMIT 1
SELECT COUNT(t1.id) FROM cards AS t1 INNER JOIN foreign_data AS t2 ON t1.uuid = t2.uuid WHERE t1.artist = 'Volkan Baga' AND t2.language = 'French'
SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE rarity = 'rare' AND types = 'Enchantment' AND name = 'Abundance' AND status = 'Legal'
SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'banned' GROUP BY T1.format ORDER BY COUNT(T1.status) DESC LIMIT 1;
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond'
SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid GROUP BY T1.artist ORDER BY COUNT(T1.uuid) LIMIT 1
SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.frameVersion = '1997' AND C.artist = 'D. Alexander Gregory' AND L.format = 'legacy' AND (C.hasContentWarning = 1 OR C.artist = 'Wizards of the Coast')
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned';
SELECT AVG(T1.id) AS annual_average, MAX(COUNT(T2.language)) AS common_language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
SELECT cards.artist FROM cards WHERE cards.borderColor = 'black' AND cards.availability = 'arena'
SELECT cards.uuid FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.format = 'oldschool' AND (legalities.status = 'banned' OR legalities.status = 'restricted')
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT r.text AS rulings FROM cards AS c INNER JOIN rulings AS r ON c.uuid = r.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC;
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Hour of Devastation' AND T2.status = 'legal'
SELECT s.name FROM sets s LEFT JOIN set_translations st ON s.code = st.setCode WHERE st.language != 'Japanese' AND st.language = 'Korean'
SELECT frameVersion, name FROM cards WHERE artist = 'Allen Williams'; SELECT name FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE status = 'banned';
SELECT CASE WHEN (SELECT Reputation FROM users WHERE DisplayName = 'Harlan') > (SELECT Reputation FROM users WHERE DisplayName = 'Jarrod Dixon') THEN 'Harlan' ELSE 'Jarrod Dixon' END AS HighestReputationUser;
SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014'
SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00'
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1
SELECT COUNT(Id) FROM users WHERE Views > 10 AND strftime('%Y', CreationDate) > '2013'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT T1.DisplayName FROM posts AS T1 WHERE T1.Title = 'Eliciting priors from experts'
SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie'))
SELECT T1.OwnerDisplayName FROM posts AS T1 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT MAX(P.AnswerCount) AS MaxAnswerCount FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Title = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.ClosedDate IS NOT NULL
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20;
SELECT T1.Location FROM posts AS T2 INNER JOIN users AS T1 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Eliciting priors from experts'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T1.TagName = 'bayesian'
SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id ORDER BY T1.Count DESC LIMIT 1
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.DisplayName = 'csgillespie'
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND strftime('%Y', Date) = '2011'
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)
SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'
SELECT CAST(COUNT(b.Id) AS REAL) / COUNT(DISTINCT u.DisplayName) AS AvgBadges FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE u.Views > 200;
SELECT (COUNT(CASE WHEN u.Age > 65 THEN 1 END) / COUNT(*)) * 100 AS Percentage FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Score > 20;
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
SELECT COUNT(*) FROM badges WHERE Name = 'Revival'
SELECT P.Title FROM posts AS P INNER JOIN comments AS C ON P.Id = C.PostId WHERE C.Score = (SELECT MAX(Score) FROM comments)
SELECT COUNT(*) FROM posts WHERE ViewCount = 1910;
SELECT COUNT(T1.FavoriteCount) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = '3025' AND T2.CreationDate = '2014/4/23 20:29:39.0'
SELECT c.Text FROM posts AS p INNER JOIN comments AS c ON p.Id = c.PostId WHERE p.ParentId = 107829 AND p.CommentCount = 1;
SELECT CASE WHEN T1.ClosedDate IS NULL THEN 'Well-finished' ELSE 'Not well-finished' END AS Post_Status FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T1.Id WHERE T2.UserId = 23853 AND T2.CreationDate = '2013-07-12 09:08:18.0'
SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = '65041'
SELECT COUNT(Id) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')
SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347;
SELECT COUNT(*) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data visualization%'
SELECT b.Name FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT COUNT(DISTINCT post.Id) / COUNT(DISTINCT votes.Id) FROM posts AS post LEFT JOIN votes AS vote ON post.Id = vote.PostId WHERE post.OwnerUserId = 24;
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT Text FROM comments WHERE Score = 17;
SELECT T1.DisplayName FROM users AS T1 WHERE T1.WebsiteUrl = 'http://stackoverflow.com'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'SilentGhost'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T2.UserId = T1.Id WHERE T2.Text = 'thank you user93!'
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'A Lion'
SELECT T1.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'
SELECT U.DisplayName FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Necromancer' LIMIT 10;
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa')
SELECT SUM(p.Score) AS TotalScore, u.WebsiteUrl FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE u.DisplayName = 'Yevgeny'
SELECT T2.Text FROM comments AS T1 INNER JOIN postHistory AS T2 ON T1.PostId = T2.PostId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
SELECT SUM(BountyAmount) FROM posts WHERE Title LIKE '%data%'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.Title LIKE '%variance%' AND T2.BountyAmount = 50;
SELECT AVG(p.ViewCount) AS AverageViewCount, p.Title, c.Text, c.Score FROM posts p JOIN tags t ON p.Id = t.ExcerptPostId LEFT JOIN comments c ON p.Id = c.PostId WHERE t.TagName = 'humor' GROUP BY p.Title, c.Text, c.Score;
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT T1.Id FROM users AS T1 ORDER BY T1.Reputation DESC LIMIT 1
SELECT T1.Id FROM users AS T1 ORDER BY T1.Views LIMIT 1
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011'
SELECT COUNT(UserId) FROM badges GROUP BY UserId HAVING COUNT(Name) > 5;
SELECT COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'
SELECT t1.DisplayName, t1.Reputation FROM users AS t1 INNER JOIN posts AS t2 ON t1.Id = t2.OwnerUserId WHERE t2.Id = 1
SELECT T1.UserId FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Views >= 1000 GROUP BY T1.UserId HAVING COUNT(DISTINCT T1.PostId) = 1;
SELECT u.Id, u.DisplayName, b.Name FROM users u JOIN comments c ON u.Id = c.UserId JOIN badges b ON u.Id = b.UserId GROUP BY u.Id ORDER BY COUNT(c.Id) DESC LIMIT 1;
SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'India' AND T2.Name = 'Teacher'
SELECT ((COUNT(CASE WHEN Year(Date) = 2010 AND Name = 'Students' THEN 1 END) / COUNT(Name) * 100) - (COUNT(CASE WHEN Year(Date) = 2011 AND Name = 'Students' THEN 1 END) / COUNT(Name) * 100)) AS percentage_difference FROM badges;
SELECT DISTINCT PostHistoryTypeId FROM postHistory WHERE PostId = 3720 SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720
SELECT p.Id, p.Title, p.ViewCount FROM posts p JOIN postLinks pl ON p.Id = pl.PostId WHERE pl.RelatedPostId = 61217;
SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395
SELECT posts.Id FROM posts WHERE Score > 60 SELECT OwnerUserId FROM posts WHERE Score > 60
SELECT SUM(T1.FavoriteCount) FROM posts AS T1 WHERE T1.OwnerUserId = 686 AND strftime('%Y', T1.CreaionDate) = '2011'
SELECT AVG(UpVotes) AS AvgUpVotes, AVG(Age) AS AvgAge FROM users WHERE Id IN ( SELECT UserId FROM posts GROUP BY UserId HAVING COUNT(UserId) > 10 )
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'
SELECT COUNT(Id) FROM posts WHERE Score = 10
SELECT b.Name FROM badges b JOIN users u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'
SELECT T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'
SELECT COUNT(DISTINCT UserId) * 100 / (SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Teacher') AS Percentage FROM badges WHERE Name = 'Teacher';
SELECT (COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN B.UserId END) * 100) / COUNT(B.UserId) AS Percentage FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Organizer';
SELECT T2.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreaionDate = '2010-07-19 19:19:56.0'
SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.CreationDate = '2010-07-19 19:37:33.0'
SELECT u.Age FROM users AS u INNER JOIN badges AS b ON u.Id = b.UserId WHERE u.Location = 'Vienna, Austria'
SELECT COUNT(*) FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65;
SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Sharpie'
SELECT COUNT(*) FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Age > 65 AND badges.Name = 'Supporter'
SELECT DisplayName FROM users WHERE Id = 30
SELECT COUNT(*) FROM users WHERE Location = 'New York'
SELECT COUNT(Id) FROM votes WHERE YEAR(CreationDate) = 2010
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)
SELECT DIVIDE(COUNT(Id) WHERE YEAR(CreationDate) = 2010, COUNT(Id) WHERE YEAR(CreationDate) = 2011) FROM votes;
SELECT TagName FROM tags JOIN posts ON tags.Id = posts.Id JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'John Stauffer'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo')
SELECT COUNT(*) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan'
SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1;
SELECT DisplayName, SUM(ViewCount) AS TotalViewCount FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder' GROUP BY DisplayName ORDER BY TotalViewCount DESC LIMIT 1;
SELECT COUNT(posts.Id) FROM posts JOIN users ON posts.OwnerUserId = users.Id JOIN votes ON posts.Id = votes.PostId WHERE users.DisplayName = 'Matt Parker' AND votes.PostId > 4
SELECT COUNT(*) FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan') AND Score < 60;
SELECT T2.TagName FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' LEFT JOIN comments AS T3 ON T1.Id = T3.PostId INNER JOIN users AS T4 ON T1.OwnerUserId = T4.Id WHERE T4.DisplayName = 'Mark Meckes' AND T3.Id IS NULL;
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer';
SELECT (COUNT(T1.PostId WHERE T2.TagName = 'R') / COUNT(T1.PostId WHERE T1.OwnerDisplayName = 'Community')) as percentage FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.OwnerDisplayName = 'Community'
SELECT (SUM(CASE WHEN T1.DisplayName = 'Mornington' THEN T2.ViewCount ELSE 0 END) - SUM(CASE WHEN T1.DisplayName = 'Amos' THEN T2.ViewCount ELSE 0 END)) AS ViewCountDifference FROM users AS T1 INNER JOIN posts AS T2 ON T2.OwnerUserId = T1.Id;
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'commentator' AND strftime('%Y', T1.Date) = '2014'
SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' and '2010-07-21 23:59:59'
SELECT T1.DisplayName, T1.Age FROM users AS T1 WHERE T1.Views = (SELECT MAX(Views) FROM users)
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM comments WHERE UserId = 13 AND Score < 60
SELECT P.Title, C.UserDisplayName FROM posts AS P INNER JOIN comments AS C ON P.Id = C.PostId WHERE C.Score > 60;
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'North Pole' AND strftime('%Y', T1.Date) = '2011'
SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150
SELECT COUNT(*) AS post_history_counts, MAX(CreationDate) AS last_edit_date FROM postHistory WHERE PostId = (SELECT Id FROM posts WHERE Title = "What is the best introductory Bayesian statistics textbook?")
SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers'
SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T1.Title = "How to tell if something happened in a data set which monitors a value over time"
SELECT P.Id, B.Name FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.DisplayName = 'Samuel' AND YEAR(P.CreationDate) = 2013 AND YEAR(B.Date) = 2013;
SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)
SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T2.OwnerUserId = T1.Id INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.Id WHERE T3.TagName = 'hypothesis-testing';
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T2.Title = 'What are principal component scores?'
SELECT T1.DisplayName FROM posts AS T1 WHERE T1.Id = (SELECT T2.ParentId FROM posts AS T2 WHERE T2.Score = (SELECT MAX(Score) FROM posts))
SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN votes v ON u.Id = v.UserId WHERE v.VoteTypeId = 8 AND v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM posts JOIN votes ON posts.Id = votes.PostId WHERE YEAR(posts.CreationDate) = 2011 AND votes.BountyAmount = 50
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)
SELECT p.Score FROM posts p JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%' WHERE t.Count = (SELECT MAX(Count) FROM tags)
SELECT AVG(links_per_month) AS average_monthly_links FROM ( SELECT COUNT(pl.Id) AS links_per_month FROM postLinks AS pl INNER JOIN posts AS p ON pl.PostId = p.Id WHERE YEAR(p.CreationDate) = 2010 AND p.AnswerCount <= 2 GROUP BY MONTH(p.CreationDate) ) AS monthly_links;
SELECT T1.Id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId ORDER BY T2.CreationDate LIMIT 1
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1)
SELECT MIN(T2.CreationDate) FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl'
SELECT MIN(T5.CreationDate) AS First_Post_Date FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MIN(Age) AS Min_Age FROM users ) AS T3 ON T1.Age = T3.Min_Age INNER JOIN ( SELECT MIN(CreationDate) AS CreationDate FROM posts ) AS T5 ON T2.CreaionDate = T5.CreationDate;
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Autobiographer' ORDER BY T2.Date ASC LIMIT 1
SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' GROUP BY T1.Id HAVING SUM(T2.FavoriteCount) >= 4
SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND YEAR(CreationDate) = 2010
SELECT T2.Id, T2.Title FROM posts AS T2 INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1
SELECT p.Id, p.Title FROM posts p WHERE p.Score = (SELECT MAX(Score) FROM posts)
SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner'
SELECT DISTINCT u.DisplayName FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE p.ViewCount > 20000 AND strftime('%Y', p.CreationDate) = '2011'
SELECT T1.Id, T1.OwnerDisplayName FROM posts AS T1 WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010');
SELECT (COUNT(T1.Id) * 100.0) / (SELECT COUNT(T2.Id) FROM posts AS T2 INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE strftime('%Y', T2.CreaionDate) = '2011' AND T3.Reputation > 1000) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE strftime('%Y', T1.CreaionDate) = '2011' AND T2.Reputation > 1000;
SELECT COUNT(Id) * 100.0 / (SELECT COUNT(Id) FROM users WHERE Age BETWEEN 13 AND 18) as percentage FROM users WHERE Age BETWEEN 13 AND 18;
SELECT T1.ViewCount AS total_views, T2.DisplayName AS last_posted_user FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets' AND T1.Body = 'Computer Game Datasets'
SELECT COUNT(*) AS TotalPostsAboveAverageViews FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts))
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0
SELECT T1.DisplayName, T1.Location FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Id = 183 ORDER BY T2.LastEditDate DESC LIMIT 1
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000
SELECT DATEDIFF(stats_badges.Date, users.CreationDate) AS TimeToGetBadge FROM badges AS stats_badges INNER JOIN users ON stats_badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon'
SELECT COUNT(DISTINCT posts.Id) AS NumOfPosts, COUNT(DISTINCT comments.Id) AS NumOfComments FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id INNER JOIN comments ON comments.UserId = users.Id WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users)
SELECT T2.Text, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Analysing wind data with R' ORDER BY T2.CreationDate DESC LIMIT 1
SELECT COUNT(T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Citizen Patrol'
SELECT COUNT(*) FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'careers'
SELECT U.Reputation, P.ViewCount FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId WHERE U.DisplayName = 'Jarrod Dixon'
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') SELECT COUNT(*) FROM posts WHERE ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
SELECT COUNT(Id) FROM votes WHERE BountyAmount >= 30
SELECT DIVIDE(COUNT(stats_posts.Id where Score >= 50), COUNT(stats_posts.Id)) as percentage FROM posts AS stats_posts WHERE stats_posts.OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)
SELECT COUNT(*) FROM posts WHERE Score < 20
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
SELECT U.Reputation, U.UpVotes FROM users AS U INNER JOIN comments AS C ON U.Id = C.UserId WHERE C.Text = 'fine, you win :)'
SELECT C.Text FROM posts AS P JOIN comments AS C ON P.Id = C.PostId WHERE P.Title = 'How can I adapt ANOVA for binary data?'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount BETWEEN 100 AND 150 ORDER BY T2.Score DESC LIMIT 1;
SELECT C.CreationDate, U.Age FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text LIKE '%http://%';
SELECT COUNT(T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5
SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1)
SELECT COUNT(DISTINCT T1.UserId) AS total_users_ages_40 FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40;
SELECT posts.Id, comments.Id, comments.Text FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item'
SELECT u.UpVotes FROM users u JOIN comments c ON u.Id = c.UserId WHERE c.Text = 'R is also lazy evaluated.'
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
SELECT DISTINCT T1.UserDisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0
SELECT COUNT(UserId) * 100.0 / (SELECT COUNT(UserId) FROM comments WHERE Score BETWEEN 5 AND 10) as percentage FROM comments WHERE Score BETWEEN 5 AND 10 AND UserId IN (SELECT Id FROM users WHERE UpVotes = 0)
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = '3-D Man';
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength') AND T1.height_cm > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT colour.colour FROM superhero JOIN colour ON superhero.skin_colour_id = colour.id WHERE superhero.superhero_name = 'Apocalypse'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T5 ON T4.power_id = T5.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond' AND T5.power_name = 'Agility'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(DISTINCT superhero.id) * 100.0 / COUNT(DISTINCT superhero.id) AS percentage FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT p.publisher_name FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value ASC LIMIT 1;
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT PUBLISHER.PUBLISHER_NAME FROM SUPERHERO INNER JOIN PUBLISHER ON SUPERHERO.PUBLISHER_ID = PUBLISHER.ID WHERE SUPERHERO.SUPERHERO_NAME = 'Blue Beetle II'
SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')
SELECT superhero.superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' ORDER BY hero_attribute.attribute_value LIMIT 1;
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100
SELECT T2.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1
SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire');
SELECT (MULTIPLY(DIVIDE(SUM(alignment = 'Bad'), COUNT(id)), 100)) AS percentage_bad_superheroes FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')
SELECT (SUM(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS superhero_difference FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id;
SELECT T1.id FROM publisher AS T1 WHERE T1.publisher_name = 'Star Trek'
SELECT AVG(attribute_value) FROM hero_attribute
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.id = 75;
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN superpower AS T4 ON T2.power_id = T4.id WHERE T3.gender = 'Male' LIMIT 5;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.height_cm BETWEEN 170 AND 190 AND T1.eye_colour_id = 1
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 56
SELECT superhero.full_name FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Demi-God' LIMIT 5;
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')
SELECT T1.race FROM superhero AS T1 WHERE T1.weight_kg = 169;
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id WHERE S.height_cm = 185 AND S.race_id = (SELECT id FROM race WHERE race = 'human')
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T1.weight_kg = (SELECT MAX(T2.weight_kg) FROM superhero AS T2)
SELECT CAST(SUM(CASE WHEN T1.publisher_id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM superhero AS T1 WHERE T1.height_cm BETWEEN 150 AND 180
SELECT T1.full_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'M' AND T1.weight_kg > (SELECT AVG(weight_kg) FROM superhero) * 0.79;
SELECT power_name, COUNT(hero_id) FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id GROUP BY power_name ORDER BY COUNT(hero_id) DESC LIMIT 1
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.id = 1
SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'stealth'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'strength' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT AVG(CASE WHEN T1.skin_colour_id IS NULL THEN 1 ELSE 0 END) FROM superhero AS T1 WHERE T1.skin_colour_id = 1
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'durability' AND T2.publisher_name = 'Dark Horse Comics' ORDER BY T3.attribute_value DESC LIMIT 1
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Abraham Sapien'
SELECT s.superhero_name FROM superhero s INNER JOIN hero_power hp ON s.id = hp.hero_id INNER JOIN superpower sp ON hp.power_id = sp.id WHERE sp.power_name = 'Flight'
SELECT C.colour AS eye_colour, D.colour AS hair_colour, E.colour AS skin_colour FROM superhero AS A INNER JOIN colour AS C ON A.eye_colour_id = C.id INNER JOIN colour AS D ON A.hair_colour_id = D.id INNER JOIN colour AS E ON A.skin_colour_id = E.id INNER JOIN gender AS F ON A.gender_id = F.id INNER JOIN publisher AS G ON A.publisher_id = G.id WHERE F.gender = 'Female' AND G.publisher_name = 'Dark Horse Comics'
SELECT S1.superhero_name, P.publisher_name FROM superhero AS S1 INNER JOIN superhero AS S2 ON S1.hair_colour_id = S2.skin_colour_id AND S1.hair_colour_id = S2.eye_colour_id INNER JOIN publisher AS P ON S1.publisher_id = P.id WHERE S1.id <> S2.id;
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'
SELECT (CAST(SUM(CASE WHEN T3.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100) / COUNT(T1.gender) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'
SELECT COUNT(T2.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'
SELECT power_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.full_name = 'Hunter Zolomon'
SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'
SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'
SELECT COUNT(hero_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))
SELECT T6.race, T5.alignment FROM superhero AS T1 INNER JOIN race AS T6 ON T1.race_id = T6.id INNER JOIN alignment AS T5 ON T1.alignment_id = T5.id WHERE T1.superhero_name = 'Cameron Hicks'
SELECT (MULTIPLY(DIVIDE(SUM(CASE WHEN gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END), COUNT(*)), 100) AS percentage_female_heroes_published_by_marvel FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics');
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')
SELECT (SUM(T2.weight_kg) WHERE T1.full_name = 'Emil Blonsky') - (SUM(T2.weight_kg) WHERE T1.full_name = 'Charles Chandler') FROM superhero AS T1 INNER JOIN weight_info AS T2 ON T1.weight = T2.weight_id
SELECT superhero.superhero_name, AVG(superhero.height_cm) FROM superhero GROUP BY superhero.superhero_name;
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T2.id = T3.power_id WHERE T1.superhero_name = 'Abomination'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.id = 1;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT A.attribute_name, HA.attribute_value FROM superhero AS S JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id WHERE S.superhero_name = '3-D Man'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'blue' AND T3.colour = 'brown'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id = 1;
SELECT (CAST(SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) AS percentage_of_superheroes_with_blue_eyes FROM superhero
SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN height_info AS T2 ON T1.height_cm = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1
SELECT id FROM superpower WHERE power_name = 'cryokinesis'
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Helen Parr';
SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;
SELECT P.publisher_name FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE S.id = 38;
SELECT race.race FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN race ON superhero.race_id = race.id WHERE hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)
SELECT A.alignment, SP.power_name FROM superhero AS S JOIN alignment AS A ON S.alignment_id = A.id JOIN hero_power AS HP ON S.id = HP.hero_id JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.superhero_name = 'Atom IV';
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT AVG(attribute_value) FROM hero_attribute WHERE hero_id IN (SELECT id FROM superhero WHERE alignment_id = 3)
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE HA.attribute_value = 100;
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT superhero_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value BETWEEN 75 AND 80;
SELECT RACE.RACE FROM SUPERHERO AS S INNER JOIN COLOUR AS C ON S.HAIR_COLOUR_ID = C.ID INNER JOIN GENDER AS G ON S.GENDER_ID = G.ID INNER JOIN RACE AS R ON S.RACE_ID = R.ID WHERE C.COLOUR = 'blue' AND G.GENDER = 'male'
SELECT (CAST(SUM(CASE WHEN gender.id = 2 THEN 1 ELSE 0 END) AS REAL) / COUNT(alignment.id = 2)) * 100.0 FROM superhero WHERE alignment_id = 2;
SELECT SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END) AS diff FROM superhero AS T1 LEFT JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE (T1.weight_kg = 0 OR T1.weight_kg IS NULL)
SELECT attribute_value FROM hero_attribute JOIN superhero ON hero_attribute.hero_id = superhero.id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Hulk' AND attribute.attribute_name = 'Strength'
SELECT SP.power_name FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.superhero_name = 'Ajax'
SELECT COUNT(*) FROM superhero AS s INNER JOIN colour AS c ON s.skin_colour_id = c.id INNER JOIN alignment AS a ON s.alignment_id = a.id WHERE c.colour = 'Green' AND a.alignment = 'Bad'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC;
SELECT gender.gender FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';
SELECT MAX(T1.weight_kg) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT AVG(height_cm) FROM superhero WHERE race_id <> (SELECT id FROM race WHERE race = 'Human') AND publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics')
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = 100
SELECT ABS(COUNT(CASE WHEN T1.publisher_name = 'DC Comics' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END)) AS difference FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id;
SELECT attribute.attribute_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = 'Black Panther' ORDER BY hero_attribute.attribute_value ASC LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT superhero.superhero_name FROM superhero ORDER BY superhero.height_cm DESC LIMIT 1
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.full_name = 'Charles Chandler'
SELECT CAST(SUM(CASE WHEN T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'George Lucas'
SELECT (CAST(SUM(CASE WHEN A.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100.0 FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Marvel Comics';
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'
SELECT T1.hero_id FROM hero_attribute AS T1 WHERE T1.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)
SELECT T1.full_name FROM superhero AS T1 WHERE T1.superhero_name = 'Alien'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'brown'
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
SELECT weight_kg, race FROM superhero WHERE id = 40;
SELECT AVG(height_cm) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Neutral')
SELECT hero_id FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Intelligence'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.height_cm > 0.8 * (SELECT AVG(height_cm) FROM superhero)
SELECT T1.driverRef FROM qualifying AS T1 WHERE T1.raceId = 18 AND T1.q1 = (SELECT MAX(q1) FROM qualifying WHERE raceId = 18 LIMIT 5)
SELECT D.surname FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverId = Q.driverId WHERE Q.raceId = 19 AND Q.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)
SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'
SELECT races.name FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany'
SELECT T2.position FROM constructors AS T1 INNER JOIN circuits AS T2 ON T1.constructorId = T2.constructorId WHERE T1.name = 'Renault'
SELECT COUNT(raceId) FROM races WHERE year = 2010 AND circuitId NOT IN (SELECT circuitId FROM circuits WHERE country IN ('Asia', 'Europe'))
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'
SELECT c.lat, c.lng FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId WHERE r.name = 'Australian Grand Prix'
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'
SELECT races.time FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'
SELECT lat, lng FROM circuits WHERE name = 'Abu Dhabi Grand Prix';
SELECT C.nationality FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId WHERE CR.raceId = 24 AND CR.points = 1;
SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354;
SELECT d.nationality FROM drivers d JOIN qualifying q ON d.driverId = q.driverId WHERE q.raceId = 355 AND q.q2 = '0:01:40'
SELECT Q3.number FROM qualifying AS Q3 INNER JOIN races AS R ON Q3.raceId = R.raceId WHERE R.raceId = 903 AND Q3.q3 = '0:01:54'
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL
SELECT T2.year FROM seasons AS T2 INNER JOIN races AS T1 ON T2.year = T1.year WHERE T1.raceId = 901;
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL
SELECT drivers.forename, drivers.surname FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 592 AND results.time IS NOT NULL ORDER BY drivers.dob ASC LIMIT 1
SELECT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time = '0:01:27'
SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 933 ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT C.name, C.lat, C.lng FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId INNER JOIN seasons AS S ON R.year = S.year WHERE S.url = 'https://en.wikipedia.org/wiki/2017_Formula_One_World_Championship' AND R.name = 'Malaysian Grand Prix'
SELECT constructors.url FROM constructorResults INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE raceId = 9 ORDER BY points DESC LIMIT 1
SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi')
SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 347 AND T2.q2 = '0:01:15'
SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 45 AND T1.q3 = '0:01:33'
SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.raceId = 743 AND T3.forename = 'Bruce' AND T3.surname = 'McLaren'
SELECT drivers.forename, drivers.surname FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'San Marino Grand Prix' AND races.year = 2006 AND results.position = 2;
SELECT T2.year FROM seasons AS T2 INNER JOIN races AS T1 ON T2.year = T1.year WHERE T1.raceId = 901;
SELECT COUNT(driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND position IS NOT NULL;
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1
SELECT drivers.forename || ' ' || drivers.surname AS driver_name FROM drivers JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE lapTimes.raceId = 348 ORDER BY lapTimes.time LIMIT 1;
SELECT d.nationality FROM drivers d JOIN results r ON d.driverId = r.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT ((T1.fastestLapSpeed - T2.fastestLapSpeed) / T1.fastestLapSpeed) * 100 FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = 853 AND T2.raceId = 854 WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')
SELECT DIVIDE(COUNT(driverId) WHERE time IS NOT NULL AND date = '1983-07-16', COUNT(driverId) WHERE date = '1983-07-16') as percentage FROM results JOIN races ON results.raceId = races.raceId WHERE date = '1983-07-16'
SELECT MIN(year) AS first_Singapore_Grand_Prix_year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')
SELECT COUNT(*) AS num_races FROM races WHERE year = 2005 ORDER BY name DESC;
SELECT r1.name AS first_race, r2.name AS other_races FROM races AS r1 INNER JOIN races AS r2 ON r1.year = r2.year AND r1.month = r2.month WHERE r1.date = (SELECT MIN(date) FROM races) AND r2.raceId <> r1.raceId;
SELECT races.name, races.date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;
SELECT year, MAX(round) FROM races GROUP BY year ORDER BY MAX(round) DESC LIMIT 1
SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000)
SELECT T3.country, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T1.year = T3.year WHERE T1.year = (SELECT MIN(year) FROM seasons) AND T2.country IN (SELECT country FROM continent WHERE name = 'Europe') LIMIT 1
SELECT MAX(year) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Brands Hatch' AND circuits.country = 'UK' AND races.name = 'British Grand Prix'
SELECT COUNT(*) FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE circuits.name = 'Silverstone Circuit' AND races.name = 'British Grand Prix' AND circuits.country = 'United Kingdom'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 AND T3.name = 'Singapore Grand Prix' ORDER BY T2.position;
SELECT D.forename || ' ' || D.surname AS full_name FROM drivers AS D INNER JOIN ( SELECT driverId, MAX(points) AS max_points FROM driverStandings ) AS DS ON D.driverId = DS.driverId WHERE DS.points = DS.max_points;
SELECT T2.forename || ' ' || T2.surname AS driver_name, T1.points FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Chinese Grand Prix' AND T3.year = 2017 ORDER BY T1.points DESC LIMIT 3;
SELECT drivers.forename, drivers.surname, races.name FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes)
SELECT AVG(milliseconds) AS average_lap_time FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Sebastian' AND drivers.surname = 'Vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix'
SELECT CAST(COUNT(CASE WHEN surname = 'Hamilton' AND year >= 2010 AND position > 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(CASE WHEN surname = 'Hamilton' AND year >= 2010 THEN 1 ELSE NULL END) AS percentage FROM results;
SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) AS avg_points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY COUNT(T2.wins) DESC LIMIT 1
SELECT MAX(2022 - strftime('%Y', dob) + 1) AS Age, forename || ' ' || surname AS Name FROM drivers WHERE nationality = 'Japanese'
SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitId HAVING COUNT(r.raceId) = 4;
SELECT T1.name AS circuit_name, T1.location AS circuit_location, T2.name AS race_name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T2.year = T3.year WHERE T1.country = 'USA' AND T3.year = 2006
SELECT races.name, circuits.name, circuits.location FROM races JOIN circuits ON races.circuitId = circuits.circuitId WHERE strftime('%m', races.date) = '09' AND races.year = 2005;
SELECT R.name FROM races AS R INNER JOIN results AS RS ON R.raceId = RS.raceId INNER JOIN drivers AS D ON RS.driverId = D.driverId WHERE D.forename = 'Alex' AND D.surname = 'Yoong' AND RS.position < 10
SELECT MAX(points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN drivers AS T4 ON T1.driverId = T4.driverId WHERE T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T3.name = 'Sepang International Circuit'
SELECT races.name, races.year FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.driverId = (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') ORDER BY results.milliseconds ASC LIMIT 1;
SELECT AVG(R.points) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Eddie' AND D.surname = 'Irvine' AND R.year = 2000
SELECT races.name, results.points FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.year = (SELECT MIN(year) FROM races) ORDER BY races.name ASC;
SELECT r.name, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;
SELECT T2.name, T1.year, T3.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN (SELECT raceId, MAX(laps) AS max_laps FROM results GROUP BY raceId) AS T4 ON T1.raceId = T4.raceId INNER JOIN results AS T5 ON T4.raceId = T5.raceId AND T4.max_laps = T5.laps INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId;
SELECT CAST(SUM(IIF(T2.country = 'Germany' AND T1.name = 'European Grand Prix', 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'
SELECT lat, lng FROM circuits WHERE circuitRef = 'silverstone'
SELECT CASE WHEN (SELECT MAX(lat) FROM circuits WHERE name = 'Silverstone Circuit') > (SELECT MAX(lat) FROM circuits WHERE name = 'Hockenheimring') AND (SELECT MAX(lat) FROM circuits WHERE name = 'Silverstone Circuit') > (SELECT MAX(lat) FROM circuits WHERE name = 'Hungaroring') THEN 'Silverstone Circuit' WHEN (SELECT MAX(lat) FROM circuits WHERE name = 'Hockenheimring') > (SELECT MAX(lat) FROM circuits WHERE name = 'Silverstone Circuit') AND (SELECT MAX(lat) FROM circuits WHERE name = 'Hockenheimring') > (SELECT MAX(lat) FROM circuits WHERE name = 'Hungaroring') THEN 'Hockenheimring' ELSE 'Hungaroring' END AS Highest_Latitude_Circuit
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT T1.country FROM circuits AS T1 ORDER BY T1.alt DESC LIMIT 1
SELECT COUNT(*) FROM drivers WHERE code IS NULL
SELECT D.nationality FROM drivers AS D WHERE D.dob = (SELECT MIN(dob) FROM drivers)
SELECT surname FROM drivers WHERE nationality = 'italian'
SELECT T2.url FROM drivers AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.forename = 'Anthony' AND T1.surname = 'Davidson'
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009
SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit';
SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Silverstone Circuit'
SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Circuit';
SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'
SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Barcelona-Catalunya'
SELECT C.url FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2009 AND R.name = 'Spanish Grand Prix';
SELECT MIN(T2.fastestLapTime) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.position = 1
SELECT races.name FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT races.name FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;
SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT DISTINCT year FROM races WHERE raceId IN (SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))
SELECT T1.positionOrder FROM results AS T1 INNER JOIN races AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Australian Grand Prix' AND T2.year = 2008
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Australian Grand Prix' AND T3.year = 2008 AND T1.grid = 4
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL;
SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 2;
SELECT D.forename, D.surname, D.url FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.year = 2008 AND RA.name = 'Australian Grand Prix' AND R.position = 1 AND R.time LIKE '__:__:__.___'
SELECT COUNT(T1.driverId) AS num_drivers FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix';
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL
SELECT SUM(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT AVG(SUBSTR(fastestLapTime, 1, 2) * 60 + SUBSTR(fastestLapTime, 4, 2) + SUBSTR(fastestLapTime, 7) / 1000) AS avg_fastest_lap_time FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT COUNT(CASE WHEN R.time IS NOT NULL THEN R.raceId ELSE NULL END) * 100 / COUNT(R.raceId) FROM races AS R INNER JOIN results AS RS ON R.raceId = RS.raceId WHERE R.year = 2008 AND R.name = 'Australian Grand Prix'
SELECT ((results.time - (SELECT MIN(results.time) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'))) / (SELECT MAX(results.time) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'))) * 100 as percentage_faster FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND results.time IS NOT NULL
SELECT COUNT(circuitId) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'
SELECT lat, lng FROM circuits WHERE country = 'USA'
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';
SELECT AVG(points) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'
SELECT c.name FROM constructors c JOIN constructorStandings cs ON c.constructorId = cs.constructorId ORDER BY cs.points DESC LIMIT 1;
SELECT T2.name FROM constructors AS T2 LEFT JOIN constructorStandings AS T1 ON T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291
SELECT COUNT(*) FROM constructorStandings cs JOIN constructors c ON cs.constructorId = c.constructorId JOIN races r ON cs.raceId = r.raceId WHERE c.nationality = 'Japanese' AND cs.points = 0 GROUP BY c.constructorId HAVING COUNT(DISTINCT r.raceId) = 2;
SELECT constructors.name FROM constructors INNER JOIN results ON constructors.constructorId = results.constructorId WHERE results.position = 1;
SELECT COUNT(DISTINCT constructors.constructorId) FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON constructorResults.raceId = races.raceId JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE constructors.nationality = 'French' AND lapTimes.lap > 50;
SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year BETWEEN 2007 AND 2009 AND T3.nationality = 'Japanese'
SELECT T1.year, AVG(strftime('%s', T2.time) - strftime('%s', '00:00:00.000')) AS avg_time_seconds FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T3.position = 1 AND T3.time IS NOT NULL GROUP BY T1.year;
SELECT forename, surname FROM drivers INNER JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE year(dob) > 1975 AND driverStandings.position = 2
SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'Italian' AND T2.time IS NULL
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT MAX(fastestLap) AS Fastest_Lap_Number FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009) AND position = 1;
SELECT AVG(fastestLapSpeed) FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009
SELECT races.name, races.year FROM races JOIN results ON races.raceId = results.raceId WHERE results.milliseconds IS NOT NULL ORDER BY results.milliseconds ASC LIMIT 1;
SELECT (COUNT(T1.driverId) * 100) / (SELECT COUNT(T2.driverId) FROM drivers AS T2 WHERE year(T2.dob) BETWEEN 2000 AND 2005) FROM drivers AS T1 INNER JOIN lapTimes AS T3 ON T1.driverId = T3.driverId WHERE year(T1.dob) < 1985 AND T3.lap > 50
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.milliseconds < 120000
SELECT driverRef, forename, surname FROM drivers WHERE nationality = 'American'
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18
SELECT T1.code FROM drivers AS T1 INNER JOIN ( SELECT driverId, MAX(year(dob)) AS max_dob FROM drivers GROUP BY driverId ORDER BY max_dob DESC LIMIT 3 ) AS T2 ON T1.driverId = T2.driverId SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN ( SELECT driverId, MAX(year(dob)) AS max_dob FROM drivers GROUP BY driverId ORDER BY max_dob DESC LIMIT 3 ) AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Netherlands'
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND dob LIKE '1980%'
SELECT D.forename, D.surname FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId WHERE D.nationality = 'German' AND D.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY D.driverId ORDER BY MIN(L.time) LIMIT 3;
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1
SELECT driverId, code FROM drivers WHERE year(dob) = 1971 AND driverId IN (SELECT driverId FROM results WHERE fastestLapTime IS NOT NULL)
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T1.dob) < 1982 GROUP BY T1.driverId ORDER BY T2.time DESC LIMIT 10
SELECT R.year FROM races AS R INNER JOIN results AS RS ON R.raceId = RS.raceId WHERE RS.fastestLapTime IS NOT NULL ORDER BY RS.fastestLapTime LIMIT 1;
SELECT year FROM races JOIN lapTimes ON races.raceId = lapTimes.raceId WHERE time = (SELECT MAX(time) FROM lapTimes) LIMIT 1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL
SELECT COUNT(*) AS TimesHeld, location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng
SELECT raceId, COUNT(*) AS num_finishers FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY num_finishers DESC LIMIT 1;
SELECT T1.driverRef, T1.nationality, T1.dob FROM qualifying AS T2 INNER JOIN drivers AS T1 ON T1.driverId = T2.driverId WHERE T2.raceId = 23 AND T2.q2 IS NOT NULL
SELECT d.forename, d.surname, r.name, r.date, r.time FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE d.dob = (SELECT MAX(year(dob)) FROM drivers) ORDER BY r.date LIMIT 1;
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'American' AND T1.statusId = 2
SELECT T2.name, T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Italian' ORDER BY T1.points DESC LIMIT 1;
SELECT T2.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.wins = (SELECT MAX(wins) FROM constructorStandings)
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1
SELECT races.name, results.fastestLapTime, results.milliseconds FROM races INNER JOIN results ON races.raceId = results.raceId WHERE results.fastestLap = 1 ORDER BY results.milliseconds ASC LIMIT 1;
SELECT AVG(fastestLapTime) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'United States Grand Prix' AND year = 2006) AND rank < 11;
SELECT D.forename, D.surname, AVG(P.duration) AS avg_pitstop_duration FROM drivers AS D INNER JOIN pitStops AS P ON D.driverId = P.driverId WHERE D.nationality = 'German' AND D.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY D.driverId ORDER BY avg_pitstop_duration LIMIT 5;
SELECT Drivers.forename, Drivers.surname, Results.time FROM Results INNER JOIN Races ON Results.raceId = Races.raceId INNER JOIN Drivers ON Results.driverId = Drivers.driverId WHERE Races.name = 'Canadian Grand Prix' AND Races.year = 2008 AND Results.position = 1;
SELECT T2.constructorRef, T2.url FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2009 ORDER BY T3.points DESC LIMIT 1;
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991'
SELECT forename || ' ' || surname AS full_name, url AS wikipedia_page, dob AS date_of_birth FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;
SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring'
SELECT constructors.name, constructors.nationality, SUM(results.points) AS total_points FROM constructors JOIN results ON constructors.constructorId = results.constructorId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Monaco Grand Prix' AND races.year BETWEEN 1980 AND 2010 GROUP BY constructors.name, constructors.nationality ORDER BY total_points DESC LIMIT 1;
SELECT AVG(points) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN circuits AS C ON RA.circuitId = C.circuitId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND C.country = 'Turkey'
SELECT AVG(COUNT(*)) AS avg_num_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year LIMIT 10;
SELECT nationality, COUNT(driverId) FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1
SELECT SUM(wins) FROM driverStandings WHERE position = 91;
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT c.name || ', ' || c.country AS full_location FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE r.date = (SELECT MAX(date) FROM races)
SELECT T2.forename || ' ' || T2.surname AS full_name FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 1 AND T1.number = 3 AND T1.raceId IN (SELECT raceId FROM races WHERE year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit'))
SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T3.name AS first_race FROM drivers AS T1 INNER JOIN ( SELECT driverId, MIN(raceId) AS first_race_id FROM results GROUP BY driverId ) AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.first_race_id = T3.raceId WHERE T1.dob = (SELECT MAX(dob) FROM drivers)
SELECT COUNT(T1.statusId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = (SELECT T3.driverId FROM results AS T3 INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.name = 'Canadian Grand Prix' GROUP BY T3.driverId ORDER BY COUNT(CASE WHEN T3.statusId = 3 THEN 1 ELSE 0 END) DESC LIMIT 1) AND T1.statusId = 3;
SELECT MIN(drivers.dob) AS oldest_dob, drivers.forename || ' ' || drivers.surname AS full_name, SUM(driverStandings.wins) AS total_wins FROM drivers INNER JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers)
SELECT MAX(milliseconds) FROM pitStops
SELECT MIN(milliseconds) AS fastest_lap_time FROM lapTimes
SELECT MAX(milliseconds) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT T2.lap FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2011;
SELECT T1.forename, T1.surname, T2.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2011 AND T3.name = 'Australian Grand Prix'
SELECT MIN(milliseconds) AS lap_record FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT forename || ' ' || surname AS driver_name FROM drivers WHERE driverId = ( SELECT driverId FROM lapTimes WHERE time = ( SELECT MIN(time) FROM lapTimes ) )
SELECT T3.position FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Formula_1' AND T2.time = (SELECT MIN(time) FROM results WHERE driverId = T1.driverId)
SELECT MIN(milliseconds) AS lap_record FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Austrian Grand Prix Circuit'
SELECT c.name AS CircuitName, d.forename || ' ' || d.surname AS DriverName, lt.time AS LapRecordTime FROM circuits AS c INNER JOIN races AS r ON c.circuitId = r.circuitId INNER JOIN lapTimes AS lt ON r.raceId = lt.raceId INNER JOIN drivers AS d ON lt.driverId = d.driverId WHERE c.country = 'Italy' ORDER BY lt.time;
SELECT Races.name FROM Races INNER JOIN LapTimes ON Races.raceId = LapTimes.raceId WHERE LapTimes.time = (SELECT MIN(time) FROM LapTimes WHERE raceId = Races.raceId)
SELECT T1.time, T2.duration FROM lapTimes AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = T1.raceId AND driverId = T1.driverId) AND T4.name = 'Austrian Grand Prix Circuit'
SELECT c.lat, c.lng FROM circuits c INNER JOIN races r ON c.circuitId = r.circuitId INNER JOIN results res ON r.raceId = res.raceId WHERE res.fastestLapTime = '1:29.488'
SELECT AVG(milliseconds) FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'
SELECT Player.player_api_id FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT MAX(height) AS tallest_height, firstName, middleName, lastName FROM Player ORDER BY height DESC LIMIT 1
SELECT T1.preferred_foot FROM Player_Attributes AS T1 WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes)
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
SELECT L.name AS LeagueName FROM Match AS M JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.season = '2015/2016' AND (T2.home_team_goal - T2.away_team_goal) < 0 GROUP BY T1.team_long_name ORDER BY COUNT(*) ASC LIMIT 1
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.penalties DESC LIMIT 10;
SELECT Team.team_long_name AS AwayTeam, COUNT(*) AS Wins FROM Match JOIN Team ON Match.away_team_api_id = Team.team_api_id JOIN League ON Match.league_id = League.id WHERE League.name = 'Scotland Premier League' AND season = '2009/2010' AND (away_team_goal - home_team_goal) > 0 GROUP BY AwayTeam ORDER BY Wins DESC LIMIT 1;
SELECT Team.team_long_name, Team_Attributes.buildUpPlaySpeed FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 4
SELECT L.name AS LeagueName FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY SUM(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 ELSE 0 END) DESC LIMIT 1
SELECT (DATETIME('now') - birthday) AS age FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE sprint_speed >= 97 AND date >= '2013-01-01 00:00:00' AND date <= '2015-12-31 00:00:00'
SELECT L.name, COUNT(M.league_id) AS num_matches FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id GROUP BY L.name ORDER BY num_matches DESC LIMIT 1;
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'
SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE substr(T1.date,1,4) = '2010' AND T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010')
SELECT T.team_fifa_api_id FROM Team_Attributes AS T WHERE T.buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id INNER JOIN Match AS T3 ON T1.team_api_id = T3.home_team_api_id OR T1.team_api_id = T3.away_team_api_id WHERE T2.buildUpPlayPassing > (SELECT AVG(T4.buildUpPlayPassing) FROM Team_Attributes AS T4 WHERE T4.buildUpPlayPassing IS NOT NULL) AND strftime('%Y', T3.date) = '2012'
SELECT COUNT(player_fifa_api_id) * 100.0 / (SELECT COUNT(player_fifa_api_id) FROM Player_Attributes WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00') FROM Player_Attributes WHERE preferred_foot = 'left' AND birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00';
SELECT T2.name AS league_name, SUM(T1.home_team_goal + T1.away_team_goal) AS total_goals FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T2.name ORDER BY total_goals ASC LIMIT 5
SELECT CAST(SUM(PA.long_shots) AS REAL) / COUNT(PA.player_fifa_api_id) FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_fifa_api_id = P.player_fifa_api_id WHERE P.player_name = 'Ahmed Samir Farag'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.height > 180 GROUP BY Player.player_fifa_api_id ORDER BY SUM(Player_Attributes.heading_accuracy) / COUNT(Player.player_fifa_api_id) DESC LIMIT 10;
SELECT T2.`team_long_name` FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T2.`buildUpPlayDribblingClass` = 'Normal' AND T2.`date` >= '2014-01-01 00:00:00' AND T2.`date` <= '2014-01-31 00:00:00' GROUP BY T2.`team_long_name` HAVING SUM(T2.`chanceCreationPassing`) / COUNT(T2.`id`) > T2.`chanceCreationPassing` ORDER BY T2.`chanceCreationPassing` DESC;
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2009/2010' GROUP BY T2.name HAVING AVG(T1.home_team_goal) > AVG(T1.away_team_goal)
SELECT T1.team_short_name FROM Team AS T1 WHERE T1.team_long_name = 'Queens Park Rangers'
SELECT Player.player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10';
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Franco Zennaro'
SELECT TA.buildUpPlayPositioningClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'ADO Den Haag'
SELECT heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francois Affolter' AND Player_Attributes.date = '2014-09-18 00:00:00'
SELECT overall_rating FROM Player_Attributes JOIN Player ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Gabriel Tamas' AND strftime('%Y', Player_Attributes.date) = '2011'
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League')
SELECT T2.preferred_foot FROM Player AS T2 ORDER BY T2.birthday DESC LIMIT 1
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes)
SELECT COUNT(*) FROM Player_Attributes WHERE weight < 130 AND attacking_work_rate = 'left'
SELECT T.team_short_name FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'David Wilson'
SELECT PA.birthday FROM Player_Attributes AS PA WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands')
SELECT AVG(home_team_goal) FROM Match INNER JOIN Country ON Match.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height = (SELECT MAX(height) FROM Player) OR Player.height = (SELECT MIN(height) FROM Player) GROUP BY Player.player_name ORDER BY AVG(Player_Attributes.finishing) DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE overall_rating > 80 AND strftime('%Y', date) BETWEEN '2008' AND '2010'
SELECT potential FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Doran'
SELECT player_name FROM Player WHERE preferred_foot = 'left';
SELECT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast'
SELECT T2.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'CLB'
SELECT T2.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > 70
SELECT AVG(overall_rating) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.height > 170 AND STRFTIME('%Y', Player_Attributes.date) BETWEEN '2010' AND '2015'
SELECT Player.player_name FROM Player ORDER BY Player.height LIMIT 1;
SELECT T3.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A'
SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran')
SELECT COUNT(M.id) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'
SELECT T2.team_short_name FROM Team AS T2 INNER JOIN Match AS T1 ON T2.team_api_id = T1.home_team_api_id WHERE T1.home_team_goal = 10
SELECT Player.player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND Player_Attributes.potential = 61;
SELECT AVG(ball_control) AS avg_ball_control, player_name FROM Player_Attributes WHERE player_name = 'Abdou Diallo' OR player_name = 'Aaron Appindangoye' GROUP BY player_name
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'
SELECT CASE WHEN birthday < (SELECT birthday FROM Player WHERE player_name = 'Aaron Lennon') THEN 'Abdelaziz Barrada' ELSE 'Aaron Lennon' END AS older_player FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'
SELECT League.name FROM League JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Germany'
SELECT Player.player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT COUNT(*) FROM Player_Attributes WHERE strftime('%Y', birthday)<'1986' AND defensive_work_rate = 'high'
SELECT player_name FROM Player WHERE player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ) ) )
SELECT T2.heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk';
SELECT COUNT(*) FROM Player_Attributes WHERE height > 180 AND volleys > 70;
SELECT Player.player_name FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70
SELECT COUNT(*) FROM Match WHERE season = '2008/2009' AND country_id = (SELECT id FROM Country WHERE name = 'Belgium')
SELECT P.long_passing FROM Player AS P WHERE birthday = (SELECT MIN(birthday) FROM Player)
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04';
SELECT l.name FROM League l JOIN Match m ON l.id = m.league_id WHERE m.season = '2008/2009' GROUP BY l.id ORDER BY COUNT(m.id) DESC LIMIT 1;
SELECT AVG(overall_rating) FROM Player_Attributes WHERE strftime('%Y', birthday) < '1986'
SELECT ((T1.overall_rating - T2.overall_rating) / T2.overall_rating) * 100 FROM Player_Attributes AS T1 INNER JOIN Player AS P1 ON T1.player_api_id = P1.player_api_id INNER JOIN Player AS P2 ON T1.player_api_id = P2.player_api_id WHERE P1.player_name = 'Ariel Borysiuk' AND P2.player_name = 'Paulin Puel'
SELECT AVG(buildUpPlaySpeed) FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Heart of Midlothian')
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'
SELECT MAX(T2.chanceCreationPassing) AS highest_chance_creation_passing, T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Ajax'
SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Abdou Diallo'
SELECT MAX(T1.overall_rating) AS highest_overall_rating FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'
SELECT AVG(away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN Country AS C ON M.country_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy'
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = 77 AND T1.date = '2016-06-23' ORDER BY T2.birthday ASC LIMIT 1
SELECT overall_rating FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Aaron Mooy' AND Player_Attributes.date = '2016-02-04 00:00:00'
SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'
SELECT T1.attacking_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Berigaud' AND T1.date = '2013-02-22 00:00:00'
SELECT T1.date FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = T1.player_api_id)
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2012-02-22 00:00:00'
SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'
SELECT T1.buildUpPlayPassingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Lorient' AND T1.date = '2010-02-22'
SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'
SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'
SELECT T2.defenceAggressionClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00'
SELECT AVG(overall_rating) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Marko Arnautovic' AND date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT 100 * (T1.overall_rating - T2.overall_rating) / T1.overall_rating AS percentage FROM Player_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_name = 'Landon Donovan' AND T2.player_name = 'Jordan Bowery' WHERE T1.date = '2013/7/12' AND T2.date = '2013/7/12'
SELECT Player.player_name FROM Player ORDER BY Player.height DESC LIMIT 5;
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT Player.player_name FROM Player WHERE strftime('%Y', 'now') - strftime('%Y', birthday) > 34;
SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id WHERE P.player_name = 'Aaron Lennon'
SELECT SUM(T3.away_team_goal) FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T1.Player_Id = T2.Player_Id INNER JOIN Match AS T3 ON T2.Match_Id = T3.Match_Id WHERE T1.Player_Name = 'Daan Smith' OR T1.Player_Name = 'Filipe Ferreira'
SELECT SUM(home_team_goal) FROM Match JOIN Player ON Match.home_player_1 = Player.player_api_id OR Match.home_player_2 = Player.player_api_id OR Match.home_player_3 = Player.player_api_id OR Match.home_player_4 = Player.player_api_id OR Match.home_player_5 = Player.player_api_id OR Match.home_player_6 = Player.player_api_id OR Match.home_player_7 = Player.player_api_id OR Match.home_player_8 = Player.player_api_id OR Match.home_player_9 = Player.player_api_id OR Match.home_player_10 = Player.player_api_id OR Match.home_player_11 = Player.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', birthday)) < 31;
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 10
SELECT player_name FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY potential DESC LIMIT 1
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high';
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.finishing = 1 ORDER BY strftime('%Y-%m-%d', 'now') - strftime('%Y-%m-%d', Player.birthday) DESC LIMIT 1;
SELECT T2.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T3.name = 'Belgium'
SELECT T2.country_id FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.vision > 89;
SELECT C.name FROM Country AS C INNER JOIN Player AS P ON C.id = P.country_id GROUP BY C.name ORDER BY AVG(P.weight) DESC LIMIT 1
SELECT team_long_name FROM Team WHERE team_api_id IN (SELECT team_api_id FROM Team_Attributes WHERE buildUpPlaySpeedClass = 'Slow')
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe';
SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Italy'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 AND T2.id IN ( SELECT id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes ) ) ORDER BY T1.player_name LIMIT 3;
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'
SELECT (T1.jumping - T2.jumping) AS diff FROM Player_Attributes AS T1 INNER JOIN Player_Attributes AS T2 ON T1.id = 6 AND T2.id = 23
SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes) AND preferred_foot = 'right' ORDER BY overall_rating DESC LIMIT 3;
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes WHERE strength > 80 AND stamina > 80) FROM Player_Attributes WHERE strength > 80 AND stamina > 80
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Poland Ekstraklasa'
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')
SELECT T1.sprint_speed, T1.agility, T1.acceleration FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Alexis Blin'
SELECT T1.buildUpPlaySpeedClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'KSV Cercle Brugge'
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Serie A' AND country_id = (SELECT id FROM Country WHERE name = 'Italy')) AND season = '2015/2016'
SELECT MAX(home_team_goal) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Eredivisie')
SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.weight = (SELECT MAX(weight) FROM Player)
SELECT T3.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T2.team_long_name = T3.name WHERE T1.season = '2015/2016' GROUP BY T3.team_long_name ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT T.team_long_name FROM Team AS T INNER JOIN Match AS M ON T.team_api_id = M.away_team_api_id WHERE M.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)
SELECT player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY overall_rating DESC LIMIT 1
SELECT (CAST(COUNT(*) AS FLOAT) / (SELECT COUNT(*) FROM Player_Attributes)) * 100 AS percentage FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.height < 180 AND Player_Attributes.strength > 70;
SELECT ABS(COUNT(CASE WHEN P.SEX = 'M' AND P.Admission = '+' THEN 1 ELSE NULL END) - COUNT(CASE WHEN P.SEX = 'M' AND P.Admission = '-' THEN 1 ELSE NULL END)) * 100 / COUNT(CASE WHEN P.SEX = 'M' THEN 1 ELSE NULL END) AS Deviation_Percentage FROM Patient AS P
SELECT COUNT(ID) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') AS Percentage FROM Patient WHERE SEX = 'F' AND year(Birthday) > '1930'
SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM Patient WHERE year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31') AS Percentage FROM Patient WHERE year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+'
SELECT (COUNT(CASE WHEN Diagnosis = 'SLE' AND Admission = '+' THEN ID END) / COUNT(CASE WHEN Diagnosis = 'SLE' AND Admission = '-' THEN ID END)) AS Ratio FROM Patient;
SELECT Diagnosis FROM Patient WHERE ID = 30609 SELECT Date FROM Laboratory WHERE ID = 30609
SELECT t1.SEX, t1.Birthday, t2.`Examination Date`, t2.Symptoms FROM Patient AS t1 INNER JOIN Examination AS t2 ON t1.ID = t2.ID WHERE t1.ID = '163109'
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.LDH > 500;
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RVVT = '+';
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Thrombosis = 2;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Birthday LIKE '1937%' AND Laboratory.`T-CHO` >= 250;
SELECT Patient.ID, Patient.SEX, Patient.Diagnosis FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.ALB < 3.5
SELECT (COUNT(DISTINCT T1.ID) / (SELECT COUNT(DISTINCT ID) FROM Patient WHERE SEX = 'F')) * 100 FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND (T1.TP < 6.0 OR T1.TP > 8.5)
SELECT AVG(aCL IgG) FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE Admission = '+' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday) >= 50))
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Description) = '1997' AND Admission = '-'
SELECT YEAR(Birthday) - YEAR(`First Date`) AS Age, MIN(YEAR(Birthday) - YEAR(`First Date`)) AS Youngest_Age FROM Patient GROUP BY ID ORDER BY Youngest_Age LIMIT 1
SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND YEAR(E.`Examination Date`) = 1997
SELECT SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))) AS age_gap FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE TG >= 200 )
SELECT T2.Symptoms, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = (SELECT MIN(Birthday) FROM Patient)
SELECT COUNT(DISTINCT L1.ID) / 12 AS avg FROM Laboratory AS L1 INNER JOIN Patient AS P1 ON L1.ID = P1.ID WHERE P1.SEX = 'M' AND L1.Date BETWEEN '1998-01-01' AND '1998-12-31'
SELECT MAX(T1.Birthday) AS Oldest_Patient_Birthday, T2.Date AS Lab_Work_Completion_Date, year(T1.`First Date`) - year(T1.Birthday) AS Age_At_Initial_Arrival FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE (SEX = 'M' AND UA <= 8.0) OR (SEX = 'F' AND UA <= 6.5)
SELECT COUNT(*) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE E.`Examination Date` IS NULL OR (E.`Examination Date` IS NOT NULL AND (YEAR(E.`Examination Date`) - YEAR(P.`First Date`)) >= 1)
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE strftime('%Y', P.Birthday) > strftime('%Y', 'now') - 18 AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0
SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount FROM Examination WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY DiagnosisCount DESC LIMIT 1;
SELECT AVG(YEAR('1991-10-01') - YEAR(Birthday)) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE Date BETWEEN '1991-10-01' AND '1991-10-30')
SELECT T1.`Examination Date` - T2.Birthday AS Age, T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.HGB = (SELECT MAX(HGB) FROM Examination)
SELECT `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN T1.`T-CHO` < 250 THEN 'Normal' ELSE 'Not Normal' END AS `Total Cholesterol Status` FROM Laboratory AS T1 WHERE T1.ID = 2927464 AND T1.Date = '1995-09-04'
SELECT SEX FROM Patient WHERE ID = ( SELECT ID FROM Examination WHERE Diagnosis = 'AORTITIS' ORDER BY `Examination Date` LIMIT 1 )
SELECT T1.`aCL IgM` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SLE' AND T2.Description = '1994-02-19' AND T1.`Examination Date` = '1993-11-12'
SELECT P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT = 9 AND L.Date = '1992-06-12'
SELECT STRFTIME('%Y', '1992-01-01') - STRFTIME('%Y', Birthday) AS Age FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE UA = '8.4' AND Date = '1991-10-21' )
SELECT COUNT(ID) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS') AND Date LIKE '1995%'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = (SELECT ID FROM Examination WHERE Diagnosis = 'SLE' AND `Examination Date` = '1997-01-27') AND T1.`First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE ID = T1.ID)
SELECT Symptoms FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959/3/1') AND `Examination Date` = '1993/9/27'
SELECT (SUM(CASE WHEN Date LIKE '1981-11%' THEN `T-CHO` ELSE 0 END) - SUM(CASE WHEN Date LIKE '1981-12%' THEN `T-CHO` ELSE 0 END)) AS Decrease_Rate FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18')
SELECT Patient.ID FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'Behcet' AND (YEAR(Examination.`Examination Date`) >= 1997 AND YEAR(Examination.`Examination Date`) < 1998)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4 GROUP BY P.ID
SELECT Patient.ID FROM Patient WHERE Patient.SEX = 'F' AND YEAR(Patient.Birthday) = 1964 AND Patient.Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2 AND T2.`ANA Pattern` = 'S' AND T2.`aCL IgM` > (SELECT (AVG(`aCL IgM`) + AVG(`aCL IgM`) * 0.2) FROM Examination);
SELECT COUNT(*) * 100 / (SELECT COUNT(*) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30 AND UA <= 6.5
SELECT (COUNT(CASE WHEN T2.Diagnosis = 'BEHCET' THEN 1 END) * 100) / COUNT(*) FROM Patient AS T2 WHERE T2.SEX = 'M' AND strftime('%Y', T2.`First Date`) = '1981'
SELECT Patient.ID, Patient.Description FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.Date LIKE '1991-10%' AND Laboratory.`T-BIL` < 2.0;
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.`ANA Pattern` != 'P' AND P.SEX = 'F' AND STRFTIME('%Y', P.Birthday) BETWEEN '1980' AND '1989'
SELECT T2.SEX FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T1.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(ALB) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1
SELECT T1.`First Date`, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 48473
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE YEAR(L.Date) = '1997' AND (L.TP < 6 OR L.TP > 8.5)
SELECT CAST(SUM(CASE WHEN T1.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100 FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID;
SELECT (DIVIDE(COUNT(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END), COUNT(*)) * 100) AS percentage FROM Patient WHERE YEAR(Birthday) = 1980 AND Diagnosis = 'RA'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`Examination Date` BETWEEN '1995' AND '1997' AND T2.Diagnosis = 'BEHCET' AND T1.Admission = '-'
SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.WBC < 3.5
SELECT DATEDIFF(e.`Examination Date`, p.`First Date`) AS evaluation_time FROM Examination e INNER JOIN Patient p ON e.ID = p.ID WHERE e.ID = 821298 ORDER BY e.`Examination Date` ASC LIMIT 1;
SELECT CASE WHEN L.UA > 8.0 AND P.SEX = 'M' THEN 'Above normal range' WHEN L.UA > 6.5 AND P.SEX = 'F' THEN 'Above normal range' ELSE 'Within normal range' END AS Uric_Acid_Range FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = 57266;
SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60
SELECT p.ID, p.SEX, p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.GOT < 60 AND STRFTIME('%Y', l.Date) = '1994'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60;
SELECT Diagnosis FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE GPT > 60 ) ORDER BY Birthday ASC;
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS Age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800
SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300;
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01' AND T2.ALP < 300
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TP < 6.0
SELECT ABS(TP - 8.5) AS Deviation FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.TP > 8.5;
SELECT * FROM Patient WHERE SEX = 'M' AND (ALB <= 3.5 OR ALB >= 5.5) ORDER BY Birthday DESC
SELECT P.ID, P.Birthday, L.ALB, CASE WHEN strftime('%Y', P.Birthday) = '1982' AND L.ALB BETWEEN 3.5 AND 5.5 THEN 'Albumin within normal range' ELSE 'Albumin not within normal range' END AS Albumin_Status FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID;
SELECT COUNT(DISTINCT T1.ID) * 100.0 / (SELECT COUNT(DISTINCT T2.ID) FROM Patient AS T2 WHERE T2.SEX = 'F') FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (T1.UA > 8.0 AND T2.SEX = 'M') OR (T1.UA > 6.5 AND T2.SEX = 'F')
SELECT AVG(UA) FROM Laboratory WHERE Date = (SELECT MAX(Date) FROM Laboratory) AND (UA < 8.0 AND SEX = 'M' OR UA < 6.5 AND SEX = 'F')
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN = 29;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.UN < 30 AND Patient.Diagnosis = 'RA';
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5
SELECT (SUM(CASE WHEN SEX = 'M' AND CRE >= 1.5 THEN 1 ELSE 0 END) > SUM(CASE WHEN SEX = 'F' AND CRE >= 1.5 THEN 1 ELSE 0 END)) as Result FROM Patient p JOIN Laboratory l ON p.ID = l.ID;
SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)
SELECT Patient.SEX, SUM(IIF(Laboratory.`T-BIL` >= 2.0, 1, 0)) AS Abnormal_T_BIL FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID GROUP BY Patient.SEX;
SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory) AND T1.Birthday = (SELECT MIN(Birthday) FROM Patient)
SELECT AVG(YEAR(date('now')) - YEAR(P.birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250;
SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300;
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG >= 200 AND (YEAR(CURRENT_TIMESTAMP) - YEAR(p.Birthday)) > 50
SELECT DISTINCT ID FROM Patient WHERE Admission = '-' AND ID IN ( SELECT ID FROM Laboratory WHERE CPK < 250 )
SELECT COUNT(*) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE year(Birthday) BETWEEN '1936' AND '1956' AND SEX = 'M' AND CPK >= 250;
SELECT P.ID, P.SEX, SUBTRACT(year(current_timestamp), year(P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250
SELECT P.ID, L.GLU FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.Description) >= '1991' AND L.GLU < 180;
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 ORDER BY P.SEX, P.Birthday;
SELECT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T2.Birthday) AS Age FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RBC < 3.5;
SELECT CASE WHEN T1.Sex = 'F' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(T1.Birthday) >= 50) AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) THEN T1.Admission ELSE '-' END AS Hospital_Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID;
SELECT Patient.ID, Patient.SEX FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-' AND Laboratory.HGB < 10;
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1
SELECT P.ID, (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(P.ID) > 2;
SELECT AVG(HCT) AS Average_Hematocrit_Level FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT COUNT(*) AS LowerThanNormal, (SELECT COUNT(*) FROM Laboratory WHERE PLT > 400) AS HigherThanNormal FROM Laboratory WHERE PLT < 100
SELECT P.ID, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date LIKE '1984%' AND (YEAR(CURRENT_TIMESTAMP) - YEAR(P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400;
SELECT SUM(CASE WHEN PT >= 14 AND SEX = 'F' THEN 1 ELSE 0 END) / SUM(CASE WHEN PT >= 14 THEN 1 ELSE 0 END) * 100 as Percentage FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE (YEAR(CURRENT_TIMESTAMP) - YEAR(Birthday)) > 55
SELECT Patient.ID, Patient.`First Date` FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.`First Date`) > 1992 AND Laboratory.PT < 14
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND APTT < 45;
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.APTT > 45 AND E.Thrombosis = 3
SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Sex = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday > '1980-01-01' AND T2.FG NOT BETWEEN 150 AND 450
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'
SELECT COUNT(*) FROM Examination WHERE `aCL IgG` < 900 AND Symptoms = 'abortion'
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`aCL IgG` BETWEEN 900 AND 2000 AND e.Symptoms IS NOT NULL;
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 ORDER BY T2.IGA DESC LIMIT 1
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 AND YEAR(`First Date`) >= 1990-01-01
SELECT Diagnosis FROM Examination WHERE `aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT COUNT(*) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE (CRP LIKE '+' OR CRP LIKE '-' OR CRP < 1.0) AND Description IS NULL
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.CRP NOT IN ('+-', '-') AND l.CRP >= 1.0 AND (YEAR(CURDATE()) - YEAR(p.Birthday)) < 18;
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RA IN ('-', '+-') AND T2.KCT = '+'
SELECT Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Birthday) >= 1995 AND RA IN ('-', '+-')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND (YEAR(CURDATE()) - YEAR(T1.Birthday)) > 60
SELECT COUNT(*) FROM Patient AS P LEFT JOIN Laboratory AS L ON P.ID = L.ID WHERE RF < 20 AND Thrombosis = '0'
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE e.`ANA Pattern` = 'P' AND e.C3 > 35;
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 OR T2.HCT > 52 ORDER BY T2.`aCL IgA` DESC LIMIT 1
SELECT COUNT(DISTINCT P.ID) AS "Number of Patients" FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 1 AND L.C4 > 10;
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP IN ('-', '+-') AND T1.Admission = '+'
SELECT p.Birthday FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.RNP NOT IN ('-', '+-') ORDER BY p.Birthday DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('-', '+-') AND T2.Thrombosis = 1;
SELECT ID FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE SM NOT IN ('-', '+-')) ORDER BY Birthday DESC LIMIT 3;
SELECT T1.ID FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` >= '1997-01-01' AND T2.SC170 IN ('-', '+-')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('-', '+-') AND T1.Sex = 'M' AND T2.Symptoms = 'vertigo'
SELECT COUNT(DISTINCT p.ID) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.SSA IN ('-', '+-') AND YEAR(`First Date`) < 1990;
SELECT MIN(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('-', '+-') ORDER BY T1.`First Date` ASC;
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.SSB IN ('negative', '0') AND E.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('-', '+-') AND T2.Symptoms IS NOT NULL
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.DNA >= 8
SELECT COUNT(DISTINCT p.ID) FROM Patient p LEFT JOIN Laboratory l ON p.ID = l.ID WHERE l.DNA < 8 AND p.Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`DNA-II` >= 8 AND T2.Admission = '+'
SELECT COUNT(DISTINCT ID) * 100.0 / (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE GOT >= 60) FROM Laboratory WHERE GOT >= 60 AND ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60;
SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT >= 60)
SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'
SELECT T1.ID, T2.`First Date` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.LDH < 500 ORDER BY T1.LDH DESC, T2.`First Date` ASC LIMIT 1
SELECT MAX(`First Date`) AS Latest_Recorded_Date FROM Patient WHERE ID IN ( SELECT ID FROM Laboratory WHERE LDH >= 500 )
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP >= 300 AND P.Admission = '+'
SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.Admission = '-' AND L.ALP < 300
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0;
SELECT COUNT(*) FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.Diagnosis = 'SJS' AND e.TP > 6.0 AND e.TP < 8.5
SELECT `Examination Date` FROM Examination WHERE ALB > 3.5 AND ALB < 5.5 ORDER BY ALB DESC LIMIT 1;
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5
SELECT `aCL IgG`, `aCL IgM`, `aCL IgA` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE SEX = 'F' ) AND UA = ( SELECT MAX(UA) FROM Laboratory WHERE UA <= 6.50 )
SELECT MAX(ANA) FROM Examination WHERE CRE < 1.5
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5 AND T2.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Laboratory)
SELECT COUNT(*) FROM Examination WHERE `T-BIL` >= 2.0 AND `ANA Pattern` LIKE '%P%';
SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-CHO` >= 250 AND L.KCT = '-'
SELECT COUNT(*) FROM Examination e JOIN Laboratory l ON e.ID = l.ID WHERE l.`T-CHO` < 250 AND e.`ANA Pattern` = 'P'
SELECT COUNT(*) FROM Patient p JOIN Laboratory l ON p.ID = l.ID WHERE l.TG < 200 AND p.Symptoms IS NOT NULL;
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 ORDER BY T1.TG DESC LIMIT 1
SELECT T1.ID FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID LEFT JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis = 0 AND T3.CPK < 250
SELECT COUNT(*) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.CPK < 250 AND (L.KCT = '+' OR L.RVVT = '+' OR L.LAC = '+')
SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GLU > 180)
SELECT COUNT(Patient.ID) FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE GLU < 180 AND Thrombosis = 0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'SLE' AND T3.WBC BETWEEN 3.5 AND 9.0
SELECT DISTINCT L.ID FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'
SELECT COUNT(*) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE PLT > 100 AND PLT < 400) AND Diagnosis IS NOT NULL;
SELECT T1.PLT FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis = 'MCTD'
SELECT AVG(PT) FROM Laboratory l JOIN Patient p ON l.ID = p.ID WHERE p.Sex = 'M' AND l.PT < 14
SELECT COUNT(*) FROM Examination WHERE Thrombosis IN (1, 2) AND PT < 14
SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE department = 'Art and Design')
SELECT COUNT(link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer')
SELECT phone FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women\'s Soccer'))
SELECT COUNT(T1.member_id) FROM member AS T1 JOIN attendance AS T2 ON T1.member_id = T2.link_to_member JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women\'s Soccer' AND T1.t_shirt_size = 'Medium'
SELECT event.event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Student_Club' GROUP BY event.event_id ORDER BY COUNT(attendance.link_to_member) DESC LIMIT 1;
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(*) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison' AND member.position = 'Student_Club' AND event.event_date LIKE '%2019%'
SELECT COUNT(T4.event_id) FROM ( SELECT T1.event_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T1.event_id) > 10 ) T4
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20)
SELECT AVG(attendance_count) AS average_attendance FROM ( SELECT COUNT(link_to_member) AS attendance_count FROM attendance AS A INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE E.type = 'Meeting' AND STRFTIME('%Y', E.event_date) = '2020' GROUP BY E.event_id ) AS T1
SELECT T1.expense_description FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.event_status = 'club events' ORDER BY T1.cost DESC LIMIT 1
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
SELECT T2.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
SELECT T3.county FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'SHERRI' AND T2.last_name = 'RAMSEY'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'
SELECT SUM(amount) FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President')
SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.event_name = 'September Meeting'
SELECT t3.city, t3.state FROM member AS t1 INNER JOIN employees AS t2 ON t1.position = 'President' INNER JOIN zip_code AS t3 ON t1.zip = t3.zip_code
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'
SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'
SELECT T2.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Pierce' AND T2.last_name = 'Guidi'
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker')
SELECT E.expense_id, E.approved FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_name = 'October Meeting' AND EV.event_date = '2019-10-08';
SELECT SUM(cost) / COUNT(DISTINCT link_to_event) AS average_cost FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND (strftime('%m', expense_date) = '09' OR strftime('%m', expense_date) = '10');
SELECT SUM(CASE WHEN SUBSTR(event_date, -4) = '2019' THEN spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(event_date, -4) = '2020' THEN spent ELSE 0 END) AS difference FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'Student_Club')
SELECT E.location FROM event AS E WHERE E.event_name = 'Spring Budget Review'
SELECT T2.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Posters' AND T1.event_date = '2019-09-04'
SELECT MAX(b.remaining) FROM budget AS b WHERE b.category = 'Food'
SELECT T1.notes FROM income AS T1 WHERE T1.source = 'Fundraising' AND T1.date_received = '2019-09-14'
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';
SELECT T3.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN zip_code AS T3 ON T2.city = T3.city WHERE T1.first_name = 'Adela' AND T1.last_name = 'O'Gallagher'
SELECT COUNT(*) FROM budget WHERE event_status = 'November Meeting' AND remaining < 0
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Speaker')
SELECT E.event_status FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event INNER JOIN expense AS Ex ON B.budget_id = Ex.link_to_budget WHERE Ex.expense_description = 'Post Cards, Posters' AND Ex.expense_date = '2019-8-20';
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT t2.major_name FROM member AS t1 INNER JOIN major AS t2 ON t1.link_to_major = t2.major_id WHERE t1.position = 'Vice President'
SELECT T3.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT t2.department FROM member AS t1 INNER JOIN major AS t2 ON t1.link_to_major = t2.major_id WHERE t1.position = 'President'
SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'CONNOR' AND T1.last_name = 'HILTON' AND T2.source = 'Dues'
SELECT M.first_name, M.last_name FROM income AS I INNER JOIN member AS M ON I.link_to_member = M.member_id WHERE I.source = 'Dues' ORDER BY I.date_received LIMIT 1;
SELECT COUNT(*) FROM budget AS b1 JOIN event AS e1 ON b1.link_to_event = e1.event_id WHERE b1.category = 'Advertisement' AND e1.event_name = 'Yearly Kickoff' AND (SELECT SUM(amount) FROM budget AS b2 JOIN event AS e2 ON b2.link_to_event = e2.event_id WHERE b2.category = 'Advertisement' AND e2.event_name = 'October Meeting') > 0;
SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T2.amount ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'
SELECT COUNT(DISTINCT T3.city) FROM zip_code AS T3 WHERE T3.county = 'Orange County' AND T3.state = 'Virginia'
SELECT major_name FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'
SELECT T1.expense_description FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.remaining = (SELECT MIN(remaining) FROM budget)
SELECT T2.first_name, T2.last_name FROM event AS T1 INNER JOIN attendance AS T3 ON T1.event_id = T3.link_to_event INNER JOIN member AS T2 ON T3.link_to_member = T2.member_id WHERE T1.event_name = 'October Meeting';
SELECT major.college, COUNT(member.member_id) AS num_members FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY num_members DESC LIMIT 1;
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE amount = (SELECT MAX(amount) FROM budget))
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
SELECT COUNT(*) FROM attendance AS A INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women\'s Soccer'
SELECT I.date_received FROM income AS I INNER JOIN member AS M ON M.member_id = I.link_to_member WHERE M.first_name = 'Casey' AND M.last_name = 'Mason'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maryland'
SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240');
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE department = 'School of Applied Sciences, Technology and Education')
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.spent / T2.amount DESC LIMIT 1;
SELECT COUNT(*) FROM member WHERE position = 'President'
SELECT MAX(spent) AS highest_budget_spend FROM budget
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'
SELECT SUM(spent) FROM budget WHERE category = 'Food'
SELECT T2.first_name, T2.last_name FROM member AS T2 INNER JOIN attendance AS T1 ON T1.link_to_member = T2.member_id GROUP BY T2.first_name, T2.last_name HAVING COUNT(T1.link_to_event) > 7;
SELECT m.first_name, m.last_name FROM member m JOIN major ma ON m.link_to_major = ma.major_id JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id WHERE ma.major_name = 'Interior Design' AND e.event_name = 'Community Theater'
SELECT first_name, last_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Georgetown' AND zip_code.state = 'South Carolina'
SELECT COUNT(T1.amount) FROM Income AS T1 INNER JOIN Member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'
SELECT first_name || ' ' || last_name AS full_name FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.amount > 40;
SELECT SUM(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff'))
SELECT T2.first_name, T2.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Yearly Kickoff'
SELECT m.first_name || ' ' || m.last_name AS full_name, i.source FROM income i JOIN member m ON i.link_to_member = m.member_id WHERE i.amount = (SELECT MAX(amount) FROM income)
SELECT event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event INNER JOIN expense ON budget.budget_id = expense.link_to_budget ORDER BY cost ASC LIMIT 1
SELECT (SUM(CASE WHEN E.event_name = 'Yearly Kickoff' THEN B.cost ELSE 0 END) * 100) / SUM(B.cost) FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event;
SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) FROM major WHERE major_name IN ('Finance', 'Physics')
SELECT MAX(source) AS top_source_of_funds FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'
SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary'
SELECT COUNT(member_id) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Physics Teaching')
SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Community Theater' AND strftime('%Y', event_date) = '2019')
SELECT COUNT(*) AS events_attended, major_name FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Luisa' AND last_name = 'Guidi'
SELECT DIVIDE(SUM(spent), COUNT(spent)) FROM budget WHERE category = 'Food' AND event_status = 'Closed'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1
SELECT COUNT(*) FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE M.first_name = 'Maya' AND M.last_name = 'Mclean' AND E.event_name = 'Women\'s Soccer'
SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) / COUNT(event_id)) * 100 FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT E.cost FROM expense AS E INNER JOIN budget AS B ON E.link_to_budget = B.budget_id INNER JOIN event AS EV ON B.link_to_event = EV.event_id WHERE EV.event_name = 'September Speaker' AND E.expense_description = 'Posters'
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1
SELECT event_name FROM event WHERE status = 'Closed' ORDER BY remaining ASC LIMIT 1
SELECT E.expense_description, SUM(E.cost) AS total_approved_value FROM expense AS E INNER JOIN event AS EV ON E.link_to_event = EV.event_id WHERE EV.event_name = 'October Meeting' GROUP BY E.expense_description;
SELECT SUM(amount) AS TotalBudgetedAmount, category FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') GROUP BY category ORDER BY TotalBudgetedAmount ASC;
SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1
SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'
SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE m.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY m.first_name, m.last_name
SELECT expense_description FROM expense WHERE link_to_member = 'Sacha Harrison'
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'
SELECT zip FROM member JOIN expense ON member.member_id = expense.link_to_member WHERE cost < 50;
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'
SELECT M.position FROM member AS M INNER JOIN major AS MA ON M.link_to_major = MA.major_id WHERE MA.major_name = 'Business'
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Business') AND t_shirt_size = 'Medium'
SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30;
SELECT event.category FROM event WHERE event.location = 'MU 215'
SELECT e.category FROM event e WHERE e.event_date = '2020-03-24T12:00:00'
SELECT t2.major_name FROM member AS t1 INNER JOIN major AS t2 ON t1.link_to_major = t2.major_id WHERE t1.position = 'Vice President'
SELECT (CAST(COUNT(CASE WHEN position = 'Member' AND major_name = 'Mathematics' THEN member_id ELSE NULL END) AS REAL) / COUNT(member_id)) * 100 FROM member JOIN major ON member.link_to_major = major.major_id
SELECT event.type FROM event WHERE event.location = 'MU 215'
SELECT COUNT(*) FROM income WHERE amount = 50
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'
SELECT T2.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT B.category FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE E.location = 'MU 215' AND E.type = 'Guest Speaker' AND B.spent = 0;
SELECT T3.city, T3.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T2.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member'
SELECT t1.event_name FROM event AS t1 INNER JOIN attendance AS t2 ON t1.event_id = t2.link_to_event INNER JOIN member AS t3 ON t2.link_to_member = t3.member_id WHERE t1.type = 'Social' AND t3.position = 'Vice President' AND t1.location = '900 E. Washington St.'
SELECT T2.last_name, T2.position FROM member AS T2 INNER JOIN expense AS T1 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.position = 'Member' AND T3.event_name = 'Women''s Soccer'
SELECT (COUNT(CASE WHEN T2.amount = 50 THEN 1 END) / COUNT(T1.member_id)) * 100 AS percentage FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member' AND T2.source = 'Student_Club'
SELECT DISTINCT T2.country FROM zip_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code WHERE T1.type = 'PO Box'
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND city = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT T1.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 50;
SELECT M.first_name, M.last_name, E.link_to_event FROM member M INNER JOIN expense E ON M.member_id = E.link_to_member WHERE E.approved = 'true' AND E.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT college FROM member JOIN major ON member.link_to_major = major.major_id WHERE first_name = 'Katy' AND link_to_major = 'rec1N0upiVLy5esTO'
SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'
SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'education' AND college = 'College of Education & Human Services') AND position = 'Member'
SELECT (COUNT(CASE WHEN remaining < 0 THEN 1 END) * 100.0 / COUNT(event_id)) AS percentage_over_budget FROM budget;
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50;
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'
SELECT (CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) / COUNT(zip_code)) * 100 AS percentage FROM zip_code
SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0
SELECT event_name, event_date FROM event JOIN expense ON event.event_id = expense.link_to_event WHERE expense_description = 'Pizza' AND cost > 50 AND cost < 100;
SELECT m.first_name || ' ' || m.last_name AS full_name, ma.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN major ma ON m.link_to_major = ma.major_id WHERE e.cost > 100;
SELECT zip_code.city, zip_code.county FROM event JOIN income ON event.event_id = income.link_to_event JOIN zip_code ON event.location = zip_code.zip_code GROUP BY event.event_id HAVING COUNT(income.income_id) > 40;
SELECT T2.first_name, T2.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(DISTINCT T2.link_to_event) > 1 ORDER BY SUM(T2.cost) DESC LIMIT 1
SELECT DIVIDE(SUM(cost), COUNT(event_id)) AS average_amount_paid FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.position != 'Member'
SELECT event_name FROM event WHERE event_id IN ( SELECT link_to_event FROM budget WHERE category = 'Parking' GROUP BY link_to_event HAVING cost < ( SELECT SUM(cost) / COUNT(event_id) FROM budget WHERE category = 'Parking' ) )
SELECT SUM(cost) * 100 / COUNT(event_id) FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.type = 'Game'
SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water, chips, cookies' GROUP BY T1.budget_id ORDER BY MAX(T2.cost) DESC LIMIT 1
SELECT T2.first_name || ' ' || T2.last_name AS full_name FROM member AS T2 INNER JOIN expense AS T1 ON T1.link_to_member = T2.member_id ORDER BY T1.cost DESC LIMIT 5
SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number FROM member m JOIN expense e ON m.member_id = e.link_to_member WHERE e.cost > (SELECT AVG(cost) FROM expense)
SELECT (SUM(CASE WHEN T1.state = 'Maine' THEN 1 ELSE 0 END) / COUNT(CASE WHEN T2.position = 'Member' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.state = 'Vermont' THEN 1 ELSE 0 END) / COUNT(CASE WHEN T2.position = 'Member' THEN 1 ELSE 0 END)) * 100 AS Percentage_Difference FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip;
SELECT M.major_name, M.department FROM member AS M INNER JOIN major AS MA ON M.link_to_major = MA.major_id WHERE M.first_name = 'Garrett' AND M.last_name = 'Gerke'
SELECT T2.first_name || ' ' || T2.last_name AS full_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'
SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'
SELECT T1.category, T2.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'
SELECT event.event_name FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.category = 'Food'
SELECT M.first_name || ' ' || M.last_name AS full_name, I.amount FROM income AS I INNER JOIN member AS M ON I.link_to_member = M.member_id WHERE I.date_received = '9/9/2019';
SELECT T1.category FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Posters'
SELECT m.first_name, m.last_name, ma.college FROM member m JOIN major ma ON m.link_to_major = ma.major_id WHERE m.position = 'Secretary'
SELECT SUM(spent) AS total_amount_spent, event_name FROM budget WHERE category = 'Speaker Gifts'
SELECT T3.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Girke'
SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092;
SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium gas'
SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) / COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) AS currency_ratio FROM customers;
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' ORDER BY T1.Consumption LIMIT 1;
SELECT AVG(Consumption) / 12 FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') AND Date BETWEEN '201301' AND '201312'
SELECT T1.CustomerID, SUM(T2.Amount) AS TotalConsumption FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1
SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date BETWEEN '201201' AND '201212' AND Segment = 'KAM' AND Consumption < 30000;
SELECT SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption ELSE 0 END) - SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption ELSE 0 END) AS Difference_in_Consumption FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date BETWEEN '201201' AND '201212'
SELECT strftime('%Y', Date) AS Year, SUM(Price) AS TotalGasUsePaid FROM transactions_1k WHERE Currency = 'EUR' GROUP BY strftime('%Y', Date) ORDER BY TotalGasUsePaid DESC LIMIT 1
SELECT Segment FROM gasstations WHERE Segment IN (SELECT Segment FROM yearmonth) GROUP BY Segment ORDER BY SUM(Consumption) LIMIT 1
SELECT substr(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY substr(Date, 1, 4) ORDER BY TotalConsumption DESC LIMIT 1;
SELECT MAX(Consumption) AS Peak_Consumption, Date FROM yearmonth WHERE Date LIKE '2013%' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME') GROUP BY Date ORDER BY Peak_Consumption DESC LIMIT 1;
SELECT (SUM(CASE WHEN Segment = 'SME' THEN Consumption ELSE 0 END) / COUNT(DISTINCT CustomerID)) - (SUM(CASE WHEN Segment = 'LAM' THEN Consumption ELSE 0 END) / COUNT(DISTINCT CustomerID)) AS Difference_SME_LAM, (SUM(CASE WHEN Segment = 'LAM' THEN Consumption ELSE 0 END) / COUNT(DISTINCT CustomerID)) - (SUM(CASE WHEN Segment = 'KAM' THEN Consumption ELSE 0 END) / COUNT(DISTINCT CustomerID)) AS Difference_LAM_KAM, (SUM(CASE WHEN Segment = 'KAM' THEN Consumption ELSE 0 END) / COUNT(DISTINCT CustomerID)) - (SUM(CASE WHEN Segment = 'SME' THEN Consumption ELSE 0 END) / COUNT(DISTINCT CustomerID)) AS Difference_KAM_SME FROM yearmonth WHERE Date BETWEEN '201301' AND '201312'
SELECT Segment, MAX(((T2.Consumption - T1.Consumption) / T2.Consumption) * 100) AS Max_Percentage_Increase, MIN(((T2.Consumption - T1.Consumption) / T2.Consumption) * 100) AS Min_Percentage_Increase FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '2012%' AND T2.Date LIKE '2013%' GROUP BY Segment;
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date >= '201308' AND Date <= '201311'
SELECT COUNT(CASE WHEN Country = 'Czech Republic' AND Segment = 'discount' THEN 1 ELSE 0 END) - COUNT(CASE WHEN Country = 'Slovakia' AND Segment = 'discount' THEN 1 ELSE 0 END) AS More_Discount_Gas_Stations FROM gasstations
SELECT SUM(y1.Consumption) - SUM(y2.Consumption) AS consumption_difference FROM yearmonth y1 JOIN yearmonth y2 ON y1.CustomerID = 7 AND y2.CustomerID = 5 WHERE y1.Date = '201304' AND y2.Date = '201304'
SELECT COUNT(DISTINCT CustomerID) - COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Czech koruna' - (SELECT COUNT(DISTINCT CustomerID) FROM customers WHERE Segment = 'SME' AND Currency = 'Euro')
SELECT c.CustomerID FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'LAM' AND c.Currency = 'Euro' AND y.Date = '201310' ORDER BY y.Consumption DESC LIMIT 1
SELECT c.CustomerID, MAX(y.Consumption) as MaxConsumption FROM customers c JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Segment = 'KAM' GROUP BY c.CustomerID ORDER BY MaxConsumption DESC LIMIT 1
SELECT SUM(Consumption) AS total_consumption FROM yearmonth WHERE Date = '201305' AND CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM')
SELECT (COUNT(CustomerID) * 100.0 / (SELECT COUNT(CustomerID) FROM customers WHERE Segment = 'LAM')) AS Percentage FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'LAM') AND Consumption > 46.73;
SELECT Country, COUNT(GasStationID) AS TotalValueForMoneyGasStations FROM gasstations WHERE Segment = 'value for money' GROUP BY Country;
SELECT COUNT(CustomerID) * 100.0 / (SELECT COUNT(CustomerID) FROM customers WHERE Segment = 'KAM' AND Currency = 'Euro') as Percentage FROM customers WHERE Segment = 'KAM'
SELECT COUNT(CustomerID) * 100.0 / (SELECT COUNT(CustomerID) FROM yearmonth WHERE Date LIKE '201202' AND Consumption > 528.3) FROM yearmonth WHERE Date LIKE '201202' AND Consumption > 528.3
SELECT (CAST(COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) AS REAL) / COUNT(*)) * 100 FROM gasstations WHERE Country = 'Slovakia'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1;
SELECT Segment FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date = '201309' GROUP BY Segment ORDER BY SUM(Y.Consumption) LIMIT 1;
SELECT customers.CustomerID, customers.Segment FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201206' ORDER BY yearmonth.Consumption LIMIT 1;
SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
SELECT MAX(SUM(T1.Consumption)/12) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'euro'
SELECT Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE Date LIKE '2013-09%')
SELECT Country FROM gasstations WHERE GasStationID IN (SELECT DISTINCT GasStationID FROM transactions_1k WHERE Date LIKE '201306%')
SELECT DISTINCT T2.ChainID FROM gasstations AS T1 INNER JOIN "transactions_1k" AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'Euro'
SELECT Description FROM products WHERE ProductID IN (SELECT ProductID FROM transactions_1k WHERE Currency = 'Euro')
SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'
SELECT COUNT(*) FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID JOIN yearmonth y ON c.CustomerID = y.CustomerID WHERE c.Currency = 'euro' AND y.Consumption > 1000;
SELECT p.Description FROM products p JOIN "transactions_1k" t ON p.ProductID = t.ProductID JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE'
SELECT T1.`Time` FROM gasstations AS T1 INNER JOIN "transactions_1k" AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ChainID = 11
SELECT COUNT(TransactionID) AS transaction_number FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Price > 1000
SELECT COUNT(*) FROM transactions_1k t JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE g.Country = 'CZE' AND t.Date > '2012-01-01'
SELECT AVG(Price * Amount) AS AverageTotalPrice FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE'
SELECT AVG(Price) AS AverageTotalPrice FROM transactions_1k JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE customers.Currency = 'Euro'
SELECT customers.CustomerID FROM transactions_1k INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-25' ORDER BY transactions_1k.Price DESC LIMIT 1;
SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY TransactionID LIMIT 1)
SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'
SELECT Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'
SELECT COUNT(TransactionID) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'EUR'
SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT ProductID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT SUM(Price) AS TotalExpense, Date FROM transactions_1k WHERE Date LIKE '2012-01%' AND CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 124.05) GROUP BY Date
SELECT COUNT(*) FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE Time >= '08:00' AND Time < '09:00' AND Date = '2012-08-26' AND Country = 'CZE'
SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T2.Amount = 214582.17 AND T3.Date LIKE '201306%'
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467
SELECT C.Country FROM transactions_1k AS T INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE T.Amount = 548.4 AND T.Date = '2012-08-24'
SELECT COUNT(DISTINCT CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM transactions_1k WHERE Date = '2012-08-25' AND Currency = 'EUR') FROM transactions_1k WHERE Date = '2012-08-25' AND Currency = 'EUR'
SELECT ((T1.Consumption - T2.Consumption) / T1.Consumption) AS Consumption_Decrease_Rate FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '2012%' AND T2.Date LIKE '2013%' AND T1.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Price = 634.8 AND Date = '2012-08-25')
SELECT T2.GasStationID, SUM(T1.Amount * T1.Price) AS Revenue FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID GROUP BY T2.GasStationID ORDER BY Revenue DESC LIMIT 1
SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK') AS PremiumPercentage FROM gasstations WHERE Country = 'SVK' AND Segment = 'premium'
SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 38508; SELECT SUM(Price) FROM transactions_1k WHERE CustomerID = 38508 AND Date LIKE '201201%';
SELECT Description FROM products ORDER BY ProductID DESC LIMIT 5;
SELECT c.CustomerID, c.Currency, AVG(t.Price / t.Amount) AS AveragePricePerItem FROM customers c JOIN transactions_1k t ON c.CustomerID = t.CustomerID GROUP BY c.CustomerID, c.Currency ORDER BY SUM(t.Price) DESC LIMIT 1
SELECT Country FROM gasstations WHERE GasStationID = (SELECT GasStationID FROM transactions_1k WHERE ProductID = 2 ORDER BY Price DESC LIMIT 1)
SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Price / T2.Amount > 29.00 AND T2.ProductID = 5 AND T1.Date LIKE '%201208%'
